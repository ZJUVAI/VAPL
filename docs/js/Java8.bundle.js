(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["Java8"],{

/***/ "./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Engine.js":
/*!***********************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Engine.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Java8Engine = void 0;\r\nconst agh = __webpack_require__(/*! agh.sprintf */ \"./node_modules/agh.sprintf/agh.sprintf.js\");\r\nconst UniBinOp_1 = __webpack_require__(/*! ../../node/UniBinOp */ \"./node_modules/unicoen.ts/dist/node/UniBinOp.js\");\r\nconst UniClassDec_1 = __webpack_require__(/*! ../../node/UniClassDec */ \"./node_modules/unicoen.ts/dist/node/UniClassDec.js\");\r\nconst UniExpr_1 = __webpack_require__(/*! ../../node/UniExpr */ \"./node_modules/unicoen.ts/dist/node/UniExpr.js\");\r\nconst UniIdent_1 = __webpack_require__(/*! ../../node/UniIdent */ \"./node_modules/unicoen.ts/dist/node/UniIdent.js\");\r\nconst UniMethodCall_1 = __webpack_require__(/*! ../../node/UniMethodCall */ \"./node_modules/unicoen.ts/dist/node/UniMethodCall.js\");\r\nconst UniNew_1 = __webpack_require__(/*! ../../node/UniNew */ \"./node_modules/unicoen.ts/dist/node/UniNew.js\");\r\nconst UniNewArray_1 = __webpack_require__(/*! ../../node/UniNewArray */ \"./node_modules/unicoen.ts/dist/node/UniNewArray.js\");\r\nconst UniStringLiteral_1 = __webpack_require__(/*! ../../node/UniStringLiteral */ \"./node_modules/unicoen.ts/dist/node/UniStringLiteral.js\");\r\nconst UniUnaryOp_1 = __webpack_require__(/*! ../../node/UniUnaryOp */ \"./node_modules/unicoen.ts/dist/node/UniUnaryOp.js\");\r\nconst Engine_1 = __webpack_require__(/*! ../Engine/Engine */ \"./node_modules/unicoen.ts/dist/interpreter/Engine/Engine.js\");\r\nclass Java8Engine extends Engine_1.Engine {\r\n    // Byte[]\r\n    static strToBytes(str) {\r\n        const length = str.length;\r\n        const bytes = [];\r\n        for (let i = 0; i < length; ++i) {\r\n            const code = str.charCodeAt(i);\r\n            bytes.push(code);\r\n        }\r\n        bytes.push(0);\r\n        return bytes;\r\n    }\r\n    static getCharArrAsByte(objectOnMemory, beginArg) {\r\n        let begin = beginArg;\r\n        const bytes = [];\r\n        const obj = objectOnMemory.get(begin);\r\n        if (typeof obj === 'string') {\r\n            return Java8Engine.strToBytes(obj);\r\n        }\r\n        for (let v = obj; objectOnMemory.containsKey(begin); ++begin) {\r\n            const o = objectOnMemory.get(begin);\r\n            if (typeof obj === 'number') {\r\n                v = o;\r\n                if (v === 0) {\r\n                    break;\r\n                }\r\n                bytes.push(v);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        bytes.push(0);\r\n        return bytes;\r\n    }\r\n    static charArrToStr(objectOnMemory, beginArg) {\r\n        const bytes = this.getCharArrAsByte(objectOnMemory, beginArg);\r\n        return Engine_1.Engine.bytesToStr(bytes);\r\n    }\r\n    constructor() {\r\n        super();\r\n    }\r\n    *execUnaryOp(uniOp, scope) {\r\n        if (uniOp.operator === '++' || uniOp.operator === '--') {\r\n            uniOp.operator = uniOp.operator + '_';\r\n        }\r\n        switch (uniOp.operator) {\r\n            case '&': {\r\n                const adr = yield* this.getAddress(uniOp.expr, scope);\r\n                return adr;\r\n            }\r\n            case '*': {\r\n                const v = scope.getValue((yield* this.execExpr(uniOp.expr, scope)));\r\n                return v;\r\n            }\r\n            case 'sizeof': {\r\n                const l = [];\r\n                if (uniOp.expr instanceof UniIdent_1.UniIdent) {\r\n                    l.push(new UniStringLiteral_1.UniStringLiteral(uniOp.expr.name));\r\n                }\r\n                else {\r\n                    l.push(uniOp.expr);\r\n                }\r\n                const umc = new UniMethodCall_1.UniMethodCall(null, new UniIdent_1.UniIdent('sizeof'), l);\r\n                const v = yield* this.execExpr(umc, scope);\r\n                return v;\r\n            }\r\n        }\r\n        return yield* super.execUnaryOp(uniOp, scope);\r\n    }\r\n    sizeof(type) {\r\n        return 1;\r\n        /*\t\tif(type.contains(\"char\")){\r\n                return 1;\r\n            }\r\n            else if(type.contains(\"short\")){\r\n                return 2;\r\n            }\r\n            else if(type.contains(\"double\")){\r\n                return 8;\r\n            }\r\n            return 4;*/\r\n    }\r\n    loadLibarary(global) {\r\n        this.importJavaLang(global);\r\n        this.importJavaUtil(global);\r\n        // this.includeMath(global);\r\n    }\r\n    importJavaLang(global) {\r\n        global.setTop('java', {\r\n            lang: {\r\n                Object: new UniClassDec_1.UniClassDec('Object', [], [], [], []),\r\n            },\r\n        }, 'CLASS');\r\n        global.setTop('System', {\r\n            out: {\r\n                printf() {\r\n                    if (arguments.length < 1) {\r\n                        return 0;\r\n                    }\r\n                    const args = [];\r\n                    for (const argument of arguments) {\r\n                        args.push(argument);\r\n                    }\r\n                    let text = Engine_1.Engine.bytesToStr(args[0]);\r\n                    text = text.replace('\\\\n', '\\n');\r\n                    for (let i = 1; i < args.length; ++i) {\r\n                        if (global.typeOnMemory.containsKey(args[i])) {\r\n                            const type = global.typeOnMemory.get(args[i]);\r\n                            if (type.includes('char')) {\r\n                                args[i] = Java8Engine.charArrToStr(global.objectOnMemory, args[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    args[0] = text;\r\n                    const output = agh.sprintf(...args).replace('\\\\n', '\\n');\r\n                    this.stdout(output);\r\n                    const byteCount = (str) => encodeURIComponent(str).replace(/%../g, 'x').length;\r\n                    const count = byteCount(output);\r\n                    return count;\r\n                },\r\n                println(arg) {\r\n                    const text = Array.isArray(arg) ? Engine_1.Engine.bytesToStr(arg) : arg;\r\n                    const output = agh.sprintf(String(text)).replace('\\\\n', '\\n');\r\n                    this.stdout(output + '\\n');\r\n                },\r\n            },\r\n        }, 'CLASS');\r\n    }\r\n    importJavaUtil(global) {\r\n        global.setTop('java', {\r\n            util: {\r\n                Scanner: {\r\n                    *nextInt() {\r\n                        ////////////////////////////////////////////\r\n                        const isStdinEmpty = this.getStdin() === '';\r\n                        if (isStdinEmpty) {\r\n                            this.setIsWaitingForStdin(true); // yield and set stdin\r\n                            yield; // get args from next(args) from execUniMethodCall\r\n                        }\r\n                        ////////////////////////////////////////////\r\n                        let input = this.getStdin();\r\n                        this.clearStdin();\r\n                        if (isStdinEmpty) {\r\n                            this.stdout(input + '\\n');\r\n                        }\r\n                        const start = Math.min(...Array.from(Array(10).keys())\r\n                            .map((n) => input.indexOf(`${n}`))\r\n                            .filter((pos) => pos !== -1));\r\n                        const end = Math.min(...[' ', '\\n', '\\t']\r\n                            .map((s) => input.indexOf(`${s}`, start))\r\n                            .filter((pos) => pos !== -1));\r\n                        if (0 <= end) {\r\n                            this.stdin(input.substr(end));\r\n                            input = input.substring(start, end);\r\n                        }\r\n                        if (isStdinEmpty) {\r\n                            this.setIsWaitingForStdin(false);\r\n                        }\r\n                        return parseInt(input.trim(), 10);\r\n                    },\r\n                },\r\n            },\r\n        }, 'CLASS');\r\n    }\r\n    includeMath(global) {\r\n        global.setTop('acos', (x) => {\r\n            return Math.acos(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('asin', (x) => {\r\n            return Math.asin(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('atan', (x) => {\r\n            return Math.atan(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('cos', (x) => {\r\n            return Math.cos(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('sin', (x) => {\r\n            return Math.sin(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('tan', (x) => {\r\n            return Math.tan(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('cosh', (x) => {\r\n            return Math.cosh(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('sinh', (x) => {\r\n            return Math.sinh(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('tanh', (x) => {\r\n            return Math.tanh(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('exp', (x) => {\r\n            return Math.exp(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('exp2', (x) => {\r\n            return Math.pow(2.0, x);\r\n        }, 'FUNCTION');\r\n        global.setTop('expm1', (x) => {\r\n            return Math.expm1(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('log', (x) => {\r\n            return Math.log(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('log10', (x) => {\r\n            return Math.log10(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('log1p', (x) => {\r\n            return Math.log1p(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('cbrt', (x) => {\r\n            return Math.cbrt(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('fabs', (x) => {\r\n            return Math.abs(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('hypot', (x, y) => {\r\n            return Math.hypot(x, y);\r\n        }, 'FUNCTION');\r\n        global.setTop('pow', (x, y) => {\r\n            return Math.pow(x, y);\r\n        }, 'FUNCTION');\r\n        global.setTop('sqrt', (x) => {\r\n            return Math.sqrt(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('ceil', (x) => {\r\n            return Math.ceil(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('floor', (x) => {\r\n            return Math.floor(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('rint', (x) => {\r\n            throw new Error('Sorry! rint is not supported.');\r\n        }, 'FUNCTION');\r\n        global.setTop('round', (x) => {\r\n            return Math.round(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('fdim', (x, y) => {\r\n            const a = Math.abs(x);\r\n            const b = Math.abs(y);\r\n            return Math.abs(Math.max(a, b) - Math.min(a, b));\r\n        }, 'FUNCTION');\r\n        global.setTop('fmax', (x, y) => {\r\n            return Math.max(x, y);\r\n        }, 'FUNCTION');\r\n        global.setTop('fmin', (x, y) => {\r\n            return Math.min(x, y);\r\n        }, 'FUNCTION');\r\n        global.setTop('fmod', (x, y) => {\r\n            const div = x / y;\r\n            const n = 0 < div ? Math.floor(div) : Math.ceil(div);\r\n            return x - y * n;\r\n        }, 'FUNCTION');\r\n    }\r\n    *_execExpr(expr, scope) {\r\n        if (expr instanceof UniNewArray_1.UniNewArray) {\r\n            const ret = yield* this.execNewArray(expr, scope);\r\n            yield ret;\r\n            return ret;\r\n        }\r\n        else if (expr instanceof UniNew_1.UniNew) {\r\n            const ret = yield* this.execNew(expr, scope);\r\n            yield ret;\r\n            return ret;\r\n        }\r\n        return yield* super._execExpr(expr, scope);\r\n    }\r\n    *execBinOp(arg, scope, left, right) {\r\n        if (arg instanceof UniBinOp_1.UniBinOp && left === undefined && right === undefined) {\r\n            const binOp = arg;\r\n            return yield* this.execBinOp(binOp.operator, scope, binOp.left, binOp.right);\r\n        }\r\n        else if (typeof arg === 'string' && left instanceof UniExpr_1.UniExpr) {\r\n            let op = arg;\r\n            if (op === '++' || op === '--') {\r\n                op = '_' + op;\r\n                return yield* this.execUnaryOp(new UniUnaryOp_1.UniUnaryOp(op, left), scope);\r\n            }\r\n            if (right instanceof UniExpr_1.UniExpr) {\r\n                return yield* super.execBinOp(op, scope, left, right);\r\n            }\r\n        }\r\n    }\r\n    execBinOpImple(op, l, r) {\r\n        let isString = false;\r\n        if (Array.isArray(l) && l[l.length - 1] === 0) {\r\n            l = Engine_1.Engine.bytesToStr(l);\r\n            isString = true;\r\n        }\r\n        if (Array.isArray(r) && r[r.length - 1] === 0) {\r\n            r = Engine_1.Engine.bytesToStr(r);\r\n            isString = true;\r\n        }\r\n        let ret = super.execBinOpImple(op, l, r);\r\n        if (isString) {\r\n            ret = Java8Engine.strToBytes(ret);\r\n        }\r\n        return ret;\r\n    }\r\n    *execVariableDec(decVar, scope) {\r\n        let value = null;\r\n        for (const def of decVar.variables) {\r\n            // 初期化されている場合\r\n            if (def.value != null) {\r\n                // 配列の初期化もここでexecNewExprで行われる。\r\n                value = yield* this.execExpr(def.value, scope);\r\n                value = this._execCast(decVar.type, value);\r\n                if (decVar.type.includes('[')) {\r\n                    const end = decVar.type.indexOf('[');\r\n                    decVar.type = decVar.type.substring(0, end);\r\n                }\r\n            }\r\n            scope.setTop(def.name, value, decVar.type);\r\n        }\r\n        return value;\r\n    }\r\n    execCast(expr, scope) {\r\n        const value = this.execExpr(expr.value, scope);\r\n        return this._execCast(expr.type, value);\r\n    }\r\n    // tslint:disable-next-line:function-name\r\n    _execCast(type, value) {\r\n        // protected Object _execCast(String type, Object value){\r\n        if (value == null || Array.isArray(value)) {\r\n            return value;\r\n        }\r\n        if (type === 'int') {\r\n            return value;\r\n        }\r\n        else if (type === 'double') {\r\n            return value;\r\n        }\r\n        else if (type === 'long') {\r\n            return value;\r\n        }\r\n        else if (type === 'char') {\r\n            return value;\r\n            // if (value instanceof Integer) {\r\n            //   return (byte)((int)value);\r\n            // }\r\n            // else if(value instanceof Character) {\r\n            //   return (byte)((char)value);\r\n            // }\r\n            // else if(value instanceof Long ) {\r\n            //   return (byte)((long)value);\r\n            // }\r\n            // else if(value instanceof Character ) {\r\n            //   return (byte)((char)value);\r\n            // }\r\n        }\r\n        return value;\r\n    }\r\n    execCharLiteral(expr, scope) {\r\n        const value = expr.value;\r\n        const code = value.charCodeAt(0);\r\n        return code;\r\n    }\r\n    execStringLiteral(expr, scope) {\r\n        const value = expr.value;\r\n        const list = [];\r\n        for (let i = 0; i < value.length; ++i) {\r\n            const byte = value.charCodeAt(i);\r\n            list.push(byte);\r\n        }\r\n        list.push(0);\r\n        return list;\r\n    }\r\n    *execNewArray(uniNewArray, scope) {\r\n        const elementsNum = uniNewArray.elementsNum;\r\n        const length = yield* this.execExpr(elementsNum[0], scope);\r\n        const value = uniNewArray.value;\r\n        let array = new Array(length).fill(0);\r\n        if (value.items != null) {\r\n            array = yield* this.execArray(value, scope);\r\n            for (let i = array.length; i < length; ++i) {\r\n                array.push(0);\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n    *execNew(newExpr, scope) {\r\n        let className = newExpr.type;\r\n        let value = '';\r\n        const importsList = scope.getImportList();\r\n        if (!scope.hasValue(className)) {\r\n            for (const im of importsList) {\r\n                const item = im.names.map((name) => new UniIdent_1.UniIdent(name));\r\n                let rec = yield* this.execExpr(item[0], scope);\r\n                for (let i = 1; i < item.length; ++i) {\r\n                    if (item[i] instanceof UniIdent_1.UniIdent) {\r\n                        rec = rec[item[i].name];\r\n                    }\r\n                    else {\r\n                        rec = rec[yield* this.execExpr(item[i], scope)];\r\n                    }\r\n                }\r\n                if (im.isOndemand) {\r\n                    if (rec[className]) {\r\n                        value = rec[className];\r\n                        className = `${im.names.join('.')}.${className}`;\r\n                    }\r\n                }\r\n                else {\r\n                    if (rec) {\r\n                        value = rec;\r\n                        className = im.names.join('.');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const heapAddress = scope.setHeap(value, newExpr.type);\r\n        // const uniClassDec: UniClassDec = scope.get(newExpr.type);\r\n        return heapAddress;\r\n    }\r\n}\r\nexports.Java8Engine = Java8Engine;\r\n//# sourceMappingURL=Java8Engine.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Engine.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Interpreter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Interpreter.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Java8Interpreter = void 0;\r\nconst Interpreter_1 = __webpack_require__(/*! ../Interpreter */ \"./node_modules/unicoen.ts/dist/interpreter/Interpreter.js\");\r\nconst Java8Engine_1 = __webpack_require__(/*! ./Java8Engine */ \"./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Engine.js\");\r\nconst Java8Mapper_1 = __webpack_require__(/*! ./Java8Mapper */ \"./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Mapper.js\");\r\nclass Java8Interpreter extends Interpreter_1.Interpreter {\r\n    constructor() {\r\n        super(new Java8Engine_1.Java8Engine(), new Java8Mapper_1.Java8Mapper());\r\n    }\r\n}\r\nexports.Java8Interpreter = Java8Interpreter;\r\n//# sourceMappingURL=Java8Interpreter.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Interpreter.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Lexer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Lexer.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Java8Lexer = void 0;\r\nconst ATNDeserializer_1 = __webpack_require__(/*! antlr4ts/atn/ATNDeserializer */ \"./node_modules/antlr4ts/atn/ATNDeserializer.js\");\r\nconst Lexer_1 = __webpack_require__(/*! antlr4ts/Lexer */ \"./node_modules/antlr4ts/Lexer.js\");\r\nconst LexerATNSimulator_1 = __webpack_require__(/*! antlr4ts/atn/LexerATNSimulator */ \"./node_modules/antlr4ts/atn/LexerATNSimulator.js\");\r\nconst VocabularyImpl_1 = __webpack_require__(/*! antlr4ts/VocabularyImpl */ \"./node_modules/antlr4ts/VocabularyImpl.js\");\r\nconst Utils = __webpack_require__(/*! antlr4ts/misc/Utils */ \"./node_modules/antlr4ts/misc/Utils.js\");\r\nclass Java8Lexer extends Lexer_1.Lexer {\r\n    // tslint:enable:no-trailing-whitespace\r\n    constructor(input) {\r\n        super(input);\r\n        this._interp = new LexerATNSimulator_1.LexerATNSimulator(Java8Lexer._ATN, this);\r\n    }\r\n    // @Override\r\n    // @NotNull\r\n    get vocabulary() {\r\n        return Java8Lexer.VOCABULARY;\r\n    }\r\n    // @Override\r\n    get grammarFileName() {\r\n        return 'Java8.g4';\r\n    }\r\n    // @Override\r\n    get ruleNames() {\r\n        return Java8Lexer.ruleNames;\r\n    }\r\n    // @Override\r\n    get serializedATN() {\r\n        return Java8Lexer._serializedATN;\r\n    }\r\n    // @Override\r\n    get modeNames() {\r\n        return Java8Lexer.modeNames;\r\n    }\r\n    static get _ATN() {\r\n        if (!Java8Lexer.__ATN) {\r\n            Java8Lexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(Java8Lexer._serializedATN));\r\n        }\r\n        return Java8Lexer.__ATN;\r\n    }\r\n}\r\nexports.Java8Lexer = Java8Lexer;\r\nJava8Lexer.ABSTRACT = 1;\r\nJava8Lexer.ASSERT = 2;\r\nJava8Lexer.BOOLEAN = 3;\r\nJava8Lexer.BREAK = 4;\r\nJava8Lexer.BYTE = 5;\r\nJava8Lexer.CASE = 6;\r\nJava8Lexer.CATCH = 7;\r\nJava8Lexer.CHAR = 8;\r\nJava8Lexer.CLASS = 9;\r\nJava8Lexer.CONST = 10;\r\nJava8Lexer.CONTINUE = 11;\r\nJava8Lexer.DEFAULT = 12;\r\nJava8Lexer.DO = 13;\r\nJava8Lexer.DOUBLE = 14;\r\nJava8Lexer.ELSE = 15;\r\nJava8Lexer.ENUM = 16;\r\nJava8Lexer.EXTENDS = 17;\r\nJava8Lexer.FINAL = 18;\r\nJava8Lexer.FINALLY = 19;\r\nJava8Lexer.FLOAT = 20;\r\nJava8Lexer.FOR = 21;\r\nJava8Lexer.IF = 22;\r\nJava8Lexer.GOTO = 23;\r\nJava8Lexer.IMPLEMENTS = 24;\r\nJava8Lexer.IMPORT = 25;\r\nJava8Lexer.INSTANCEOF = 26;\r\nJava8Lexer.INT = 27;\r\nJava8Lexer.INTERFACE = 28;\r\nJava8Lexer.LONG = 29;\r\nJava8Lexer.NATIVE = 30;\r\nJava8Lexer.NEW = 31;\r\nJava8Lexer.PACKAGE = 32;\r\nJava8Lexer.PRIVATE = 33;\r\nJava8Lexer.PROTECTED = 34;\r\nJava8Lexer.PUBLIC = 35;\r\nJava8Lexer.RETURN = 36;\r\nJava8Lexer.SHORT = 37;\r\nJava8Lexer.STATIC = 38;\r\nJava8Lexer.STRICTFP = 39;\r\nJava8Lexer.SUPER = 40;\r\nJava8Lexer.SWITCH = 41;\r\nJava8Lexer.SYNCHRONIZED = 42;\r\nJava8Lexer.THIS = 43;\r\nJava8Lexer.THROW = 44;\r\nJava8Lexer.THROWS = 45;\r\nJava8Lexer.TRANSIENT = 46;\r\nJava8Lexer.TRY = 47;\r\nJava8Lexer.VOID = 48;\r\nJava8Lexer.VOLATILE = 49;\r\nJava8Lexer.WHILE = 50;\r\nJava8Lexer.IntegerLiteral = 51;\r\nJava8Lexer.FloatingPointLiteral = 52;\r\nJava8Lexer.BooleanLiteral = 53;\r\nJava8Lexer.CharacterLiteral = 54;\r\nJava8Lexer.StringLiteral = 55;\r\nJava8Lexer.NullLiteral = 56;\r\nJava8Lexer.LPAREN = 57;\r\nJava8Lexer.RPAREN = 58;\r\nJava8Lexer.LBRACE = 59;\r\nJava8Lexer.RBRACE = 60;\r\nJava8Lexer.LBRACK = 61;\r\nJava8Lexer.RBRACK = 62;\r\nJava8Lexer.SEMI = 63;\r\nJava8Lexer.COMMA = 64;\r\nJava8Lexer.DOT = 65;\r\nJava8Lexer.ASSIGN = 66;\r\nJava8Lexer.GT = 67;\r\nJava8Lexer.LT = 68;\r\nJava8Lexer.BANG = 69;\r\nJava8Lexer.TILDE = 70;\r\nJava8Lexer.QUESTION = 71;\r\nJava8Lexer.COLON = 72;\r\nJava8Lexer.EQUAL = 73;\r\nJava8Lexer.LE = 74;\r\nJava8Lexer.GE = 75;\r\nJava8Lexer.NOTEQUAL = 76;\r\nJava8Lexer.AND = 77;\r\nJava8Lexer.OR = 78;\r\nJava8Lexer.INC = 79;\r\nJava8Lexer.DEC = 80;\r\nJava8Lexer.ADD = 81;\r\nJava8Lexer.SUB = 82;\r\nJava8Lexer.MUL = 83;\r\nJava8Lexer.DIV = 84;\r\nJava8Lexer.BITAND = 85;\r\nJava8Lexer.BITOR = 86;\r\nJava8Lexer.CARET = 87;\r\nJava8Lexer.MOD = 88;\r\nJava8Lexer.ARROW = 89;\r\nJava8Lexer.COLONCOLON = 90;\r\nJava8Lexer.ADD_ASSIGN = 91;\r\nJava8Lexer.SUB_ASSIGN = 92;\r\nJava8Lexer.MUL_ASSIGN = 93;\r\nJava8Lexer.DIV_ASSIGN = 94;\r\nJava8Lexer.AND_ASSIGN = 95;\r\nJava8Lexer.OR_ASSIGN = 96;\r\nJava8Lexer.XOR_ASSIGN = 97;\r\nJava8Lexer.MOD_ASSIGN = 98;\r\nJava8Lexer.LSHIFT_ASSIGN = 99;\r\nJava8Lexer.RSHIFT_ASSIGN = 100;\r\nJava8Lexer.URSHIFT_ASSIGN = 101;\r\nJava8Lexer.Identifier = 102;\r\nJava8Lexer.AT = 103;\r\nJava8Lexer.ELLIPSIS = 104;\r\nJava8Lexer.WS = 105;\r\nJava8Lexer.COMMENT = 106;\r\nJava8Lexer.LINE_COMMENT = 107;\r\n// tslint:disable:no-trailing-whitespace\r\nJava8Lexer.modeNames = ['DEFAULT_MODE'];\r\nJava8Lexer.ruleNames = [\r\n    'ABSTRACT',\r\n    'ASSERT',\r\n    'BOOLEAN',\r\n    'BREAK',\r\n    'BYTE',\r\n    'CASE',\r\n    'CATCH',\r\n    'CHAR',\r\n    'CLASS',\r\n    'CONST',\r\n    'CONTINUE',\r\n    'DEFAULT',\r\n    'DO',\r\n    'DOUBLE',\r\n    'ELSE',\r\n    'ENUM',\r\n    'EXTENDS',\r\n    'FINAL',\r\n    'FINALLY',\r\n    'FLOAT',\r\n    'FOR',\r\n    'IF',\r\n    'GOTO',\r\n    'IMPLEMENTS',\r\n    'IMPORT',\r\n    'INSTANCEOF',\r\n    'INT',\r\n    'INTERFACE',\r\n    'LONG',\r\n    'NATIVE',\r\n    'NEW',\r\n    'PACKAGE',\r\n    'PRIVATE',\r\n    'PROTECTED',\r\n    'PUBLIC',\r\n    'RETURN',\r\n    'SHORT',\r\n    'STATIC',\r\n    'STRICTFP',\r\n    'SUPER',\r\n    'SWITCH',\r\n    'SYNCHRONIZED',\r\n    'THIS',\r\n    'THROW',\r\n    'THROWS',\r\n    'TRANSIENT',\r\n    'TRY',\r\n    'VOID',\r\n    'VOLATILE',\r\n    'WHILE',\r\n    'IntegerLiteral',\r\n    'DecimalIntegerLiteral',\r\n    'HexIntegerLiteral',\r\n    'OctalIntegerLiteral',\r\n    'BinaryIntegerLiteral',\r\n    'IntegerTypeSuffix',\r\n    'DecimalNumeral',\r\n    'Digits',\r\n    'Digit',\r\n    'NonZeroDigit',\r\n    'DigitsAndUnderscores',\r\n    'DigitOrUnderscore',\r\n    'Underscores',\r\n    'HexNumeral',\r\n    'HexDigits',\r\n    'HexDigit',\r\n    'HexDigitsAndUnderscores',\r\n    'HexDigitOrUnderscore',\r\n    'OctalNumeral',\r\n    'OctalDigits',\r\n    'OctalDigit',\r\n    'OctalDigitsAndUnderscores',\r\n    'OctalDigitOrUnderscore',\r\n    'BinaryNumeral',\r\n    'BinaryDigits',\r\n    'BinaryDigit',\r\n    'BinaryDigitsAndUnderscores',\r\n    'BinaryDigitOrUnderscore',\r\n    'FloatingPointLiteral',\r\n    'DecimalFloatingPointLiteral',\r\n    'ExponentPart',\r\n    'ExponentIndicator',\r\n    'SignedInteger',\r\n    'Sign',\r\n    'FloatTypeSuffix',\r\n    'HexadecimalFloatingPointLiteral',\r\n    'HexSignificand',\r\n    'BinaryExponent',\r\n    'BinaryExponentIndicator',\r\n    'BooleanLiteral',\r\n    'CharacterLiteral',\r\n    'SingleCharacter',\r\n    'StringLiteral',\r\n    'StringCharacters',\r\n    'StringCharacter',\r\n    'EscapeSequence',\r\n    'OctalEscape',\r\n    'ZeroToThree',\r\n    'UnicodeEscape',\r\n    'NullLiteral',\r\n    'LPAREN',\r\n    'RPAREN',\r\n    'LBRACE',\r\n    'RBRACE',\r\n    'LBRACK',\r\n    'RBRACK',\r\n    'SEMI',\r\n    'COMMA',\r\n    'DOT',\r\n    'ASSIGN',\r\n    'GT',\r\n    'LT',\r\n    'BANG',\r\n    'TILDE',\r\n    'QUESTION',\r\n    'COLON',\r\n    'EQUAL',\r\n    'LE',\r\n    'GE',\r\n    'NOTEQUAL',\r\n    'AND',\r\n    'OR',\r\n    'INC',\r\n    'DEC',\r\n    'ADD',\r\n    'SUB',\r\n    'MUL',\r\n    'DIV',\r\n    'BITAND',\r\n    'BITOR',\r\n    'CARET',\r\n    'MOD',\r\n    'ARROW',\r\n    'COLONCOLON',\r\n    'ADD_ASSIGN',\r\n    'SUB_ASSIGN',\r\n    'MUL_ASSIGN',\r\n    'DIV_ASSIGN',\r\n    'AND_ASSIGN',\r\n    'OR_ASSIGN',\r\n    'XOR_ASSIGN',\r\n    'MOD_ASSIGN',\r\n    'LSHIFT_ASSIGN',\r\n    'RSHIFT_ASSIGN',\r\n    'URSHIFT_ASSIGN',\r\n    'Identifier',\r\n    'JavaLetter',\r\n    'JavaLetterOrDigit',\r\n    'AT',\r\n    'ELLIPSIS',\r\n    'WS',\r\n    'COMMENT',\r\n    'LINE_COMMENT',\r\n];\r\nJava8Lexer._LITERAL_NAMES = [\r\n    undefined,\r\n    \"'abstract'\",\r\n    \"'assert'\",\r\n    \"'boolean'\",\r\n    \"'break'\",\r\n    \"'byte'\",\r\n    \"'case'\",\r\n    \"'catch'\",\r\n    \"'char'\",\r\n    \"'class'\",\r\n    \"'const'\",\r\n    \"'continue'\",\r\n    \"'default'\",\r\n    \"'do'\",\r\n    \"'double'\",\r\n    \"'else'\",\r\n    \"'enum'\",\r\n    \"'extends'\",\r\n    \"'final'\",\r\n    \"'finally'\",\r\n    \"'float'\",\r\n    \"'for'\",\r\n    \"'if'\",\r\n    \"'goto'\",\r\n    \"'implements'\",\r\n    \"'import'\",\r\n    \"'instanceof'\",\r\n    \"'int'\",\r\n    \"'interface'\",\r\n    \"'long'\",\r\n    \"'native'\",\r\n    \"'new'\",\r\n    \"'package'\",\r\n    \"'private'\",\r\n    \"'protected'\",\r\n    \"'public'\",\r\n    \"'return'\",\r\n    \"'short'\",\r\n    \"'static'\",\r\n    \"'strictfp'\",\r\n    \"'super'\",\r\n    \"'switch'\",\r\n    \"'synchronized'\",\r\n    \"'this'\",\r\n    \"'throw'\",\r\n    \"'throws'\",\r\n    \"'transient'\",\r\n    \"'try'\",\r\n    \"'void'\",\r\n    \"'volatile'\",\r\n    \"'while'\",\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    \"'null'\",\r\n    \"'('\",\r\n    \"')'\",\r\n    \"'{'\",\r\n    \"'}'\",\r\n    \"'['\",\r\n    \"']'\",\r\n    \"';'\",\r\n    \"','\",\r\n    \"'.'\",\r\n    \"'='\",\r\n    \"'>'\",\r\n    \"'<'\",\r\n    \"'!'\",\r\n    \"'~'\",\r\n    \"'?'\",\r\n    \"':'\",\r\n    \"'=='\",\r\n    \"'<='\",\r\n    \"'>='\",\r\n    \"'!='\",\r\n    \"'&&'\",\r\n    \"'||'\",\r\n    \"'++'\",\r\n    \"'--'\",\r\n    \"'+'\",\r\n    \"'-'\",\r\n    \"'*'\",\r\n    \"'/'\",\r\n    \"'&'\",\r\n    \"'|'\",\r\n    \"'^'\",\r\n    \"'%'\",\r\n    \"'->'\",\r\n    \"'::'\",\r\n    \"'+='\",\r\n    \"'-='\",\r\n    \"'*='\",\r\n    \"'/='\",\r\n    \"'&='\",\r\n    \"'|='\",\r\n    \"'^='\",\r\n    \"'%='\",\r\n    \"'<<='\",\r\n    \"'>>='\",\r\n    \"'>>>='\",\r\n    undefined,\r\n    \"'@'\",\r\n    \"'...'\",\r\n];\r\nJava8Lexer._SYMBOLIC_NAMES = [\r\n    undefined,\r\n    'ABSTRACT',\r\n    'ASSERT',\r\n    'BOOLEAN',\r\n    'BREAK',\r\n    'BYTE',\r\n    'CASE',\r\n    'CATCH',\r\n    'CHAR',\r\n    'CLASS',\r\n    'CONST',\r\n    'CONTINUE',\r\n    'DEFAULT',\r\n    'DO',\r\n    'DOUBLE',\r\n    'ELSE',\r\n    'ENUM',\r\n    'EXTENDS',\r\n    'FINAL',\r\n    'FINALLY',\r\n    'FLOAT',\r\n    'FOR',\r\n    'IF',\r\n    'GOTO',\r\n    'IMPLEMENTS',\r\n    'IMPORT',\r\n    'INSTANCEOF',\r\n    'INT',\r\n    'INTERFACE',\r\n    'LONG',\r\n    'NATIVE',\r\n    'NEW',\r\n    'PACKAGE',\r\n    'PRIVATE',\r\n    'PROTECTED',\r\n    'PUBLIC',\r\n    'RETURN',\r\n    'SHORT',\r\n    'STATIC',\r\n    'STRICTFP',\r\n    'SUPER',\r\n    'SWITCH',\r\n    'SYNCHRONIZED',\r\n    'THIS',\r\n    'THROW',\r\n    'THROWS',\r\n    'TRANSIENT',\r\n    'TRY',\r\n    'VOID',\r\n    'VOLATILE',\r\n    'WHILE',\r\n    'IntegerLiteral',\r\n    'FloatingPointLiteral',\r\n    'BooleanLiteral',\r\n    'CharacterLiteral',\r\n    'StringLiteral',\r\n    'NullLiteral',\r\n    'LPAREN',\r\n    'RPAREN',\r\n    'LBRACE',\r\n    'RBRACE',\r\n    'LBRACK',\r\n    'RBRACK',\r\n    'SEMI',\r\n    'COMMA',\r\n    'DOT',\r\n    'ASSIGN',\r\n    'GT',\r\n    'LT',\r\n    'BANG',\r\n    'TILDE',\r\n    'QUESTION',\r\n    'COLON',\r\n    'EQUAL',\r\n    'LE',\r\n    'GE',\r\n    'NOTEQUAL',\r\n    'AND',\r\n    'OR',\r\n    'INC',\r\n    'DEC',\r\n    'ADD',\r\n    'SUB',\r\n    'MUL',\r\n    'DIV',\r\n    'BITAND',\r\n    'BITOR',\r\n    'CARET',\r\n    'MOD',\r\n    'ARROW',\r\n    'COLONCOLON',\r\n    'ADD_ASSIGN',\r\n    'SUB_ASSIGN',\r\n    'MUL_ASSIGN',\r\n    'DIV_ASSIGN',\r\n    'AND_ASSIGN',\r\n    'OR_ASSIGN',\r\n    'XOR_ASSIGN',\r\n    'MOD_ASSIGN',\r\n    'LSHIFT_ASSIGN',\r\n    'RSHIFT_ASSIGN',\r\n    'URSHIFT_ASSIGN',\r\n    'Identifier',\r\n    'AT',\r\n    'ELLIPSIS',\r\n    'WS',\r\n    'COMMENT',\r\n    'LINE_COMMENT',\r\n];\r\nJava8Lexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(Java8Lexer._LITERAL_NAMES, Java8Lexer._SYMBOLIC_NAMES, []);\r\nJava8Lexer._serializedATNSegments = 2;\r\nJava8Lexer._serializedATNSegment0 = '\\x03\\uAF6F\\u8320\\u479D\\uB75C\\u4880\\u1605\\u191C\\uAB37\\x02m\\u0444\\b\\x01' +\r\n    '\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06' +\r\n    '\\x04\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r' +\r\n    '\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t' +\r\n    '\\x12\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t' +\r\n    '\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x04\\x1C\\t' +\r\n    '\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\"\\t' +\r\n    \"\\\"\\x04#\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04\" +\r\n    '+\\t+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x041\\t1\\x042\\t2\\x043\\t3\\x04' +\r\n    '4\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x048\\t8\\x049\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04' +\r\n    '=\\t=\\x04>\\t>\\x04?\\t?\\x04@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04' +\r\n    'F\\tF\\x04G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04M\\tM\\x04N\\tN\\x04' +\r\n    'O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04T\\tT\\x04U\\tU\\x04V\\tV\\x04W\\tW\\x04' +\r\n    'X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04[\\t[\\x04\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t' +\r\n    '`\\x04a\\ta\\x04b\\tb\\x04c\\tc\\x04d\\td\\x04e\\te\\x04f\\tf\\x04g\\tg\\x04h\\th\\x04' +\r\n    'i\\ti\\x04j\\tj\\x04k\\tk\\x04l\\tl\\x04m\\tm\\x04n\\tn\\x04o\\to\\x04p\\tp\\x04q\\tq\\x04' +\r\n    'r\\tr\\x04s\\ts\\x04t\\tt\\x04u\\tu\\x04v\\tv\\x04w\\tw\\x04x\\tx\\x04y\\ty\\x04z\\tz\\x04' +\r\n    '{\\t{\\x04|\\t|\\x04}\\t}\\x04~\\t~\\x04\\x7F\\t\\x7F\\x04\\x80\\t\\x80\\x04\\x81\\t\\x81' +\r\n    '\\x04\\x82\\t\\x82\\x04\\x83\\t\\x83\\x04\\x84\\t\\x84\\x04\\x85\\t\\x85\\x04\\x86\\t\\x86' +\r\n    '\\x04\\x87\\t\\x87\\x04\\x88\\t\\x88\\x04\\x89\\t\\x89\\x04\\x8A\\t\\x8A\\x04\\x8B\\t\\x8B' +\r\n    '\\x04\\x8C\\t\\x8C\\x04\\x8D\\t\\x8D\\x04\\x8E\\t\\x8E\\x04\\x8F\\t\\x8F\\x04\\x90\\t\\x90' +\r\n    '\\x04\\x91\\t\\x91\\x04\\x92\\t\\x92\\x04\\x93\\t\\x93\\x04\\x94\\t\\x94\\x04\\x95\\t\\x95' +\r\n    '\\x04\\x96\\t\\x96\\x04\\x97\\t\\x97\\x04\\x98\\t\\x98\\x04\\x99\\t\\x99\\x04\\x9A\\t\\x9A' +\r\n    '\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02' +\r\n    '\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04' +\r\n    '\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x05\\x03\\x05\\x03\\x05' +\r\n    '\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07' +\r\n    '\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03' +\r\n    '\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\v\\x03' +\r\n    '\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03' +\r\n    '\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E' +\r\n    '\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x10' +\r\n    '\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11' +\r\n    '\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x13' +\r\n    '\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14' +\r\n    '\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15' +\r\n    '\\x03\\x15\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x18' +\r\n    '\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19' +\r\n    '\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A' +\r\n    '\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B' +\r\n    '\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1C\\x03\\x1C\\x03\\x1C' +\r\n    '\\x03\\x1C\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D' +\r\n    '\\x03\\x1D\\x03\\x1D\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1F\\x03\\x1F' +\r\n    '\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03 \\x03 \\x03 \\x03 \\x03!\\x03' +\r\n    '!\\x03!\\x03!\\x03!\\x03!\\x03!\\x03!\\x03\"\\x03\"\\x03\"\\x03\"\\x03\"\\x03\"\\x03' +\r\n    '\"\\x03\"\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03$\\x03$\\x03' +\r\n    '$\\x03$\\x03$\\x03$\\x03$\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03&\\x03&\\x03' +\r\n    \"&\\x03&\\x03&\\x03&\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03(\\x03(\\x03\" +\r\n    '(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03*\\x03' +\r\n    '*\\x03*\\x03*\\x03*\\x03*\\x03*\\x03+\\x03+\\x03+\\x03+\\x03+\\x03+\\x03+\\x03+\\x03' +\r\n    '+\\x03+\\x03+\\x03+\\x03+\\x03,\\x03,\\x03,\\x03,\\x03,\\x03-\\x03-\\x03-\\x03-\\x03' +\r\n    '-\\x03-\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03/\\x03/\\x03/\\x03/\\x03/\\x03' +\r\n    '/\\x03/\\x03/\\x03/\\x03/\\x030\\x030\\x030\\x030\\x031\\x031\\x031\\x031\\x031\\x03' +\r\n    '2\\x032\\x032\\x032\\x032\\x032\\x032\\x032\\x032\\x033\\x033\\x033\\x033\\x033\\x03' +\r\n    '3\\x034\\x034\\x034\\x034\\x054\\u028D\\n4\\x035\\x035\\x055\\u0291\\n5\\x036\\x036' +\r\n    '\\x056\\u0295\\n6\\x037\\x037\\x057\\u0299\\n7\\x038\\x038\\x058\\u029D\\n8\\x039\\x03' +\r\n    '9\\x03:\\x03:\\x03:\\x05:\\u02A4\\n:\\x03:\\x03:\\x03:\\x05:\\u02A9\\n:\\x05:\\u02AB' +\r\n    '\\n:\\x03;\\x03;\\x05;\\u02AF\\n;\\x03;\\x05;\\u02B2\\n;\\x03<\\x03<\\x05<\\u02B6\\n' +\r\n    '<\\x03=\\x03=\\x03>\\x06>\\u02BB\\n>\\r>\\x0E>\\u02BC\\x03?\\x03?\\x05?\\u02C1\\n?\\x03' +\r\n    '@\\x06@\\u02C4\\n@\\r@\\x0E@\\u02C5\\x03A\\x03A\\x03A\\x03A\\x03B\\x03B\\x05B\\u02CE' +\r\n    '\\nB\\x03B\\x05B\\u02D1\\nB\\x03C\\x03C\\x03D\\x06D\\u02D6\\nD\\rD\\x0ED\\u02D7\\x03' +\r\n    'E\\x03E\\x05E\\u02DC\\nE\\x03F\\x03F\\x05F\\u02E0\\nF\\x03F\\x03F\\x03G\\x03G\\x05G' +\r\n    '\\u02E6\\nG\\x03G\\x05G\\u02E9\\nG\\x03H\\x03H\\x03I\\x06I\\u02EE\\nI\\rI\\x0EI\\u02EF' +\r\n    '\\x03J\\x03J\\x05J\\u02F4\\nJ\\x03K\\x03K\\x03K\\x03K\\x03L\\x03L\\x05L\\u02FC\\nL\\x03' +\r\n    'L\\x05L\\u02FF\\nL\\x03M\\x03M\\x03N\\x06N\\u0304\\nN\\rN\\x0EN\\u0305\\x03O\\x03O\\x05' +\r\n    'O\\u030A\\nO\\x03P\\x03P\\x05P\\u030E\\nP\\x03Q\\x03Q\\x03Q\\x05Q\\u0313\\nQ\\x03Q\\x05' +\r\n    'Q\\u0316\\nQ\\x03Q\\x05Q\\u0319\\nQ\\x03Q\\x03Q\\x03Q\\x05Q\\u031E\\nQ\\x03Q\\x05Q\\u0321' +\r\n    '\\nQ\\x03Q\\x03Q\\x03Q\\x05Q\\u0326\\nQ\\x03Q\\x03Q\\x03Q\\x05Q\\u032B\\nQ\\x03R\\x03' +\r\n    'R\\x03R\\x03S\\x03S\\x03T\\x05T\\u0333\\nT\\x03T\\x03T\\x03U\\x03U\\x03V\\x03V\\x03' +\r\n    'W\\x03W\\x03W\\x05W\\u033E\\nW\\x03X\\x03X\\x05X\\u0342\\nX\\x03X\\x03X\\x03X\\x05X' +\r\n    '\\u0347\\nX\\x03X\\x03X\\x05X\\u034B\\nX\\x03Y\\x03Y\\x03Y\\x03Z\\x03Z\\x03[\\x03[\\x03' +\r\n    '[\\x03[\\x03[\\x03[\\x03[\\x03[\\x03[\\x05[\\u035B\\n[\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\' +\r\n    '\\x03\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x05\\\\\\u0365\\n\\\\\\x03]\\x03]\\x03^\\x03^\\x05^\\u036B' +\r\n    '\\n^\\x03^\\x03^\\x03_\\x06_\\u0370\\n_\\r_\\x0E_\\u0371\\x03`\\x03`\\x05`\\u0376\\n' +\r\n    '`\\x03a\\x03a\\x03a\\x03a\\x05a\\u037C\\na\\x03b\\x03b\\x03b\\x03b\\x03b\\x03b\\x03' +\r\n    'b\\x03b\\x03b\\x03b\\x03b\\x05b\\u0389\\nb\\x03c\\x03c\\x03d\\x03d\\x03d\\x03d\\x03' +\r\n    'd\\x03d\\x03d\\x03e\\x03e\\x03e\\x03e\\x03e\\x03f\\x03f\\x03g\\x03g\\x03h\\x03h\\x03' +\r\n    'i\\x03i\\x03j\\x03j\\x03k\\x03k\\x03l\\x03l\\x03m\\x03m\\x03n\\x03n\\x03o\\x03o\\x03' +\r\n    'p\\x03p\\x03q\\x03q\\x03r\\x03r\\x03s\\x03s\\x03t\\x03t\\x03u\\x03u\\x03v\\x03v\\x03' +\r\n    'v\\x03w\\x03w\\x03w\\x03x\\x03x\\x03x\\x03y\\x03y\\x03y\\x03z\\x03z\\x03z\\x03{\\x03' +\r\n    '{\\x03{\\x03|\\x03|\\x03|\\x03}\\x03}\\x03}\\x03~\\x03~\\x03\\x7F\\x03\\x7F\\x03\\x80' +\r\n    '\\x03\\x80\\x03\\x81\\x03\\x81\\x03\\x82\\x03\\x82\\x03\\x83\\x03\\x83\\x03\\x84\\x03\\x84' +\r\n    '\\x03\\x85\\x03\\x85\\x03\\x86\\x03\\x86\\x03\\x86\\x03\\x87\\x03\\x87\\x03\\x87\\x03\\x88' +\r\n    '\\x03\\x88\\x03\\x88\\x03\\x89\\x03\\x89\\x03\\x89\\x03\\x8A\\x03\\x8A\\x03\\x8A\\x03\\x8B' +\r\n    '\\x03\\x8B\\x03\\x8B\\x03\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8D\\x03\\x8D\\x03\\x8D\\x03\\x8E' +\r\n    '\\x03\\x8E\\x03\\x8E\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x90\\x03\\x90\\x03\\x90\\x03\\x90' +\r\n    '\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x92\\x03\\x92\\x03\\x92\\x03\\x92\\x03\\x92' +\r\n    '\\x03\\x93\\x03\\x93\\x07\\x93\\u040E\\n\\x93\\f\\x93\\x0E\\x93\\u0411\\v\\x93\\x03\\x94' +\r\n    '\\x03\\x94\\x03\\x94\\x03\\x94\\x05\\x94\\u0417\\n\\x94\\x03\\x95\\x03\\x95\\x03\\x95\\x03' +\r\n    '\\x95\\x05\\x95\\u041D\\n\\x95\\x03\\x96\\x03\\x96\\x03\\x97\\x03\\x97\\x03\\x97\\x03\\x97' +\r\n    '\\x03\\x98\\x06\\x98\\u0426\\n\\x98\\r\\x98\\x0E\\x98\\u0427\\x03\\x98\\x03\\x98\\x03\\x99' +\r\n    '\\x03\\x99\\x03\\x99\\x03\\x99\\x07\\x99\\u0430\\n\\x99\\f\\x99\\x0E\\x99\\u0433\\v\\x99' +\r\n    '\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x9A\\x03\\x9A\\x03\\x9A\\x03\\x9A' +\r\n    '\\x07\\x9A\\u043E\\n\\x9A\\f\\x9A\\x0E\\x9A\\u0441\\v\\x9A\\x03\\x9A\\x03\\x9A\\x03\\u0431' +\r\n    '\\x02\\x02\\x9B\\x03\\x02\\x03\\x05\\x02\\x04\\x07\\x02\\x05\\t\\x02\\x06\\v\\x02\\x07\\r' +\r\n    '\\x02\\b\\x0F\\x02\\t\\x11\\x02\\n\\x13\\x02\\v\\x15\\x02\\f\\x17\\x02\\r\\x19\\x02\\x0E\\x1B' +\r\n    \"\\x02\\x0F\\x1D\\x02\\x10\\x1F\\x02\\x11!\\x02\\x12#\\x02\\x13%\\x02\\x14'\\x02\\x15\" +\r\n    ')\\x02\\x16+\\x02\\x17-\\x02\\x18/\\x02\\x191\\x02\\x1A3\\x02\\x1B5\\x02\\x1C7\\x02\\x1D' +\r\n    '9\\x02\\x1E;\\x02\\x1F=\\x02 ?\\x02!A\\x02\"C\\x02#E\\x02$G\\x02%I\\x02&K\\x02\\'M' +\r\n    '\\x02(O\\x02)Q\\x02*S\\x02+U\\x02,W\\x02-Y\\x02.[\\x02/]\\x020_\\x021a\\x022c\\x02' +\r\n    '3e\\x024g\\x025i\\x02\\x02k\\x02\\x02m\\x02\\x02o\\x02\\x02q\\x02\\x02s\\x02\\x02u\\x02' +\r\n    '\\x02w\\x02\\x02y\\x02\\x02{\\x02\\x02}\\x02\\x02\\x7F\\x02\\x02\\x81\\x02\\x02\\x83\\x02' +\r\n    '\\x02\\x85\\x02\\x02\\x87\\x02\\x02\\x89\\x02\\x02\\x8B\\x02\\x02\\x8D\\x02\\x02\\x8F\\x02' +\r\n    '\\x02\\x91\\x02\\x02\\x93\\x02\\x02\\x95\\x02\\x02\\x97\\x02\\x02\\x99\\x02\\x02\\x9B\\x02' +\r\n    '\\x02\\x9D\\x02\\x02\\x9F\\x026\\xA1\\x02\\x02\\xA3\\x02\\x02\\xA5\\x02\\x02\\xA7\\x02' +\r\n    '\\x02\\xA9\\x02\\x02\\xAB\\x02\\x02\\xAD\\x02\\x02\\xAF\\x02\\x02\\xB1\\x02\\x02\\xB3\\x02' +\r\n    '\\x02\\xB5\\x027\\xB7\\x028\\xB9\\x02\\x02\\xBB\\x029\\xBD\\x02\\x02\\xBF\\x02\\x02\\xC1' +\r\n    '\\x02\\x02\\xC3\\x02\\x02\\xC5\\x02\\x02\\xC7\\x02\\x02\\xC9\\x02:\\xCB\\x02;\\xCD\\x02' +\r\n    '<\\xCF\\x02=\\xD1\\x02>\\xD3\\x02?\\xD5\\x02@\\xD7\\x02A\\xD9\\x02B\\xDB\\x02C\\xDD\\x02' +\r\n    'D\\xDF\\x02E\\xE1\\x02F\\xE3\\x02G\\xE5\\x02H\\xE7\\x02I\\xE9\\x02J\\xEB\\x02K\\xED\\x02' +\r\n    'L\\xEF\\x02M\\xF1\\x02N\\xF3\\x02O\\xF5\\x02P\\xF7\\x02Q\\xF9\\x02R\\xFB\\x02S\\xFD\\x02' +\r\n    'T\\xFF\\x02U\\u0101\\x02V\\u0103\\x02W\\u0105\\x02X\\u0107\\x02Y\\u0109\\x02Z\\u010B' +\r\n    '\\x02[\\u010D\\x02\\\\\\u010F\\x02]\\u0111\\x02^\\u0113\\x02_\\u0115\\x02`\\u0117\\x02' +\r\n    'a\\u0119\\x02b\\u011B\\x02c\\u011D\\x02d\\u011F\\x02e\\u0121\\x02f\\u0123\\x02g\\u0125' +\r\n    '\\x02h\\u0127\\x02\\x02\\u0129\\x02\\x02\\u012B\\x02i\\u012D\\x02j\\u012F\\x02k\\u0131' +\r\n    '\\x02l\\u0133\\x02m\\x03\\x02\\x18\\x04\\x02NNnn\\x03\\x023;\\x04\\x02ZZzz\\x05\\x02' +\r\n    '2;CHch\\x03\\x0229\\x04\\x02DDdd\\x03\\x0223\\x04\\x02GGgg\\x04\\x02--//\\x06\\x02' +\r\n    'FFHHffhh\\x04\\x02RRrr\\x04\\x02))^^\\x04\\x02$$^^\\n\\x02$$))^^ddhhppttvv\\x03' +\r\n    '\\x0225\\x06\\x02&&C\\\\aac|\\x04\\x02\\x02\\u0101\\uD802\\uDC01\\x03\\x02\\uD802\\uDC01' +\r\n    '\\x03\\x02\\uDC02\\uE001\\x07\\x02&&2;C\\\\aac|\\x05\\x02\\v\\f\\x0E\\x0F\"\"\\x04\\x02' +\r\n    '\\f\\f\\x0F\\x0F\\u0452\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02\\x02\\r' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\\x02\\x13' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\\x02\\x19' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F' +\r\n    '\\x03\\x02\\x02\\x02\\x02!\\x03\\x02\\x02\\x02\\x02#\\x03\\x02\\x02\\x02\\x02%\\x03\\x02' +\r\n    \"\\x02\\x02\\x02'\\x03\\x02\\x02\\x02\\x02)\\x03\\x02\\x02\\x02\\x02+\\x03\\x02\\x02\\x02\" +\r\n    '\\x02-\\x03\\x02\\x02\\x02\\x02/\\x03\\x02\\x02\\x02\\x021\\x03\\x02\\x02\\x02\\x023\\x03' +\r\n    '\\x02\\x02\\x02\\x025\\x03\\x02\\x02\\x02\\x027\\x03\\x02\\x02\\x02\\x029\\x03\\x02\\x02' +\r\n    '\\x02\\x02;\\x03\\x02\\x02\\x02\\x02=\\x03\\x02\\x02\\x02\\x02?\\x03\\x02\\x02\\x02\\x02' +\r\n    'A\\x03\\x02\\x02\\x02\\x02C\\x03\\x02\\x02\\x02\\x02E\\x03\\x02\\x02\\x02\\x02G\\x03\\x02' +\r\n    '\\x02\\x02\\x02I\\x03\\x02\\x02\\x02\\x02K\\x03\\x02\\x02\\x02\\x02M\\x03\\x02\\x02\\x02' +\r\n    '\\x02O\\x03\\x02\\x02\\x02\\x02Q\\x03\\x02\\x02\\x02\\x02S\\x03\\x02\\x02\\x02\\x02U\\x03' +\r\n    '\\x02\\x02\\x02\\x02W\\x03\\x02\\x02\\x02\\x02Y\\x03\\x02\\x02\\x02\\x02[\\x03\\x02\\x02' +\r\n    '\\x02\\x02]\\x03\\x02\\x02\\x02\\x02_\\x03\\x02\\x02\\x02\\x02a\\x03\\x02\\x02\\x02\\x02' +\r\n    'c\\x03\\x02\\x02\\x02\\x02e\\x03\\x02\\x02\\x02\\x02g\\x03\\x02\\x02\\x02\\x02\\x9F\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xB5\\x03\\x02\\x02\\x02\\x02\\xB7\\x03\\x02\\x02\\x02\\x02\\xBB\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xC9\\x03\\x02\\x02\\x02\\x02\\xCB\\x03\\x02\\x02\\x02\\x02\\xCD\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xCF\\x03\\x02\\x02\\x02\\x02\\xD1\\x03\\x02\\x02\\x02\\x02\\xD3\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xD5\\x03\\x02\\x02\\x02\\x02\\xD7\\x03\\x02\\x02\\x02\\x02\\xD9\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xDB\\x03\\x02\\x02\\x02\\x02\\xDD\\x03\\x02\\x02\\x02\\x02\\xDF\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xE1\\x03\\x02\\x02\\x02\\x02\\xE3\\x03\\x02\\x02\\x02\\x02\\xE5\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xE7\\x03\\x02\\x02\\x02\\x02\\xE9\\x03\\x02\\x02\\x02\\x02\\xEB\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xED\\x03\\x02\\x02\\x02\\x02\\xEF\\x03\\x02\\x02\\x02\\x02\\xF1\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xF3\\x03\\x02\\x02\\x02\\x02\\xF5\\x03\\x02\\x02\\x02\\x02\\xF7\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xF9\\x03\\x02\\x02\\x02\\x02\\xFB\\x03\\x02\\x02\\x02\\x02\\xFD\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\xFF\\x03\\x02\\x02\\x02\\x02\\u0101\\x03\\x02\\x02\\x02\\x02\\u0103' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\u0105\\x03\\x02\\x02\\x02\\x02\\u0107\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\u0109\\x03\\x02\\x02\\x02\\x02\\u010B\\x03\\x02\\x02\\x02\\x02\\u010D\\x03\\x02\\x02' +\r\n    '\\x02\\x02\\u010F\\x03\\x02\\x02\\x02\\x02\\u0111\\x03\\x02\\x02\\x02\\x02\\u0113\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\u0115\\x03\\x02\\x02\\x02\\x02\\u0117\\x03\\x02\\x02\\x02\\x02\\u0119' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\u011B\\x03\\x02\\x02\\x02\\x02\\u011D\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\u011F\\x03\\x02\\x02\\x02\\x02\\u0121\\x03\\x02\\x02\\x02\\x02\\u0123\\x03\\x02\\x02' +\r\n    '\\x02\\x02\\u0125\\x03\\x02\\x02\\x02\\x02\\u012B\\x03\\x02\\x02\\x02\\x02\\u012D\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\u012F\\x03\\x02\\x02\\x02\\x02\\u0131\\x03\\x02\\x02\\x02\\x02\\u0133' +\r\n    '\\x03\\x02\\x02\\x02\\x03\\u0135\\x03\\x02\\x02\\x02\\x05\\u013E\\x03\\x02\\x02\\x02\\x07' +\r\n    '\\u0145\\x03\\x02\\x02\\x02\\t\\u014D\\x03\\x02\\x02\\x02\\v\\u0153\\x03\\x02\\x02\\x02' +\r\n    '\\r\\u0158\\x03\\x02\\x02\\x02\\x0F\\u015D\\x03\\x02\\x02\\x02\\x11\\u0163\\x03\\x02\\x02' +\r\n    '\\x02\\x13\\u0168\\x03\\x02\\x02\\x02\\x15\\u016E\\x03\\x02\\x02\\x02\\x17\\u0174\\x03' +\r\n    '\\x02\\x02\\x02\\x19\\u017D\\x03\\x02\\x02\\x02\\x1B\\u0185\\x03\\x02\\x02\\x02\\x1D\\u0188' +\r\n    '\\x03\\x02\\x02\\x02\\x1F\\u018F\\x03\\x02\\x02\\x02!\\u0194\\x03\\x02\\x02\\x02#\\u0199' +\r\n    \"\\x03\\x02\\x02\\x02%\\u01A1\\x03\\x02\\x02\\x02'\\u01A7\\x03\\x02\\x02\\x02)\\u01AF\" +\r\n    '\\x03\\x02\\x02\\x02+\\u01B5\\x03\\x02\\x02\\x02-\\u01B9\\x03\\x02\\x02\\x02/\\u01BC' +\r\n    '\\x03\\x02\\x02\\x021\\u01C1\\x03\\x02\\x02\\x023\\u01CC\\x03\\x02\\x02\\x025\\u01D3' +\r\n    '\\x03\\x02\\x02\\x027\\u01DE\\x03\\x02\\x02\\x029\\u01E2\\x03\\x02\\x02\\x02;\\u01EC' +\r\n    '\\x03\\x02\\x02\\x02=\\u01F1\\x03\\x02\\x02\\x02?\\u01F8\\x03\\x02\\x02\\x02A\\u01FC' +\r\n    '\\x03\\x02\\x02\\x02C\\u0204\\x03\\x02\\x02\\x02E\\u020C\\x03\\x02\\x02\\x02G\\u0216' +\r\n    '\\x03\\x02\\x02\\x02I\\u021D\\x03\\x02\\x02\\x02K\\u0224\\x03\\x02\\x02\\x02M\\u022A' +\r\n    '\\x03\\x02\\x02\\x02O\\u0231\\x03\\x02\\x02\\x02Q\\u023A\\x03\\x02\\x02\\x02S\\u0240' +\r\n    '\\x03\\x02\\x02\\x02U\\u0247\\x03\\x02\\x02\\x02W\\u0254\\x03\\x02\\x02\\x02Y\\u0259' +\r\n    '\\x03\\x02\\x02\\x02[\\u025F\\x03\\x02\\x02\\x02]\\u0266\\x03\\x02\\x02\\x02_\\u0270' +\r\n    '\\x03\\x02\\x02\\x02a\\u0274\\x03\\x02\\x02\\x02c\\u0279\\x03\\x02\\x02\\x02e\\u0282' +\r\n    '\\x03\\x02\\x02\\x02g\\u028C\\x03\\x02\\x02\\x02i\\u028E\\x03\\x02\\x02\\x02k\\u0292' +\r\n    '\\x03\\x02\\x02\\x02m\\u0296\\x03\\x02\\x02\\x02o\\u029A\\x03\\x02\\x02\\x02q\\u029E' +\r\n    '\\x03\\x02\\x02\\x02s\\u02AA\\x03\\x02\\x02\\x02u\\u02AC\\x03\\x02\\x02\\x02w\\u02B5' +\r\n    '\\x03\\x02\\x02\\x02y\\u02B7\\x03\\x02\\x02\\x02{\\u02BA\\x03\\x02\\x02\\x02}\\u02C0' +\r\n    '\\x03\\x02\\x02\\x02\\x7F\\u02C3\\x03\\x02\\x02\\x02\\x81\\u02C7\\x03\\x02\\x02\\x02\\x83' +\r\n    '\\u02CB\\x03\\x02\\x02\\x02\\x85\\u02D2\\x03\\x02\\x02\\x02\\x87\\u02D5\\x03\\x02\\x02' +\r\n    '\\x02\\x89\\u02DB\\x03\\x02\\x02\\x02\\x8B\\u02DD\\x03\\x02\\x02\\x02\\x8D\\u02E3\\x03' +\r\n    '\\x02\\x02\\x02\\x8F\\u02EA\\x03\\x02\\x02\\x02\\x91\\u02ED\\x03\\x02\\x02\\x02\\x93\\u02F3' +\r\n    '\\x03\\x02\\x02\\x02\\x95\\u02F5\\x03\\x02\\x02\\x02\\x97\\u02F9\\x03\\x02\\x02\\x02\\x99' +\r\n    '\\u0300\\x03\\x02\\x02\\x02\\x9B\\u0303\\x03\\x02\\x02\\x02\\x9D\\u0309\\x03\\x02\\x02' +\r\n    '\\x02\\x9F\\u030D\\x03\\x02\\x02\\x02\\xA1\\u032A\\x03\\x02\\x02\\x02\\xA3\\u032C\\x03' +\r\n    '\\x02\\x02\\x02\\xA5\\u032F\\x03\\x02\\x02\\x02\\xA7\\u0332\\x03\\x02\\x02\\x02\\xA9\\u0336' +\r\n    '\\x03\\x02\\x02\\x02\\xAB\\u0338\\x03\\x02\\x02\\x02\\xAD\\u033A\\x03\\x02\\x02\\x02\\xAF' +\r\n    '\\u034A\\x03\\x02\\x02\\x02\\xB1\\u034C\\x03\\x02\\x02\\x02\\xB3\\u034F\\x03\\x02\\x02' +\r\n    '\\x02\\xB5\\u035A\\x03\\x02\\x02\\x02\\xB7\\u0364\\x03\\x02\\x02\\x02\\xB9\\u0366\\x03' +\r\n    '\\x02\\x02\\x02\\xBB\\u0368\\x03\\x02\\x02\\x02\\xBD\\u036F\\x03\\x02\\x02\\x02\\xBF\\u0375' +\r\n    '\\x03\\x02\\x02\\x02\\xC1\\u037B\\x03\\x02\\x02\\x02\\xC3\\u0388\\x03\\x02\\x02\\x02\\xC5' +\r\n    '\\u038A\\x03\\x02\\x02\\x02\\xC7\\u038C\\x03\\x02\\x02\\x02\\xC9\\u0393\\x03\\x02\\x02' +\r\n    '\\x02\\xCB\\u0398\\x03\\x02\\x02\\x02\\xCD\\u039A\\x03\\x02\\x02\\x02\\xCF\\u039C\\x03' +\r\n    '\\x02\\x02\\x02\\xD1\\u039E\\x03\\x02\\x02\\x02\\xD3\\u03A0\\x03\\x02\\x02\\x02\\xD5\\u03A2' +\r\n    '\\x03\\x02\\x02\\x02\\xD7\\u03A4\\x03\\x02\\x02\\x02\\xD9\\u03A6\\x03\\x02\\x02\\x02\\xDB' +\r\n    '\\u03A8\\x03\\x02\\x02\\x02\\xDD\\u03AA\\x03\\x02\\x02\\x02\\xDF\\u03AC\\x03\\x02\\x02' +\r\n    '\\x02\\xE1\\u03AE\\x03\\x02\\x02\\x02\\xE3\\u03B0\\x03\\x02\\x02\\x02\\xE5\\u03B2\\x03' +\r\n    '\\x02\\x02\\x02\\xE7\\u03B4\\x03\\x02\\x02\\x02\\xE9\\u03B6\\x03\\x02\\x02\\x02\\xEB\\u03B8' +\r\n    '\\x03\\x02\\x02\\x02\\xED\\u03BB\\x03\\x02\\x02\\x02\\xEF\\u03BE\\x03\\x02\\x02\\x02\\xF1' +\r\n    '\\u03C1\\x03\\x02\\x02\\x02\\xF3\\u03C4\\x03\\x02\\x02\\x02\\xF5\\u03C7\\x03\\x02\\x02' +\r\n    '\\x02\\xF7\\u03CA\\x03\\x02\\x02\\x02\\xF9\\u03CD\\x03\\x02\\x02\\x02\\xFB\\u03D0\\x03' +\r\n    '\\x02\\x02\\x02\\xFD\\u03D2\\x03\\x02\\x02\\x02\\xFF\\u03D4\\x03\\x02\\x02\\x02\\u0101' +\r\n    '\\u03D6\\x03\\x02\\x02\\x02\\u0103\\u03D8\\x03\\x02\\x02\\x02\\u0105\\u03DA\\x03\\x02' +\r\n    '\\x02\\x02\\u0107\\u03DC\\x03\\x02\\x02\\x02\\u0109\\u03DE\\x03\\x02\\x02\\x02\\u010B' +\r\n    '\\u03E0\\x03\\x02\\x02\\x02\\u010D\\u03E3\\x03\\x02\\x02\\x02\\u010F\\u03E6\\x03\\x02' +\r\n    '\\x02\\x02\\u0111\\u03E9\\x03\\x02\\x02\\x02\\u0113\\u03EC\\x03\\x02\\x02\\x02\\u0115' +\r\n    '\\u03EF\\x03\\x02\\x02\\x02\\u0117\\u03F2\\x03\\x02\\x02\\x02\\u0119\\u03F5\\x03\\x02' +\r\n    '\\x02\\x02\\u011B\\u03F8\\x03\\x02\\x02\\x02\\u011D\\u03FB\\x03\\x02\\x02\\x02\\u011F' +\r\n    '\\u03FE\\x03\\x02\\x02\\x02\\u0121\\u0402\\x03\\x02\\x02\\x02\\u0123\\u0406\\x03\\x02' +\r\n    '\\x02\\x02\\u0125\\u040B\\x03\\x02\\x02\\x02\\u0127\\u0416\\x03\\x02\\x02\\x02\\u0129' +\r\n    '\\u041C\\x03\\x02\\x02\\x02\\u012B\\u041E\\x03\\x02\\x02\\x02\\u012D\\u0420\\x03\\x02' +\r\n    '\\x02\\x02\\u012F\\u0425\\x03\\x02\\x02\\x02\\u0131\\u042B\\x03\\x02\\x02\\x02\\u0133' +\r\n    '\\u0439\\x03\\x02\\x02\\x02\\u0135\\u0136\\x07c\\x02\\x02\\u0136\\u0137\\x07d\\x02\\x02' +\r\n    '\\u0137\\u0138\\x07u\\x02\\x02\\u0138\\u0139\\x07v\\x02\\x02\\u0139\\u013A\\x07t\\x02' +\r\n    '\\x02\\u013A\\u013B\\x07c\\x02\\x02\\u013B\\u013C\\x07e\\x02\\x02\\u013C\\u013D\\x07' +\r\n    'v\\x02\\x02\\u013D\\x04\\x03\\x02\\x02\\x02\\u013E\\u013F\\x07c\\x02\\x02\\u013F\\u0140' +\r\n    '\\x07u\\x02\\x02\\u0140\\u0141\\x07u\\x02\\x02\\u0141\\u0142\\x07g\\x02\\x02\\u0142' +\r\n    '\\u0143\\x07t\\x02\\x02\\u0143\\u0144\\x07v\\x02\\x02\\u0144\\x06\\x03\\x02\\x02\\x02' +\r\n    '\\u0145\\u0146\\x07d\\x02\\x02\\u0146\\u0147\\x07q\\x02\\x02\\u0147\\u0148\\x07q\\x02' +\r\n    '\\x02\\u0148\\u0149\\x07n\\x02\\x02\\u0149\\u014A\\x07g\\x02\\x02\\u014A\\u014B\\x07' +\r\n    'c\\x02\\x02\\u014B\\u014C\\x07p\\x02\\x02\\u014C\\b\\x03\\x02\\x02\\x02\\u014D\\u014E' +\r\n    '\\x07d\\x02\\x02\\u014E\\u014F\\x07t\\x02\\x02\\u014F\\u0150\\x07g\\x02\\x02\\u0150' +\r\n    '\\u0151\\x07c\\x02\\x02\\u0151\\u0152\\x07m\\x02\\x02\\u0152\\n\\x03\\x02\\x02\\x02\\u0153' +\r\n    '\\u0154\\x07d\\x02\\x02\\u0154\\u0155\\x07{\\x02\\x02\\u0155\\u0156\\x07v\\x02\\x02' +\r\n    '\\u0156\\u0157\\x07g\\x02\\x02\\u0157\\f\\x03\\x02\\x02\\x02\\u0158\\u0159\\x07e\\x02' +\r\n    '\\x02\\u0159\\u015A\\x07c\\x02\\x02\\u015A\\u015B\\x07u\\x02\\x02\\u015B\\u015C\\x07' +\r\n    'g\\x02\\x02\\u015C\\x0E\\x03\\x02\\x02\\x02\\u015D\\u015E\\x07e\\x02\\x02\\u015E\\u015F' +\r\n    '\\x07c\\x02\\x02\\u015F\\u0160\\x07v\\x02\\x02\\u0160\\u0161\\x07e\\x02\\x02\\u0161' +\r\n    '\\u0162\\x07j\\x02\\x02\\u0162\\x10\\x03\\x02\\x02\\x02\\u0163\\u0164\\x07e\\x02\\x02' +\r\n    '\\u0164\\u0165\\x07j\\x02\\x02\\u0165\\u0166\\x07c\\x02\\x02\\u0166\\u0167\\x07t\\x02' +\r\n    '\\x02\\u0167\\x12\\x03\\x02\\x02\\x02\\u0168\\u0169\\x07e\\x02\\x02\\u0169\\u016A\\x07' +\r\n    'n\\x02\\x02\\u016A\\u016B\\x07c\\x02\\x02\\u016B\\u016C\\x07u\\x02\\x02\\u016C\\u016D' +\r\n    '\\x07u\\x02\\x02\\u016D\\x14\\x03\\x02\\x02\\x02\\u016E\\u016F\\x07e\\x02\\x02\\u016F' +\r\n    '\\u0170\\x07q\\x02\\x02\\u0170\\u0171\\x07p\\x02\\x02\\u0171\\u0172\\x07u\\x02\\x02' +\r\n    '\\u0172\\u0173\\x07v\\x02\\x02\\u0173\\x16\\x03\\x02\\x02\\x02\\u0174\\u0175\\x07e\\x02' +\r\n    '\\x02\\u0175\\u0176\\x07q\\x02\\x02\\u0176\\u0177\\x07p\\x02\\x02\\u0177\\u0178\\x07' +\r\n    'v\\x02\\x02\\u0178\\u0179\\x07k\\x02\\x02\\u0179\\u017A\\x07p\\x02\\x02\\u017A\\u017B' +\r\n    '\\x07w\\x02\\x02\\u017B\\u017C\\x07g\\x02\\x02\\u017C\\x18\\x03\\x02\\x02\\x02\\u017D' +\r\n    '\\u017E\\x07f\\x02\\x02\\u017E\\u017F\\x07g\\x02\\x02\\u017F\\u0180\\x07h\\x02\\x02' +\r\n    '\\u0180\\u0181\\x07c\\x02\\x02\\u0181\\u0182\\x07w\\x02\\x02\\u0182\\u0183\\x07n\\x02' +\r\n    '\\x02\\u0183\\u0184\\x07v\\x02\\x02\\u0184\\x1A\\x03\\x02\\x02\\x02\\u0185\\u0186\\x07' +\r\n    'f\\x02\\x02\\u0186\\u0187\\x07q\\x02\\x02\\u0187\\x1C\\x03\\x02\\x02\\x02\\u0188\\u0189' +\r\n    '\\x07f\\x02\\x02\\u0189\\u018A\\x07q\\x02\\x02\\u018A\\u018B\\x07w\\x02\\x02\\u018B' +\r\n    '\\u018C\\x07d\\x02\\x02\\u018C\\u018D\\x07n\\x02\\x02\\u018D\\u018E\\x07g\\x02\\x02' +\r\n    '\\u018E\\x1E\\x03\\x02\\x02\\x02\\u018F\\u0190\\x07g\\x02\\x02\\u0190\\u0191\\x07n\\x02' +\r\n    '\\x02\\u0191\\u0192\\x07u\\x02\\x02\\u0192\\u0193\\x07g\\x02\\x02\\u0193 \\x03';\r\nJava8Lexer._serializedATNSegment1 = '\\x02\\x02\\x02\\u0194\\u0195\\x07g\\x02\\x02\\u0195\\u0196\\x07p\\x02\\x02\\u0196\\u0197' +\r\n    '\\x07w\\x02\\x02\\u0197\\u0198\\x07o\\x02\\x02\\u0198\"\\x03\\x02\\x02\\x02\\u0199\\u019A' +\r\n    '\\x07g\\x02\\x02\\u019A\\u019B\\x07z\\x02\\x02\\u019B\\u019C\\x07v\\x02\\x02\\u019C' +\r\n    '\\u019D\\x07g\\x02\\x02\\u019D\\u019E\\x07p\\x02\\x02\\u019E\\u019F\\x07f\\x02\\x02' +\r\n    '\\u019F\\u01A0\\x07u\\x02\\x02\\u01A0$\\x03\\x02\\x02\\x02\\u01A1\\u01A2\\x07h\\x02' +\r\n    '\\x02\\u01A2\\u01A3\\x07k\\x02\\x02\\u01A3\\u01A4\\x07p\\x02\\x02\\u01A4\\u01A5\\x07' +\r\n    'c\\x02\\x02\\u01A5\\u01A6\\x07n\\x02\\x02\\u01A6&\\x03\\x02\\x02\\x02\\u01A7\\u01A8' +\r\n    '\\x07h\\x02\\x02\\u01A8\\u01A9\\x07k\\x02\\x02\\u01A9\\u01AA\\x07p\\x02\\x02\\u01AA' +\r\n    '\\u01AB\\x07c\\x02\\x02\\u01AB\\u01AC\\x07n\\x02\\x02\\u01AC\\u01AD\\x07n\\x02\\x02' +\r\n    '\\u01AD\\u01AE\\x07{\\x02\\x02\\u01AE(\\x03\\x02\\x02\\x02\\u01AF\\u01B0\\x07h\\x02' +\r\n    '\\x02\\u01B0\\u01B1\\x07n\\x02\\x02\\u01B1\\u01B2\\x07q\\x02\\x02\\u01B2\\u01B3\\x07' +\r\n    'c\\x02\\x02\\u01B3\\u01B4\\x07v\\x02\\x02\\u01B4*\\x03\\x02\\x02\\x02\\u01B5\\u01B6' +\r\n    '\\x07h\\x02\\x02\\u01B6\\u01B7\\x07q\\x02\\x02\\u01B7\\u01B8\\x07t\\x02\\x02\\u01B8' +\r\n    ',\\x03\\x02\\x02\\x02\\u01B9\\u01BA\\x07k\\x02\\x02\\u01BA\\u01BB\\x07h\\x02\\x02\\u01BB' +\r\n    '.\\x03\\x02\\x02\\x02\\u01BC\\u01BD\\x07i\\x02\\x02\\u01BD\\u01BE\\x07q\\x02\\x02\\u01BE' +\r\n    '\\u01BF\\x07v\\x02\\x02\\u01BF\\u01C0\\x07q\\x02\\x02\\u01C00\\x03\\x02\\x02\\x02\\u01C1' +\r\n    '\\u01C2\\x07k\\x02\\x02\\u01C2\\u01C3\\x07o\\x02\\x02\\u01C3\\u01C4\\x07r\\x02\\x02' +\r\n    '\\u01C4\\u01C5\\x07n\\x02\\x02\\u01C5\\u01C6\\x07g\\x02\\x02\\u01C6\\u01C7\\x07o\\x02' +\r\n    '\\x02\\u01C7\\u01C8\\x07g\\x02\\x02\\u01C8\\u01C9\\x07p\\x02\\x02\\u01C9\\u01CA\\x07' +\r\n    'v\\x02\\x02\\u01CA\\u01CB\\x07u\\x02\\x02\\u01CB2\\x03\\x02\\x02\\x02\\u01CC\\u01CD' +\r\n    '\\x07k\\x02\\x02\\u01CD\\u01CE\\x07o\\x02\\x02\\u01CE\\u01CF\\x07r\\x02\\x02\\u01CF' +\r\n    '\\u01D0\\x07q\\x02\\x02\\u01D0\\u01D1\\x07t\\x02\\x02\\u01D1\\u01D2\\x07v\\x02\\x02' +\r\n    '\\u01D24\\x03\\x02\\x02\\x02\\u01D3\\u01D4\\x07k\\x02\\x02\\u01D4\\u01D5\\x07p\\x02' +\r\n    '\\x02\\u01D5\\u01D6\\x07u\\x02\\x02\\u01D6\\u01D7\\x07v\\x02\\x02\\u01D7\\u01D8\\x07' +\r\n    'c\\x02\\x02\\u01D8\\u01D9\\x07p\\x02\\x02\\u01D9\\u01DA\\x07e\\x02\\x02\\u01DA\\u01DB' +\r\n    '\\x07g\\x02\\x02\\u01DB\\u01DC\\x07q\\x02\\x02\\u01DC\\u01DD\\x07h\\x02\\x02\\u01DD' +\r\n    '6\\x03\\x02\\x02\\x02\\u01DE\\u01DF\\x07k\\x02\\x02\\u01DF\\u01E0\\x07p\\x02\\x02\\u01E0' +\r\n    '\\u01E1\\x07v\\x02\\x02\\u01E18\\x03\\x02\\x02\\x02\\u01E2\\u01E3\\x07k\\x02\\x02\\u01E3' +\r\n    '\\u01E4\\x07p\\x02\\x02\\u01E4\\u01E5\\x07v\\x02\\x02\\u01E5\\u01E6\\x07g\\x02\\x02' +\r\n    '\\u01E6\\u01E7\\x07t\\x02\\x02\\u01E7\\u01E8\\x07h\\x02\\x02\\u01E8\\u01E9\\x07c\\x02' +\r\n    '\\x02\\u01E9\\u01EA\\x07e\\x02\\x02\\u01EA\\u01EB\\x07g\\x02\\x02\\u01EB:\\x03\\x02' +\r\n    '\\x02\\x02\\u01EC\\u01ED\\x07n\\x02\\x02\\u01ED\\u01EE\\x07q\\x02\\x02\\u01EE\\u01EF' +\r\n    '\\x07p\\x02\\x02\\u01EF\\u01F0\\x07i\\x02\\x02\\u01F0<\\x03\\x02\\x02\\x02\\u01F1\\u01F2' +\r\n    '\\x07p\\x02\\x02\\u01F2\\u01F3\\x07c\\x02\\x02\\u01F3\\u01F4\\x07v\\x02\\x02\\u01F4' +\r\n    '\\u01F5\\x07k\\x02\\x02\\u01F5\\u01F6\\x07x\\x02\\x02\\u01F6\\u01F7\\x07g\\x02\\x02' +\r\n    '\\u01F7>\\x03\\x02\\x02\\x02\\u01F8\\u01F9\\x07p\\x02\\x02\\u01F9\\u01FA\\x07g\\x02' +\r\n    '\\x02\\u01FA\\u01FB\\x07y\\x02\\x02\\u01FB@\\x03\\x02\\x02\\x02\\u01FC\\u01FD\\x07r' +\r\n    '\\x02\\x02\\u01FD\\u01FE\\x07c\\x02\\x02\\u01FE\\u01FF\\x07e\\x02\\x02\\u01FF\\u0200' +\r\n    '\\x07m\\x02\\x02\\u0200\\u0201\\x07c\\x02\\x02\\u0201\\u0202\\x07i\\x02\\x02\\u0202' +\r\n    '\\u0203\\x07g\\x02\\x02\\u0203B\\x03\\x02\\x02\\x02\\u0204\\u0205\\x07r\\x02\\x02\\u0205' +\r\n    '\\u0206\\x07t\\x02\\x02\\u0206\\u0207\\x07k\\x02\\x02\\u0207\\u0208\\x07x\\x02\\x02' +\r\n    '\\u0208\\u0209\\x07c\\x02\\x02\\u0209\\u020A\\x07v\\x02\\x02\\u020A\\u020B\\x07g\\x02' +\r\n    '\\x02\\u020BD\\x03\\x02\\x02\\x02\\u020C\\u020D\\x07r\\x02\\x02\\u020D\\u020E\\x07t' +\r\n    '\\x02\\x02\\u020E\\u020F\\x07q\\x02\\x02\\u020F\\u0210\\x07v\\x02\\x02\\u0210\\u0211' +\r\n    '\\x07g\\x02\\x02\\u0211\\u0212\\x07e\\x02\\x02\\u0212\\u0213\\x07v\\x02\\x02\\u0213' +\r\n    '\\u0214\\x07g\\x02\\x02\\u0214\\u0215\\x07f\\x02\\x02\\u0215F\\x03\\x02\\x02\\x02\\u0216' +\r\n    '\\u0217\\x07r\\x02\\x02\\u0217\\u0218\\x07w\\x02\\x02\\u0218\\u0219\\x07d\\x02\\x02' +\r\n    '\\u0219\\u021A\\x07n\\x02\\x02\\u021A\\u021B\\x07k\\x02\\x02\\u021B\\u021C\\x07e\\x02' +\r\n    '\\x02\\u021CH\\x03\\x02\\x02\\x02\\u021D\\u021E\\x07t\\x02\\x02\\u021E\\u021F\\x07g' +\r\n    '\\x02\\x02\\u021F\\u0220\\x07v\\x02\\x02\\u0220\\u0221\\x07w\\x02\\x02\\u0221\\u0222' +\r\n    '\\x07t\\x02\\x02\\u0222\\u0223\\x07p\\x02\\x02\\u0223J\\x03\\x02\\x02\\x02\\u0224\\u0225' +\r\n    '\\x07u\\x02\\x02\\u0225\\u0226\\x07j\\x02\\x02\\u0226\\u0227\\x07q\\x02\\x02\\u0227' +\r\n    '\\u0228\\x07t\\x02\\x02\\u0228\\u0229\\x07v\\x02\\x02\\u0229L\\x03\\x02\\x02\\x02\\u022A' +\r\n    '\\u022B\\x07u\\x02\\x02\\u022B\\u022C\\x07v\\x02\\x02\\u022C\\u022D\\x07c\\x02\\x02' +\r\n    '\\u022D\\u022E\\x07v\\x02\\x02\\u022E\\u022F\\x07k\\x02\\x02\\u022F\\u0230\\x07e\\x02' +\r\n    '\\x02\\u0230N\\x03\\x02\\x02\\x02\\u0231\\u0232\\x07u\\x02\\x02\\u0232\\u0233\\x07v' +\r\n    '\\x02\\x02\\u0233\\u0234\\x07t\\x02\\x02\\u0234\\u0235\\x07k\\x02\\x02\\u0235\\u0236' +\r\n    '\\x07e\\x02\\x02\\u0236\\u0237\\x07v\\x02\\x02\\u0237\\u0238\\x07h\\x02\\x02\\u0238' +\r\n    '\\u0239\\x07r\\x02\\x02\\u0239P\\x03\\x02\\x02\\x02\\u023A\\u023B\\x07u\\x02\\x02\\u023B' +\r\n    '\\u023C\\x07w\\x02\\x02\\u023C\\u023D\\x07r\\x02\\x02\\u023D\\u023E\\x07g\\x02\\x02' +\r\n    '\\u023E\\u023F\\x07t\\x02\\x02\\u023FR\\x03\\x02\\x02\\x02\\u0240\\u0241\\x07u\\x02' +\r\n    '\\x02\\u0241\\u0242\\x07y\\x02\\x02\\u0242\\u0243\\x07k\\x02\\x02\\u0243\\u0244\\x07' +\r\n    'v\\x02\\x02\\u0244\\u0245\\x07e\\x02\\x02\\u0245\\u0246\\x07j\\x02\\x02\\u0246T\\x03' +\r\n    '\\x02\\x02\\x02\\u0247\\u0248\\x07u\\x02\\x02\\u0248\\u0249\\x07{\\x02\\x02\\u0249\\u024A' +\r\n    '\\x07p\\x02\\x02\\u024A\\u024B\\x07e\\x02\\x02\\u024B\\u024C\\x07j\\x02\\x02\\u024C' +\r\n    '\\u024D\\x07t\\x02\\x02\\u024D\\u024E\\x07q\\x02\\x02\\u024E\\u024F\\x07p\\x02\\x02' +\r\n    '\\u024F\\u0250\\x07k\\x02\\x02\\u0250\\u0251\\x07|\\x02\\x02\\u0251\\u0252\\x07g\\x02' +\r\n    '\\x02\\u0252\\u0253\\x07f\\x02\\x02\\u0253V\\x03\\x02\\x02\\x02\\u0254\\u0255\\x07v' +\r\n    '\\x02\\x02\\u0255\\u0256\\x07j\\x02\\x02\\u0256\\u0257\\x07k\\x02\\x02\\u0257\\u0258' +\r\n    '\\x07u\\x02\\x02\\u0258X\\x03\\x02\\x02\\x02\\u0259\\u025A\\x07v\\x02\\x02\\u025A\\u025B' +\r\n    '\\x07j\\x02\\x02\\u025B\\u025C\\x07t\\x02\\x02\\u025C\\u025D\\x07q\\x02\\x02\\u025D' +\r\n    '\\u025E\\x07y\\x02\\x02\\u025EZ\\x03\\x02\\x02\\x02\\u025F\\u0260\\x07v\\x02\\x02\\u0260' +\r\n    '\\u0261\\x07j\\x02\\x02\\u0261\\u0262\\x07t\\x02\\x02\\u0262\\u0263\\x07q\\x02\\x02' +\r\n    '\\u0263\\u0264\\x07y\\x02\\x02\\u0264\\u0265\\x07u\\x02\\x02\\u0265\\\\\\x03\\x02\\x02' +\r\n    '\\x02\\u0266\\u0267\\x07v\\x02\\x02\\u0267\\u0268\\x07t\\x02\\x02\\u0268\\u0269\\x07' +\r\n    'c\\x02\\x02\\u0269\\u026A\\x07p\\x02\\x02\\u026A\\u026B\\x07u\\x02\\x02\\u026B\\u026C' +\r\n    '\\x07k\\x02\\x02\\u026C\\u026D\\x07g\\x02\\x02\\u026D\\u026E\\x07p\\x02\\x02\\u026E' +\r\n    '\\u026F\\x07v\\x02\\x02\\u026F^\\x03\\x02\\x02\\x02\\u0270\\u0271\\x07v\\x02\\x02\\u0271' +\r\n    '\\u0272\\x07t\\x02\\x02\\u0272\\u0273\\x07{\\x02\\x02\\u0273`\\x03\\x02\\x02\\x02\\u0274' +\r\n    '\\u0275\\x07x\\x02\\x02\\u0275\\u0276\\x07q\\x02\\x02\\u0276\\u0277\\x07k\\x02\\x02' +\r\n    '\\u0277\\u0278\\x07f\\x02\\x02\\u0278b\\x03\\x02\\x02\\x02\\u0279\\u027A\\x07x\\x02' +\r\n    '\\x02\\u027A\\u027B\\x07q\\x02\\x02\\u027B\\u027C\\x07n\\x02\\x02\\u027C\\u027D\\x07' +\r\n    'c\\x02\\x02\\u027D\\u027E\\x07v\\x02\\x02\\u027E\\u027F\\x07k\\x02\\x02\\u027F\\u0280' +\r\n    '\\x07n\\x02\\x02\\u0280\\u0281\\x07g\\x02\\x02\\u0281d\\x03\\x02\\x02\\x02\\u0282\\u0283' +\r\n    '\\x07y\\x02\\x02\\u0283\\u0284\\x07j\\x02\\x02\\u0284\\u0285\\x07k\\x02\\x02\\u0285' +\r\n    '\\u0286\\x07n\\x02\\x02\\u0286\\u0287\\x07g\\x02\\x02\\u0287f\\x03\\x02\\x02\\x02\\u0288' +\r\n    '\\u028D\\x05i5\\x02\\u0289\\u028D\\x05k6\\x02\\u028A\\u028D\\x05m7\\x02\\u028B\\u028D' +\r\n    '\\x05o8\\x02\\u028C\\u0288\\x03\\x02\\x02\\x02\\u028C\\u0289\\x03\\x02\\x02\\x02\\u028C' +\r\n    '\\u028A\\x03\\x02\\x02\\x02\\u028C\\u028B\\x03\\x02\\x02\\x02\\u028Dh\\x03\\x02\\x02' +\r\n    '\\x02\\u028E\\u0290\\x05s:\\x02\\u028F\\u0291\\x05q9\\x02\\u0290\\u028F\\x03\\x02\\x02' +\r\n    '\\x02\\u0290\\u0291\\x03\\x02\\x02\\x02\\u0291j\\x03\\x02\\x02\\x02\\u0292\\u0294\\x05' +\r\n    '\\x81A\\x02\\u0293\\u0295\\x05q9\\x02\\u0294\\u0293\\x03\\x02\\x02\\x02\\u0294\\u0295' +\r\n    '\\x03\\x02\\x02\\x02\\u0295l\\x03\\x02\\x02\\x02\\u0296\\u0298\\x05\\x8BF\\x02\\u0297' +\r\n    '\\u0299\\x05q9\\x02\\u0298\\u0297\\x03\\x02\\x02\\x02\\u0298\\u0299\\x03\\x02\\x02\\x02' +\r\n    '\\u0299n\\x03\\x02\\x02\\x02\\u029A\\u029C\\x05\\x95K\\x02\\u029B\\u029D\\x05q9\\x02' +\r\n    '\\u029C\\u029B\\x03\\x02\\x02\\x02\\u029C\\u029D\\x03\\x02\\x02\\x02\\u029Dp\\x03\\x02' +\r\n    '\\x02\\x02\\u029E\\u029F\\t\\x02\\x02\\x02\\u029Fr\\x03\\x02\\x02\\x02\\u02A0\\u02AB' +\r\n    '\\x072\\x02\\x02\\u02A1\\u02A8\\x05y=\\x02\\u02A2\\u02A4\\x05u;\\x02\\u02A3\\u02A2' +\r\n    '\\x03\\x02\\x02\\x02\\u02A3\\u02A4\\x03\\x02\\x02\\x02\\u02A4\\u02A9\\x03\\x02\\x02\\x02' +\r\n    '\\u02A5\\u02A6\\x05\\x7F@\\x02\\u02A6\\u02A7\\x05u;\\x02\\u02A7\\u02A9\\x03\\x02\\x02' +\r\n    '\\x02\\u02A8\\u02A3\\x03\\x02\\x02\\x02\\u02A8\\u02A5\\x03\\x02\\x02\\x02\\u02A9\\u02AB' +\r\n    '\\x03\\x02\\x02\\x02\\u02AA\\u02A0\\x03\\x02\\x02\\x02\\u02AA\\u02A1\\x03\\x02\\x02\\x02' +\r\n    '\\u02ABt\\x03\\x02\\x02\\x02\\u02AC\\u02B1\\x05w<\\x02\\u02AD\\u02AF\\x05{>\\x02\\u02AE' +\r\n    '\\u02AD\\x03\\x02\\x02\\x02\\u02AE\\u02AF\\x03\\x02\\x02\\x02\\u02AF\\u02B0\\x03\\x02' +\r\n    '\\x02\\x02\\u02B0\\u02B2\\x05w<\\x02\\u02B1\\u02AE\\x03\\x02\\x02\\x02\\u02B1\\u02B2' +\r\n    '\\x03\\x02\\x02\\x02\\u02B2v\\x03\\x02\\x02\\x02\\u02B3\\u02B6\\x072\\x02\\x02\\u02B4' +\r\n    '\\u02B6\\x05y=\\x02\\u02B5\\u02B3\\x03\\x02\\x02\\x02\\u02B5\\u02B4\\x03\\x02\\x02\\x02' +\r\n    '\\u02B6x\\x03\\x02\\x02\\x02\\u02B7\\u02B8\\t\\x03\\x02\\x02\\u02B8z\\x03\\x02\\x02\\x02' +\r\n    '\\u02B9\\u02BB\\x05}?\\x02\\u02BA\\u02B9\\x03\\x02\\x02\\x02\\u02BB\\u02BC\\x03\\x02' +\r\n    '\\x02\\x02\\u02BC\\u02BA\\x03\\x02\\x02\\x02\\u02BC\\u02BD\\x03\\x02\\x02\\x02\\u02BD' +\r\n    '|\\x03\\x02\\x02\\x02\\u02BE\\u02C1\\x05w<\\x02\\u02BF\\u02C1\\x07a\\x02\\x02\\u02C0' +\r\n    '\\u02BE\\x03\\x02\\x02\\x02\\u02C0\\u02BF\\x03\\x02\\x02\\x02\\u02C1~\\x03\\x02\\x02' +\r\n    '\\x02\\u02C2\\u02C4\\x07a\\x02\\x02\\u02C3\\u02C2\\x03\\x02\\x02\\x02\\u02C4\\u02C5' +\r\n    '\\x03\\x02\\x02\\x02\\u02C5\\u02C3\\x03\\x02\\x02\\x02\\u02C5\\u02C6\\x03\\x02\\x02\\x02' +\r\n    '\\u02C6\\x80\\x03\\x02\\x02\\x02\\u02C7\\u02C8\\x072\\x02\\x02\\u02C8\\u02C9\\t\\x04' +\r\n    '\\x02\\x02\\u02C9\\u02CA\\x05\\x83B\\x02\\u02CA\\x82\\x03\\x02\\x02\\x02\\u02CB\\u02D0' +\r\n    '\\x05\\x85C\\x02\\u02CC\\u02CE\\x05\\x87D\\x02\\u02CD\\u02CC\\x03\\x02\\x02\\x02\\u02CD' +\r\n    '\\u02CE\\x03\\x02\\x02\\x02\\u02CE\\u02CF\\x03\\x02\\x02\\x02\\u02CF\\u02D1\\x05\\x85' +\r\n    'C\\x02\\u02D0\\u02CD\\x03\\x02\\x02\\x02\\u02D0\\u02D1\\x03\\x02\\x02\\x02\\u02D1\\x84' +\r\n    '\\x03\\x02\\x02\\x02\\u02D2\\u02D3\\t\\x05\\x02\\x02\\u02D3\\x86\\x03\\x02\\x02\\x02\\u02D4' +\r\n    '\\u02D6\\x05\\x89E\\x02\\u02D5\\u02D4\\x03\\x02\\x02\\x02\\u02D6\\u02D7\\x03\\x02\\x02' +\r\n    '\\x02\\u02D7\\u02D5\\x03\\x02\\x02\\x02\\u02D7\\u02D8\\x03\\x02\\x02\\x02\\u02D8\\x88' +\r\n    '\\x03\\x02\\x02\\x02\\u02D9\\u02DC\\x05\\x85C\\x02\\u02DA\\u02DC\\x07a\\x02\\x02\\u02DB' +\r\n    '\\u02D9\\x03\\x02\\x02\\x02\\u02DB\\u02DA\\x03\\x02\\x02\\x02\\u02DC\\x8A\\x03\\x02\\x02' +\r\n    '\\x02\\u02DD\\u02DF\\x072\\x02\\x02\\u02DE\\u02E0\\x05\\x7F@\\x02\\u02DF\\u02DE\\x03' +\r\n    '\\x02\\x02\\x02\\u02DF\\u02E0\\x03\\x02\\x02\\x02\\u02E0\\u02E1\\x03\\x02\\x02\\x02\\u02E1' +\r\n    '\\u02E2\\x05\\x8DG\\x02\\u02E2\\x8C\\x03\\x02\\x02\\x02\\u02E3\\u02E8\\x05\\x8FH\\x02' +\r\n    '\\u02E4\\u02E6\\x05\\x91I\\x02\\u02E5\\u02E4\\x03\\x02\\x02\\x02\\u02E5\\u02E6\\x03' +\r\n    '\\x02\\x02\\x02\\u02E6\\u02E7\\x03\\x02\\x02\\x02\\u02E7\\u02E9\\x05\\x8FH\\x02\\u02E8' +\r\n    '\\u02E5\\x03\\x02\\x02\\x02\\u02E8\\u02E9\\x03\\x02\\x02\\x02\\u02E9\\x8E\\x03\\x02\\x02' +\r\n    '\\x02\\u02EA\\u02EB\\t\\x06\\x02\\x02\\u02EB\\x90\\x03\\x02\\x02\\x02\\u02EC\\u02EE\\x05' +\r\n    '\\x93J\\x02\\u02ED\\u02EC\\x03\\x02\\x02\\x02\\u02EE\\u02EF\\x03\\x02\\x02\\x02\\u02EF' +\r\n    '\\u02ED\\x03\\x02\\x02\\x02\\u02EF\\u02F0\\x03\\x02\\x02\\x02\\u02F0\\x92\\x03\\x02\\x02' +\r\n    '\\x02\\u02F1\\u02F4\\x05\\x8FH\\x02\\u02F2\\u02F4\\x07a\\x02\\x02\\u02F3\\u02F1\\x03' +\r\n    '\\x02\\x02\\x02\\u02F3\\u02F2\\x03\\x02\\x02\\x02\\u02F4\\x94\\x03\\x02\\x02\\x02\\u02F5' +\r\n    '\\u02F6\\x072\\x02\\x02\\u02F6\\u02F7\\t\\x07\\x02\\x02\\u02F7\\u02F8\\x05\\x97L\\x02' +\r\n    '\\u02F8\\x96\\x03\\x02\\x02\\x02\\u02F9\\u02FE\\x05\\x99M\\x02\\u02FA\\u02FC\\x05\\x9B' +\r\n    'N\\x02\\u02FB\\u02FA\\x03\\x02\\x02\\x02\\u02FB\\u02FC\\x03\\x02\\x02\\x02\\u02FC\\u02FD' +\r\n    '\\x03\\x02\\x02\\x02\\u02FD\\u02FF\\x05\\x99M\\x02\\u02FE\\u02FB\\x03\\x02\\x02\\x02' +\r\n    '\\u02FE\\u02FF\\x03\\x02\\x02\\x02\\u02FF\\x98\\x03\\x02\\x02\\x02\\u0300\\u0301\\t\\b' +\r\n    '\\x02\\x02\\u0301\\x9A\\x03\\x02\\x02\\x02\\u0302\\u0304\\x05\\x9DO\\x02\\u0303\\u0302' +\r\n    '\\x03\\x02\\x02\\x02\\u0304\\u0305\\x03\\x02\\x02\\x02\\u0305\\u0303\\x03\\x02\\x02\\x02' +\r\n    '\\u0305\\u0306\\x03\\x02\\x02\\x02\\u0306\\x9C\\x03\\x02\\x02\\x02\\u0307\\u030A\\x05' +\r\n    '\\x99M\\x02\\u0308\\u030A\\x07a\\x02\\x02\\u0309\\u0307\\x03\\x02\\x02\\x02\\u0309\\u0308' +\r\n    '\\x03\\x02\\x02\\x02\\u030A\\x9E\\x03\\x02\\x02\\x02\\u030B\\u030E\\x05\\xA1Q\\x02\\u030C' +\r\n    '\\u030E\\x05\\xADW\\x02\\u030D\\u030B\\x03\\x02\\x02\\x02\\u030D\\u030C\\x03\\x02\\x02' +\r\n    '\\x02\\u030E\\xA0\\x03\\x02\\x02\\x02\\u030F\\u0310\\x05u;\\x02\\u0310\\u0312\\x070' +\r\n    '\\x02\\x02\\u0311\\u0313\\x05u;\\x02\\u0312\\u0311\\x03\\x02\\x02\\x02\\u0312\\u0313' +\r\n    '\\x03\\x02\\x02\\x02\\u0313\\u0315\\x03\\x02\\x02\\x02\\u0314\\u0316\\x05\\xA3R\\x02' +\r\n    '\\u0315\\u0314\\x03\\x02\\x02\\x02\\u0315\\u0316\\x03\\x02\\x02\\x02\\u0316\\u0318\\x03' +\r\n    '\\x02\\x02\\x02\\u0317\\u0319\\x05\\xABV\\x02\\u0318\\u0317\\x03\\x02\\x02\\x02\\u0318' +\r\n    '\\u0319\\x03\\x02\\x02\\x02\\u0319\\u032B\\x03\\x02\\x02\\x02\\u031A\\u031B\\x070\\x02' +\r\n    '\\x02\\u031B\\u031D\\x05u;\\x02\\u031C\\u031E\\x05\\xA3R\\x02\\u031D\\u031C\\x03\\x02' +\r\n    '\\x02\\x02\\u031D\\u031E\\x03\\x02\\x02\\x02\\u031E\\u0320\\x03\\x02\\x02\\x02\\u031F' +\r\n    '\\u0321\\x05\\xABV\\x02\\u0320\\u031F\\x03\\x02\\x02\\x02\\u0320\\u0321\\x03\\x02\\x02' +\r\n    '\\x02\\u0321\\u032B\\x03\\x02\\x02\\x02\\u0322\\u0323\\x05u;\\x02\\u0323\\u0325\\x05' +\r\n    '\\xA3R\\x02\\u0324\\u0326\\x05\\xABV\\x02\\u0325\\u0324\\x03\\x02\\x02\\x02\\u0325\\u0326' +\r\n    '\\x03\\x02\\x02\\x02\\u0326\\u032B\\x03\\x02\\x02\\x02\\u0327\\u0328\\x05u;\\x02\\u0328' +\r\n    '\\u0329\\x05\\xABV\\x02\\u0329\\u032B\\x03\\x02\\x02\\x02\\u032A\\u030F\\x03\\x02\\x02' +\r\n    '\\x02\\u032A\\u031A\\x03\\x02\\x02\\x02\\u032A\\u0322\\x03\\x02\\x02\\x02\\u032A\\u0327' +\r\n    '\\x03\\x02\\x02\\x02\\u032B\\xA2\\x03\\x02\\x02\\x02\\u032C\\u032D\\x05\\xA5S\\x02\\u032D' +\r\n    '\\u032E\\x05\\xA7T\\x02\\u032E\\xA4\\x03\\x02\\x02\\x02\\u032F\\u0330\\t\\t\\x02\\x02' +\r\n    '\\u0330\\xA6\\x03\\x02\\x02\\x02\\u0331\\u0333\\x05\\xA9U\\x02\\u0332\\u0331\\x03\\x02' +\r\n    '\\x02\\x02\\u0332\\u0333\\x03\\x02\\x02\\x02\\u0333\\u0334\\x03\\x02\\x02\\x02\\u0334' +\r\n    '\\u0335\\x05u;\\x02\\u0335\\xA8\\x03\\x02\\x02\\x02\\u0336\\u0337\\t\\n\\x02\\x02\\u0337' +\r\n    '\\xAA\\x03\\x02\\x02\\x02\\u0338\\u0339\\t\\v\\x02\\x02\\u0339\\xAC\\x03\\x02\\x02\\x02' +\r\n    '\\u033A\\u033B\\x05\\xAFX\\x02\\u033B\\u033D\\x05\\xB1Y\\x02\\u033C\\u033E\\x05\\xAB' +\r\n    'V\\x02\\u033D\\u033C\\x03\\x02\\x02\\x02\\u033D\\u033E\\x03\\x02\\x02\\x02\\u033E\\xAE' +\r\n    '\\x03\\x02\\x02\\x02\\u033F\\u0341\\x05\\x81A\\x02\\u0340\\u0342\\x070\\x02\\x02\\u0341' +\r\n    '\\u0340\\x03\\x02\\x02\\x02\\u0341\\u0342\\x03\\x02\\x02\\x02\\u0342\\u034B\\x03\\x02' +\r\n    '\\x02\\x02\\u0343\\u0344\\x072\\x02\\x02\\u0344\\u0346\\t\\x04\\x02\\x02\\u0345\\u0347' +\r\n    '\\x05\\x83B\\x02\\u0346\\u0345\\x03\\x02\\x02\\x02\\u0346\\u0347\\x03\\x02\\x02\\x02' +\r\n    '\\u0347\\u0348\\x03\\x02\\x02\\x02\\u0348\\u0349\\x070\\x02\\x02\\u0349\\u034B\\x05' +\r\n    '\\x83B\\x02\\u034A\\u033F\\x03\\x02\\x02\\x02\\u034A\\u0343\\x03\\x02\\x02\\x02\\u034B' +\r\n    '\\xB0\\x03\\x02\\x02\\x02\\u034C\\u034D\\x05\\xB3Z\\x02\\u034D\\u034E\\x05\\xA7T\\x02' +\r\n    '\\u034E\\xB2\\x03\\x02\\x02\\x02\\u034F\\u0350\\t\\f\\x02\\x02\\u0350\\xB4\\x03\\x02\\x02' +\r\n    '\\x02\\u0351\\u0352\\x07v\\x02\\x02\\u0352\\u0353\\x07t\\x02\\x02\\u0353\\u0354\\x07' +\r\n    'w\\x02\\x02\\u0354\\u035B\\x07g\\x02\\x02\\u0355\\u0356\\x07h\\x02\\x02\\u0356\\u0357' +\r\n    '\\x07c\\x02\\x02\\u0357\\u0358\\x07n\\x02\\x02\\u0358\\u0359\\x07u\\x02\\x02\\u0359' +\r\n    '\\u035B\\x07g\\x02\\x02\\u035A\\u0351\\x03\\x02\\x02\\x02\\u035A\\u0355\\x03\\x02\\x02' +\r\n    '\\x02\\u035B\\xB6\\x03\\x02\\x02\\x02\\u035C\\u035D\\x07)\\x02\\x02\\u035D\\u035E\\x05' +\r\n    '\\xB9]\\x02\\u035E\\u035F\\x07)\\x02\\x02\\u035F\\u0365\\x03\\x02\\x02\\x02\\u0360\\u0361' +\r\n    '\\x07)\\x02\\x02\\u0361\\u0362\\x05\\xC1a\\x02\\u0362\\u0363\\x07)\\x02\\x02\\u0363' +\r\n    '\\u0365\\x03\\x02\\x02\\x02\\u0364\\u035C\\x03\\x02\\x02\\x02\\u0364\\u0360\\x03\\x02' +\r\n    '\\x02\\x02\\u0365\\xB8\\x03\\x02\\x02\\x02\\u0366\\u0367\\n\\r\\x02\\x02\\u0367\\xBA\\x03' +\r\n    '\\x02\\x02\\x02\\u0368\\u036A\\x07$\\x02\\x02\\u0369\\u036B\\x05\\xBD_\\x02\\u036A\\u0369' +\r\n    '\\x03\\x02\\x02\\x02\\u036A\\u036B\\x03\\x02\\x02\\x02\\u036B\\u036C\\x03\\x02\\x02\\x02' +\r\n    '\\u036C\\u036D\\x07$\\x02\\x02\\u036D\\xBC\\x03\\x02\\x02\\x02\\u036E\\u0370\\x05\\xBF' +\r\n    '`\\x02\\u036F\\u036E\\x03\\x02\\x02\\x02\\u0370\\u0371\\x03\\x02\\x02\\x02\\u0371\\u036F' +\r\n    '\\x03\\x02\\x02\\x02\\u0371\\u0372\\x03\\x02\\x02\\x02\\u0372\\xBE\\x03\\x02\\x02\\x02' +\r\n    '\\u0373\\u0376\\n\\x0E\\x02\\x02\\u0374\\u0376\\x05\\xC1a\\x02\\u0375\\u0373\\x03\\x02' +\r\n    '\\x02\\x02\\u0375\\u0374\\x03\\x02\\x02\\x02\\u0376\\xC0\\x03\\x02\\x02\\x02\\u0377\\u0378' +\r\n    '\\x07^\\x02\\x02\\u0378\\u037C\\t\\x0F\\x02\\x02\\u0379\\u037C\\x05\\xC3b\\x02\\u037A' +\r\n    '\\u037C\\x05\\xC7d\\x02\\u037B\\u0377\\x03\\x02\\x02\\x02\\u037B\\u0379\\x03\\x02\\x02' +\r\n    '\\x02\\u037B\\u037A\\x03\\x02\\x02\\x02\\u037C\\xC2\\x03\\x02\\x02\\x02\\u037D\\u037E' +\r\n    '\\x07^\\x02\\x02\\u037E\\u0389\\x05\\x8FH\\x02\\u037F\\u0380\\x07^\\x02\\x02\\u0380' +\r\n    '\\u0381\\x05\\x8FH\\x02\\u0381\\u0382\\x05\\x8FH\\x02\\u0382\\u0389\\x03\\x02\\x02\\x02' +\r\n    '\\u0383\\u0384\\x07^\\x02\\x02\\u0384\\u0385\\x05\\xC5c\\x02\\u0385\\u0386\\x05\\x8F' +\r\n    'H\\x02\\u0386\\u0387\\x05\\x8FH\\x02\\u0387\\u0389\\x03\\x02\\x02\\x02\\u0388\\u037D' +\r\n    '\\x03\\x02\\x02\\x02\\u0388\\u037F\\x03\\x02\\x02\\x02\\u0388\\u0383\\x03\\x02\\x02\\x02' +\r\n    '\\u0389\\xC4\\x03\\x02\\x02\\x02\\u038A\\u038B\\t\\x10\\x02\\x02\\u038B\\xC6\\x03\\x02' +\r\n    '\\x02\\x02\\u038C\\u038D\\x07^\\x02\\x02\\u038D\\u038E\\x07w\\x02\\x02\\u038E\\u038F' +\r\n    '\\x05\\x85C\\x02\\u038F\\u0390\\x05\\x85C\\x02\\u0390\\u0391\\x05\\x85C\\x02\\u0391' +\r\n    '\\u0392\\x05\\x85C\\x02\\u0392\\xC8\\x03\\x02\\x02\\x02\\u0393\\u0394\\x07p\\x02\\x02' +\r\n    '\\u0394\\u0395\\x07w\\x02\\x02\\u0395\\u0396\\x07n\\x02\\x02\\u0396\\u0397\\x07n\\x02' +\r\n    '\\x02\\u0397\\xCA\\x03\\x02\\x02\\x02\\u0398\\u0399\\x07*\\x02\\x02\\u0399\\xCC\\x03' +\r\n    '\\x02\\x02\\x02\\u039A\\u039B\\x07+\\x02\\x02\\u039B\\xCE\\x03\\x02\\x02\\x02\\u039C' +\r\n    '\\u039D\\x07}\\x02\\x02\\u039D\\xD0\\x03\\x02\\x02\\x02\\u039E\\u039F\\x07\\x7F\\x02' +\r\n    '\\x02\\u039F\\xD2\\x03\\x02\\x02\\x02\\u03A0\\u03A1\\x07]\\x02\\x02\\u03A1\\xD4\\x03' +\r\n    '\\x02\\x02\\x02\\u03A2\\u03A3\\x07_\\x02\\x02\\u03A3\\xD6\\x03\\x02\\x02\\x02\\u03A4' +\r\n    '\\u03A5\\x07=\\x02\\x02\\u03A5\\xD8\\x03\\x02\\x02\\x02\\u03A6\\u03A7\\x07.\\x02\\x02' +\r\n    '\\u03A7\\xDA\\x03\\x02\\x02\\x02\\u03A8\\u03A9\\x070\\x02\\x02\\u03A9\\xDC\\x03\\x02' +\r\n    '\\x02\\x02\\u03AA\\u03AB\\x07?\\x02\\x02\\u03AB\\xDE\\x03\\x02\\x02\\x02\\u03AC\\u03AD' +\r\n    '\\x07@\\x02\\x02\\u03AD\\xE0\\x03\\x02\\x02\\x02\\u03AE\\u03AF\\x07>\\x02\\x02\\u03AF' +\r\n    '\\xE2\\x03\\x02\\x02\\x02\\u03B0\\u03B1\\x07#\\x02\\x02\\u03B1\\xE4\\x03\\x02\\x02\\x02' +\r\n    '\\u03B2\\u03B3\\x07\\x80\\x02\\x02\\u03B3\\xE6\\x03\\x02\\x02\\x02\\u03B4\\u03B5\\x07' +\r\n    'A\\x02\\x02\\u03B5\\xE8\\x03\\x02\\x02\\x02\\u03B6\\u03B7\\x07<\\x02\\x02\\u03B7\\xEA' +\r\n    '\\x03\\x02\\x02\\x02\\u03B8\\u03B9\\x07?\\x02\\x02\\u03B9\\u03BA\\x07?\\x02\\x02\\u03BA' +\r\n    '\\xEC\\x03\\x02\\x02\\x02\\u03BB\\u03BC\\x07>\\x02\\x02\\u03BC\\u03BD\\x07?\\x02\\x02' +\r\n    '\\u03BD\\xEE\\x03\\x02\\x02\\x02\\u03BE\\u03BF\\x07@\\x02\\x02\\u03BF\\u03C0\\x07?\\x02' +\r\n    '\\x02\\u03C0\\xF0\\x03\\x02\\x02\\x02\\u03C1\\u03C2\\x07#\\x02\\x02\\u03C2\\u03C3\\x07' +\r\n    '?\\x02\\x02\\u03C3\\xF2\\x03\\x02\\x02\\x02\\u03C4\\u03C5\\x07(\\x02\\x02\\u03C5\\u03C6' +\r\n    '\\x07(\\x02\\x02\\u03C6\\xF4\\x03\\x02\\x02\\x02\\u03C7\\u03C8\\x07~\\x02\\x02\\u03C8' +\r\n    '\\u03C9\\x07~\\x02\\x02\\u03C9\\xF6\\x03\\x02\\x02\\x02\\u03CA\\u03CB\\x07-\\x02\\x02' +\r\n    '\\u03CB\\u03CC\\x07-\\x02\\x02\\u03CC\\xF8\\x03\\x02\\x02\\x02\\u03CD\\u03CE\\x07/\\x02' +\r\n    '\\x02\\u03CE\\u03CF\\x07/\\x02\\x02\\u03CF\\xFA\\x03\\x02\\x02\\x02\\u03D0\\u03D1\\x07' +\r\n    '-\\x02\\x02\\u03D1\\xFC\\x03\\x02\\x02\\x02\\u03D2\\u03D3\\x07/\\x02\\x02\\u03D3\\xFE' +\r\n    '\\x03\\x02\\x02\\x02\\u03D4\\u03D5\\x07,\\x02\\x02\\u03D5\\u0100\\x03\\x02\\x02\\x02' +\r\n    '\\u03D6\\u03D7\\x071\\x02\\x02\\u03D7\\u0102\\x03\\x02\\x02\\x02\\u03D8\\u03D9\\x07' +\r\n    '(\\x02\\x02\\u03D9\\u0104\\x03\\x02\\x02\\x02\\u03DA\\u03DB\\x07~\\x02\\x02\\u03DB\\u0106' +\r\n    '\\x03\\x02\\x02\\x02\\u03DC\\u03DD\\x07`\\x02\\x02\\u03DD\\u0108\\x03\\x02\\x02\\x02' +\r\n    \"\\u03DE\\u03DF\\x07'\\x02\\x02\\u03DF\\u010A\\x03\\x02\\x02\\x02\\u03E0\\u03E1\\x07\" +\r\n    '/\\x02\\x02\\u03E1\\u03E2\\x07@\\x02\\x02\\u03E2\\u010C\\x03\\x02\\x02\\x02\\u03E3\\u03E4' +\r\n    '\\x07<\\x02\\x02\\u03E4\\u03E5\\x07<\\x02\\x02\\u03E5\\u010E\\x03\\x02\\x02\\x02\\u03E6' +\r\n    '\\u03E7\\x07-\\x02\\x02\\u03E7\\u03E8\\x07?\\x02\\x02\\u03E8\\u0110\\x03\\x02\\x02\\x02' +\r\n    '\\u03E9\\u03EA\\x07/\\x02\\x02\\u03EA\\u03EB\\x07?\\x02\\x02\\u03EB\\u0112\\x03\\x02' +\r\n    '\\x02\\x02\\u03EC\\u03ED\\x07,\\x02\\x02\\u03ED\\u03EE\\x07?\\x02\\x02\\u03EE\\u0114' +\r\n    '\\x03\\x02\\x02\\x02\\u03EF\\u03F0\\x071\\x02\\x02\\u03F0\\u03F1\\x07?\\x02\\x02\\u03F1' +\r\n    '\\u0116\\x03\\x02\\x02\\x02\\u03F2\\u03F3\\x07(\\x02\\x02\\u03F3\\u03F4\\x07?\\x02\\x02' +\r\n    '\\u03F4\\u0118\\x03\\x02\\x02\\x02\\u03F5\\u03F6\\x07~\\x02\\x02\\u03F6\\u03F7\\x07' +\r\n    '?\\x02\\x02\\u03F7\\u011A\\x03\\x02\\x02\\x02\\u03F8\\u03F9\\x07`\\x02\\x02\\u03F9\\u03FA' +\r\n    \"\\x07?\\x02\\x02\\u03FA\\u011C\\x03\\x02\\x02\\x02\\u03FB\\u03FC\\x07'\\x02\\x02\\u03FC\" +\r\n    '\\u03FD\\x07?\\x02\\x02\\u03FD\\u011E\\x03\\x02\\x02\\x02\\u03FE\\u03FF\\x07>\\x02\\x02' +\r\n    '\\u03FF\\u0400\\x07>\\x02\\x02\\u0400\\u0401\\x07?\\x02\\x02\\u0401\\u0120\\x03\\x02' +\r\n    '\\x02\\x02\\u0402\\u0403\\x07@\\x02\\x02\\u0403\\u0404\\x07@\\x02\\x02\\u0404\\u0405' +\r\n    '\\x07?\\x02\\x02\\u0405\\u0122\\x03\\x02\\x02\\x02\\u0406\\u0407\\x07@\\x02\\x02\\u0407' +\r\n    '\\u0408\\x07@\\x02\\x02\\u0408\\u0409\\x07@\\x02\\x02\\u0409\\u040A\\x07?\\x02\\x02' +\r\n    '\\u040A\\u0124\\x03\\x02\\x02\\x02\\u040B\\u040F\\x05\\u0127\\x94\\x02\\u040C\\u040E' +\r\n    '\\x05\\u0129\\x95\\x02\\u040D\\u040C\\x03\\x02\\x02\\x02\\u040E\\u0411\\x03\\x02\\x02' +\r\n    '\\x02\\u040F\\u040D\\x03\\x02\\x02\\x02\\u040F\\u0410\\x03\\x02\\x02\\x02\\u0410\\u0126' +\r\n    '\\x03\\x02\\x02\\x02\\u0411\\u040F\\x03\\x02\\x02\\x02\\u0412\\u0417\\t\\x11\\x02\\x02' +\r\n    '\\u0413\\u0417\\n\\x12\\x02\\x02\\u0414\\u0415\\t\\x13\\x02\\x02\\u0415\\u0417\\t\\x14' +\r\n    '\\x02\\x02\\u0416\\u0412\\x03\\x02\\x02\\x02\\u0416\\u0413\\x03\\x02\\x02\\x02\\u0416' +\r\n    '\\u0414\\x03\\x02\\x02\\x02\\u0417\\u0128\\x03\\x02\\x02\\x02\\u0418\\u041D\\t\\x15\\x02' +\r\n    '\\x02\\u0419\\u041D\\n\\x12\\x02\\x02\\u041A\\u041B\\t\\x13\\x02\\x02\\u041B\\u041D\\t' +\r\n    '\\x14\\x02\\x02\\u041C\\u0418\\x03\\x02\\x02\\x02\\u041C\\u0419\\x03\\x02\\x02\\x02\\u041C' +\r\n    '\\u041A\\x03\\x02\\x02\\x02\\u041D\\u012A\\x03\\x02\\x02\\x02\\u041E\\u041F\\x07B\\x02' +\r\n    '\\x02\\u041F\\u012C\\x03\\x02\\x02\\x02\\u0420\\u0421\\x070\\x02\\x02\\u0421\\u0422' +\r\n    '\\x070\\x02\\x02\\u0422\\u0423\\x070\\x02\\x02\\u0423\\u012E\\x03\\x02\\x02\\x02\\u0424' +\r\n    '\\u0426\\t\\x16\\x02\\x02\\u0425\\u0424\\x03\\x02\\x02\\x02\\u0426\\u0427\\x03\\x02\\x02' +\r\n    '\\x02\\u0427\\u0425\\x03\\x02\\x02\\x02\\u0427\\u0428\\x03\\x02\\x02\\x02\\u0428\\u0429' +\r\n    '\\x03\\x02\\x02\\x02\\u0429\\u042A\\b\\x98\\x02\\x02\\u042A\\u0130\\x03\\x02\\x02\\x02' +\r\n    '\\u042B\\u042C\\x071\\x02\\x02\\u042C\\u042D\\x07,\\x02\\x02\\u042D\\u0431\\x03\\x02' +\r\n    '\\x02\\x02\\u042E\\u0430\\v\\x02\\x02\\x02\\u042F\\u042E\\x03\\x02\\x02\\x02\\u0430\\u0433' +\r\n    '\\x03\\x02\\x02\\x02\\u0431\\u0432\\x03\\x02\\x02\\x02\\u0431\\u042F\\x03\\x02\\x02\\x02' +\r\n    '\\u0432\\u0434\\x03\\x02\\x02\\x02\\u0433\\u0431\\x03\\x02\\x02\\x02\\u0434\\u0435\\x07' +\r\n    ',\\x02\\x02\\u0435\\u0436\\x071\\x02\\x02\\u0436\\u0437\\x03\\x02\\x02\\x02\\u0437\\u0438' +\r\n    '\\b\\x99\\x02\\x02\\u0438\\u0132\\x03\\x02\\x02\\x02\\u0439\\u043A\\x071\\x02\\x02\\u043A' +\r\n    '\\u043B\\x071\\x02\\x02\\u043B\\u043F\\x03\\x02\\x02\\x02\\u043C\\u043E\\n\\x17\\x02' +\r\n    '\\x02\\u043D\\u043C\\x03\\x02\\x02\\x02\\u043E\\u0441\\x03\\x02\\x02\\x02\\u043F\\u043D' +\r\n    '\\x03\\x02\\x02\\x02\\u043F\\u0440\\x03\\x02\\x02\\x02\\u0440\\u0442\\x03\\x02\\x02\\x02' +\r\n    '\\u0441\\u043F\\x03\\x02\\x02\\x02\\u0442\\u0443\\b\\x9A\\x02\\x02\\u0443\\u0134\\x03' +\r\n    '\\x02\\x02\\x028\\x02\\u028C\\u0290\\u0294\\u0298\\u029C\\u02A3\\u02A8\\u02AA\\u02AE' +\r\n    '\\u02B1\\u02B5\\u02BC\\u02C0\\u02C5\\u02CD\\u02D0\\u02D7\\u02DB\\u02DF\\u02E5\\u02E8' +\r\n    '\\u02EF\\u02F3\\u02FB\\u02FE\\u0305\\u0309\\u030D\\u0312\\u0315\\u0318\\u031D\\u0320' +\r\n    '\\u0325\\u032A\\u0332\\u033D\\u0341\\u0346\\u034A\\u035A\\u0364\\u036A\\u0371\\u0375' +\r\n    '\\u037B\\u0388\\u040F\\u0416\\u041C\\u0427\\u0431\\u043F\\x03\\b\\x02\\x02';\r\nJava8Lexer._serializedATN = Utils.join([Java8Lexer._serializedATNSegment0, Java8Lexer._serializedATNSegment1], '');\r\n//# sourceMappingURL=Java8Lexer.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Lexer.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Mapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Mapper.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Java8Mapper = void 0;\r\n// tslint:disable\r\nconst antlr4ts_1 = __webpack_require__(/*! antlr4ts */ \"./node_modules/antlr4ts/index.js\");\r\nconst TerminalNode_1 = __webpack_require__(/*! antlr4ts/tree/TerminalNode */ \"./node_modules/antlr4ts/tree/TerminalNode.js\");\r\nconst Java8Lexer_1 = __webpack_require__(/*! ./Java8Lexer */ \"./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Lexer.js\");\r\nconst Java8Parser_1 = __webpack_require__(/*! ./Java8Parser */ \"./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Parser.js\");\r\nconst UniParam_1 = __webpack_require__(/*! ../../node/UniParam */ \"./node_modules/unicoen.ts/dist/node/UniParam.js\");\r\nconst UniExpr_1 = __webpack_require__(/*! ../../node/UniExpr */ \"./node_modules/unicoen.ts/dist/node/UniExpr.js\");\r\nconst UniArray_1 = __webpack_require__(/*! ../../node/UniArray */ \"./node_modules/unicoen.ts/dist/node/UniArray.js\");\r\nconst UniBinOp_1 = __webpack_require__(/*! ../../node/UniBinOp */ \"./node_modules/unicoen.ts/dist/node/UniBinOp.js\");\r\nconst UniBlock_1 = __webpack_require__(/*! ../../node/UniBlock */ \"./node_modules/unicoen.ts/dist/node/UniBlock.js\");\r\nconst UniBoolLiteral_1 = __webpack_require__(/*! ../../node/UniBoolLiteral */ \"./node_modules/unicoen.ts/dist/node/UniBoolLiteral.js\");\r\nconst UniBreak_1 = __webpack_require__(/*! ../../node/UniBreak */ \"./node_modules/unicoen.ts/dist/node/UniBreak.js\");\r\nconst UniContinue_1 = __webpack_require__(/*! ../../node/UniContinue */ \"./node_modules/unicoen.ts/dist/node/UniContinue.js\");\r\nconst UniClassDec_1 = __webpack_require__(/*! ../../node/UniClassDec */ \"./node_modules/unicoen.ts/dist/node/UniClassDec.js\");\r\nconst UniDecralation_1 = __webpack_require__(/*! ../../node/UniDecralation */ \"./node_modules/unicoen.ts/dist/node/UniDecralation.js\");\r\nconst UniDoubleLiteral_1 = __webpack_require__(/*! ../../node/UniDoubleLiteral */ \"./node_modules/unicoen.ts/dist/node/UniDoubleLiteral.js\");\r\nconst UniFunctionDec_1 = __webpack_require__(/*! ../../node/UniFunctionDec */ \"./node_modules/unicoen.ts/dist/node/UniFunctionDec.js\");\r\nconst UniFor_1 = __webpack_require__(/*! ../../node/UniFor */ \"./node_modules/unicoen.ts/dist/node/UniFor.js\");\r\nconst UniIdent_1 = __webpack_require__(/*! ../../node/UniIdent */ \"./node_modules/unicoen.ts/dist/node/UniIdent.js\");\r\nconst UniIf_1 = __webpack_require__(/*! ../../node/UniIf */ \"./node_modules/unicoen.ts/dist/node/UniIf.js\");\r\nconst UniImportDec_1 = __webpack_require__(/*! ../../node/UniImportDec */ \"./node_modules/unicoen.ts/dist/node/UniImportDec.js\");\r\nconst UniIntLiteral_1 = __webpack_require__(/*! ../../node/UniIntLiteral */ \"./node_modules/unicoen.ts/dist/node/UniIntLiteral.js\");\r\nconst UniMethodCall_1 = __webpack_require__(/*! ../../node/UniMethodCall */ \"./node_modules/unicoen.ts/dist/node/UniMethodCall.js\");\r\nconst UniNew_1 = __webpack_require__(/*! ../../node/UniNew */ \"./node_modules/unicoen.ts/dist/node/UniNew.js\");\r\nconst UniNewArray_1 = __webpack_require__(/*! ../../node/UniNewArray */ \"./node_modules/unicoen.ts/dist/node/UniNewArray.js\");\r\nconst UniWhile_1 = __webpack_require__(/*! ../../node/UniWhile */ \"./node_modules/unicoen.ts/dist/node/UniWhile.js\");\r\nconst UniUnaryOp_1 = __webpack_require__(/*! ../../node/UniUnaryOp */ \"./node_modules/unicoen.ts/dist/node/UniUnaryOp.js\");\r\nconst UniTernaryOp_1 = __webpack_require__(/*! ../../node/UniTernaryOp */ \"./node_modules/unicoen.ts/dist/node/UniTernaryOp.js\");\r\nconst UniStatement_1 = __webpack_require__(/*! ../../node/UniStatement */ \"./node_modules/unicoen.ts/dist/node/UniStatement.js\");\r\nconst UniStringLiteral_1 = __webpack_require__(/*! ../../node/UniStringLiteral */ \"./node_modules/unicoen.ts/dist/node/UniStringLiteral.js\");\r\nconst UniReturn_1 = __webpack_require__(/*! ../../node/UniReturn */ \"./node_modules/unicoen.ts/dist/node/UniReturn.js\");\r\nconst UniVariableDec_1 = __webpack_require__(/*! ../../node/UniVariableDec */ \"./node_modules/unicoen.ts/dist/node/UniVariableDec.js\");\r\nconst UniVariableDef_1 = __webpack_require__(/*! ../../node/UniVariableDef */ \"./node_modules/unicoen.ts/dist/node/UniVariableDef.js\");\r\nconst SyntaxErrorListener_1 = __webpack_require__(/*! ../mapper/SyntaxErrorListener */ \"./node_modules/unicoen.ts/dist/interpreter/mapper/SyntaxErrorListener.js\");\r\nconst Mapper_1 = __webpack_require__(/*! ../mapper/Mapper */ \"./node_modules/unicoen.ts/dist/interpreter/mapper/Mapper.js\");\r\n__webpack_require__(/*! ../../node_helper/Extension */ \"./node_modules/unicoen.ts/dist/node_helper/Extension.js\");\r\nclass Java8Mapper extends Mapper_1.Mapper {\r\n    preProcess(text) {\r\n        return text;\r\n    }\r\n    parseToANTLRTree(code) {\r\n        const preProcessedCode = this.preProcess(code);\r\n        const chars = new antlr4ts_1.ANTLRInputStream(preProcessedCode);\r\n        const lexer = new Java8Lexer_1.Java8Lexer(chars);\r\n        const tokens = new antlr4ts_1.CommonTokenStream(lexer);\r\n        const parser = new Java8Parser_1.Java8Parser(tokens);\r\n        parser.addErrorListener(new SyntaxErrorListener_1.SyntaxErrorListener());\r\n        const tree = parser.translationunit();\r\n        this.parser = parser;\r\n        return tree;\r\n    }\r\n    visitTranslationunit(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const body = [];\r\n        map.set('body', body);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 564:\r\n                        {\r\n                            body.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBlock_1.UniBlock);\r\n        return node;\r\n    }\r\n    visitIntegerLiteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == Java8Parser_1.Java8Parser.IntegerLiteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniIntLiteral_1.UniIntLiteral(Number(text));\r\n    }\r\n    visitFloatingPointLiteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == Java8Parser_1.Java8Parser.FloatingPointLiteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniDoubleLiteral_1.UniDoubleLiteral(Number(text));\r\n    }\r\n    visitBooleanLiteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == Java8Parser_1.Java8Parser.BooleanLiteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniBoolLiteral_1.UniBoolLiteral(Boolean(text));\r\n    }\r\n    visitStringLiteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == Java8Parser_1.Java8Parser.StringLiteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniStringLiteral_1.UniStringLiteral(text.substring(1, text.length - 1));\r\n    }\r\n    visitPrimitiveType(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitClassOrInterfaceType(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitClassType(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitInterfaceType(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitDims(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitTypeNameIdent(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 799:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIdent_1.UniIdent);\r\n        return node;\r\n    }\r\n    visitExpressionName(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case Java8Parser_1.Java8Parser.Identifier:\r\n                        {\r\n                            name.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIdent_1.UniIdent);\r\n        return node;\r\n    }\r\n    visitCompilationUnit(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 830:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 833:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 839:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniStatement_1.UniStatement);\r\n        return node;\r\n    }\r\n    visitSingleTypeImportDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 871:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniImportDec_1.UniImportDec);\r\n        return node;\r\n    }\r\n    visitTypeImportOnDemandDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const ondemand = [];\r\n        map.set('ondemand', ondemand);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 875:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 877:\r\n                        {\r\n                            ondemand.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniImportDec_1.UniImportDec);\r\n        return node;\r\n    }\r\n    visitSingleStaticImportDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniImportDec_1.UniImportDec);\r\n        return node;\r\n    }\r\n    visitStaticImportOnDemandDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniImportDec_1.UniImportDec);\r\n        return node;\r\n    }\r\n    visitTypeDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 894:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 895:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniClassDec_1.UniClassDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitClassDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 899:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniClassDec_1.UniClassDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitNormalClassDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const interfaces = [];\r\n        map.set('interfaces', interfaces);\r\n        const superClass = [];\r\n        map.set('superClass', superClass);\r\n        const members = [];\r\n        map.set('members', members);\r\n        const className = [];\r\n        map.set('className', className);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 903:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 905:\r\n                        {\r\n                            className.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 909:\r\n                        {\r\n                            superClass.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 912:\r\n                        {\r\n                            interfaces.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 915:\r\n                        {\r\n                            members.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        return node;\r\n    }\r\n    visitClassName(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitClassModifiers(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 919:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitClassModifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitSuperclass(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 948:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitSuperinterfaces(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 951:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitInterfaceTypeList(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 953:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 955:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitClassBody(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 962:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniDecralation_1.UniDecralation);\r\n        return node;\r\n    }\r\n    visitClassBodyDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 970:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 973:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniDecralation_1.UniDecralation);\r\n        return node;\r\n    }\r\n    visitClassMemberDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 976:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 977:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniDecralation_1.UniDecralation);\r\n        return node;\r\n    }\r\n    visitFieldDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 983:\r\n                            {\r\n                                modifiers.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                        case 984:\r\n                            {\r\n                                type.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                        case 985:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitFieldModifiers(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 988:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitFieldModifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitVariableDeclaratorList(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1004:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1006:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDef_1.UniVariableDef);\r\n        return node;\r\n    }\r\n    visitVariableDeclarator(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const value = [];\r\n        map.set('value', value);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1012:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1014:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniVariableDef_1.UniVariableDef);\r\n        return node;\r\n    }\r\n    visitVariableDeclaratorId(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitUnannType(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitMethodDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const block = [];\r\n        map.set('block', block);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1101:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1107:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1108:\r\n                        {\r\n                            block.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniFunctionDec_1.UniFunctionDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitMethodModifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitMethodHeader(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const returnType = [];\r\n        map.set('returnType', returnType);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1122:\r\n                        {\r\n                            returnType.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1123:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1134:\r\n                        {\r\n                            returnType.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1135:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniFunctionDec_1.UniFunctionDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitResult(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitMethodDeclarator(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const params = [];\r\n        map.set('params', params);\r\n        const returnType = [];\r\n        map.set('returnType', returnType);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1145:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1147:\r\n                        {\r\n                            params.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1151:\r\n                        {\r\n                            returnType.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        return node;\r\n    }\r\n    visitMethodName(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitFormalParameterList(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1156:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1158:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1160:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniParam_1.UniParam);\r\n        return node;\r\n    }\r\n    visitFormalParameters(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1163:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1165:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniParam_1.UniParam);\r\n        return node;\r\n    }\r\n    visitFormalParameter(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const variables = [];\r\n        map.set('variables', variables);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1181:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1187:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1188:\r\n                        {\r\n                            variables.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniParam_1.UniParam);\r\n        return node;\r\n    }\r\n    visitParameterDeclaratorIds(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1190:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDef_1.UniVariableDef);\r\n        return node;\r\n    }\r\n    visitParameterDeclaratorId(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const typeSuffix = [];\r\n        map.set('typeSuffix', typeSuffix);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1192:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1193:\r\n                        {\r\n                            typeSuffix.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniVariableDef_1.UniVariableDef);\r\n        return node;\r\n    }\r\n    visitParameterName(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitMethodBody(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1249:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniBlock_1.UniBlock);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniBlock_1.UniBlock));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniBlock_1.UniBlock();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniBlock_1.UniBlock));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitConstructorDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const block = [];\r\n        map.set('block', block);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1258:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1264:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1268:\r\n                        {\r\n                            block.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniFunctionDec_1.UniFunctionDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitConstructorModifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitConstructorDeclarator(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const args = [];\r\n        map.set('args', args);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1279:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1281:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        return node;\r\n    }\r\n    visitSimpleTypeName(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitInterfaceDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1404:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniClassDec_1.UniClassDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitNormalInterfaceDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const interfaces = [];\r\n        map.set('interfaces', interfaces);\r\n        const members = [];\r\n        map.set('members', members);\r\n        const className = [];\r\n        map.set('className', className);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1408:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1410:\r\n                        {\r\n                            className.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1414:\r\n                        {\r\n                            interfaces.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1417:\r\n                        {\r\n                            members.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        return node;\r\n    }\r\n    visitInterfaceModifiers(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1419:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitInterfaceName(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitInterfaceModifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitExtendsInterfaces(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1437:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitInterfaceBody(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1440:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniDecralation_1.UniDecralation);\r\n        return node;\r\n    }\r\n    visitInterfaceMemberDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1448:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1449:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniDecralation_1.UniDecralation);\r\n        return node;\r\n    }\r\n    visitConstantDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1455:\r\n                            {\r\n                                modifiers.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                        case 1456:\r\n                            {\r\n                                type.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                        case 1457:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitConstantModifiers(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1460:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitConstantModifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitInterfaceMethodDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const block = [];\r\n        map.set('block', block);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1472:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1473:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1474:\r\n                        {\r\n                            block.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniFunctionDec_1.UniFunctionDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitInterfaceMethodModifiers(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1476:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, String);\r\n        return node;\r\n    }\r\n    visitInterfaceMethodModifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitArrayInitializer(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const items = [];\r\n        map.set('items', items);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1600:\r\n                        {\r\n                            items.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniArray_1.UniArray);\r\n        return node;\r\n    }\r\n    visitVariableInitializerList(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1608:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1610:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniExpr_1.UniExpr);\r\n        return node;\r\n    }\r\n    visitBlock(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const body = [];\r\n        map.set('body', body);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1617:\r\n                        {\r\n                            body.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBlock_1.UniBlock);\r\n        return node;\r\n    }\r\n    visitBlockStatements(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1622:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1623:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniStatement_1.UniStatement);\r\n        return node;\r\n    }\r\n    visitLocalVariableDeclarationStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1634:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniVariableDec_1.UniVariableDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniVariableDec_1.UniVariableDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniVariableDec_1.UniVariableDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniVariableDec_1.UniVariableDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitLocalVariableDeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const variables = [];\r\n        map.set('variables', variables);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1637:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1643:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1644:\r\n                        {\r\n                            variables.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitExpressionStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1685:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitIfThenStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const trueStatement = [];\r\n        map.set('trueStatement', trueStatement);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1699:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1701:\r\n                        {\r\n                            trueStatement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIf_1.UniIf);\r\n        return node;\r\n    }\r\n    visitIfThenElseStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const trueStatement = [];\r\n        map.set('trueStatement', trueStatement);\r\n        const falseStatement = [];\r\n        map.set('falseStatement', falseStatement);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1705:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1707:\r\n                        {\r\n                            trueStatement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1709:\r\n                        {\r\n                            falseStatement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIf_1.UniIf);\r\n        return node;\r\n    }\r\n    visitIfThenElseStatementNoShortIf(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const trueStatement = [];\r\n        map.set('trueStatement', trueStatement);\r\n        const falseStatement = [];\r\n        map.set('falseStatement', falseStatement);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1713:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1715:\r\n                        {\r\n                            trueStatement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1717:\r\n                        {\r\n                            falseStatement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIf_1.UniIf);\r\n        return node;\r\n    }\r\n    visitWhileStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1778:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1780:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniWhile_1.UniWhile);\r\n        return node;\r\n    }\r\n    visitWhileStatementNoShortIf(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1784:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1786:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniWhile_1.UniWhile);\r\n        return node;\r\n    }\r\n    visitBasicForStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const init = [];\r\n        map.set('init', init);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const step = [];\r\n        map.set('step', step);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1806:\r\n                        {\r\n                            init.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1810:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1814:\r\n                        {\r\n                            step.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1818:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniFor_1.UniFor);\r\n        return node;\r\n    }\r\n    visitBasicForStatementNoShortIf(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const init = [];\r\n        map.set('init', init);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const step = [];\r\n        map.set('step', step);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1822:\r\n                        {\r\n                            init.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1826:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1830:\r\n                        {\r\n                            step.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1834:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniFor_1.UniFor);\r\n        return node;\r\n    }\r\n    visitBreakStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBreak_1.UniBreak);\r\n        return node;\r\n    }\r\n    visitContinueStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniContinue_1.UniContinue);\r\n        return node;\r\n    }\r\n    visitReturnStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const value = [];\r\n        map.set('value', value);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1893:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniReturn_1.UniReturn);\r\n        return node;\r\n    }\r\n    visitClassInstanceCreationExpression_lfno_primary(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const args = [];\r\n        map.set('args', args);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2299:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2323:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case Java8Parser_1.Java8Parser.Identifier:\r\n                        {\r\n                            type.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniNew_1.UniNew);\r\n        return node;\r\n    }\r\n    visitArrayAccess(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2366:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2368:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2371:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2373:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2378:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2380:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case Java8Parser_1.Java8Parser.LBRACK:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case Java8Parser_1.Java8Parser.RBRACK:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitArrayAccess_lf_primary(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2388:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2390:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2393:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2395:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case Java8Parser_1.Java8Parser.LBRACK:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case Java8Parser_1.Java8Parser.RBRACK:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n    visitArrayAccess_lfno_primary(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2403:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2405:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2408:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2410:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2415:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2417:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case Java8Parser_1.Java8Parser.LBRACK:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case Java8Parser_1.Java8Parser.RBRACK:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitMethodInvocation(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const args = [];\r\n        map.set('args', args);\r\n        const receiver = [];\r\n        map.set('receiver', receiver);\r\n        const methodName = [];\r\n        map.set('methodName', methodName);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2425:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2427:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2432:\r\n                        {\r\n                            receiver.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2437:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2439:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2444:\r\n                        {\r\n                            receiver.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2449:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2451:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniMethodCall_1.UniMethodCall);\r\n        return node;\r\n    }\r\n    visitReceivers(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const items = [];\r\n        map.set('items', items);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2495:\r\n                        {\r\n                            items.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniArray_1.UniArray);\r\n        return node;\r\n    }\r\n    visitReceiver(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2497:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2499:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniIdent_1.UniIdent);\r\n        return node;\r\n    }\r\n    visitIdent(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case Java8Parser_1.Java8Parser.Identifier:\r\n                        {\r\n                            name.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIdent_1.UniIdent);\r\n        return node;\r\n    }\r\n    visitMethodInvocation_lfno_primary(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const args = [];\r\n        map.set('args', args);\r\n        const receiver = [];\r\n        map.set('receiver', receiver);\r\n        const methodName = [];\r\n        map.set('methodName', methodName);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2518:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2520:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2525:\r\n                        {\r\n                            receiver.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2527:\r\n                        {\r\n                            receiver.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2530:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2532:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2537:\r\n                        {\r\n                            receiver.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2539:\r\n                        {\r\n                            receiver.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2542:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2544:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2551:\r\n                        {\r\n                            receiver.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2554:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2556:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2561:\r\n                        {\r\n                            receiver.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2568:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2570:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniMethodCall_1.UniMethodCall);\r\n        return node;\r\n    }\r\n    visitArgumentList(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2577:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2579:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniExpr_1.UniExpr);\r\n        return node;\r\n    }\r\n    visitArrayCreationExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const elementsNum = [];\r\n        map.set('elementsNum', elementsNum);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const value = [];\r\n        map.set('value', value);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2683:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2684:\r\n                        {\r\n                            elementsNum.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2689:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2690:\r\n                        {\r\n                            elementsNum.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2695:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2697:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2700:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2702:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniNewArray_1.UniNewArray);\r\n        return node;\r\n    }\r\n    visitDimExprs(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2706:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2707:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniExpr_1.UniExpr);\r\n        return node;\r\n    }\r\n    visitDimExpr(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2720:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniExpr_1.UniExpr);\r\n        return node;\r\n    }\r\n    visitAssignment(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2761:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2762:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2763:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitAssignmentOperator(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitConditionalExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const trueExpr = [];\r\n        map.set('trueExpr', trueExpr);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const falseExpr = [];\r\n        map.set('falseExpr', falseExpr);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2772:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2773:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2775:\r\n                        {\r\n                            trueExpr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2777:\r\n                        {\r\n                            falseExpr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniTernaryOp_1.UniTernaryOp);\r\n        return node;\r\n    }\r\n    visitConditionalOrExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2784:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 478:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2787:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2788:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitConditionalAndExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2798:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 482:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2801:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2802:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitInclusiveOrExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2812:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 486:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2815:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2816:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitExclusiveOrExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2826:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 490:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2829:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2830:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitAndExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2840:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 494:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2843:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2844:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitEqualityExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2856:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 500:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2859:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2860:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2863:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2864:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitRelationalExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2882:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 512:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2885:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2886:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2889:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2890:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2893:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2894:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2897:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2898:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2901:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2902:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitShiftExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2920:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 520:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2923:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2924:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2927:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2928:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2931:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2932:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitAdditiveExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2940:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 522:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2943:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2944:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2947:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2948:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitMultiplicativeExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2962:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 530:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2965:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2966:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2969:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2970:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2973:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2974:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitUnaryExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const expr = [];\r\n        map.set('expr', expr);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2985:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2986:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2987:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2988:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2990:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2991:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2993:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);\r\n        return node;\r\n    }\r\n    visitPreIncrementExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const expr = [];\r\n        map.set('expr', expr);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2998:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2999:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);\r\n        return node;\r\n    }\r\n    visitPreDecrementExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const expr = [];\r\n        map.set('expr', expr);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 3003:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3004:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);\r\n        return node;\r\n    }\r\n    visitUnaryExpressionNotPlusMinus(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const expr = [];\r\n        map.set('expr', expr);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 3010:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3011:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3012:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3014:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3015:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3017:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);\r\n        return node;\r\n    }\r\n    visitPostfixExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 3020:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3021:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3022:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3023:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3026:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3027:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitPostIncrementExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const expr = [];\r\n        map.set('expr', expr);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 3035:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3036:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);\r\n        return node;\r\n    }\r\n    visitPostDecrementExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const expr = [];\r\n        map.set('expr', expr);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 3040:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 3041:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);\r\n        return node;\r\n    }\r\n}\r\nexports.Java8Mapper = Java8Mapper;\r\n//# sourceMappingURL=Java8Mapper.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Mapper.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Parser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Parser.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ClassDeclarationContext = exports.TypeDeclarationContext = exports.StaticImportOnDemandDeclarationContext = exports.SingleStaticImportDeclarationContext = exports.TypeImportOnDemandDeclarationContext = exports.SingleTypeImportDeclarationContext = exports.ImportDeclarationContext = exports.PackageModifierContext = exports.PackageDeclarationContext = exports.CompilationUnitContext = exports.AmbiguousNameContext = exports.ExpressionNameContext = exports.PackageOrTypeNameContext = exports.TypeNameIdentContext = exports.TypeNameContext = exports.PackageNameContext = exports.WildcardBoundsContext = exports.WildcardContext = exports.TypeArgumentContext = exports.TypeArgumentListContext = exports.TypeArgumentsContext = exports.AdditionalBoundContext = exports.TypeBoundContext = exports.TypeParameterModifierContext = exports.TypeParameterContext = exports.DimsContext = exports.ArrayTypeContext = exports.TypeVariableContext = exports.InterfaceType_lfno_classOrInterfaceTypeContext = exports.InterfaceType_lf_classOrInterfaceTypeContext = exports.InterfaceTypeContext = exports.ClassType_lfno_classOrInterfaceTypeContext = exports.ClassType_lf_classOrInterfaceTypeContext = exports.ClassTypeContext = exports.ClassOrInterfaceTypeContext = exports.ReferenceTypeContext = exports.FloatingPointTypeContext = exports.IntegralTypeContext = exports.NumericTypeContext = exports.PrimitiveTypeContext = exports.TypeContext = exports.NullLiteralContext = exports.CharacterLiteralContext = exports.StringLiteralContext = exports.BooleanLiteralContext = exports.FloatingPointLiteralContext = exports.IntegerLiteralContext = exports.LiteralContext = exports.TranslationunitContext = exports.Java8Parser = void 0;\r\nexports.MethodBodyContext = exports.ExceptionTypeContext = exports.ExceptionTypeListContext = exports.Throws_Context = exports.ReceiverParameterContext = exports.LastFormalParameterContext = exports.VariableModifierContext = exports.ParameterNameContext = exports.ParameterDeclaratorIdContext = exports.ParameterDeclaratorIdsContext = exports.FormalParameterContext = exports.FormalParametersContext = exports.FormalParameterListContext = exports.MethodNameContext = exports.MethodDeclaratorContext = exports.ResultContext = exports.MethodHeaderContext = exports.MethodModifierContext = exports.MethodDeclarationContext = exports.UnannArrayTypeContext = exports.UnannTypeVariableContext = exports.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext = exports.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext = exports.UnannInterfaceTypeContext = exports.UnannClassType_lfno_unannClassOrInterfaceTypeContext = exports.UnannClassType_lf_unannClassOrInterfaceTypeContext = exports.UnannClassTypeContext = exports.UnannClassOrInterfaceTypeContext = exports.UnannReferenceTypeContext = exports.UnannPrimitiveTypeContext = exports.UnannTypeContext = exports.VariableInitializerContext = exports.VariableDeclaratorIdContext = exports.VariableDeclaratorContext = exports.VariableDeclaratorListContext = exports.FieldModifierContext = exports.FieldModifiersContext = exports.FieldDeclarationContext = exports.ClassMemberDeclarationContext = exports.ClassBodyDeclarationContext = exports.ClassBodyContext = exports.InterfaceTypeListContext = exports.SuperinterfacesContext = exports.SuperclassContext = exports.TypeParameterListContext = exports.TypeParametersContext = exports.ClassModifierContext = exports.ClassModifiersContext = exports.ClassNameContext = exports.NormalClassDeclarationContext = void 0;\r\nexports.LocalVariableDeclarationContext = exports.LocalVariableDeclarationStatementContext = exports.BlockStatementContext = exports.BlockStatementsContext = exports.BlockContext = exports.VariableInitializerListContext = exports.ArrayInitializerContext = exports.SingleElementAnnotationContext = exports.MarkerAnnotationContext = exports.ElementValueListContext = exports.ElementValueArrayInitializerContext = exports.ElementValueContext = exports.ElementValuePairContext = exports.ElementValuePairListContext = exports.NormalAnnotationContext = exports.AnnotationContext = exports.DefaultValueContext = exports.AnnotationTypeElementModifierContext = exports.AnnotationTypeElementDeclarationContext = exports.AnnotationTypeMemberDeclarationContext = exports.AnnotationTypeBodyContext = exports.AnnotationTypeDeclarationContext = exports.InterfaceMethodModifierContext = exports.InterfaceMethodModifiersContext = exports.InterfaceMethodDeclarationContext = exports.ConstantModifierContext = exports.ConstantModifiersContext = exports.ConstantDeclarationContext = exports.InterfaceMemberDeclarationContext = exports.InterfaceBodyContext = exports.ExtendsInterfacesContext = exports.InterfaceModifierContext = exports.InterfaceNameContext = exports.InterfaceModifiersContext = exports.NormalInterfaceDeclarationContext = exports.InterfaceDeclarationContext = exports.EnumBodyDeclarationsContext = exports.EnumConstantModifierContext = exports.EnumConstantContext = exports.EnumConstantListContext = exports.EnumBodyContext = exports.EnumDeclarationContext = exports.ExplicitConstructorInvocationContext = exports.ConstructorBodyContext = exports.SimpleTypeNameContext = exports.ConstructorDeclaratorContext = exports.ConstructorModifierContext = exports.ConstructorDeclarationContext = exports.StaticInitializerContext = exports.InstanceInitializerContext = void 0;\r\nexports.PrimaryNoNewArray_lf_primaryContext = exports.PrimaryNoNewArray_lfno_arrayAccessContext = exports.PrimaryNoNewArray_lf_arrayAccessContext = exports.PrimaryNoNewArrayContext = exports.PrimaryContext = exports.ResourceContext = exports.ResourceListContext = exports.ResourceSpecificationContext = exports.TryWithResourcesStatementContext = exports.Finally_Context = exports.CatchTypeContext = exports.CatchFormalParameterContext = exports.CatchClauseContext = exports.CatchesContext = exports.TryStatementContext = exports.SynchronizedStatementContext = exports.ThrowStatementContext = exports.ReturnStatementContext = exports.ContinueStatementContext = exports.BreakStatementContext = exports.EnhancedForStatementNoShortIfContext = exports.EnhancedForStatementContext = exports.StatementExpressionListContext = exports.ForUpdateContext = exports.ForInitContext = exports.BasicForStatementNoShortIfContext = exports.BasicForStatementContext = exports.ForStatementNoShortIfContext = exports.ForStatementContext = exports.DoStatementContext = exports.WhileStatementNoShortIfContext = exports.WhileStatementContext = exports.EnumConstantNameContext = exports.SwitchLabelContext = exports.SwitchLabelsContext = exports.SwitchBlockStatementGroupContext = exports.SwitchBlockContext = exports.SwitchStatementContext = exports.AssertStatementContext = exports.IfThenElseStatementNoShortIfContext = exports.IfThenElseStatementContext = exports.IfThenStatementContext = exports.StatementExpressionContext = exports.ExpressionStatementContext = exports.LabeledStatementNoShortIfContext = exports.LabeledStatementContext = exports.EmptyStatementContext = exports.StatementWithoutTrailingSubstatementContext = exports.StatementNoShortIfContext = exports.StatementContext = void 0;\r\nexports.EqualContext = exports.AndExpressionContext = exports.BitandContext = exports.ExclusiveOrExpressionContext = exports.CaretContext = exports.InclusiveOrExpressionContext = exports.BitorContext = exports.ConditionalAndExpressionContext = exports.AndContext = exports.ConditionalOrExpressionContext = exports.OrContext = exports.ConditionalExpressionContext = exports.AssignmentOperatorContext = exports.LeftHandSideContext = exports.AssignmentContext = exports.AssignmentExpressionContext = exports.LambdaBodyContext = exports.InferredFormalParameterListContext = exports.LambdaParametersContext = exports.LambdaExpressionContext = exports.ExpressionContext = exports.ConstantExpressionContext = exports.DimExprContext = exports.DimExprsContext = exports.ArrayCreationExpressionContext = exports.MethodReference_lfno_primaryContext = exports.MethodReference_lf_primaryContext = exports.MethodReferenceContext = exports.ArgumentListContext = exports.MethodInvocation_lfno_primaryContext = exports.MethodInvocation_lf_primaryContext = exports.IdentContext = exports.ReceiverContext = exports.ReceiversContext = exports.MethodInvocationContext = exports.ArrayAccess_lfno_primaryContext = exports.ArrayAccess_lf_primaryContext = exports.ArrayAccessContext = exports.FieldAccess_lfno_primaryContext = exports.FieldAccess_lf_primaryContext = exports.FieldAccessContext = exports.TypeArgumentsOrDiamondContext = exports.ClassInstanceCreationExpression_lfno_primaryContext = exports.ClassInstanceCreationExpression_lf_primaryContext = exports.ClassInstanceCreationExpressionContext = exports.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext = exports.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext = exports.PrimaryNoNewArray_lfno_primaryContext = exports.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext = exports.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext = void 0;\r\nexports.CastExpressionContext = exports.PostDecrementExpression_lf_postfixExpressionContext = exports.PostDecrementExpressionContext = exports.PostIncrementExpression_lf_postfixExpressionContext = exports.PostIncrementExpressionContext = exports.PostfixExpressionContext = exports.UnaryExpressionNotPlusMinusContext = exports.BangContext = exports.TildeContext = exports.PreDecrementExpressionContext = exports.DecContext = exports.PreIncrementExpressionContext = exports.IncContext = exports.UnaryExpressionContext = exports.SubContext = exports.AddContext = exports.MultiplicativeExpressionContext = exports.ModContext = exports.DivContext = exports.MulContext = exports.AdditiveExpressionContext = exports.ShiftExpressionContext = exports.GtgtgtContext = exports.GtgtContext = exports.LtltContext = exports.RelationalExpressionContext = exports.InstanceofContext = exports.GeContext = exports.LeContext = exports.GtContext = exports.LtContext = exports.EqualityExpressionContext = exports.NotequalContext = void 0;\r\n// Generated from C:\\develop\\UniMapperGeneratorForTS\\net.unicoen\\..\\UniMapperGenerator\\src-gen\\Java8.g4 by ANTLR 4.6-SNAPSHOT\r\n// @ts-nocheck\r\nconst ATN_1 = __webpack_require__(/*! antlr4ts/atn/ATN */ \"./node_modules/antlr4ts/atn/ATN.js\");\r\nconst ATNDeserializer_1 = __webpack_require__(/*! antlr4ts/atn/ATNDeserializer */ \"./node_modules/antlr4ts/atn/ATNDeserializer.js\");\r\nconst FailedPredicateException_1 = __webpack_require__(/*! antlr4ts/FailedPredicateException */ \"./node_modules/antlr4ts/FailedPredicateException.js\");\r\nconst NoViableAltException_1 = __webpack_require__(/*! antlr4ts/NoViableAltException */ \"./node_modules/antlr4ts/NoViableAltException.js\");\r\nconst Parser_1 = __webpack_require__(/*! antlr4ts/Parser */ \"./node_modules/antlr4ts/Parser.js\");\r\nconst ParserRuleContext_1 = __webpack_require__(/*! antlr4ts/ParserRuleContext */ \"./node_modules/antlr4ts/ParserRuleContext.js\");\r\nconst ParserATNSimulator_1 = __webpack_require__(/*! antlr4ts/atn/ParserATNSimulator */ \"./node_modules/antlr4ts/atn/ParserATNSimulator.js\");\r\nconst RecognitionException_1 = __webpack_require__(/*! antlr4ts/RecognitionException */ \"./node_modules/antlr4ts/RecognitionException.js\");\r\nconst Token_1 = __webpack_require__(/*! antlr4ts/Token */ \"./node_modules/antlr4ts/Token.js\");\r\nconst VocabularyImpl_1 = __webpack_require__(/*! antlr4ts/VocabularyImpl */ \"./node_modules/antlr4ts/VocabularyImpl.js\");\r\nconst Utils = __webpack_require__(/*! antlr4ts/misc/Utils */ \"./node_modules/antlr4ts/misc/Utils.js\");\r\nclass Java8Parser extends Parser_1.Parser {\r\n    constructor(input) {\r\n        super(input);\r\n        this._interp = new ParserATNSimulator_1.ParserATNSimulator(Java8Parser._ATN, this);\r\n    }\r\n    // @Override\r\n    // @NotNull\r\n    get vocabulary() {\r\n        return Java8Parser.VOCABULARY;\r\n    }\r\n    // tslint:enable:no-trailing-whitespace\r\n    // @Override\r\n    get grammarFileName() {\r\n        return 'Java8.g4';\r\n    }\r\n    // @Override\r\n    get ruleNames() {\r\n        return Java8Parser.ruleNames;\r\n    }\r\n    // @Override\r\n    get serializedATN() {\r\n        return Java8Parser._serializedATN;\r\n    }\r\n    // @RuleVersion(0)\r\n    translationunit() {\r\n        let _localctx = new TranslationunitContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 0, Java8Parser.RULE_translationunit);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 565;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 0, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 564;\r\n                            this.compilationUnit();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    literal() {\r\n        let _localctx = new LiteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 2, Java8Parser.RULE_literal);\r\n        try {\r\n            this.state = 573;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.IntegerLiteral:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 567;\r\n                        this.integerLiteral();\r\n                    }\r\n                    break;\r\n                case Java8Parser.FloatingPointLiteral:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 568;\r\n                        this.floatingPointLiteral();\r\n                    }\r\n                    break;\r\n                case Java8Parser.BooleanLiteral:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 569;\r\n                        this.booleanLiteral();\r\n                    }\r\n                    break;\r\n                case Java8Parser.CharacterLiteral:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 570;\r\n                        this.characterLiteral();\r\n                    }\r\n                    break;\r\n                case Java8Parser.StringLiteral:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 571;\r\n                        this.stringLiteral();\r\n                    }\r\n                    break;\r\n                case Java8Parser.NullLiteral:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 572;\r\n                        this.nullLiteral();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    integerLiteral() {\r\n        let _localctx = new IntegerLiteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 4, Java8Parser.RULE_integerLiteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 575;\r\n                this.match(Java8Parser.IntegerLiteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    floatingPointLiteral() {\r\n        let _localctx = new FloatingPointLiteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 6, Java8Parser.RULE_floatingPointLiteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 577;\r\n                this.match(Java8Parser.FloatingPointLiteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    booleanLiteral() {\r\n        let _localctx = new BooleanLiteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 8, Java8Parser.RULE_booleanLiteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 579;\r\n                this.match(Java8Parser.BooleanLiteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    stringLiteral() {\r\n        let _localctx = new StringLiteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 10, Java8Parser.RULE_stringLiteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 581;\r\n                this.match(Java8Parser.StringLiteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    characterLiteral() {\r\n        let _localctx = new CharacterLiteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 12, Java8Parser.RULE_characterLiteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 583;\r\n                this.match(Java8Parser.CharacterLiteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    nullLiteral() {\r\n        let _localctx = new NullLiteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 14, Java8Parser.RULE_nullLiteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 585;\r\n                this.match(Java8Parser.NullLiteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    type() {\r\n        let _localctx = new TypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 16, Java8Parser.RULE_type);\r\n        try {\r\n            this.state = 589;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 587;\r\n                        this.primitiveType();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 588;\r\n                        this.referenceType();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primitiveType() {\r\n        let _localctx = new PrimitiveTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 18, Java8Parser.RULE_primitiveType);\r\n        let _la;\r\n        try {\r\n            this.state = 605;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 5, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 594;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 591;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 596;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 597;\r\n                        this.numericType();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 601;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 598;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 603;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 604;\r\n                        this.match(Java8Parser.BOOLEAN);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    numericType() {\r\n        let _localctx = new NumericTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 20, Java8Parser.RULE_numericType);\r\n        try {\r\n            this.state = 609;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.BYTE:\r\n                case Java8Parser.CHAR:\r\n                case Java8Parser.INT:\r\n                case Java8Parser.LONG:\r\n                case Java8Parser.SHORT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 607;\r\n                        this.integralType();\r\n                    }\r\n                    break;\r\n                case Java8Parser.DOUBLE:\r\n                case Java8Parser.FLOAT:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 608;\r\n                        this.floatingPointType();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    integralType() {\r\n        let _localctx = new IntegralTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 22, Java8Parser.RULE_integralType);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 611;\r\n                _la = this._input.LA(1);\r\n                if (!(((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG))) !==\r\n                        0) ||\r\n                    _la === Java8Parser.SHORT)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    floatingPointType() {\r\n        let _localctx = new FloatingPointTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 24, Java8Parser.RULE_floatingPointType);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 613;\r\n                _la = this._input.LA(1);\r\n                if (!(_la === Java8Parser.DOUBLE || _la === Java8Parser.FLOAT)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    referenceType() {\r\n        let _localctx = new ReferenceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 26, Java8Parser.RULE_referenceType);\r\n        try {\r\n            this.state = 618;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 615;\r\n                        this.classOrInterfaceType();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 616;\r\n                        this.typeVariable();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 617;\r\n                        this.arrayType();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classOrInterfaceType() {\r\n        let _localctx = new ClassOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 28, Java8Parser.RULE_classOrInterfaceType);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 622;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 8, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 620;\r\n                            this.classType_lfno_classOrInterfaceType();\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 621;\r\n                            this.interfaceType_lfno_classOrInterfaceType();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 628;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 10, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            this.state = 626;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 9, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        this.state = 624;\r\n                                        this.classType_lf_classOrInterfaceType();\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        this.state = 625;\r\n                                        this.interfaceType_lf_classOrInterfaceType();\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 630;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 10, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classType() {\r\n        let _localctx = new ClassTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 30, Java8Parser.RULE_classType);\r\n        let _la;\r\n        try {\r\n            this.state = 653;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 15, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 634;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 631;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 636;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 637;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 639;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 638;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 641;\r\n                        this.classOrInterfaceType();\r\n                        this.state = 642;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 646;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 643;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 648;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 649;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 651;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 650;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classType_lf_classOrInterfaceType() {\r\n        let _localctx = new ClassType_lf_classOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 32, Java8Parser.RULE_classType_lf_classOrInterfaceType);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 655;\r\n                this.match(Java8Parser.DOT);\r\n                this.state = 659;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 656;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 661;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 662;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 664;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 17, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 663;\r\n                            this.typeArguments();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classType_lfno_classOrInterfaceType() {\r\n        let _localctx = new ClassType_lfno_classOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 34, Java8Parser.RULE_classType_lfno_classOrInterfaceType);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 669;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 666;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 671;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 672;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 674;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 19, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 673;\r\n                            this.typeArguments();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceType() {\r\n        let _localctx = new InterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 36, Java8Parser.RULE_interfaceType);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 676;\r\n                this.classType();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceType_lf_classOrInterfaceType() {\r\n        let _localctx = new InterfaceType_lf_classOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 38, Java8Parser.RULE_interfaceType_lf_classOrInterfaceType);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 678;\r\n                this.classType_lf_classOrInterfaceType();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceType_lfno_classOrInterfaceType() {\r\n        let _localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 40, Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 680;\r\n                this.classType_lfno_classOrInterfaceType();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeVariable() {\r\n        let _localctx = new TypeVariableContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 42, Java8Parser.RULE_typeVariable);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 685;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 682;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 687;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 688;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    arrayType() {\r\n        let _localctx = new ArrayTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 44, Java8Parser.RULE_arrayType);\r\n        try {\r\n            this.state = 699;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 21, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 690;\r\n                        this.primitiveType();\r\n                        this.state = 691;\r\n                        this.dims();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 693;\r\n                        this.classOrInterfaceType();\r\n                        this.state = 694;\r\n                        this.dims();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 696;\r\n                        this.typeVariable();\r\n                        this.state = 697;\r\n                        this.dims();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    dims() {\r\n        let _localctx = new DimsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 46, Java8Parser.RULE_dims);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 704;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 701;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 706;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 707;\r\n                this.match(Java8Parser.LBRACK);\r\n                this.state = 708;\r\n                this.match(Java8Parser.RBRACK);\r\n                this.state = 719;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 24, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 712;\r\n                                this._errHandler.sync(this);\r\n                                _la = this._input.LA(1);\r\n                                while (_la === Java8Parser.AT) {\r\n                                    {\r\n                                        {\r\n                                            this.state = 709;\r\n                                            this.annotation();\r\n                                        }\r\n                                    }\r\n                                    this.state = 714;\r\n                                    this._errHandler.sync(this);\r\n                                    _la = this._input.LA(1);\r\n                                }\r\n                                this.state = 715;\r\n                                this.match(Java8Parser.LBRACK);\r\n                                this.state = 716;\r\n                                this.match(Java8Parser.RBRACK);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 721;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 24, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeParameter() {\r\n        let _localctx = new TypeParameterContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 48, Java8Parser.RULE_typeParameter);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 725;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 722;\r\n                            this.typeParameterModifier();\r\n                        }\r\n                    }\r\n                    this.state = 727;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 728;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 730;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.EXTENDS) {\r\n                    {\r\n                        this.state = 729;\r\n                        this.typeBound();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeParameterModifier() {\r\n        let _localctx = new TypeParameterModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 50, Java8Parser.RULE_typeParameterModifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 732;\r\n                this.annotation();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeBound() {\r\n        let _localctx = new TypeBoundContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 52, Java8Parser.RULE_typeBound);\r\n        let _la;\r\n        try {\r\n            this.state = 744;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 28, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 734;\r\n                        this.match(Java8Parser.EXTENDS);\r\n                        this.state = 735;\r\n                        this.typeVariable();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 736;\r\n                        this.match(Java8Parser.EXTENDS);\r\n                        this.state = 737;\r\n                        this.classOrInterfaceType();\r\n                        this.state = 741;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.BITAND) {\r\n                            {\r\n                                {\r\n                                    this.state = 738;\r\n                                    this.additionalBound();\r\n                                }\r\n                            }\r\n                            this.state = 743;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    additionalBound() {\r\n        let _localctx = new AdditionalBoundContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 54, Java8Parser.RULE_additionalBound);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 746;\r\n                this.match(Java8Parser.BITAND);\r\n                this.state = 747;\r\n                this.interfaceType();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeArguments() {\r\n        let _localctx = new TypeArgumentsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 56, Java8Parser.RULE_typeArguments);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 749;\r\n                this.match(Java8Parser.LT);\r\n                this.state = 750;\r\n                this.typeArgumentList();\r\n                this.state = 751;\r\n                this.match(Java8Parser.GT);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeArgumentList() {\r\n        let _localctx = new TypeArgumentListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 58, Java8Parser.RULE_typeArgumentList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 753;\r\n                this.typeArgument();\r\n                this.state = 758;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 754;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 755;\r\n                            this.typeArgument();\r\n                        }\r\n                    }\r\n                    this.state = 760;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeArgument() {\r\n        let _localctx = new TypeArgumentContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 60, Java8Parser.RULE_typeArgument);\r\n        try {\r\n            this.state = 763;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 30, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 761;\r\n                        this.referenceType();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 762;\r\n                        this.wildcard();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    wildcard() {\r\n        let _localctx = new WildcardContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 62, Java8Parser.RULE_wildcard);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 768;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 765;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 770;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 771;\r\n                this.match(Java8Parser.QUESTION);\r\n                this.state = 773;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.EXTENDS || _la === Java8Parser.SUPER) {\r\n                    {\r\n                        this.state = 772;\r\n                        this.wildcardBounds();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    wildcardBounds() {\r\n        let _localctx = new WildcardBoundsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 64, Java8Parser.RULE_wildcardBounds);\r\n        try {\r\n            this.state = 779;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.EXTENDS:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 775;\r\n                        this.match(Java8Parser.EXTENDS);\r\n                        this.state = 776;\r\n                        this.referenceType();\r\n                    }\r\n                    break;\r\n                case Java8Parser.SUPER:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 777;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 778;\r\n                        this.referenceType();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    packageName(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new PackageNameContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 66;\r\n        this.enterRecursionRule(_localctx, 66, Java8Parser.RULE_packageName, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 782;\r\n                    this.match(Java8Parser.Identifier);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 789;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new PackageNameContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_packageName);\r\n                                this.state = 784;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 785;\r\n                                this.match(Java8Parser.DOT);\r\n                                this.state = 786;\r\n                                this.match(Java8Parser.Identifier);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 791;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeName() {\r\n        let _localctx = new TypeNameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 68, Java8Parser.RULE_typeName);\r\n        try {\r\n            this.state = 797;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 35, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 792;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 793;\r\n                        this.packageOrTypeName(0);\r\n                        this.state = 794;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 795;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeNameIdent() {\r\n        let _localctx = new TypeNameIdentContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 70, Java8Parser.RULE_typeNameIdent);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 799;\r\n                this.typeName();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    packageOrTypeName(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new PackageOrTypeNameContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 72;\r\n        this.enterRecursionRule(_localctx, 72, Java8Parser.RULE_packageOrTypeName, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 802;\r\n                    this.match(Java8Parser.Identifier);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 809;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new PackageOrTypeNameContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_packageOrTypeName);\r\n                                this.state = 804;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 805;\r\n                                this.match(Java8Parser.DOT);\r\n                                this.state = 806;\r\n                                this.match(Java8Parser.Identifier);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 811;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    expressionName() {\r\n        let _localctx = new ExpressionNameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 74, Java8Parser.RULE_expressionName);\r\n        try {\r\n            this.state = 817;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 37, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 812;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 813;\r\n                        this.ambiguousName(0);\r\n                        this.state = 814;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 815;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ambiguousName(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new AmbiguousNameContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 76;\r\n        this.enterRecursionRule(_localctx, 76, Java8Parser.RULE_ambiguousName, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 820;\r\n                    this.match(Java8Parser.Identifier);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 827;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new AmbiguousNameContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_ambiguousName);\r\n                                this.state = 822;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 823;\r\n                                this.match(Java8Parser.DOT);\r\n                                this.state = 824;\r\n                                this.match(Java8Parser.Identifier);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 829;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 38, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    compilationUnit() {\r\n        let _localctx = new CompilationUnitContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 78, Java8Parser.RULE_compilationUnit);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 831;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 39, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 830;\r\n                            this.packageDeclaration();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 836;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.IMPORT) {\r\n                    {\r\n                        {\r\n                            this.state = 833;\r\n                            this.importDeclaration();\r\n                        }\r\n                    }\r\n                    this.state = 838;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 842;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.CLASS) |\r\n                            (1 << Java8Parser.ENUM) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.INTERFACE))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.SEMI - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 839;\r\n                            this.typeDeclaration();\r\n                        }\r\n                    }\r\n                    this.state = 844;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    packageDeclaration() {\r\n        let _localctx = new PackageDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 80, Java8Parser.RULE_packageDeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 848;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 845;\r\n                            this.packageModifier();\r\n                        }\r\n                    }\r\n                    this.state = 850;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 851;\r\n                this.match(Java8Parser.PACKAGE);\r\n                this.state = 852;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 857;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.DOT) {\r\n                    {\r\n                        {\r\n                            this.state = 853;\r\n                            this.match(Java8Parser.DOT);\r\n                            this.state = 854;\r\n                            this.match(Java8Parser.Identifier);\r\n                        }\r\n                    }\r\n                    this.state = 859;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 860;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    packageModifier() {\r\n        let _localctx = new PackageModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 82, Java8Parser.RULE_packageModifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 862;\r\n                this.annotation();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    importDeclaration() {\r\n        let _localctx = new ImportDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 84, Java8Parser.RULE_importDeclaration);\r\n        try {\r\n            this.state = 868;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 44, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 864;\r\n                        this.singleTypeImportDeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 865;\r\n                        this.typeImportOnDemandDeclaration();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 866;\r\n                        this.singleStaticImportDeclaration();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 867;\r\n                        this.staticImportOnDemandDeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    singleTypeImportDeclaration() {\r\n        let _localctx = new SingleTypeImportDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 86, Java8Parser.RULE_singleTypeImportDeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 870;\r\n                this.match(Java8Parser.IMPORT);\r\n                this.state = 871;\r\n                this.typeName();\r\n                this.state = 872;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeImportOnDemandDeclaration() {\r\n        let _localctx = new TypeImportOnDemandDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 88, Java8Parser.RULE_typeImportOnDemandDeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 874;\r\n                this.match(Java8Parser.IMPORT);\r\n                this.state = 875;\r\n                this.packageOrTypeName(0);\r\n                this.state = 876;\r\n                this.match(Java8Parser.DOT);\r\n                this.state = 877;\r\n                this.mul();\r\n                this.state = 878;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    singleStaticImportDeclaration() {\r\n        let _localctx = new SingleStaticImportDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 90, Java8Parser.RULE_singleStaticImportDeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 880;\r\n                this.match(Java8Parser.IMPORT);\r\n                this.state = 881;\r\n                this.match(Java8Parser.STATIC);\r\n                this.state = 882;\r\n                this.typeName();\r\n                this.state = 883;\r\n                this.match(Java8Parser.DOT);\r\n                this.state = 884;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 885;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    staticImportOnDemandDeclaration() {\r\n        let _localctx = new StaticImportOnDemandDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 92, Java8Parser.RULE_staticImportOnDemandDeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 887;\r\n                this.match(Java8Parser.IMPORT);\r\n                this.state = 888;\r\n                this.match(Java8Parser.STATIC);\r\n                this.state = 889;\r\n                this.typeName();\r\n                this.state = 890;\r\n                this.match(Java8Parser.DOT);\r\n                this.state = 891;\r\n                this.match(Java8Parser.MUL);\r\n                this.state = 892;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeDeclaration() {\r\n        let _localctx = new TypeDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 94, Java8Parser.RULE_typeDeclaration);\r\n        try {\r\n            this.state = 897;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 45, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 894;\r\n                        this.classDeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 895;\r\n                        this.interfaceDeclaration();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 896;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classDeclaration() {\r\n        let _localctx = new ClassDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 96, Java8Parser.RULE_classDeclaration);\r\n        try {\r\n            this.state = 901;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 46, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 899;\r\n                        this.normalClassDeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 900;\r\n                        this.enumDeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    normalClassDeclaration() {\r\n        let _localctx = new NormalClassDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 98, Java8Parser.RULE_normalClassDeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 903;\r\n                this.classModifiers();\r\n                this.state = 904;\r\n                this.match(Java8Parser.CLASS);\r\n                this.state = 905;\r\n                this.className();\r\n                this.state = 907;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 906;\r\n                        this.typeParameters();\r\n                    }\r\n                }\r\n                this.state = 910;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.EXTENDS) {\r\n                    {\r\n                        this.state = 909;\r\n                        this.superclass();\r\n                    }\r\n                }\r\n                this.state = 913;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.IMPLEMENTS) {\r\n                    {\r\n                        this.state = 912;\r\n                        this.superinterfaces();\r\n                    }\r\n                }\r\n                this.state = 915;\r\n                this.classBody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    className() {\r\n        let _localctx = new ClassNameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 100, Java8Parser.RULE_className);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 917;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classModifiers() {\r\n        let _localctx = new ClassModifiersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 102, Java8Parser.RULE_classModifiers);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 922;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.ABSTRACT ||\r\n                    _la === Java8Parser.FINAL ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 919;\r\n                            this.classModifier();\r\n                        }\r\n                    }\r\n                    this.state = 924;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classModifier() {\r\n        let _localctx = new ClassModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 104, Java8Parser.RULE_classModifier);\r\n        try {\r\n            this.state = 933;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 925;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.PUBLIC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 926;\r\n                        this.match(Java8Parser.PUBLIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PROTECTED:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 927;\r\n                        this.match(Java8Parser.PROTECTED);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PRIVATE:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 928;\r\n                        this.match(Java8Parser.PRIVATE);\r\n                    }\r\n                    break;\r\n                case Java8Parser.ABSTRACT:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 929;\r\n                        this.match(Java8Parser.ABSTRACT);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STATIC:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 930;\r\n                        this.match(Java8Parser.STATIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.FINAL:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 931;\r\n                        this.match(Java8Parser.FINAL);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STRICTFP:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 932;\r\n                        this.match(Java8Parser.STRICTFP);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeParameters() {\r\n        let _localctx = new TypeParametersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 106, Java8Parser.RULE_typeParameters);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 935;\r\n                this.match(Java8Parser.LT);\r\n                this.state = 936;\r\n                this.typeParameterList();\r\n                this.state = 937;\r\n                this.match(Java8Parser.GT);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeParameterList() {\r\n        let _localctx = new TypeParameterListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 108, Java8Parser.RULE_typeParameterList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 939;\r\n                this.typeParameter();\r\n                this.state = 944;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 940;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 941;\r\n                            this.typeParameter();\r\n                        }\r\n                    }\r\n                    this.state = 946;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    superclass() {\r\n        let _localctx = new SuperclassContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 110, Java8Parser.RULE_superclass);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 947;\r\n                this.match(Java8Parser.EXTENDS);\r\n                this.state = 948;\r\n                this.classType();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    superinterfaces() {\r\n        let _localctx = new SuperinterfacesContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 112, Java8Parser.RULE_superinterfaces);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 950;\r\n                this.match(Java8Parser.IMPLEMENTS);\r\n                this.state = 951;\r\n                this.interfaceTypeList();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceTypeList() {\r\n        let _localctx = new InterfaceTypeListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 114, Java8Parser.RULE_interfaceTypeList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 953;\r\n                this.interfaceType();\r\n                this.state = 958;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 954;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 955;\r\n                            this.interfaceType();\r\n                        }\r\n                    }\r\n                    this.state = 960;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classBody() {\r\n        let _localctx = new ClassBodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 116, Java8Parser.RULE_classBody);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 961;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 965;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.CLASS) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.ENUM) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.INTERFACE) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NATIVE))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.SHORT - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.SYNCHRONIZED - 33)) |\r\n                                (1 << (Java8Parser.TRANSIENT - 33)) |\r\n                                (1 << (Java8Parser.VOID - 33)) |\r\n                                (1 << (Java8Parser.VOLATILE - 33)) |\r\n                                (1 << (Java8Parser.LBRACE - 33)) |\r\n                                (1 << (Java8Parser.SEMI - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.LT ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 962;\r\n                            this.classBodyDeclaration();\r\n                        }\r\n                    }\r\n                    this.state = 967;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 968;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classBodyDeclaration() {\r\n        let _localctx = new ClassBodyDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 118, Java8Parser.RULE_classBodyDeclaration);\r\n        try {\r\n            this.state = 974;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 55, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 970;\r\n                        this.classMemberDeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 971;\r\n                        this.instanceInitializer();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 972;\r\n                        this.staticInitializer();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 973;\r\n                        this.constructorDeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classMemberDeclaration() {\r\n        let _localctx = new ClassMemberDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 120, Java8Parser.RULE_classMemberDeclaration);\r\n        try {\r\n            this.state = 981;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 56, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 976;\r\n                        this.fieldDeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 977;\r\n                        this.methodDeclaration();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 978;\r\n                        this.classDeclaration();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 979;\r\n                        this.interfaceDeclaration();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 980;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    fieldDeclaration() {\r\n        let _localctx = new FieldDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 122, Java8Parser.RULE_fieldDeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 983;\r\n                this.fieldModifiers();\r\n                this.state = 984;\r\n                this.unannType();\r\n                this.state = 985;\r\n                this.variableDeclaratorList();\r\n                this.state = 986;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    fieldModifiers() {\r\n        let _localctx = new FieldModifiersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 124, Java8Parser.RULE_fieldModifiers);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 991;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while ((((_la - 18) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 18)) &\r\n                        ((1 << (Java8Parser.FINAL - 18)) |\r\n                            (1 << (Java8Parser.PRIVATE - 18)) |\r\n                            (1 << (Java8Parser.PROTECTED - 18)) |\r\n                            (1 << (Java8Parser.PUBLIC - 18)) |\r\n                            (1 << (Java8Parser.STATIC - 18)) |\r\n                            (1 << (Java8Parser.TRANSIENT - 18)) |\r\n                            (1 << (Java8Parser.VOLATILE - 18)))) !==\r\n                        0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 988;\r\n                            this.fieldModifier();\r\n                        }\r\n                    }\r\n                    this.state = 993;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    fieldModifier() {\r\n        let _localctx = new FieldModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 126, Java8Parser.RULE_fieldModifier);\r\n        try {\r\n            this.state = 1002;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 994;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.PUBLIC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 995;\r\n                        this.match(Java8Parser.PUBLIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PROTECTED:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 996;\r\n                        this.match(Java8Parser.PROTECTED);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PRIVATE:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 997;\r\n                        this.match(Java8Parser.PRIVATE);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STATIC:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 998;\r\n                        this.match(Java8Parser.STATIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.FINAL:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 999;\r\n                        this.match(Java8Parser.FINAL);\r\n                    }\r\n                    break;\r\n                case Java8Parser.TRANSIENT:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1000;\r\n                        this.match(Java8Parser.TRANSIENT);\r\n                    }\r\n                    break;\r\n                case Java8Parser.VOLATILE:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 1001;\r\n                        this.match(Java8Parser.VOLATILE);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variableDeclaratorList() {\r\n        let _localctx = new VariableDeclaratorListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 128, Java8Parser.RULE_variableDeclaratorList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1004;\r\n                this.variableDeclarator();\r\n                this.state = 1009;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 1005;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 1006;\r\n                            this.variableDeclarator();\r\n                        }\r\n                    }\r\n                    this.state = 1011;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variableDeclarator() {\r\n        let _localctx = new VariableDeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 130, Java8Parser.RULE_variableDeclarator);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1012;\r\n                this.variableDeclaratorId();\r\n                this.state = 1015;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.ASSIGN) {\r\n                    {\r\n                        this.state = 1013;\r\n                        this.match(Java8Parser.ASSIGN);\r\n                        this.state = 1014;\r\n                        this.variableInitializer();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variableDeclaratorId() {\r\n        let _localctx = new VariableDeclaratorIdContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 132, Java8Parser.RULE_variableDeclaratorId);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1017;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1019;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LBRACK || _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1018;\r\n                        this.dims();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variableInitializer() {\r\n        let _localctx = new VariableInitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 134, Java8Parser.RULE_variableInitializer);\r\n        try {\r\n            this.state = 1023;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.BOOLEAN:\r\n                case Java8Parser.BYTE:\r\n                case Java8Parser.CHAR:\r\n                case Java8Parser.DOUBLE:\r\n                case Java8Parser.FLOAT:\r\n                case Java8Parser.INT:\r\n                case Java8Parser.LONG:\r\n                case Java8Parser.NEW:\r\n                case Java8Parser.SHORT:\r\n                case Java8Parser.SUPER:\r\n                case Java8Parser.THIS:\r\n                case Java8Parser.VOID:\r\n                case Java8Parser.IntegerLiteral:\r\n                case Java8Parser.FloatingPointLiteral:\r\n                case Java8Parser.BooleanLiteral:\r\n                case Java8Parser.CharacterLiteral:\r\n                case Java8Parser.StringLiteral:\r\n                case Java8Parser.NullLiteral:\r\n                case Java8Parser.LPAREN:\r\n                case Java8Parser.BANG:\r\n                case Java8Parser.TILDE:\r\n                case Java8Parser.INC:\r\n                case Java8Parser.DEC:\r\n                case Java8Parser.ADD:\r\n                case Java8Parser.SUB:\r\n                case Java8Parser.Identifier:\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1021;\r\n                        this.expression();\r\n                    }\r\n                    break;\r\n                case Java8Parser.LBRACE:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1022;\r\n                        this.arrayInitializer();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannType() {\r\n        let _localctx = new UnannTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 136, Java8Parser.RULE_unannType);\r\n        try {\r\n            this.state = 1027;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 63, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1025;\r\n                        this.unannPrimitiveType();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1026;\r\n                        this.unannReferenceType();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannPrimitiveType() {\r\n        let _localctx = new UnannPrimitiveTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 138, Java8Parser.RULE_unannPrimitiveType);\r\n        try {\r\n            this.state = 1031;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.BYTE:\r\n                case Java8Parser.CHAR:\r\n                case Java8Parser.DOUBLE:\r\n                case Java8Parser.FLOAT:\r\n                case Java8Parser.INT:\r\n                case Java8Parser.LONG:\r\n                case Java8Parser.SHORT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1029;\r\n                        this.numericType();\r\n                    }\r\n                    break;\r\n                case Java8Parser.BOOLEAN:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1030;\r\n                        this.match(Java8Parser.BOOLEAN);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannReferenceType() {\r\n        let _localctx = new UnannReferenceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 140, Java8Parser.RULE_unannReferenceType);\r\n        try {\r\n            this.state = 1036;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 65, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1033;\r\n                        this.unannClassOrInterfaceType();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1034;\r\n                        this.unannTypeVariable();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1035;\r\n                        this.unannArrayType();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannClassOrInterfaceType() {\r\n        let _localctx = new UnannClassOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 142, Java8Parser.RULE_unannClassOrInterfaceType);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1040;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 66, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1038;\r\n                            this.unannClassType_lfno_unannClassOrInterfaceType();\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 1039;\r\n                            this.unannInterfaceType_lfno_unannClassOrInterfaceType();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 1046;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            this.state = 1044;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 67, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        this.state = 1042;\r\n                                        this.unannClassType_lf_unannClassOrInterfaceType();\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        this.state = 1043;\r\n                                        this.unannInterfaceType_lf_unannClassOrInterfaceType();\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1048;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannClassType() {\r\n        let _localctx = new UnannClassTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 144, Java8Parser.RULE_unannClassType);\r\n        let _la;\r\n        try {\r\n            this.state = 1065;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 72, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1049;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 1051;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 1050;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1053;\r\n                        this.unannClassOrInterfaceType();\r\n                        this.state = 1054;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 1058;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 1055;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 1060;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 1061;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 1063;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 1062;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannClassType_lf_unannClassOrInterfaceType() {\r\n        let _localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 146, Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1067;\r\n                this.match(Java8Parser.DOT);\r\n                this.state = 1071;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1068;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 1073;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1074;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1076;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 1075;\r\n                        this.typeArguments();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannClassType_lfno_unannClassOrInterfaceType() {\r\n        let _localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 148, Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1078;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1080;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 1079;\r\n                        this.typeArguments();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannInterfaceType() {\r\n        let _localctx = new UnannInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 150, Java8Parser.RULE_unannInterfaceType);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1082;\r\n                this.unannClassType();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannInterfaceType_lf_unannClassOrInterfaceType() {\r\n        let _localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 152, Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1084;\r\n                this.unannClassType_lf_unannClassOrInterfaceType();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannInterfaceType_lfno_unannClassOrInterfaceType() {\r\n        let _localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 154, Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1086;\r\n                this.unannClassType_lfno_unannClassOrInterfaceType();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannTypeVariable() {\r\n        let _localctx = new UnannTypeVariableContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 156, Java8Parser.RULE_unannTypeVariable);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1088;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unannArrayType() {\r\n        let _localctx = new UnannArrayTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 158, Java8Parser.RULE_unannArrayType);\r\n        try {\r\n            this.state = 1099;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 76, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1090;\r\n                        this.unannPrimitiveType();\r\n                        this.state = 1091;\r\n                        this.dims();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1093;\r\n                        this.unannClassOrInterfaceType();\r\n                        this.state = 1094;\r\n                        this.dims();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1096;\r\n                        this.unannTypeVariable();\r\n                        this.state = 1097;\r\n                        this.dims();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodDeclaration() {\r\n        let _localctx = new MethodDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 160, Java8Parser.RULE_methodDeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1104;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.NATIVE))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.SYNCHRONIZED - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1101;\r\n                            this.methodModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1106;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1107;\r\n                this.methodHeader();\r\n                this.state = 1108;\r\n                this.methodBody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodModifier() {\r\n        let _localctx = new MethodModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 162, Java8Parser.RULE_methodModifier);\r\n        try {\r\n            this.state = 1120;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1110;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.PUBLIC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1111;\r\n                        this.match(Java8Parser.PUBLIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PROTECTED:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1112;\r\n                        this.match(Java8Parser.PROTECTED);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PRIVATE:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1113;\r\n                        this.match(Java8Parser.PRIVATE);\r\n                    }\r\n                    break;\r\n                case Java8Parser.ABSTRACT:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1114;\r\n                        this.match(Java8Parser.ABSTRACT);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STATIC:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1115;\r\n                        this.match(Java8Parser.STATIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.FINAL:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1116;\r\n                        this.match(Java8Parser.FINAL);\r\n                    }\r\n                    break;\r\n                case Java8Parser.SYNCHRONIZED:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 1117;\r\n                        this.match(Java8Parser.SYNCHRONIZED);\r\n                    }\r\n                    break;\r\n                case Java8Parser.NATIVE:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 1118;\r\n                        this.match(Java8Parser.NATIVE);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STRICTFP:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 1119;\r\n                        this.match(Java8Parser.STRICTFP);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodHeader() {\r\n        let _localctx = new MethodHeaderContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 164, Java8Parser.RULE_methodHeader);\r\n        let _la;\r\n        try {\r\n            this.state = 1139;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.BOOLEAN:\r\n                case Java8Parser.BYTE:\r\n                case Java8Parser.CHAR:\r\n                case Java8Parser.DOUBLE:\r\n                case Java8Parser.FLOAT:\r\n                case Java8Parser.INT:\r\n                case Java8Parser.LONG:\r\n                case Java8Parser.SHORT:\r\n                case Java8Parser.VOID:\r\n                case Java8Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1122;\r\n                        this.result();\r\n                        this.state = 1123;\r\n                        this.methodDeclarator();\r\n                        this.state = 1125;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.THROWS) {\r\n                            {\r\n                                this.state = 1124;\r\n                                this.throws_();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case Java8Parser.LT:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1127;\r\n                        this.typeParameters();\r\n                        this.state = 1131;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 1128;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 1133;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 1134;\r\n                        this.result();\r\n                        this.state = 1135;\r\n                        this.methodDeclarator();\r\n                        this.state = 1137;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.THROWS) {\r\n                            {\r\n                                this.state = 1136;\r\n                                this.throws_();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    result() {\r\n        let _localctx = new ResultContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 166, Java8Parser.RULE_result);\r\n        try {\r\n            this.state = 1143;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.BOOLEAN:\r\n                case Java8Parser.BYTE:\r\n                case Java8Parser.CHAR:\r\n                case Java8Parser.DOUBLE:\r\n                case Java8Parser.FLOAT:\r\n                case Java8Parser.INT:\r\n                case Java8Parser.LONG:\r\n                case Java8Parser.SHORT:\r\n                case Java8Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1141;\r\n                        this.unannType();\r\n                    }\r\n                    break;\r\n                case Java8Parser.VOID:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1142;\r\n                        this.match(Java8Parser.VOID);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodDeclarator() {\r\n        let _localctx = new MethodDeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 168, Java8Parser.RULE_methodDeclarator);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1145;\r\n                this.methodName();\r\n                this.state = 1146;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1148;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG))) !==\r\n                        0) ||\r\n                    _la === Java8Parser.SHORT ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1147;\r\n                        this.formalParameterList();\r\n                    }\r\n                }\r\n                this.state = 1150;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1152;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LBRACK || _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1151;\r\n                        this.dims();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodName() {\r\n        let _localctx = new MethodNameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 170, Java8Parser.RULE_methodName);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1154;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    formalParameterList() {\r\n        let _localctx = new FormalParameterListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 172, Java8Parser.RULE_formalParameterList);\r\n        try {\r\n            this.state = 1161;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 86, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1156;\r\n                        this.formalParameters();\r\n                        this.state = 1157;\r\n                        this.match(Java8Parser.COMMA);\r\n                        this.state = 1158;\r\n                        this.lastFormalParameter();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1160;\r\n                        this.lastFormalParameter();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    formalParameters() {\r\n        let _localctx = new FormalParametersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 174, Java8Parser.RULE_formalParameters);\r\n        try {\r\n            let _alt;\r\n            this.state = 1179;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 89, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1163;\r\n                        this.formalParameter();\r\n                        this.state = 1168;\r\n                        this._errHandler.sync(this);\r\n                        _alt = this.interpreter.adaptivePredict(this._input, 87, this._ctx);\r\n                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                            if (_alt === 1) {\r\n                                {\r\n                                    {\r\n                                        this.state = 1164;\r\n                                        this.match(Java8Parser.COMMA);\r\n                                        this.state = 1165;\r\n                                        this.formalParameter();\r\n                                    }\r\n                                }\r\n                            }\r\n                            this.state = 1170;\r\n                            this._errHandler.sync(this);\r\n                            _alt = this.interpreter.adaptivePredict(this._input, 87, this._ctx);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1171;\r\n                        this.receiverParameter();\r\n                        this.state = 1176;\r\n                        this._errHandler.sync(this);\r\n                        _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);\r\n                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                            if (_alt === 1) {\r\n                                {\r\n                                    {\r\n                                        this.state = 1172;\r\n                                        this.match(Java8Parser.COMMA);\r\n                                        this.state = 1173;\r\n                                        this.formalParameter();\r\n                                    }\r\n                                }\r\n                            }\r\n                            this.state = 1178;\r\n                            this._errHandler.sync(this);\r\n                            _alt = this.interpreter.adaptivePredict(this._input, 88, this._ctx);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    formalParameter() {\r\n        let _localctx = new FormalParameterContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 176, Java8Parser.RULE_formalParameter);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1184;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1181;\r\n                            this.variableModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1186;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1187;\r\n                this.unannType();\r\n                this.state = 1188;\r\n                this.parameterDeclaratorIds();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    parameterDeclaratorIds() {\r\n        let _localctx = new ParameterDeclaratorIdsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 178, Java8Parser.RULE_parameterDeclaratorIds);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1190;\r\n                this.parameterDeclaratorId();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    parameterDeclaratorId() {\r\n        let _localctx = new ParameterDeclaratorIdContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 180, Java8Parser.RULE_parameterDeclaratorId);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1192;\r\n                this.parameterName();\r\n                this.state = 1194;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LBRACK || _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1193;\r\n                        this.dims();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    parameterName() {\r\n        let _localctx = new ParameterNameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 182, Java8Parser.RULE_parameterName);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1196;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variableModifier() {\r\n        let _localctx = new VariableModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 184, Java8Parser.RULE_variableModifier);\r\n        try {\r\n            this.state = 1200;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1198;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.FINAL:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1199;\r\n                        this.match(Java8Parser.FINAL);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lastFormalParameter() {\r\n        let _localctx = new LastFormalParameterContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 186, Java8Parser.RULE_lastFormalParameter);\r\n        let _la;\r\n        try {\r\n            this.state = 1219;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 95, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1205;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 1202;\r\n                                    this.variableModifier();\r\n                                }\r\n                            }\r\n                            this.state = 1207;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 1208;\r\n                        this.unannType();\r\n                        this.state = 1212;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 1209;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 1214;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 1215;\r\n                        this.match(Java8Parser.ELLIPSIS);\r\n                        this.state = 1216;\r\n                        this.variableDeclaratorId();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1218;\r\n                        this.formalParameter();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    receiverParameter() {\r\n        let _localctx = new ReceiverParameterContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 188, Java8Parser.RULE_receiverParameter);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1224;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1221;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 1226;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1227;\r\n                this.unannType();\r\n                this.state = 1230;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.Identifier) {\r\n                    {\r\n                        this.state = 1228;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 1229;\r\n                        this.match(Java8Parser.DOT);\r\n                    }\r\n                }\r\n                this.state = 1232;\r\n                this.match(Java8Parser.THIS);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    throws_() {\r\n        let _localctx = new Throws_Context(this._ctx, this.state);\r\n        this.enterRule(_localctx, 190, Java8Parser.RULE_throws_);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1234;\r\n                this.match(Java8Parser.THROWS);\r\n                this.state = 1235;\r\n                this.exceptionTypeList();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    exceptionTypeList() {\r\n        let _localctx = new ExceptionTypeListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 192, Java8Parser.RULE_exceptionTypeList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1237;\r\n                this.exceptionType();\r\n                this.state = 1242;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 1238;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 1239;\r\n                            this.exceptionType();\r\n                        }\r\n                    }\r\n                    this.state = 1244;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    exceptionType() {\r\n        let _localctx = new ExceptionTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 194, Java8Parser.RULE_exceptionType);\r\n        try {\r\n            this.state = 1247;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 99, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1245;\r\n                        this.classType();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1246;\r\n                        this.typeVariable();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodBody() {\r\n        let _localctx = new MethodBodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 196, Java8Parser.RULE_methodBody);\r\n        try {\r\n            this.state = 1251;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.LBRACE:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1249;\r\n                        this.block();\r\n                    }\r\n                    break;\r\n                case Java8Parser.SEMI:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1250;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    instanceInitializer() {\r\n        let _localctx = new InstanceInitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 198, Java8Parser.RULE_instanceInitializer);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1253;\r\n                this.block();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    staticInitializer() {\r\n        let _localctx = new StaticInitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 200, Java8Parser.RULE_staticInitializer);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1255;\r\n                this.match(Java8Parser.STATIC);\r\n                this.state = 1256;\r\n                this.block();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constructorDeclaration() {\r\n        let _localctx = new ConstructorDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 202, Java8Parser.RULE_constructorDeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1261;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while ((((_la - 33) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 33)) &\r\n                        ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                            (1 << (Java8Parser.PROTECTED - 33)) |\r\n                            (1 << (Java8Parser.PUBLIC - 33)))) !==\r\n                        0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1258;\r\n                            this.constructorModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1263;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1264;\r\n                this.constructorDeclarator();\r\n                this.state = 1266;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.THROWS) {\r\n                    {\r\n                        this.state = 1265;\r\n                        this.throws_();\r\n                    }\r\n                }\r\n                this.state = 1268;\r\n                this.constructorBody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constructorModifier() {\r\n        let _localctx = new ConstructorModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 204, Java8Parser.RULE_constructorModifier);\r\n        try {\r\n            this.state = 1274;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1270;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.PUBLIC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1271;\r\n                        this.match(Java8Parser.PUBLIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PROTECTED:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1272;\r\n                        this.match(Java8Parser.PROTECTED);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PRIVATE:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1273;\r\n                        this.match(Java8Parser.PRIVATE);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constructorDeclarator() {\r\n        let _localctx = new ConstructorDeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 206, Java8Parser.RULE_constructorDeclarator);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1277;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 1276;\r\n                        this.typeParameters();\r\n                    }\r\n                }\r\n                this.state = 1279;\r\n                this.simpleTypeName();\r\n                this.state = 1280;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1282;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG))) !==\r\n                        0) ||\r\n                    _la === Java8Parser.SHORT ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1281;\r\n                        this.formalParameterList();\r\n                    }\r\n                }\r\n                this.state = 1284;\r\n                this.match(Java8Parser.RPAREN);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    simpleTypeName() {\r\n        let _localctx = new SimpleTypeNameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 208, Java8Parser.RULE_simpleTypeName);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1286;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constructorBody() {\r\n        let _localctx = new ConstructorBodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 210, Java8Parser.RULE_constructorBody);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1288;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 1290;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 106, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1289;\r\n                            this.explicitConstructorInvocation();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 1293;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.ASSERT) |\r\n                            (1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BREAK) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.CLASS) |\r\n                            (1 << Java8Parser.CONTINUE) |\r\n                            (1 << Java8Parser.DO) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.ENUM) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.FOR) |\r\n                            (1 << Java8Parser.IF) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.RETURN - 33)) |\r\n                                (1 << (Java8Parser.SHORT - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.SUPER - 33)) |\r\n                                (1 << (Java8Parser.SWITCH - 33)) |\r\n                                (1 << (Java8Parser.SYNCHRONIZED - 33)) |\r\n                                (1 << (Java8Parser.THIS - 33)) |\r\n                                (1 << (Java8Parser.THROW - 33)) |\r\n                                (1 << (Java8Parser.TRY - 33)) |\r\n                                (1 << (Java8Parser.VOID - 33)) |\r\n                                (1 << (Java8Parser.WHILE - 33)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 33)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 33)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 33)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 33)) |\r\n                                (1 << (Java8Parser.StringLiteral - 33)) |\r\n                                (1 << (Java8Parser.NullLiteral - 33)) |\r\n                                (1 << (Java8Parser.LPAREN - 33)) |\r\n                                (1 << (Java8Parser.LBRACE - 33)) |\r\n                                (1 << (Java8Parser.SEMI - 33)))) !==\r\n                            0) ||\r\n                    (((_la - 79) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 79)) &\r\n                            ((1 << (Java8Parser.INC - 79)) |\r\n                                (1 << (Java8Parser.DEC - 79)) |\r\n                                (1 << (Java8Parser.Identifier - 79)) |\r\n                                (1 << (Java8Parser.AT - 79)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1292;\r\n                        this.blockStatements();\r\n                    }\r\n                }\r\n                this.state = 1295;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    explicitConstructorInvocation() {\r\n        let _localctx = new ExplicitConstructorInvocationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 212, Java8Parser.RULE_explicitConstructorInvocation);\r\n        let _la;\r\n        try {\r\n            this.state = 1343;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 116, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1298;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 1297;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 1300;\r\n                        this.match(Java8Parser.THIS);\r\n                        this.state = 1301;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 1303;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 1302;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 1305;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 1306;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1308;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 1307;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 1310;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 1311;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 1313;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 1312;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 1315;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 1316;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1317;\r\n                        this.expressionName();\r\n                        this.state = 1318;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 1320;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 1319;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 1322;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 1323;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 1325;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 1324;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 1327;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 1328;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1330;\r\n                        this.primary();\r\n                        this.state = 1331;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 1333;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 1332;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 1335;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 1336;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 1338;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 1337;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 1340;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 1341;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumDeclaration() {\r\n        let _localctx = new EnumDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 214, Java8Parser.RULE_enumDeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1348;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.ABSTRACT ||\r\n                    _la === Java8Parser.FINAL ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1345;\r\n                            this.classModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1350;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1351;\r\n                this.match(Java8Parser.ENUM);\r\n                this.state = 1352;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1354;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.IMPLEMENTS) {\r\n                    {\r\n                        this.state = 1353;\r\n                        this.superinterfaces();\r\n                    }\r\n                }\r\n                this.state = 1356;\r\n                this.enumBody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumBody() {\r\n        let _localctx = new EnumBodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 216, Java8Parser.RULE_enumBody);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1358;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 1360;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.Identifier || _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1359;\r\n                        this.enumConstantList();\r\n                    }\r\n                }\r\n                this.state = 1363;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        this.state = 1362;\r\n                        this.match(Java8Parser.COMMA);\r\n                    }\r\n                }\r\n                this.state = 1366;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.SEMI) {\r\n                    {\r\n                        this.state = 1365;\r\n                        this.enumBodyDeclarations();\r\n                    }\r\n                }\r\n                this.state = 1368;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumConstantList() {\r\n        let _localctx = new EnumConstantListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 218, Java8Parser.RULE_enumConstantList);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1370;\r\n                this.enumConstant();\r\n                this.state = 1375;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 122, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1371;\r\n                                this.match(Java8Parser.COMMA);\r\n                                this.state = 1372;\r\n                                this.enumConstant();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1377;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 122, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumConstant() {\r\n        let _localctx = new EnumConstantContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 220, Java8Parser.RULE_enumConstant);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1381;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1378;\r\n                            this.enumConstantModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1383;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1384;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1390;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LPAREN) {\r\n                    {\r\n                        this.state = 1385;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 1387;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 1386;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 1389;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                }\r\n                this.state = 1393;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LBRACE) {\r\n                    {\r\n                        this.state = 1392;\r\n                        this.classBody();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumConstantModifier() {\r\n        let _localctx = new EnumConstantModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 222, Java8Parser.RULE_enumConstantModifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1395;\r\n                this.annotation();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumBodyDeclarations() {\r\n        let _localctx = new EnumBodyDeclarationsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 224, Java8Parser.RULE_enumBodyDeclarations);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1397;\r\n                this.match(Java8Parser.SEMI);\r\n                this.state = 1401;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.CLASS) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.ENUM) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.INTERFACE) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NATIVE))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.SHORT - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.SYNCHRONIZED - 33)) |\r\n                                (1 << (Java8Parser.TRANSIENT - 33)) |\r\n                                (1 << (Java8Parser.VOID - 33)) |\r\n                                (1 << (Java8Parser.VOLATILE - 33)) |\r\n                                (1 << (Java8Parser.LBRACE - 33)) |\r\n                                (1 << (Java8Parser.SEMI - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.LT ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1398;\r\n                            this.classBodyDeclaration();\r\n                        }\r\n                    }\r\n                    this.state = 1403;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceDeclaration() {\r\n        let _localctx = new InterfaceDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 226, Java8Parser.RULE_interfaceDeclaration);\r\n        try {\r\n            this.state = 1406;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 128, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1404;\r\n                        this.normalInterfaceDeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1405;\r\n                        this.annotationTypeDeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    normalInterfaceDeclaration() {\r\n        let _localctx = new NormalInterfaceDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 228, Java8Parser.RULE_normalInterfaceDeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1408;\r\n                this.interfaceModifiers();\r\n                this.state = 1409;\r\n                this.match(Java8Parser.INTERFACE);\r\n                this.state = 1410;\r\n                this.interfaceName();\r\n                this.state = 1412;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 1411;\r\n                        this.typeParameters();\r\n                    }\r\n                }\r\n                this.state = 1415;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.EXTENDS) {\r\n                    {\r\n                        this.state = 1414;\r\n                        this.extendsInterfaces();\r\n                    }\r\n                }\r\n                this.state = 1417;\r\n                this.interfaceBody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceModifiers() {\r\n        let _localctx = new InterfaceModifiersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 230, Java8Parser.RULE_interfaceModifiers);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1422;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.ABSTRACT ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1419;\r\n                            this.interfaceModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1424;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceName() {\r\n        let _localctx = new InterfaceNameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 232, Java8Parser.RULE_interfaceName);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1425;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceModifier() {\r\n        let _localctx = new InterfaceModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 234, Java8Parser.RULE_interfaceModifier);\r\n        try {\r\n            this.state = 1434;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1427;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.PUBLIC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1428;\r\n                        this.match(Java8Parser.PUBLIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PROTECTED:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1429;\r\n                        this.match(Java8Parser.PROTECTED);\r\n                    }\r\n                    break;\r\n                case Java8Parser.PRIVATE:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1430;\r\n                        this.match(Java8Parser.PRIVATE);\r\n                    }\r\n                    break;\r\n                case Java8Parser.ABSTRACT:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1431;\r\n                        this.match(Java8Parser.ABSTRACT);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STATIC:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1432;\r\n                        this.match(Java8Parser.STATIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STRICTFP:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1433;\r\n                        this.match(Java8Parser.STRICTFP);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    extendsInterfaces() {\r\n        let _localctx = new ExtendsInterfacesContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 236, Java8Parser.RULE_extendsInterfaces);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1436;\r\n                this.match(Java8Parser.EXTENDS);\r\n                this.state = 1437;\r\n                this.interfaceTypeList();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceBody() {\r\n        let _localctx = new InterfaceBodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 238, Java8Parser.RULE_interfaceBody);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1439;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 1443;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.CLASS) |\r\n                            (1 << Java8Parser.DEFAULT) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.ENUM) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.INTERFACE) |\r\n                            (1 << Java8Parser.LONG))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.SHORT - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.VOID - 33)) |\r\n                                (1 << (Java8Parser.SEMI - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.LT ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1440;\r\n                            this.interfaceMemberDeclaration();\r\n                        }\r\n                    }\r\n                    this.state = 1445;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1446;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceMemberDeclaration() {\r\n        let _localctx = new InterfaceMemberDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 240, Java8Parser.RULE_interfaceMemberDeclaration);\r\n        try {\r\n            this.state = 1453;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 134, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1448;\r\n                        this.constantDeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1449;\r\n                        this.interfaceMethodDeclaration();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1450;\r\n                        this.classDeclaration();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1451;\r\n                        this.interfaceDeclaration();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1452;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constantDeclaration() {\r\n        let _localctx = new ConstantDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 242, Java8Parser.RULE_constantDeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1455;\r\n                this.constantModifiers();\r\n                this.state = 1456;\r\n                this.unannType();\r\n                this.state = 1457;\r\n                this.variableDeclaratorList();\r\n                this.state = 1458;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constantModifiers() {\r\n        let _localctx = new ConstantModifiersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 244, Java8Parser.RULE_constantModifiers);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1463;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while ((((_la - 18) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 18)) &\r\n                        ((1 << (Java8Parser.FINAL - 18)) |\r\n                            (1 << (Java8Parser.PUBLIC - 18)) |\r\n                            (1 << (Java8Parser.STATIC - 18)))) !==\r\n                        0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1460;\r\n                            this.constantModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1465;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constantModifier() {\r\n        let _localctx = new ConstantModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 246, Java8Parser.RULE_constantModifier);\r\n        try {\r\n            this.state = 1470;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1466;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.PUBLIC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1467;\r\n                        this.match(Java8Parser.PUBLIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STATIC:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1468;\r\n                        this.match(Java8Parser.STATIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.FINAL:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1469;\r\n                        this.match(Java8Parser.FINAL);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceMethodDeclaration() {\r\n        let _localctx = new InterfaceMethodDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 248, Java8Parser.RULE_interfaceMethodDeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1472;\r\n                this.interfaceMethodModifiers();\r\n                this.state = 1473;\r\n                this.methodHeader();\r\n                this.state = 1474;\r\n                this.methodBody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceMethodModifiers() {\r\n        let _localctx = new InterfaceMethodModifiersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 250, Java8Parser.RULE_interfaceMethodModifiers);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1479;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.ABSTRACT ||\r\n                    _la === Java8Parser.DEFAULT ||\r\n                    (((_la - 35) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 35)) &\r\n                            ((1 << (Java8Parser.PUBLIC - 35)) |\r\n                                (1 << (Java8Parser.STATIC - 35)) |\r\n                                (1 << (Java8Parser.STRICTFP - 35)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1476;\r\n                            this.interfaceMethodModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1481;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    interfaceMethodModifier() {\r\n        let _localctx = new InterfaceMethodModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 252, Java8Parser.RULE_interfaceMethodModifier);\r\n        try {\r\n            this.state = 1488;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1482;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.PUBLIC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1483;\r\n                        this.match(Java8Parser.PUBLIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.ABSTRACT:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1484;\r\n                        this.match(Java8Parser.ABSTRACT);\r\n                    }\r\n                    break;\r\n                case Java8Parser.DEFAULT:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1485;\r\n                        this.match(Java8Parser.DEFAULT);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STATIC:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1486;\r\n                        this.match(Java8Parser.STATIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.STRICTFP:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1487;\r\n                        this.match(Java8Parser.STRICTFP);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    annotationTypeDeclaration() {\r\n        let _localctx = new AnnotationTypeDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 254, Java8Parser.RULE_annotationTypeDeclaration);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1493;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 139, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1490;\r\n                                this.interfaceModifier();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1495;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 139, this._ctx);\r\n                }\r\n                this.state = 1496;\r\n                this.match(Java8Parser.AT);\r\n                this.state = 1497;\r\n                this.match(Java8Parser.INTERFACE);\r\n                this.state = 1498;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1499;\r\n                this.annotationTypeBody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    annotationTypeBody() {\r\n        let _localctx = new AnnotationTypeBodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 256, Java8Parser.RULE_annotationTypeBody);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1501;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 1505;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.CLASS) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.ENUM) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.INTERFACE) |\r\n                            (1 << Java8Parser.LONG))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.SHORT - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.SEMI - 33)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1502;\r\n                            this.annotationTypeMemberDeclaration();\r\n                        }\r\n                    }\r\n                    this.state = 1507;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1508;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    annotationTypeMemberDeclaration() {\r\n        let _localctx = new AnnotationTypeMemberDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 258, Java8Parser.RULE_annotationTypeMemberDeclaration);\r\n        try {\r\n            this.state = 1515;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 141, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1510;\r\n                        this.annotationTypeElementDeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1511;\r\n                        this.constantDeclaration();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1512;\r\n                        this.classDeclaration();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1513;\r\n                        this.interfaceDeclaration();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1514;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    annotationTypeElementDeclaration() {\r\n        let _localctx = new AnnotationTypeElementDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 260, Java8Parser.RULE_annotationTypeElementDeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1520;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.ABSTRACT ||\r\n                    _la === Java8Parser.PUBLIC ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1517;\r\n                            this.annotationTypeElementModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1522;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1523;\r\n                this.unannType();\r\n                this.state = 1524;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1525;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1526;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1528;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LBRACK || _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1527;\r\n                        this.dims();\r\n                    }\r\n                }\r\n                this.state = 1531;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.DEFAULT) {\r\n                    {\r\n                        this.state = 1530;\r\n                        this.defaultValue();\r\n                    }\r\n                }\r\n                this.state = 1533;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    annotationTypeElementModifier() {\r\n        let _localctx = new AnnotationTypeElementModifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 262, Java8Parser.RULE_annotationTypeElementModifier);\r\n        try {\r\n            this.state = 1538;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1535;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n                case Java8Parser.PUBLIC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1536;\r\n                        this.match(Java8Parser.PUBLIC);\r\n                    }\r\n                    break;\r\n                case Java8Parser.ABSTRACT:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1537;\r\n                        this.match(Java8Parser.ABSTRACT);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    defaultValue() {\r\n        let _localctx = new DefaultValueContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 264, Java8Parser.RULE_defaultValue);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1540;\r\n                this.match(Java8Parser.DEFAULT);\r\n                this.state = 1541;\r\n                this.elementValue();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    annotation() {\r\n        let _localctx = new AnnotationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 266, Java8Parser.RULE_annotation);\r\n        try {\r\n            this.state = 1546;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 146, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1543;\r\n                        this.normalAnnotation();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1544;\r\n                        this.markerAnnotation();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1545;\r\n                        this.singleElementAnnotation();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    normalAnnotation() {\r\n        let _localctx = new NormalAnnotationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 268, Java8Parser.RULE_normalAnnotation);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1548;\r\n                this.match(Java8Parser.AT);\r\n                this.state = 1549;\r\n                this.typeName();\r\n                this.state = 1550;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1552;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.Identifier) {\r\n                    {\r\n                        this.state = 1551;\r\n                        this.elementValuePairList();\r\n                    }\r\n                }\r\n                this.state = 1554;\r\n                this.match(Java8Parser.RPAREN);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    elementValuePairList() {\r\n        let _localctx = new ElementValuePairListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 270, Java8Parser.RULE_elementValuePairList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1556;\r\n                this.elementValuePair();\r\n                this.state = 1561;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 1557;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 1558;\r\n                            this.elementValuePair();\r\n                        }\r\n                    }\r\n                    this.state = 1563;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    elementValuePair() {\r\n        let _localctx = new ElementValuePairContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 272, Java8Parser.RULE_elementValuePair);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1564;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1565;\r\n                this.match(Java8Parser.ASSIGN);\r\n                this.state = 1566;\r\n                this.elementValue();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    elementValue() {\r\n        let _localctx = new ElementValueContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 274, Java8Parser.RULE_elementValue);\r\n        try {\r\n            this.state = 1571;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 149, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1568;\r\n                        this.conditionalExpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1569;\r\n                        this.elementValueArrayInitializer();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1570;\r\n                        this.annotation();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    elementValueArrayInitializer() {\r\n        let _localctx = new ElementValueArrayInitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 276, Java8Parser.RULE_elementValueArrayInitializer);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1573;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 1575;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)) |\r\n                                (1 << (Java8Parser.LBRACE - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 69) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 69)) &\r\n                            ((1 << (Java8Parser.BANG - 69)) |\r\n                                (1 << (Java8Parser.TILDE - 69)) |\r\n                                (1 << (Java8Parser.INC - 69)) |\r\n                                (1 << (Java8Parser.DEC - 69)) |\r\n                                (1 << (Java8Parser.ADD - 69)) |\r\n                                (1 << (Java8Parser.SUB - 69)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1574;\r\n                        this.elementValueList();\r\n                    }\r\n                }\r\n                this.state = 1578;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        this.state = 1577;\r\n                        this.match(Java8Parser.COMMA);\r\n                    }\r\n                }\r\n                this.state = 1580;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    elementValueList() {\r\n        let _localctx = new ElementValueListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 278, Java8Parser.RULE_elementValueList);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1582;\r\n                this.elementValue();\r\n                this.state = 1587;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1583;\r\n                                this.match(Java8Parser.COMMA);\r\n                                this.state = 1584;\r\n                                this.elementValue();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1589;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 152, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    markerAnnotation() {\r\n        let _localctx = new MarkerAnnotationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 280, Java8Parser.RULE_markerAnnotation);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1590;\r\n                this.match(Java8Parser.AT);\r\n                this.state = 1591;\r\n                this.typeName();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    singleElementAnnotation() {\r\n        let _localctx = new SingleElementAnnotationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 282, Java8Parser.RULE_singleElementAnnotation);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1593;\r\n                this.match(Java8Parser.AT);\r\n                this.state = 1594;\r\n                this.typeName();\r\n                this.state = 1595;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1596;\r\n                this.elementValue();\r\n                this.state = 1597;\r\n                this.match(Java8Parser.RPAREN);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    arrayInitializer() {\r\n        let _localctx = new ArrayInitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 284, Java8Parser.RULE_arrayInitializer);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1599;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 1601;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)) |\r\n                                (1 << (Java8Parser.LBRACE - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 69) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 69)) &\r\n                            ((1 << (Java8Parser.BANG - 69)) |\r\n                                (1 << (Java8Parser.TILDE - 69)) |\r\n                                (1 << (Java8Parser.INC - 69)) |\r\n                                (1 << (Java8Parser.DEC - 69)) |\r\n                                (1 << (Java8Parser.ADD - 69)) |\r\n                                (1 << (Java8Parser.SUB - 69)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1600;\r\n                        this.variableInitializerList();\r\n                    }\r\n                }\r\n                this.state = 1604;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        this.state = 1603;\r\n                        this.match(Java8Parser.COMMA);\r\n                    }\r\n                }\r\n                this.state = 1606;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variableInitializerList() {\r\n        let _localctx = new VariableInitializerListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 286, Java8Parser.RULE_variableInitializerList);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1608;\r\n                this.variableInitializer();\r\n                this.state = 1613;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 155, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1609;\r\n                                this.match(Java8Parser.COMMA);\r\n                                this.state = 1610;\r\n                                this.variableInitializer();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1615;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 155, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    block() {\r\n        let _localctx = new BlockContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 288, Java8Parser.RULE_block);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1616;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 1618;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.ASSERT) |\r\n                            (1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BREAK) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.CLASS) |\r\n                            (1 << Java8Parser.CONTINUE) |\r\n                            (1 << Java8Parser.DO) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.ENUM) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.FOR) |\r\n                            (1 << Java8Parser.IF) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.RETURN - 33)) |\r\n                                (1 << (Java8Parser.SHORT - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.SUPER - 33)) |\r\n                                (1 << (Java8Parser.SWITCH - 33)) |\r\n                                (1 << (Java8Parser.SYNCHRONIZED - 33)) |\r\n                                (1 << (Java8Parser.THIS - 33)) |\r\n                                (1 << (Java8Parser.THROW - 33)) |\r\n                                (1 << (Java8Parser.TRY - 33)) |\r\n                                (1 << (Java8Parser.VOID - 33)) |\r\n                                (1 << (Java8Parser.WHILE - 33)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 33)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 33)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 33)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 33)) |\r\n                                (1 << (Java8Parser.StringLiteral - 33)) |\r\n                                (1 << (Java8Parser.NullLiteral - 33)) |\r\n                                (1 << (Java8Parser.LPAREN - 33)) |\r\n                                (1 << (Java8Parser.LBRACE - 33)) |\r\n                                (1 << (Java8Parser.SEMI - 33)))) !==\r\n                            0) ||\r\n                    (((_la - 79) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 79)) &\r\n                            ((1 << (Java8Parser.INC - 79)) |\r\n                                (1 << (Java8Parser.DEC - 79)) |\r\n                                (1 << (Java8Parser.Identifier - 79)) |\r\n                                (1 << (Java8Parser.AT - 79)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1617;\r\n                        this.blockStatements();\r\n                    }\r\n                }\r\n                this.state = 1620;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    blockStatements() {\r\n        let _localctx = new BlockStatementsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 290, Java8Parser.RULE_blockStatements);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1622;\r\n                this.blockStatement();\r\n                this.state = 1626;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.ABSTRACT) |\r\n                            (1 << Java8Parser.ASSERT) |\r\n                            (1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BREAK) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.CLASS) |\r\n                            (1 << Java8Parser.CONTINUE) |\r\n                            (1 << Java8Parser.DO) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.ENUM) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.FOR) |\r\n                            (1 << Java8Parser.IF) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 33) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 33)) &\r\n                            ((1 << (Java8Parser.PRIVATE - 33)) |\r\n                                (1 << (Java8Parser.PROTECTED - 33)) |\r\n                                (1 << (Java8Parser.PUBLIC - 33)) |\r\n                                (1 << (Java8Parser.RETURN - 33)) |\r\n                                (1 << (Java8Parser.SHORT - 33)) |\r\n                                (1 << (Java8Parser.STATIC - 33)) |\r\n                                (1 << (Java8Parser.STRICTFP - 33)) |\r\n                                (1 << (Java8Parser.SUPER - 33)) |\r\n                                (1 << (Java8Parser.SWITCH - 33)) |\r\n                                (1 << (Java8Parser.SYNCHRONIZED - 33)) |\r\n                                (1 << (Java8Parser.THIS - 33)) |\r\n                                (1 << (Java8Parser.THROW - 33)) |\r\n                                (1 << (Java8Parser.TRY - 33)) |\r\n                                (1 << (Java8Parser.VOID - 33)) |\r\n                                (1 << (Java8Parser.WHILE - 33)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 33)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 33)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 33)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 33)) |\r\n                                (1 << (Java8Parser.StringLiteral - 33)) |\r\n                                (1 << (Java8Parser.NullLiteral - 33)) |\r\n                                (1 << (Java8Parser.LPAREN - 33)) |\r\n                                (1 << (Java8Parser.LBRACE - 33)) |\r\n                                (1 << (Java8Parser.SEMI - 33)))) !==\r\n                            0) ||\r\n                    (((_la - 79) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 79)) &\r\n                            ((1 << (Java8Parser.INC - 79)) |\r\n                                (1 << (Java8Parser.DEC - 79)) |\r\n                                (1 << (Java8Parser.Identifier - 79)) |\r\n                                (1 << (Java8Parser.AT - 79)))) !==\r\n                            0)) {\r\n                    {\r\n                        {\r\n                            this.state = 1623;\r\n                            this.blockStatement();\r\n                        }\r\n                    }\r\n                    this.state = 1628;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    blockStatement() {\r\n        let _localctx = new BlockStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 292, Java8Parser.RULE_blockStatement);\r\n        try {\r\n            this.state = 1632;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 158, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1629;\r\n                        this.localVariableDeclarationStatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1630;\r\n                        this.classDeclaration();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1631;\r\n                        this.statement();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    localVariableDeclarationStatement() {\r\n        let _localctx = new LocalVariableDeclarationStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 294, Java8Parser.RULE_localVariableDeclarationStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1634;\r\n                this.localVariableDeclaration();\r\n                this.state = 1635;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    localVariableDeclaration() {\r\n        let _localctx = new LocalVariableDeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 296, Java8Parser.RULE_localVariableDeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1640;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1637;\r\n                            this.variableModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1642;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1643;\r\n                this.unannType();\r\n                this.state = 1644;\r\n                this.variableDeclaratorList();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statement() {\r\n        let _localctx = new StatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 298, Java8Parser.RULE_statement);\r\n        try {\r\n            this.state = 1652;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 160, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1646;\r\n                        this.statementWithoutTrailingSubstatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1647;\r\n                        this.labeledStatement();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1648;\r\n                        this.ifThenStatement();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1649;\r\n                        this.ifThenElseStatement();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1650;\r\n                        this.whileStatement();\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1651;\r\n                        this.forStatement();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statementNoShortIf() {\r\n        let _localctx = new StatementNoShortIfContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 300, Java8Parser.RULE_statementNoShortIf);\r\n        try {\r\n            this.state = 1659;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 161, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1654;\r\n                        this.statementWithoutTrailingSubstatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1655;\r\n                        this.labeledStatementNoShortIf();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1656;\r\n                        this.ifThenElseStatementNoShortIf();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1657;\r\n                        this.whileStatementNoShortIf();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1658;\r\n                        this.forStatementNoShortIf();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statementWithoutTrailingSubstatement() {\r\n        let _localctx = new StatementWithoutTrailingSubstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 302, Java8Parser.RULE_statementWithoutTrailingSubstatement);\r\n        try {\r\n            this.state = 1673;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.LBRACE:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1661;\r\n                        this.block();\r\n                    }\r\n                    break;\r\n                case Java8Parser.SEMI:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1662;\r\n                        this.emptyStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.BOOLEAN:\r\n                case Java8Parser.BYTE:\r\n                case Java8Parser.CHAR:\r\n                case Java8Parser.DOUBLE:\r\n                case Java8Parser.FLOAT:\r\n                case Java8Parser.INT:\r\n                case Java8Parser.LONG:\r\n                case Java8Parser.NEW:\r\n                case Java8Parser.SHORT:\r\n                case Java8Parser.SUPER:\r\n                case Java8Parser.THIS:\r\n                case Java8Parser.VOID:\r\n                case Java8Parser.IntegerLiteral:\r\n                case Java8Parser.FloatingPointLiteral:\r\n                case Java8Parser.BooleanLiteral:\r\n                case Java8Parser.CharacterLiteral:\r\n                case Java8Parser.StringLiteral:\r\n                case Java8Parser.NullLiteral:\r\n                case Java8Parser.LPAREN:\r\n                case Java8Parser.INC:\r\n                case Java8Parser.DEC:\r\n                case Java8Parser.Identifier:\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1663;\r\n                        this.expressionStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.ASSERT:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1664;\r\n                        this.assertStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.SWITCH:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1665;\r\n                        this.switchStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.DO:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1666;\r\n                        this.doStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.BREAK:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1667;\r\n                        this.breakStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.CONTINUE:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 1668;\r\n                        this.continueStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.RETURN:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 1669;\r\n                        this.returnStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.SYNCHRONIZED:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 1670;\r\n                        this.synchronizedStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.THROW:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 1671;\r\n                        this.throwStatement();\r\n                    }\r\n                    break;\r\n                case Java8Parser.TRY:\r\n                    this.enterOuterAlt(_localctx, 12);\r\n                    {\r\n                        this.state = 1672;\r\n                        this.tryStatement();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    emptyStatement() {\r\n        let _localctx = new EmptyStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 304, Java8Parser.RULE_emptyStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1675;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    labeledStatement() {\r\n        let _localctx = new LabeledStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 306, Java8Parser.RULE_labeledStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1677;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1678;\r\n                this.match(Java8Parser.COLON);\r\n                this.state = 1679;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    labeledStatementNoShortIf() {\r\n        let _localctx = new LabeledStatementNoShortIfContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 308, Java8Parser.RULE_labeledStatementNoShortIf);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1681;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 1682;\r\n                this.match(Java8Parser.COLON);\r\n                this.state = 1683;\r\n                this.statementNoShortIf();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    expressionStatement() {\r\n        let _localctx = new ExpressionStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 310, Java8Parser.RULE_expressionStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1685;\r\n                this.statementExpression();\r\n                this.state = 1686;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statementExpression() {\r\n        let _localctx = new StatementExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 312, Java8Parser.RULE_statementExpression);\r\n        try {\r\n            this.state = 1695;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 163, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1688;\r\n                        this.assignment();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1689;\r\n                        this.preIncrementExpression();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1690;\r\n                        this.preDecrementExpression();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1691;\r\n                        this.postIncrementExpression();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1692;\r\n                        this.postDecrementExpression();\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1693;\r\n                        this.methodInvocation();\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1694;\r\n                        this.classInstanceCreationExpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ifThenStatement() {\r\n        let _localctx = new IfThenStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 314, Java8Parser.RULE_ifThenStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1697;\r\n                this.match(Java8Parser.IF);\r\n                this.state = 1698;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1699;\r\n                this.expression();\r\n                this.state = 1700;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1701;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ifThenElseStatement() {\r\n        let _localctx = new IfThenElseStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 316, Java8Parser.RULE_ifThenElseStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1703;\r\n                this.match(Java8Parser.IF);\r\n                this.state = 1704;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1705;\r\n                this.expression();\r\n                this.state = 1706;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1707;\r\n                this.statementNoShortIf();\r\n                this.state = 1708;\r\n                this.match(Java8Parser.ELSE);\r\n                this.state = 1709;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ifThenElseStatementNoShortIf() {\r\n        let _localctx = new IfThenElseStatementNoShortIfContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 318, Java8Parser.RULE_ifThenElseStatementNoShortIf);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1711;\r\n                this.match(Java8Parser.IF);\r\n                this.state = 1712;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1713;\r\n                this.expression();\r\n                this.state = 1714;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1715;\r\n                this.statementNoShortIf();\r\n                this.state = 1716;\r\n                this.match(Java8Parser.ELSE);\r\n                this.state = 1717;\r\n                this.statementNoShortIf();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    assertStatement() {\r\n        let _localctx = new AssertStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 320, Java8Parser.RULE_assertStatement);\r\n        try {\r\n            this.state = 1729;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 164, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1719;\r\n                        this.match(Java8Parser.ASSERT);\r\n                        this.state = 1720;\r\n                        this.expression();\r\n                        this.state = 1721;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1723;\r\n                        this.match(Java8Parser.ASSERT);\r\n                        this.state = 1724;\r\n                        this.expression();\r\n                        this.state = 1725;\r\n                        this.match(Java8Parser.COLON);\r\n                        this.state = 1726;\r\n                        this.expression();\r\n                        this.state = 1727;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    switchStatement() {\r\n        let _localctx = new SwitchStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 322, Java8Parser.RULE_switchStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1731;\r\n                this.match(Java8Parser.SWITCH);\r\n                this.state = 1732;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1733;\r\n                this.expression();\r\n                this.state = 1734;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1735;\r\n                this.switchBlock();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    switchBlock() {\r\n        let _localctx = new SwitchBlockContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 324, Java8Parser.RULE_switchBlock);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1737;\r\n                this.match(Java8Parser.LBRACE);\r\n                this.state = 1741;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1738;\r\n                                this.switchBlockStatementGroup();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1743;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 165, this._ctx);\r\n                }\r\n                this.state = 1747;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.CASE || _la === Java8Parser.DEFAULT) {\r\n                    {\r\n                        {\r\n                            this.state = 1744;\r\n                            this.switchLabel();\r\n                        }\r\n                    }\r\n                    this.state = 1749;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1750;\r\n                this.match(Java8Parser.RBRACE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    switchBlockStatementGroup() {\r\n        let _localctx = new SwitchBlockStatementGroupContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 326, Java8Parser.RULE_switchBlockStatementGroup);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1752;\r\n                this.switchLabels();\r\n                this.state = 1753;\r\n                this.blockStatements();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    switchLabels() {\r\n        let _localctx = new SwitchLabelsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 328, Java8Parser.RULE_switchLabels);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1755;\r\n                this.switchLabel();\r\n                this.state = 1759;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.CASE || _la === Java8Parser.DEFAULT) {\r\n                    {\r\n                        {\r\n                            this.state = 1756;\r\n                            this.switchLabel();\r\n                        }\r\n                    }\r\n                    this.state = 1761;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    switchLabel() {\r\n        let _localctx = new SwitchLabelContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 330, Java8Parser.RULE_switchLabel);\r\n        try {\r\n            this.state = 1772;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 168, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1762;\r\n                        this.match(Java8Parser.CASE);\r\n                        this.state = 1763;\r\n                        this.constantExpression();\r\n                        this.state = 1764;\r\n                        this.match(Java8Parser.COLON);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1766;\r\n                        this.match(Java8Parser.CASE);\r\n                        this.state = 1767;\r\n                        this.enumConstantName();\r\n                        this.state = 1768;\r\n                        this.match(Java8Parser.COLON);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1770;\r\n                        this.match(Java8Parser.DEFAULT);\r\n                        this.state = 1771;\r\n                        this.match(Java8Parser.COLON);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumConstantName() {\r\n        let _localctx = new EnumConstantNameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 332, Java8Parser.RULE_enumConstantName);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1774;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    whileStatement() {\r\n        let _localctx = new WhileStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 334, Java8Parser.RULE_whileStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1776;\r\n                this.match(Java8Parser.WHILE);\r\n                this.state = 1777;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1778;\r\n                this.expression();\r\n                this.state = 1779;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1780;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    whileStatementNoShortIf() {\r\n        let _localctx = new WhileStatementNoShortIfContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 336, Java8Parser.RULE_whileStatementNoShortIf);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1782;\r\n                this.match(Java8Parser.WHILE);\r\n                this.state = 1783;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1784;\r\n                this.expression();\r\n                this.state = 1785;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1786;\r\n                this.statementNoShortIf();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    doStatement() {\r\n        let _localctx = new DoStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 338, Java8Parser.RULE_doStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1788;\r\n                this.match(Java8Parser.DO);\r\n                this.state = 1789;\r\n                this.statement();\r\n                this.state = 1790;\r\n                this.match(Java8Parser.WHILE);\r\n                this.state = 1791;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1792;\r\n                this.expression();\r\n                this.state = 1793;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1794;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    forStatement() {\r\n        let _localctx = new ForStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 340, Java8Parser.RULE_forStatement);\r\n        try {\r\n            this.state = 1798;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 169, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1796;\r\n                        this.basicForStatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1797;\r\n                        this.enhancedForStatement();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    forStatementNoShortIf() {\r\n        let _localctx = new ForStatementNoShortIfContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 342, Java8Parser.RULE_forStatementNoShortIf);\r\n        try {\r\n            this.state = 1802;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 170, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1800;\r\n                        this.basicForStatementNoShortIf();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1801;\r\n                        this.enhancedForStatementNoShortIf();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    basicForStatement() {\r\n        let _localctx = new BasicForStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 344, Java8Parser.RULE_basicForStatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1804;\r\n                this.match(Java8Parser.FOR);\r\n                this.state = 1805;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1807;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 79) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 79)) &\r\n                            ((1 << (Java8Parser.INC - 79)) |\r\n                                (1 << (Java8Parser.DEC - 79)) |\r\n                                (1 << (Java8Parser.Identifier - 79)) |\r\n                                (1 << (Java8Parser.AT - 79)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1806;\r\n                        this.forInit();\r\n                    }\r\n                }\r\n                this.state = 1809;\r\n                this.match(Java8Parser.SEMI);\r\n                this.state = 1811;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 69) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 69)) &\r\n                            ((1 << (Java8Parser.BANG - 69)) |\r\n                                (1 << (Java8Parser.TILDE - 69)) |\r\n                                (1 << (Java8Parser.INC - 69)) |\r\n                                (1 << (Java8Parser.DEC - 69)) |\r\n                                (1 << (Java8Parser.ADD - 69)) |\r\n                                (1 << (Java8Parser.SUB - 69)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1810;\r\n                        this.expression();\r\n                    }\r\n                }\r\n                this.state = 1813;\r\n                this.match(Java8Parser.SEMI);\r\n                this.state = 1815;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 79) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 79)) &\r\n                            ((1 << (Java8Parser.INC - 79)) |\r\n                                (1 << (Java8Parser.DEC - 79)) |\r\n                                (1 << (Java8Parser.Identifier - 79)) |\r\n                                (1 << (Java8Parser.AT - 79)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1814;\r\n                        this.forUpdate();\r\n                    }\r\n                }\r\n                this.state = 1817;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1818;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    basicForStatementNoShortIf() {\r\n        let _localctx = new BasicForStatementNoShortIfContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 346, Java8Parser.RULE_basicForStatementNoShortIf);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1820;\r\n                this.match(Java8Parser.FOR);\r\n                this.state = 1821;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1823;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FINAL) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 79) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 79)) &\r\n                            ((1 << (Java8Parser.INC - 79)) |\r\n                                (1 << (Java8Parser.DEC - 79)) |\r\n                                (1 << (Java8Parser.Identifier - 79)) |\r\n                                (1 << (Java8Parser.AT - 79)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1822;\r\n                        this.forInit();\r\n                    }\r\n                }\r\n                this.state = 1825;\r\n                this.match(Java8Parser.SEMI);\r\n                this.state = 1827;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 69) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 69)) &\r\n                            ((1 << (Java8Parser.BANG - 69)) |\r\n                                (1 << (Java8Parser.TILDE - 69)) |\r\n                                (1 << (Java8Parser.INC - 69)) |\r\n                                (1 << (Java8Parser.DEC - 69)) |\r\n                                (1 << (Java8Parser.ADD - 69)) |\r\n                                (1 << (Java8Parser.SUB - 69)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1826;\r\n                        this.expression();\r\n                    }\r\n                }\r\n                this.state = 1829;\r\n                this.match(Java8Parser.SEMI);\r\n                this.state = 1831;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 79) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 79)) &\r\n                            ((1 << (Java8Parser.INC - 79)) |\r\n                                (1 << (Java8Parser.DEC - 79)) |\r\n                                (1 << (Java8Parser.Identifier - 79)) |\r\n                                (1 << (Java8Parser.AT - 79)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1830;\r\n                        this.forUpdate();\r\n                    }\r\n                }\r\n                this.state = 1833;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1834;\r\n                this.statementNoShortIf();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    forInit() {\r\n        let _localctx = new ForInitContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 348, Java8Parser.RULE_forInit);\r\n        try {\r\n            this.state = 1838;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 177, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1836;\r\n                        this.statementExpressionList();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1837;\r\n                        this.localVariableDeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    forUpdate() {\r\n        let _localctx = new ForUpdateContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 350, Java8Parser.RULE_forUpdate);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1840;\r\n                this.statementExpressionList();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statementExpressionList() {\r\n        let _localctx = new StatementExpressionListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 352, Java8Parser.RULE_statementExpressionList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1842;\r\n                this.statementExpression();\r\n                this.state = 1847;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 1843;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 1844;\r\n                            this.statementExpression();\r\n                        }\r\n                    }\r\n                    this.state = 1849;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enhancedForStatement() {\r\n        let _localctx = new EnhancedForStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 354, Java8Parser.RULE_enhancedForStatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1850;\r\n                this.match(Java8Parser.FOR);\r\n                this.state = 1851;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1855;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1852;\r\n                            this.variableModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1857;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1858;\r\n                this.unannType();\r\n                this.state = 1859;\r\n                this.variableDeclaratorId();\r\n                this.state = 1860;\r\n                this.match(Java8Parser.COLON);\r\n                this.state = 1861;\r\n                this.expression();\r\n                this.state = 1862;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1863;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enhancedForStatementNoShortIf() {\r\n        let _localctx = new EnhancedForStatementNoShortIfContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 356, Java8Parser.RULE_enhancedForStatementNoShortIf);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1865;\r\n                this.match(Java8Parser.FOR);\r\n                this.state = 1866;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1870;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1867;\r\n                            this.variableModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1872;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1873;\r\n                this.unannType();\r\n                this.state = 1874;\r\n                this.variableDeclaratorId();\r\n                this.state = 1875;\r\n                this.match(Java8Parser.COLON);\r\n                this.state = 1876;\r\n                this.expression();\r\n                this.state = 1877;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1878;\r\n                this.statementNoShortIf();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    breakStatement() {\r\n        let _localctx = new BreakStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 358, Java8Parser.RULE_breakStatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1880;\r\n                this.match(Java8Parser.BREAK);\r\n                this.state = 1882;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.Identifier) {\r\n                    {\r\n                        this.state = 1881;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                }\r\n                this.state = 1884;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    continueStatement() {\r\n        let _localctx = new ContinueStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 360, Java8Parser.RULE_continueStatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1886;\r\n                this.match(Java8Parser.CONTINUE);\r\n                this.state = 1888;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.Identifier) {\r\n                    {\r\n                        this.state = 1887;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                }\r\n                this.state = 1890;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    returnStatement() {\r\n        let _localctx = new ReturnStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 362, Java8Parser.RULE_returnStatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1892;\r\n                this.match(Java8Parser.RETURN);\r\n                this.state = 1894;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 69) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 69)) &\r\n                            ((1 << (Java8Parser.BANG - 69)) |\r\n                                (1 << (Java8Parser.TILDE - 69)) |\r\n                                (1 << (Java8Parser.INC - 69)) |\r\n                                (1 << (Java8Parser.DEC - 69)) |\r\n                                (1 << (Java8Parser.ADD - 69)) |\r\n                                (1 << (Java8Parser.SUB - 69)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 1893;\r\n                        this.expression();\r\n                    }\r\n                }\r\n                this.state = 1896;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    throwStatement() {\r\n        let _localctx = new ThrowStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 364, Java8Parser.RULE_throwStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1898;\r\n                this.match(Java8Parser.THROW);\r\n                this.state = 1899;\r\n                this.expression();\r\n                this.state = 1900;\r\n                this.match(Java8Parser.SEMI);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    synchronizedStatement() {\r\n        let _localctx = new SynchronizedStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 366, Java8Parser.RULE_synchronizedStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1902;\r\n                this.match(Java8Parser.SYNCHRONIZED);\r\n                this.state = 1903;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1904;\r\n                this.expression();\r\n                this.state = 1905;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1906;\r\n                this.block();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    tryStatement() {\r\n        let _localctx = new TryStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 368, Java8Parser.RULE_tryStatement);\r\n        let _la;\r\n        try {\r\n            this.state = 1920;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 185, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1908;\r\n                        this.match(Java8Parser.TRY);\r\n                        this.state = 1909;\r\n                        this.block();\r\n                        this.state = 1910;\r\n                        this.catches();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1912;\r\n                        this.match(Java8Parser.TRY);\r\n                        this.state = 1913;\r\n                        this.block();\r\n                        this.state = 1915;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.CATCH) {\r\n                            {\r\n                                this.state = 1914;\r\n                                this.catches();\r\n                            }\r\n                        }\r\n                        this.state = 1917;\r\n                        this.finally_();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1919;\r\n                        this.tryWithResourcesStatement();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    catches() {\r\n        let _localctx = new CatchesContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 370, Java8Parser.RULE_catches);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1922;\r\n                this.catchClause();\r\n                this.state = 1926;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.CATCH) {\r\n                    {\r\n                        {\r\n                            this.state = 1923;\r\n                            this.catchClause();\r\n                        }\r\n                    }\r\n                    this.state = 1928;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    catchClause() {\r\n        let _localctx = new CatchClauseContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 372, Java8Parser.RULE_catchClause);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1929;\r\n                this.match(Java8Parser.CATCH);\r\n                this.state = 1930;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1931;\r\n                this.catchFormalParameter();\r\n                this.state = 1932;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 1933;\r\n                this.block();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    catchFormalParameter() {\r\n        let _localctx = new CatchFormalParameterContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 374, Java8Parser.RULE_catchFormalParameter);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1938;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1935;\r\n                            this.variableModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1940;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1941;\r\n                this.catchType();\r\n                this.state = 1942;\r\n                this.variableDeclaratorId();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    catchType() {\r\n        let _localctx = new CatchTypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 376, Java8Parser.RULE_catchType);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1944;\r\n                this.unannClassType();\r\n                this.state = 1949;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.BITOR) {\r\n                    {\r\n                        {\r\n                            this.state = 1945;\r\n                            this.match(Java8Parser.BITOR);\r\n                            this.state = 1946;\r\n                            this.classType();\r\n                        }\r\n                    }\r\n                    this.state = 1951;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    finally_() {\r\n        let _localctx = new Finally_Context(this._ctx, this.state);\r\n        this.enterRule(_localctx, 378, Java8Parser.RULE_finally_);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1952;\r\n                this.match(Java8Parser.FINALLY);\r\n                this.state = 1953;\r\n                this.block();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    tryWithResourcesStatement() {\r\n        let _localctx = new TryWithResourcesStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 380, Java8Parser.RULE_tryWithResourcesStatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1955;\r\n                this.match(Java8Parser.TRY);\r\n                this.state = 1956;\r\n                this.resourceSpecification();\r\n                this.state = 1957;\r\n                this.block();\r\n                this.state = 1959;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.CATCH) {\r\n                    {\r\n                        this.state = 1958;\r\n                        this.catches();\r\n                    }\r\n                }\r\n                this.state = 1962;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.FINALLY) {\r\n                    {\r\n                        this.state = 1961;\r\n                        this.finally_();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    resourceSpecification() {\r\n        let _localctx = new ResourceSpecificationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 382, Java8Parser.RULE_resourceSpecification);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1964;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 1965;\r\n                this.resourceList();\r\n                this.state = 1967;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.SEMI) {\r\n                    {\r\n                        this.state = 1966;\r\n                        this.match(Java8Parser.SEMI);\r\n                    }\r\n                }\r\n                this.state = 1969;\r\n                this.match(Java8Parser.RPAREN);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    resourceList() {\r\n        let _localctx = new ResourceListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 384, Java8Parser.RULE_resourceList);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1971;\r\n                this.resource();\r\n                this.state = 1976;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1972;\r\n                                this.match(Java8Parser.SEMI);\r\n                                this.state = 1973;\r\n                                this.resource();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1978;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    resource() {\r\n        let _localctx = new ResourceContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 386, Java8Parser.RULE_resource);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1982;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.FINAL || _la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 1979;\r\n                            this.variableModifier();\r\n                        }\r\n                    }\r\n                    this.state = 1984;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 1985;\r\n                this.unannType();\r\n                this.state = 1986;\r\n                this.variableDeclaratorId();\r\n                this.state = 1987;\r\n                this.match(Java8Parser.ASSIGN);\r\n                this.state = 1988;\r\n                this.expression();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primary() {\r\n        let _localctx = new PrimaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 388, Java8Parser.RULE_primary);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1992;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 194, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1990;\r\n                            this.primaryNoNewArray_lfno_primary();\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 1991;\r\n                            this.arrayCreationExpression();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 1997;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1994;\r\n                                this.primaryNoNewArray_lf_primary();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1999;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 195, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray() {\r\n        let _localctx = new PrimaryNoNewArrayContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 390, Java8Parser.RULE_primaryNoNewArray);\r\n        let _la;\r\n        try {\r\n            this.state = 2029;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 197, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2000;\r\n                        this.literal();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2001;\r\n                        this.typeName();\r\n                        this.state = 2006;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.LBRACK) {\r\n                            {\r\n                                {\r\n                                    this.state = 2002;\r\n                                    this.match(Java8Parser.LBRACK);\r\n                                    this.state = 2003;\r\n                                    this.match(Java8Parser.RBRACK);\r\n                                }\r\n                            }\r\n                            this.state = 2008;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2009;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2010;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2012;\r\n                        this.match(Java8Parser.VOID);\r\n                        this.state = 2013;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2014;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2015;\r\n                        this.match(Java8Parser.THIS);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2016;\r\n                        this.typeName();\r\n                        this.state = 2017;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2018;\r\n                        this.match(Java8Parser.THIS);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2020;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2021;\r\n                        this.expression();\r\n                        this.state = 2022;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 2024;\r\n                        this.classInstanceCreationExpression();\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 2025;\r\n                        this.fieldAccess();\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 2026;\r\n                        this.arrayAccess();\r\n                    }\r\n                    break;\r\n                case 10:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 2027;\r\n                        this.methodInvocation();\r\n                    }\r\n                    break;\r\n                case 11:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 2028;\r\n                        this.methodReference();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray_lf_arrayAccess() {\r\n        let _localctx = new PrimaryNoNewArray_lf_arrayAccessContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 392, Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            // tslint:disable-next-line:no-empty\r\n            {\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray_lfno_arrayAccess() {\r\n        let _localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 394, Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess);\r\n        let _la;\r\n        try {\r\n            this.state = 2061;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 199, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2033;\r\n                        this.literal();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2034;\r\n                        this.typeName();\r\n                        this.state = 2039;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.LBRACK) {\r\n                            {\r\n                                {\r\n                                    this.state = 2035;\r\n                                    this.match(Java8Parser.LBRACK);\r\n                                    this.state = 2036;\r\n                                    this.match(Java8Parser.RBRACK);\r\n                                }\r\n                            }\r\n                            this.state = 2041;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2042;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2043;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2045;\r\n                        this.match(Java8Parser.VOID);\r\n                        this.state = 2046;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2047;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2048;\r\n                        this.match(Java8Parser.THIS);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2049;\r\n                        this.typeName();\r\n                        this.state = 2050;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2051;\r\n                        this.match(Java8Parser.THIS);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2053;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2054;\r\n                        this.expression();\r\n                        this.state = 2055;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 2057;\r\n                        this.classInstanceCreationExpression();\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 2058;\r\n                        this.fieldAccess();\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 2059;\r\n                        this.methodInvocation();\r\n                    }\r\n                    break;\r\n                case 10:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 2060;\r\n                        this.methodReference();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray_lf_primary() {\r\n        let _localctx = new PrimaryNoNewArray_lf_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 396, Java8Parser.RULE_primaryNoNewArray_lf_primary);\r\n        try {\r\n            this.state = 2068;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 200, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2063;\r\n                        this.classInstanceCreationExpression_lf_primary();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2064;\r\n                        this.fieldAccess_lf_primary();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2065;\r\n                        this.arrayAccess_lf_primary();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2066;\r\n                        this.methodInvocation_lf_primary();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2067;\r\n                        this.methodReference_lf_primary();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {\r\n        let _localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 398, Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            // tslint:disable-next-line:no-empty\r\n            {\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {\r\n        let _localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 400, Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);\r\n        try {\r\n            this.state = 2076;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 201, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2072;\r\n                        this.classInstanceCreationExpression_lf_primary();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2073;\r\n                        this.fieldAccess_lf_primary();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2074;\r\n                        this.methodInvocation_lf_primary();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2075;\r\n                        this.methodReference_lf_primary();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray_lfno_primary() {\r\n        let _localctx = new PrimaryNoNewArray_lfno_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 402, Java8Parser.RULE_primaryNoNewArray_lfno_primary);\r\n        let _la;\r\n        try {\r\n            this.state = 2118;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 204, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2078;\r\n                        this.literal();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2079;\r\n                        this.typeName();\r\n                        this.state = 2084;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.LBRACK) {\r\n                            {\r\n                                {\r\n                                    this.state = 2080;\r\n                                    this.match(Java8Parser.LBRACK);\r\n                                    this.state = 2081;\r\n                                    this.match(Java8Parser.RBRACK);\r\n                                }\r\n                            }\r\n                            this.state = 2086;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2087;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2088;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2090;\r\n                        this.unannPrimitiveType();\r\n                        this.state = 2095;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.LBRACK) {\r\n                            {\r\n                                {\r\n                                    this.state = 2091;\r\n                                    this.match(Java8Parser.LBRACK);\r\n                                    this.state = 2092;\r\n                                    this.match(Java8Parser.RBRACK);\r\n                                }\r\n                            }\r\n                            this.state = 2097;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2098;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2099;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2101;\r\n                        this.match(Java8Parser.VOID);\r\n                        this.state = 2102;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2103;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2104;\r\n                        this.match(Java8Parser.THIS);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2105;\r\n                        this.typeName();\r\n                        this.state = 2106;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2107;\r\n                        this.match(Java8Parser.THIS);\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 2109;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2110;\r\n                        this.expression();\r\n                        this.state = 2111;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 2113;\r\n                        this.classInstanceCreationExpression_lfno_primary();\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 2114;\r\n                        this.fieldAccess_lfno_primary();\r\n                    }\r\n                    break;\r\n                case 10:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 2115;\r\n                        this.arrayAccess_lfno_primary();\r\n                    }\r\n                    break;\r\n                case 11:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 2116;\r\n                        this.methodInvocation_lfno_primary();\r\n                    }\r\n                    break;\r\n                case 12:\r\n                    this.enterOuterAlt(_localctx, 12);\r\n                    {\r\n                        this.state = 2117;\r\n                        this.methodReference_lfno_primary();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {\r\n        let _localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 404, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            // tslint:disable-next-line:no-empty\r\n            {\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {\r\n        let _localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 406, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);\r\n        let _la;\r\n        try {\r\n            this.state = 2161;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 207, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2122;\r\n                        this.literal();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2123;\r\n                        this.typeName();\r\n                        this.state = 2128;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.LBRACK) {\r\n                            {\r\n                                {\r\n                                    this.state = 2124;\r\n                                    this.match(Java8Parser.LBRACK);\r\n                                    this.state = 2125;\r\n                                    this.match(Java8Parser.RBRACK);\r\n                                }\r\n                            }\r\n                            this.state = 2130;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2131;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2132;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2134;\r\n                        this.unannPrimitiveType();\r\n                        this.state = 2139;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.LBRACK) {\r\n                            {\r\n                                {\r\n                                    this.state = 2135;\r\n                                    this.match(Java8Parser.LBRACK);\r\n                                    this.state = 2136;\r\n                                    this.match(Java8Parser.RBRACK);\r\n                                }\r\n                            }\r\n                            this.state = 2141;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2142;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2143;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2145;\r\n                        this.match(Java8Parser.VOID);\r\n                        this.state = 2146;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2147;\r\n                        this.match(Java8Parser.CLASS);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2148;\r\n                        this.match(Java8Parser.THIS);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2149;\r\n                        this.typeName();\r\n                        this.state = 2150;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2151;\r\n                        this.match(Java8Parser.THIS);\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 2153;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2154;\r\n                        this.expression();\r\n                        this.state = 2155;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 2157;\r\n                        this.classInstanceCreationExpression_lfno_primary();\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 2158;\r\n                        this.fieldAccess_lfno_primary();\r\n                    }\r\n                    break;\r\n                case 10:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 2159;\r\n                        this.methodInvocation_lfno_primary();\r\n                    }\r\n                    break;\r\n                case 11:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 2160;\r\n                        this.methodReference_lfno_primary();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classInstanceCreationExpression() {\r\n        let _localctx = new ClassInstanceCreationExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 408, Java8Parser.RULE_classInstanceCreationExpression);\r\n        let _la;\r\n        try {\r\n            this.state = 2246;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 225, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2163;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2165;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2164;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2170;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 2167;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 2172;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2173;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 2184;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.DOT) {\r\n                            {\r\n                                {\r\n                                    this.state = 2174;\r\n                                    this.match(Java8Parser.DOT);\r\n                                    this.state = 2178;\r\n                                    this._errHandler.sync(this);\r\n                                    _la = this._input.LA(1);\r\n                                    while (_la === Java8Parser.AT) {\r\n                                        {\r\n                                            {\r\n                                                this.state = 2175;\r\n                                                this.annotation();\r\n                                            }\r\n                                        }\r\n                                        this.state = 2180;\r\n                                        this._errHandler.sync(this);\r\n                                        _la = this._input.LA(1);\r\n                                    }\r\n                                    this.state = 2181;\r\n                                    this.match(Java8Parser.Identifier);\r\n                                }\r\n                            }\r\n                            this.state = 2186;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2188;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2187;\r\n                                this.typeArgumentsOrDiamond();\r\n                            }\r\n                        }\r\n                        this.state = 2190;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2192;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2191;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2194;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 2196;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LBRACE) {\r\n                            {\r\n                                this.state = 2195;\r\n                                this.classBody();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2198;\r\n                        this.expressionName();\r\n                        this.state = 2199;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2200;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2202;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2201;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2207;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 2204;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 2209;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2210;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 2212;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2211;\r\n                                this.typeArgumentsOrDiamond();\r\n                            }\r\n                        }\r\n                        this.state = 2214;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2216;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2215;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2218;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 2220;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LBRACE) {\r\n                            {\r\n                                this.state = 2219;\r\n                                this.classBody();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2222;\r\n                        this.primary();\r\n                        this.state = 2223;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2224;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2226;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2225;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2231;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 2228;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 2233;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2234;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 2236;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2235;\r\n                                this.typeArgumentsOrDiamond();\r\n                            }\r\n                        }\r\n                        this.state = 2238;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2240;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2239;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2242;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 2244;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LBRACE) {\r\n                            {\r\n                                this.state = 2243;\r\n                                this.classBody();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classInstanceCreationExpression_lf_primary() {\r\n        let _localctx = new ClassInstanceCreationExpression_lf_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 410, Java8Parser.RULE_classInstanceCreationExpression_lf_primary);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2248;\r\n                this.match(Java8Parser.DOT);\r\n                this.state = 2249;\r\n                this.match(Java8Parser.NEW);\r\n                this.state = 2251;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 2250;\r\n                        this.typeArguments();\r\n                    }\r\n                }\r\n                this.state = 2256;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 2253;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 2258;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 2259;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 2261;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 2260;\r\n                        this.typeArgumentsOrDiamond();\r\n                    }\r\n                }\r\n                this.state = 2263;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 2265;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 69) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 69)) &\r\n                            ((1 << (Java8Parser.BANG - 69)) |\r\n                                (1 << (Java8Parser.TILDE - 69)) |\r\n                                (1 << (Java8Parser.INC - 69)) |\r\n                                (1 << (Java8Parser.DEC - 69)) |\r\n                                (1 << (Java8Parser.ADD - 69)) |\r\n                                (1 << (Java8Parser.SUB - 69)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 2264;\r\n                        this.argumentList();\r\n                    }\r\n                }\r\n                this.state = 2267;\r\n                this.match(Java8Parser.RPAREN);\r\n                this.state = 2269;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 230, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2268;\r\n                            this.classBody();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classInstanceCreationExpression_lfno_primary() {\r\n        let _localctx = new ClassInstanceCreationExpression_lfno_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 412, Java8Parser.RULE_classInstanceCreationExpression_lfno_primary);\r\n        let _la;\r\n        try {\r\n            this.state = 2330;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.NEW:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2271;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2273;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2272;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2278;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 2275;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 2280;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2281;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 2292;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.DOT) {\r\n                            {\r\n                                {\r\n                                    this.state = 2282;\r\n                                    this.match(Java8Parser.DOT);\r\n                                    this.state = 2286;\r\n                                    this._errHandler.sync(this);\r\n                                    _la = this._input.LA(1);\r\n                                    while (_la === Java8Parser.AT) {\r\n                                        {\r\n                                            {\r\n                                                this.state = 2283;\r\n                                                this.annotation();\r\n                                            }\r\n                                        }\r\n                                        this.state = 2288;\r\n                                        this._errHandler.sync(this);\r\n                                        _la = this._input.LA(1);\r\n                                    }\r\n                                    this.state = 2289;\r\n                                    this.match(Java8Parser.Identifier);\r\n                                }\r\n                            }\r\n                            this.state = 2294;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2296;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2295;\r\n                                this.typeArgumentsOrDiamond();\r\n                            }\r\n                        }\r\n                        this.state = 2298;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2300;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2299;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2302;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 2304;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 237, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2303;\r\n                                    this.classBody();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case Java8Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2306;\r\n                        this.expressionName();\r\n                        this.state = 2307;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2308;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2310;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2309;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2315;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.AT) {\r\n                            {\r\n                                {\r\n                                    this.state = 2312;\r\n                                    this.annotation();\r\n                                }\r\n                            }\r\n                            this.state = 2317;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 2318;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 2320;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2319;\r\n                                this.typeArgumentsOrDiamond();\r\n                            }\r\n                        }\r\n                        this.state = 2322;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2324;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2323;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2326;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 2328;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 242, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2327;\r\n                                    this.classBody();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeArgumentsOrDiamond() {\r\n        let _localctx = new TypeArgumentsOrDiamondContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 414, Java8Parser.RULE_typeArgumentsOrDiamond);\r\n        try {\r\n            this.state = 2335;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 244, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2332;\r\n                        this.typeArguments();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2333;\r\n                        this.match(Java8Parser.LT);\r\n                        this.state = 2334;\r\n                        this.match(Java8Parser.GT);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    fieldAccess() {\r\n        let _localctx = new FieldAccessContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 416, Java8Parser.RULE_fieldAccess);\r\n        try {\r\n            this.state = 2350;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 245, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2337;\r\n                        this.primary();\r\n                        this.state = 2338;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2339;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2341;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2342;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2343;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2344;\r\n                        this.typeName();\r\n                        this.state = 2345;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2346;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2347;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2348;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    fieldAccess_lf_primary() {\r\n        let _localctx = new FieldAccess_lf_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 418, Java8Parser.RULE_fieldAccess_lf_primary);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2352;\r\n                this.match(Java8Parser.DOT);\r\n                this.state = 2353;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    fieldAccess_lfno_primary() {\r\n        let _localctx = new FieldAccess_lfno_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 420, Java8Parser.RULE_fieldAccess_lfno_primary);\r\n        try {\r\n            this.state = 2364;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.SUPER:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2355;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2356;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2357;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case Java8Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2358;\r\n                        this.typeName();\r\n                        this.state = 2359;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2360;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2361;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2362;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    arrayAccess() {\r\n        let _localctx = new ArrayAccessContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 422, Java8Parser.RULE_arrayAccess);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2376;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 247, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2366;\r\n                            this.expressionName();\r\n                            this.state = 2367;\r\n                            this.match(Java8Parser.LBRACK);\r\n                            this.state = 2368;\r\n                            this.expression();\r\n                            this.state = 2369;\r\n                            this.match(Java8Parser.RBRACK);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 2371;\r\n                            this.primaryNoNewArray_lfno_arrayAccess();\r\n                            this.state = 2372;\r\n                            this.match(Java8Parser.LBRACK);\r\n                            this.state = 2373;\r\n                            this.expression();\r\n                            this.state = 2374;\r\n                            this.match(Java8Parser.RBRACK);\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 2385;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.LBRACK) {\r\n                    {\r\n                        {\r\n                            this.state = 2378;\r\n                            this.primaryNoNewArray_lf_arrayAccess();\r\n                            this.state = 2379;\r\n                            this.match(Java8Parser.LBRACK);\r\n                            this.state = 2380;\r\n                            this.expression();\r\n                            this.state = 2381;\r\n                            this.match(Java8Parser.RBRACK);\r\n                        }\r\n                    }\r\n                    this.state = 2387;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    arrayAccess_lf_primary() {\r\n        let _localctx = new ArrayAccess_lf_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 424, Java8Parser.RULE_arrayAccess_lf_primary);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2388;\r\n                    this.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();\r\n                    this.state = 2389;\r\n                    this.match(Java8Parser.LBRACK);\r\n                    this.state = 2390;\r\n                    this.expression();\r\n                    this.state = 2391;\r\n                    this.match(Java8Parser.RBRACK);\r\n                }\r\n                this.state = 2400;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 2393;\r\n                                this.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();\r\n                                this.state = 2394;\r\n                                this.match(Java8Parser.LBRACK);\r\n                                this.state = 2395;\r\n                                this.expression();\r\n                                this.state = 2396;\r\n                                this.match(Java8Parser.RBRACK);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2402;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 249, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    arrayAccess_lfno_primary() {\r\n        let _localctx = new ArrayAccess_lfno_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 426, Java8Parser.RULE_arrayAccess_lfno_primary);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2413;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 250, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2403;\r\n                            this.expressionName();\r\n                            this.state = 2404;\r\n                            this.match(Java8Parser.LBRACK);\r\n                            this.state = 2405;\r\n                            this.expression();\r\n                            this.state = 2406;\r\n                            this.match(Java8Parser.RBRACK);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 2408;\r\n                            this.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();\r\n                            this.state = 2409;\r\n                            this.match(Java8Parser.LBRACK);\r\n                            this.state = 2410;\r\n                            this.expression();\r\n                            this.state = 2411;\r\n                            this.match(Java8Parser.RBRACK);\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 2422;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 2415;\r\n                                this.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();\r\n                                this.state = 2416;\r\n                                this.match(Java8Parser.LBRACK);\r\n                                this.state = 2417;\r\n                                this.expression();\r\n                                this.state = 2418;\r\n                                this.match(Java8Parser.RBRACK);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2424;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 251, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodInvocation() {\r\n        let _localctx = new MethodInvocationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 428, Java8Parser.RULE_methodInvocation);\r\n        let _la;\r\n        try {\r\n            this.state = 2493;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 263, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2425;\r\n                        this.ident();\r\n                        this.state = 2426;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2428;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2427;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2430;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2432;\r\n                        this.receivers();\r\n                        this.state = 2433;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2435;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2434;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2437;\r\n                        this.ident();\r\n                        this.state = 2438;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2440;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2439;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2442;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2444;\r\n                        this.expressionName();\r\n                        this.state = 2445;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2447;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2446;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2449;\r\n                        this.ident();\r\n                        this.state = 2450;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2452;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2451;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2454;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2456;\r\n                        this.primary();\r\n                        this.state = 2457;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2459;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2458;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2461;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 2462;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2464;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2463;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2466;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2468;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2469;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2471;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2470;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2473;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 2474;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2476;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2475;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2478;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2479;\r\n                        this.typeName();\r\n                        this.state = 2480;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2481;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2482;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2484;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2483;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2486;\r\n                        this.match(Java8Parser.Identifier);\r\n                        this.state = 2487;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2489;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2488;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2491;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    receivers() {\r\n        let _localctx = new ReceiversContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 430, Java8Parser.RULE_receivers);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2495;\r\n                this.receiver();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    receiver() {\r\n        let _localctx = new ReceiverContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 432, Java8Parser.RULE_receiver);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2497;\r\n                this.ident();\r\n                this.state = 2502;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 2498;\r\n                                this.match(Java8Parser.DOT);\r\n                                this.state = 2499;\r\n                                this.ident();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2504;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 264, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ident() {\r\n        let _localctx = new IdentContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 434, Java8Parser.RULE_ident);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2505;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodInvocation_lf_primary() {\r\n        let _localctx = new MethodInvocation_lf_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 436, Java8Parser.RULE_methodInvocation_lf_primary);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2507;\r\n                this.match(Java8Parser.DOT);\r\n                this.state = 2509;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 2508;\r\n                        this.typeArguments();\r\n                    }\r\n                }\r\n                this.state = 2511;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 2512;\r\n                this.match(Java8Parser.LPAREN);\r\n                this.state = 2514;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << Java8Parser.BOOLEAN) |\r\n                            (1 << Java8Parser.BYTE) |\r\n                            (1 << Java8Parser.CHAR) |\r\n                            (1 << Java8Parser.DOUBLE) |\r\n                            (1 << Java8Parser.FLOAT) |\r\n                            (1 << Java8Parser.INT) |\r\n                            (1 << Java8Parser.LONG) |\r\n                            (1 << Java8Parser.NEW))) !==\r\n                        0) ||\r\n                    (((_la - 37) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 37)) &\r\n                            ((1 << (Java8Parser.SHORT - 37)) |\r\n                                (1 << (Java8Parser.SUPER - 37)) |\r\n                                (1 << (Java8Parser.THIS - 37)) |\r\n                                (1 << (Java8Parser.VOID - 37)) |\r\n                                (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                            0) ||\r\n                    (((_la - 69) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 69)) &\r\n                            ((1 << (Java8Parser.BANG - 69)) |\r\n                                (1 << (Java8Parser.TILDE - 69)) |\r\n                                (1 << (Java8Parser.INC - 69)) |\r\n                                (1 << (Java8Parser.DEC - 69)) |\r\n                                (1 << (Java8Parser.ADD - 69)) |\r\n                                (1 << (Java8Parser.SUB - 69)))) !==\r\n                            0) ||\r\n                    _la === Java8Parser.Identifier ||\r\n                    _la === Java8Parser.AT) {\r\n                    {\r\n                        this.state = 2513;\r\n                        this.argumentList();\r\n                    }\r\n                }\r\n                this.state = 2516;\r\n                this.match(Java8Parser.RPAREN);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodInvocation_lfno_primary() {\r\n        let _localctx = new MethodInvocation_lfno_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 438, Java8Parser.RULE_methodInvocation_lfno_primary);\r\n        let _la;\r\n        try {\r\n            this.state = 2575;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 276, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2518;\r\n                        this.methodName();\r\n                        this.state = 2519;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2521;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2520;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2523;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2525;\r\n                        this.typeNameIdent();\r\n                        this.state = 2526;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2528;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2527;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2530;\r\n                        this.ident();\r\n                        this.state = 2531;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2533;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2532;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2535;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2537;\r\n                        this.expressionName();\r\n                        this.state = 2538;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2540;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2539;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2542;\r\n                        this.ident();\r\n                        this.state = 2543;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2545;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2544;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2547;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2549;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2550;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2552;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2551;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2554;\r\n                        this.ident();\r\n                        this.state = 2555;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2557;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2556;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2559;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2561;\r\n                        this.typeNameIdent();\r\n                        this.state = 2562;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2563;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2564;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2566;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2565;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2568;\r\n                        this.ident();\r\n                        this.state = 2569;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2571;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG) |\r\n                                    (1 << Java8Parser.NEW))) !==\r\n                                0) ||\r\n                            (((_la - 37) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 37)) &\r\n                                    ((1 << (Java8Parser.SHORT - 37)) |\r\n                                        (1 << (Java8Parser.SUPER - 37)) |\r\n                                        (1 << (Java8Parser.THIS - 37)) |\r\n                                        (1 << (Java8Parser.VOID - 37)) |\r\n                                        (1 << (Java8Parser.IntegerLiteral - 37)) |\r\n                                        (1 << (Java8Parser.FloatingPointLiteral - 37)) |\r\n                                        (1 << (Java8Parser.BooleanLiteral - 37)) |\r\n                                        (1 << (Java8Parser.CharacterLiteral - 37)) |\r\n                                        (1 << (Java8Parser.StringLiteral - 37)) |\r\n                                        (1 << (Java8Parser.NullLiteral - 37)) |\r\n                                        (1 << (Java8Parser.LPAREN - 37)))) !==\r\n                                    0) ||\r\n                            (((_la - 69) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 69)) &\r\n                                    ((1 << (Java8Parser.BANG - 69)) |\r\n                                        (1 << (Java8Parser.TILDE - 69)) |\r\n                                        (1 << (Java8Parser.INC - 69)) |\r\n                                        (1 << (Java8Parser.DEC - 69)) |\r\n                                        (1 << (Java8Parser.ADD - 69)) |\r\n                                        (1 << (Java8Parser.SUB - 69)))) !==\r\n                                    0) ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2570;\r\n                                this.argumentList();\r\n                            }\r\n                        }\r\n                        this.state = 2573;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    argumentList() {\r\n        let _localctx = new ArgumentListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 440, Java8Parser.RULE_argumentList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2577;\r\n                this.expression();\r\n                this.state = 2582;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 2578;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 2579;\r\n                            this.expression();\r\n                        }\r\n                    }\r\n                    this.state = 2584;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodReference() {\r\n        let _localctx = new MethodReferenceContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 442, Java8Parser.RULE_methodReference);\r\n        let _la;\r\n        try {\r\n            this.state = 2632;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 284, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2585;\r\n                        this.expressionName();\r\n                        this.state = 2586;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2588;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2587;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2590;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2592;\r\n                        this.referenceType();\r\n                        this.state = 2593;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2595;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2594;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2597;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2599;\r\n                        this.primary();\r\n                        this.state = 2600;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2602;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2601;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2604;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2606;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2607;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2609;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2608;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2611;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2612;\r\n                        this.typeName();\r\n                        this.state = 2613;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2614;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2615;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2617;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2616;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2619;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2621;\r\n                        this.classType();\r\n                        this.state = 2622;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2624;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2623;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2626;\r\n                        this.match(Java8Parser.NEW);\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 2628;\r\n                        this.arrayType();\r\n                        this.state = 2629;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2630;\r\n                        this.match(Java8Parser.NEW);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodReference_lf_primary() {\r\n        let _localctx = new MethodReference_lf_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 444, Java8Parser.RULE_methodReference_lf_primary);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2634;\r\n                this.match(Java8Parser.COLONCOLON);\r\n                this.state = 2636;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === Java8Parser.LT) {\r\n                    {\r\n                        this.state = 2635;\r\n                        this.typeArguments();\r\n                    }\r\n                }\r\n                this.state = 2638;\r\n                this.match(Java8Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    methodReference_lfno_primary() {\r\n        let _localctx = new MethodReference_lfno_primaryContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 446, Java8Parser.RULE_methodReference_lfno_primary);\r\n        let _la;\r\n        try {\r\n            this.state = 2680;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 291, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2640;\r\n                        this.expressionName();\r\n                        this.state = 2641;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2643;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2642;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2645;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2647;\r\n                        this.referenceType();\r\n                        this.state = 2648;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2650;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2649;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2652;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2654;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2655;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2657;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2656;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2659;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2660;\r\n                        this.typeName();\r\n                        this.state = 2661;\r\n                        this.match(Java8Parser.DOT);\r\n                        this.state = 2662;\r\n                        this.match(Java8Parser.SUPER);\r\n                        this.state = 2663;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2665;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2664;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2667;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2669;\r\n                        this.classType();\r\n                        this.state = 2670;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2672;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === Java8Parser.LT) {\r\n                            {\r\n                                this.state = 2671;\r\n                                this.typeArguments();\r\n                            }\r\n                        }\r\n                        this.state = 2674;\r\n                        this.match(Java8Parser.NEW);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2676;\r\n                        this.arrayType();\r\n                        this.state = 2677;\r\n                        this.match(Java8Parser.COLONCOLON);\r\n                        this.state = 2678;\r\n                        this.match(Java8Parser.NEW);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    arrayCreationExpression() {\r\n        let _localctx = new ArrayCreationExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 448, Java8Parser.RULE_arrayCreationExpression);\r\n        try {\r\n            this.state = 2704;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 294, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2682;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2683;\r\n                        this.primitiveType();\r\n                        this.state = 2684;\r\n                        this.dimExprs();\r\n                        this.state = 2686;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 292, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2685;\r\n                                    this.dims();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2688;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2689;\r\n                        this.classOrInterfaceType();\r\n                        this.state = 2690;\r\n                        this.dimExprs();\r\n                        this.state = 2692;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 293, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2691;\r\n                                    this.dims();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2694;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2695;\r\n                        this.primitiveType();\r\n                        this.state = 2696;\r\n                        this.dims();\r\n                        this.state = 2697;\r\n                        this.arrayInitializer();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2699;\r\n                        this.match(Java8Parser.NEW);\r\n                        this.state = 2700;\r\n                        this.classOrInterfaceType();\r\n                        this.state = 2701;\r\n                        this.dims();\r\n                        this.state = 2702;\r\n                        this.arrayInitializer();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    dimExprs() {\r\n        let _localctx = new DimExprsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 450, Java8Parser.RULE_dimExprs);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2706;\r\n                this.dimExpr();\r\n                this.state = 2710;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 2707;\r\n                                this.dimExpr();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2712;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    dimExpr() {\r\n        let _localctx = new DimExprContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 452, Java8Parser.RULE_dimExpr);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2716;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.AT) {\r\n                    {\r\n                        {\r\n                            this.state = 2713;\r\n                            this.annotation();\r\n                        }\r\n                    }\r\n                    this.state = 2718;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n                this.state = 2719;\r\n                this.match(Java8Parser.LBRACK);\r\n                this.state = 2720;\r\n                this.expression();\r\n                this.state = 2721;\r\n                this.match(Java8Parser.RBRACK);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constantExpression() {\r\n        let _localctx = new ConstantExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 454, Java8Parser.RULE_constantExpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2723;\r\n                this.expression();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    expression() {\r\n        let _localctx = new ExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 456, Java8Parser.RULE_expression);\r\n        try {\r\n            this.state = 2727;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 297, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2725;\r\n                        this.lambdaExpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2726;\r\n                        this.assignmentExpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lambdaExpression() {\r\n        let _localctx = new LambdaExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 458, Java8Parser.RULE_lambdaExpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2729;\r\n                this.lambdaParameters();\r\n                this.state = 2730;\r\n                this.match(Java8Parser.ARROW);\r\n                this.state = 2731;\r\n                this.lambdaBody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lambdaParameters() {\r\n        let _localctx = new LambdaParametersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 460, Java8Parser.RULE_lambdaParameters);\r\n        let _la;\r\n        try {\r\n            this.state = 2743;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 299, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2733;\r\n                        this.match(Java8Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2734;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2736;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << Java8Parser.BOOLEAN) |\r\n                                    (1 << Java8Parser.BYTE) |\r\n                                    (1 << Java8Parser.CHAR) |\r\n                                    (1 << Java8Parser.DOUBLE) |\r\n                                    (1 << Java8Parser.FINAL) |\r\n                                    (1 << Java8Parser.FLOAT) |\r\n                                    (1 << Java8Parser.INT) |\r\n                                    (1 << Java8Parser.LONG))) !==\r\n                                0) ||\r\n                            _la === Java8Parser.SHORT ||\r\n                            _la === Java8Parser.Identifier ||\r\n                            _la === Java8Parser.AT) {\r\n                            {\r\n                                this.state = 2735;\r\n                                this.formalParameterList();\r\n                            }\r\n                        }\r\n                        this.state = 2738;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2739;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 2740;\r\n                        this.inferredFormalParameterList();\r\n                        this.state = 2741;\r\n                        this.match(Java8Parser.RPAREN);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    inferredFormalParameterList() {\r\n        let _localctx = new InferredFormalParameterListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 462, Java8Parser.RULE_inferredFormalParameterList);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2745;\r\n                this.match(Java8Parser.Identifier);\r\n                this.state = 2750;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === Java8Parser.COMMA) {\r\n                    {\r\n                        {\r\n                            this.state = 2746;\r\n                            this.match(Java8Parser.COMMA);\r\n                            this.state = 2747;\r\n                            this.match(Java8Parser.Identifier);\r\n                        }\r\n                    }\r\n                    this.state = 2752;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lambdaBody() {\r\n        let _localctx = new LambdaBodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 464, Java8Parser.RULE_lambdaBody);\r\n        try {\r\n            this.state = 2755;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.BOOLEAN:\r\n                case Java8Parser.BYTE:\r\n                case Java8Parser.CHAR:\r\n                case Java8Parser.DOUBLE:\r\n                case Java8Parser.FLOAT:\r\n                case Java8Parser.INT:\r\n                case Java8Parser.LONG:\r\n                case Java8Parser.NEW:\r\n                case Java8Parser.SHORT:\r\n                case Java8Parser.SUPER:\r\n                case Java8Parser.THIS:\r\n                case Java8Parser.VOID:\r\n                case Java8Parser.IntegerLiteral:\r\n                case Java8Parser.FloatingPointLiteral:\r\n                case Java8Parser.BooleanLiteral:\r\n                case Java8Parser.CharacterLiteral:\r\n                case Java8Parser.StringLiteral:\r\n                case Java8Parser.NullLiteral:\r\n                case Java8Parser.LPAREN:\r\n                case Java8Parser.BANG:\r\n                case Java8Parser.TILDE:\r\n                case Java8Parser.INC:\r\n                case Java8Parser.DEC:\r\n                case Java8Parser.ADD:\r\n                case Java8Parser.SUB:\r\n                case Java8Parser.Identifier:\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2753;\r\n                        this.expression();\r\n                    }\r\n                    break;\r\n                case Java8Parser.LBRACE:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2754;\r\n                        this.block();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    assignmentExpression() {\r\n        let _localctx = new AssignmentExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 466, Java8Parser.RULE_assignmentExpression);\r\n        try {\r\n            this.state = 2759;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 302, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2757;\r\n                        this.conditionalExpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2758;\r\n                        this.assignment();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    assignment() {\r\n        let _localctx = new AssignmentContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 468, Java8Parser.RULE_assignment);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2761;\r\n                this.leftHandSide();\r\n                this.state = 2762;\r\n                this.assignmentOperator();\r\n                this.state = 2763;\r\n                this.expression();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    leftHandSide() {\r\n        let _localctx = new LeftHandSideContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 470, Java8Parser.RULE_leftHandSide);\r\n        try {\r\n            this.state = 2768;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 303, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2765;\r\n                        this.expressionName();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2766;\r\n                        this.fieldAccess();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2767;\r\n                        this.arrayAccess();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    assignmentOperator() {\r\n        let _localctx = new AssignmentOperatorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 472, Java8Parser.RULE_assignmentOperator);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2770;\r\n                _la = this._input.LA(1);\r\n                if (!((((_la - 66) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 66)) &\r\n                        ((1 << (Java8Parser.ASSIGN - 66)) |\r\n                            (1 << (Java8Parser.ADD_ASSIGN - 66)) |\r\n                            (1 << (Java8Parser.SUB_ASSIGN - 66)) |\r\n                            (1 << (Java8Parser.MUL_ASSIGN - 66)) |\r\n                            (1 << (Java8Parser.DIV_ASSIGN - 66)) |\r\n                            (1 << (Java8Parser.AND_ASSIGN - 66)) |\r\n                            (1 << (Java8Parser.OR_ASSIGN - 66)) |\r\n                            (1 << (Java8Parser.XOR_ASSIGN - 66)))) !==\r\n                        0) ||\r\n                    (((_la - 98) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 98)) &\r\n                            ((1 << (Java8Parser.MOD_ASSIGN - 98)) |\r\n                                (1 << (Java8Parser.LSHIFT_ASSIGN - 98)) |\r\n                                (1 << (Java8Parser.RSHIFT_ASSIGN - 98)) |\r\n                                (1 << (Java8Parser.URSHIFT_ASSIGN - 98)))) !==\r\n                            0))) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    conditionalExpression() {\r\n        let _localctx = new ConditionalExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 474, Java8Parser.RULE_conditionalExpression);\r\n        try {\r\n            this.state = 2779;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 304, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2772;\r\n                        this.conditionalOrExpression(0);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2773;\r\n                        this.conditionalOrExpression(0);\r\n                        this.state = 2774;\r\n                        this.match(Java8Parser.QUESTION);\r\n                        this.state = 2775;\r\n                        this.expression();\r\n                        this.state = 2776;\r\n                        this.match(Java8Parser.COLON);\r\n                        this.state = 2777;\r\n                        this.conditionalExpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    or() {\r\n        let _localctx = new OrContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 476, Java8Parser.RULE_or);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2781;\r\n                this.match(Java8Parser.OR);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    conditionalOrExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new ConditionalOrExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 478;\r\n        this.enterRecursionRule(_localctx, 478, Java8Parser.RULE_conditionalOrExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2784;\r\n                    this.conditionalAndExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2792;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new ConditionalOrExpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_conditionalOrExpression);\r\n                                this.state = 2786;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2787;\r\n                                this.or();\r\n                                this.state = 2788;\r\n                                this.conditionalAndExpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2794;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    and() {\r\n        let _localctx = new AndContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 480, Java8Parser.RULE_and);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2795;\r\n                this.match(Java8Parser.AND);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    conditionalAndExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new ConditionalAndExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 482;\r\n        this.enterRecursionRule(_localctx, 482, Java8Parser.RULE_conditionalAndExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2798;\r\n                    this.inclusiveOrExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2806;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new ConditionalAndExpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_conditionalAndExpression);\r\n                                this.state = 2800;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2801;\r\n                                this.and();\r\n                                this.state = 2802;\r\n                                this.inclusiveOrExpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2808;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 306, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    bitor() {\r\n        let _localctx = new BitorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 484, Java8Parser.RULE_bitor);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2809;\r\n                this.match(Java8Parser.BITOR);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    inclusiveOrExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new InclusiveOrExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 486;\r\n        this.enterRecursionRule(_localctx, 486, Java8Parser.RULE_inclusiveOrExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2812;\r\n                    this.exclusiveOrExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2820;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_inclusiveOrExpression);\r\n                                this.state = 2814;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2815;\r\n                                this.bitor();\r\n                                this.state = 2816;\r\n                                this.exclusiveOrExpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2822;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 307, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    caret() {\r\n        let _localctx = new CaretContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 488, Java8Parser.RULE_caret);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2823;\r\n                this.match(Java8Parser.CARET);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    exclusiveOrExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new ExclusiveOrExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 490;\r\n        this.enterRecursionRule(_localctx, 490, Java8Parser.RULE_exclusiveOrExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2826;\r\n                    this.andExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2834;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_exclusiveOrExpression);\r\n                                this.state = 2828;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2829;\r\n                                this.caret();\r\n                                this.state = 2830;\r\n                                this.andExpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2836;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    bitand() {\r\n        let _localctx = new BitandContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 492, Java8Parser.RULE_bitand);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2837;\r\n                this.match(Java8Parser.BITAND);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    andExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new AndExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 494;\r\n        this.enterRecursionRule(_localctx, 494, Java8Parser.RULE_andExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2840;\r\n                    this.equalityExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2848;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new AndExpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_andExpression);\r\n                                this.state = 2842;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2843;\r\n                                this.bitand();\r\n                                this.state = 2844;\r\n                                this.equalityExpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2850;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 309, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    equal() {\r\n        let _localctx = new EqualContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 496, Java8Parser.RULE_equal);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2851;\r\n                this.match(Java8Parser.EQUAL);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    notequal() {\r\n        let _localctx = new NotequalContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 498, Java8Parser.RULE_notequal);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2853;\r\n                this.match(Java8Parser.NOTEQUAL);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    equalityExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new EqualityExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 500;\r\n        this.enterRecursionRule(_localctx, 500, Java8Parser.RULE_equalityExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2856;\r\n                    this.relationalExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2868;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 2866;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 310, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new EqualityExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_equalityExpression);\r\n                                        this.state = 2858;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 2859;\r\n                                        this.equal();\r\n                                        this.state = 2860;\r\n                                        this.relationalExpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new EqualityExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_equalityExpression);\r\n                                        this.state = 2862;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 2863;\r\n                                        this.notequal();\r\n                                        this.state = 2864;\r\n                                        this.relationalExpression(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2870;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 311, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lt() {\r\n        let _localctx = new LtContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 502, Java8Parser.RULE_lt);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2871;\r\n                this.match(Java8Parser.LT);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    gt() {\r\n        let _localctx = new GtContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 504, Java8Parser.RULE_gt);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2873;\r\n                this.match(Java8Parser.GT);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    le() {\r\n        let _localctx = new LeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 506, Java8Parser.RULE_le);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2875;\r\n                this.match(Java8Parser.LE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ge() {\r\n        let _localctx = new GeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 508, Java8Parser.RULE_ge);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2877;\r\n                this.match(Java8Parser.GE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    instanceof() {\r\n        let _localctx = new InstanceofContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 510, Java8Parser.RULE_instanceof);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2879;\r\n                this.match(Java8Parser.INSTANCEOF);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    relationalExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new RelationalExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 512;\r\n        this.enterRecursionRule(_localctx, 512, Java8Parser.RULE_relationalExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2882;\r\n                    this.shiftExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2906;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 2904;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 312, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);\r\n                                        this.state = 2884;\r\n                                        if (!this.precpred(this._ctx, 5)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 5)');\r\n                                        }\r\n                                        this.state = 2885;\r\n                                        this.lt();\r\n                                        this.state = 2886;\r\n                                        this.shiftExpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);\r\n                                        this.state = 2888;\r\n                                        if (!this.precpred(this._ctx, 4)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 4)');\r\n                                        }\r\n                                        this.state = 2889;\r\n                                        this.gt();\r\n                                        this.state = 2890;\r\n                                        this.shiftExpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 3:\r\n                                    {\r\n                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);\r\n                                        this.state = 2892;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 2893;\r\n                                        this.le();\r\n                                        this.state = 2894;\r\n                                        this.shiftExpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 4:\r\n                                    {\r\n                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);\r\n                                        this.state = 2896;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 2897;\r\n                                        this.ge();\r\n                                        this.state = 2898;\r\n                                        this.shiftExpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 5:\r\n                                    {\r\n                                        _localctx = new RelationalExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_relationalExpression);\r\n                                        this.state = 2900;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 2901;\r\n                                        this.instanceof();\r\n                                        this.state = 2902;\r\n                                        this.referenceType();\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2908;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 313, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ltlt() {\r\n        let _localctx = new LtltContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 514, Java8Parser.RULE_ltlt);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2909;\r\n                this.match(Java8Parser.LT);\r\n                this.state = 2910;\r\n                this.match(Java8Parser.LT);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    gtgt() {\r\n        let _localctx = new GtgtContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 516, Java8Parser.RULE_gtgt);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2912;\r\n                this.match(Java8Parser.GT);\r\n                this.state = 2913;\r\n                this.match(Java8Parser.GT);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    gtgtgt() {\r\n        let _localctx = new GtgtgtContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 518, Java8Parser.RULE_gtgtgt);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2915;\r\n                this.match(Java8Parser.GT);\r\n                this.state = 2916;\r\n                this.match(Java8Parser.GT);\r\n                this.state = 2917;\r\n                this.match(Java8Parser.GT);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    shiftExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new ShiftExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 520;\r\n        this.enterRecursionRule(_localctx, 520, Java8Parser.RULE_shiftExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2920;\r\n                    this.additiveExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2936;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 2934;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 314, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new ShiftExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_shiftExpression);\r\n                                        this.state = 2922;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 2923;\r\n                                        this.ltlt();\r\n                                        this.state = 2924;\r\n                                        this.additiveExpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new ShiftExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_shiftExpression);\r\n                                        this.state = 2926;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 2927;\r\n                                        this.gtgt();\r\n                                        this.state = 2928;\r\n                                        this.additiveExpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 3:\r\n                                    {\r\n                                        _localctx = new ShiftExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_shiftExpression);\r\n                                        this.state = 2930;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 2931;\r\n                                        this.gtgtgt();\r\n                                        this.state = 2932;\r\n                                        this.additiveExpression(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2938;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 315, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    additiveExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new AdditiveExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 522;\r\n        this.enterRecursionRule(_localctx, 522, Java8Parser.RULE_additiveExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2940;\r\n                    this.multiplicativeExpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2952;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 2950;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 316, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new AdditiveExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_additiveExpression);\r\n                                        this.state = 2942;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 2943;\r\n                                        this.add();\r\n                                        this.state = 2944;\r\n                                        this.multiplicativeExpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new AdditiveExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_additiveExpression);\r\n                                        this.state = 2946;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 2947;\r\n                                        this.sub();\r\n                                        this.state = 2948;\r\n                                        this.multiplicativeExpression(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2954;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 317, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    mul() {\r\n        let _localctx = new MulContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 524, Java8Parser.RULE_mul);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2955;\r\n                this.match(Java8Parser.MUL);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    div() {\r\n        let _localctx = new DivContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 526, Java8Parser.RULE_div);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2957;\r\n                this.match(Java8Parser.DIV);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    mod() {\r\n        let _localctx = new ModContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 528, Java8Parser.RULE_mod);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2959;\r\n                this.match(Java8Parser.MOD);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    multiplicativeExpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new MultiplicativeExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 530;\r\n        this.enterRecursionRule(_localctx, 530, Java8Parser.RULE_multiplicativeExpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2962;\r\n                    this.unaryExpression();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2978;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 2976;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 318, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_multiplicativeExpression);\r\n                                        this.state = 2964;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 2965;\r\n                                        this.mul();\r\n                                        this.state = 2966;\r\n                                        this.unaryExpression();\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_multiplicativeExpression);\r\n                                        this.state = 2968;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 2969;\r\n                                        this.div();\r\n                                        this.state = 2970;\r\n                                        this.unaryExpression();\r\n                                    }\r\n                                    break;\r\n                                case 3:\r\n                                    {\r\n                                        _localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, Java8Parser.RULE_multiplicativeExpression);\r\n                                        this.state = 2972;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 2973;\r\n                                        this.mod();\r\n                                        this.state = 2974;\r\n                                        this.unaryExpression();\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2980;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 319, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    add() {\r\n        let _localctx = new AddContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 532, Java8Parser.RULE_add);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2981;\r\n                this.match(Java8Parser.ADD);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    sub() {\r\n        let _localctx = new SubContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 534, Java8Parser.RULE_sub);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2983;\r\n                this.match(Java8Parser.SUB);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unaryExpression() {\r\n        let _localctx = new UnaryExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 536, Java8Parser.RULE_unaryExpression);\r\n        try {\r\n            this.state = 2994;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case Java8Parser.INC:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2985;\r\n                        this.preIncrementExpression();\r\n                    }\r\n                    break;\r\n                case Java8Parser.DEC:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2986;\r\n                        this.preDecrementExpression();\r\n                    }\r\n                    break;\r\n                case Java8Parser.ADD:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2987;\r\n                        this.add();\r\n                        this.state = 2988;\r\n                        this.unaryExpression();\r\n                    }\r\n                    break;\r\n                case Java8Parser.SUB:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2990;\r\n                        this.sub();\r\n                        this.state = 2991;\r\n                        this.unaryExpression();\r\n                    }\r\n                    break;\r\n                case Java8Parser.BOOLEAN:\r\n                case Java8Parser.BYTE:\r\n                case Java8Parser.CHAR:\r\n                case Java8Parser.DOUBLE:\r\n                case Java8Parser.FLOAT:\r\n                case Java8Parser.INT:\r\n                case Java8Parser.LONG:\r\n                case Java8Parser.NEW:\r\n                case Java8Parser.SHORT:\r\n                case Java8Parser.SUPER:\r\n                case Java8Parser.THIS:\r\n                case Java8Parser.VOID:\r\n                case Java8Parser.IntegerLiteral:\r\n                case Java8Parser.FloatingPointLiteral:\r\n                case Java8Parser.BooleanLiteral:\r\n                case Java8Parser.CharacterLiteral:\r\n                case Java8Parser.StringLiteral:\r\n                case Java8Parser.NullLiteral:\r\n                case Java8Parser.LPAREN:\r\n                case Java8Parser.BANG:\r\n                case Java8Parser.TILDE:\r\n                case Java8Parser.Identifier:\r\n                case Java8Parser.AT:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2993;\r\n                        this.unaryExpressionNotPlusMinus();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    inc() {\r\n        let _localctx = new IncContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 538, Java8Parser.RULE_inc);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2996;\r\n                this.match(Java8Parser.INC);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    preIncrementExpression() {\r\n        let _localctx = new PreIncrementExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 540, Java8Parser.RULE_preIncrementExpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2998;\r\n                this.inc();\r\n                this.state = 2999;\r\n                this.unaryExpression();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    dec() {\r\n        let _localctx = new DecContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 542, Java8Parser.RULE_dec);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 3001;\r\n                this.match(Java8Parser.DEC);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    preDecrementExpression() {\r\n        let _localctx = new PreDecrementExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 544, Java8Parser.RULE_preDecrementExpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 3003;\r\n                this.dec();\r\n                this.state = 3004;\r\n                this.unaryExpression();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    tilde() {\r\n        let _localctx = new TildeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 546, Java8Parser.RULE_tilde);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 3006;\r\n                this.match(Java8Parser.TILDE);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    bang() {\r\n        let _localctx = new BangContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 548, Java8Parser.RULE_bang);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 3008;\r\n                this.match(Java8Parser.BANG);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unaryExpressionNotPlusMinus() {\r\n        let _localctx = new UnaryExpressionNotPlusMinusContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 550, Java8Parser.RULE_unaryExpressionNotPlusMinus);\r\n        try {\r\n            this.state = 3018;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 321, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 3010;\r\n                        this.postfixExpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 3011;\r\n                        this.tilde();\r\n                        this.state = 3012;\r\n                        this.unaryExpression();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 3014;\r\n                        this.bang();\r\n                        this.state = 3015;\r\n                        this.unaryExpression();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 3017;\r\n                        this.castExpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    postfixExpression() {\r\n        let _localctx = new PostfixExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 552, Java8Parser.RULE_postfixExpression);\r\n        try {\r\n            let _alt;\r\n            this.state = 3033;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 325, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 3020;\r\n                        this.primary();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 3021;\r\n                        this.expressionName();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 3024;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 322, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 3022;\r\n                                    this.primary();\r\n                                }\r\n                                break;\r\n                            case 2:\r\n                                {\r\n                                    this.state = 3023;\r\n                                    this.expressionName();\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 3030;\r\n                        this._errHandler.sync(this);\r\n                        _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);\r\n                        while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                            if (_alt === 1) {\r\n                                {\r\n                                    this.state = 3028;\r\n                                    this._errHandler.sync(this);\r\n                                    switch (this._input.LA(1)) {\r\n                                        case Java8Parser.INC:\r\n                                            {\r\n                                                this.state = 3026;\r\n                                                this.postIncrementExpression_lf_postfixExpression();\r\n                                            }\r\n                                            break;\r\n                                        case Java8Parser.DEC:\r\n                                            {\r\n                                                this.state = 3027;\r\n                                                this.postDecrementExpression_lf_postfixExpression();\r\n                                            }\r\n                                            break;\r\n                                        default:\r\n                                            throw new NoViableAltException_1.NoViableAltException(this);\r\n                                    }\r\n                                }\r\n                            }\r\n                            this.state = 3032;\r\n                            this._errHandler.sync(this);\r\n                            _alt = this.interpreter.adaptivePredict(this._input, 324, this._ctx);\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    postIncrementExpression() {\r\n        let _localctx = new PostIncrementExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 554, Java8Parser.RULE_postIncrementExpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 3035;\r\n                this.postfixExpression();\r\n                this.state = 3036;\r\n                this.inc();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    postIncrementExpression_lf_postfixExpression() {\r\n        let _localctx = new PostIncrementExpression_lf_postfixExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 556, Java8Parser.RULE_postIncrementExpression_lf_postfixExpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 3038;\r\n                this.match(Java8Parser.INC);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    postDecrementExpression() {\r\n        let _localctx = new PostDecrementExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 558, Java8Parser.RULE_postDecrementExpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 3040;\r\n                this.postfixExpression();\r\n                this.state = 3041;\r\n                this.dec();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    postDecrementExpression_lf_postfixExpression() {\r\n        let _localctx = new PostDecrementExpression_lf_postfixExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 560, Java8Parser.RULE_postDecrementExpression_lf_postfixExpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 3043;\r\n                this.match(Java8Parser.DEC);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    castExpression() {\r\n        let _localctx = new CastExpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 562, Java8Parser.RULE_castExpression);\r\n        let _la;\r\n        try {\r\n            this.state = 3072;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 328, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 3045;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 3046;\r\n                        this.primitiveType();\r\n                        this.state = 3047;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 3048;\r\n                        this.unaryExpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 3050;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 3051;\r\n                        this.referenceType();\r\n                        this.state = 3055;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.BITAND) {\r\n                            {\r\n                                {\r\n                                    this.state = 3052;\r\n                                    this.additionalBound();\r\n                                }\r\n                            }\r\n                            this.state = 3057;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 3058;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 3059;\r\n                        this.unaryExpressionNotPlusMinus();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 3061;\r\n                        this.match(Java8Parser.LPAREN);\r\n                        this.state = 3062;\r\n                        this.referenceType();\r\n                        this.state = 3066;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        while (_la === Java8Parser.BITAND) {\r\n                            {\r\n                                {\r\n                                    this.state = 3063;\r\n                                    this.additionalBound();\r\n                                }\r\n                            }\r\n                            this.state = 3068;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                        }\r\n                        this.state = 3069;\r\n                        this.match(Java8Parser.RPAREN);\r\n                        this.state = 3070;\r\n                        this.lambdaExpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    sempred(_localctx, ruleIndex, predIndex) {\r\n        switch (ruleIndex) {\r\n            case 33:\r\n                return this.packageName_sempred(_localctx, predIndex);\r\n            case 36:\r\n                return this.packageOrTypeName_sempred(_localctx, predIndex);\r\n            case 38:\r\n                return this.ambiguousName_sempred(_localctx, predIndex);\r\n            case 239:\r\n                return this.conditionalOrExpression_sempred(_localctx, predIndex);\r\n            case 241:\r\n                return this.conditionalAndExpression_sempred(_localctx, predIndex);\r\n            case 243:\r\n                return this.inclusiveOrExpression_sempred(_localctx, predIndex);\r\n            case 245:\r\n                return this.exclusiveOrExpression_sempred(_localctx, predIndex);\r\n            case 247:\r\n                return this.andExpression_sempred(_localctx, predIndex);\r\n            case 250:\r\n                return this.equalityExpression_sempred(_localctx, predIndex);\r\n            case 256:\r\n                return this.relationalExpression_sempred(_localctx, predIndex);\r\n            case 260:\r\n                return this.shiftExpression_sempred(_localctx, predIndex);\r\n            case 261:\r\n                return this.additiveExpression_sempred(_localctx, predIndex);\r\n            case 265:\r\n                return this.multiplicativeExpression_sempred(_localctx, predIndex);\r\n        }\r\n        return true;\r\n    }\r\n    packageName_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 0:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    packageOrTypeName_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 1:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    ambiguousName_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 2:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    conditionalOrExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 3:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    conditionalAndExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 4:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    inclusiveOrExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 5:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    exclusiveOrExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 6:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    andExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 7:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    equalityExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 8:\r\n                return this.precpred(this._ctx, 2);\r\n            case 9:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    relationalExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 10:\r\n                return this.precpred(this._ctx, 5);\r\n            case 11:\r\n                return this.precpred(this._ctx, 4);\r\n            case 12:\r\n                return this.precpred(this._ctx, 3);\r\n            case 13:\r\n                return this.precpred(this._ctx, 2);\r\n            case 14:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    shiftExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 15:\r\n                return this.precpred(this._ctx, 3);\r\n            case 16:\r\n                return this.precpred(this._ctx, 2);\r\n            case 17:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    additiveExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 18:\r\n                return this.precpred(this._ctx, 2);\r\n            case 19:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    multiplicativeExpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 20:\r\n                return this.precpred(this._ctx, 3);\r\n            case 21:\r\n                return this.precpred(this._ctx, 2);\r\n            case 22:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    static get _ATN() {\r\n        if (!Java8Parser.__ATN) {\r\n            Java8Parser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(Java8Parser._serializedATN));\r\n        }\r\n        return Java8Parser.__ATN;\r\n    }\r\n}\r\nexports.Java8Parser = Java8Parser;\r\nJava8Parser.ABSTRACT = 1;\r\nJava8Parser.ASSERT = 2;\r\nJava8Parser.BOOLEAN = 3;\r\nJava8Parser.BREAK = 4;\r\nJava8Parser.BYTE = 5;\r\nJava8Parser.CASE = 6;\r\nJava8Parser.CATCH = 7;\r\nJava8Parser.CHAR = 8;\r\nJava8Parser.CLASS = 9;\r\nJava8Parser.CONST = 10;\r\nJava8Parser.CONTINUE = 11;\r\nJava8Parser.DEFAULT = 12;\r\nJava8Parser.DO = 13;\r\nJava8Parser.DOUBLE = 14;\r\nJava8Parser.ELSE = 15;\r\nJava8Parser.ENUM = 16;\r\nJava8Parser.EXTENDS = 17;\r\nJava8Parser.FINAL = 18;\r\nJava8Parser.FINALLY = 19;\r\nJava8Parser.FLOAT = 20;\r\nJava8Parser.FOR = 21;\r\nJava8Parser.IF = 22;\r\nJava8Parser.GOTO = 23;\r\nJava8Parser.IMPLEMENTS = 24;\r\nJava8Parser.IMPORT = 25;\r\nJava8Parser.INSTANCEOF = 26;\r\nJava8Parser.INT = 27;\r\nJava8Parser.INTERFACE = 28;\r\nJava8Parser.LONG = 29;\r\nJava8Parser.NATIVE = 30;\r\nJava8Parser.NEW = 31;\r\nJava8Parser.PACKAGE = 32;\r\nJava8Parser.PRIVATE = 33;\r\nJava8Parser.PROTECTED = 34;\r\nJava8Parser.PUBLIC = 35;\r\nJava8Parser.RETURN = 36;\r\nJava8Parser.SHORT = 37;\r\nJava8Parser.STATIC = 38;\r\nJava8Parser.STRICTFP = 39;\r\nJava8Parser.SUPER = 40;\r\nJava8Parser.SWITCH = 41;\r\nJava8Parser.SYNCHRONIZED = 42;\r\nJava8Parser.THIS = 43;\r\nJava8Parser.THROW = 44;\r\nJava8Parser.THROWS = 45;\r\nJava8Parser.TRANSIENT = 46;\r\nJava8Parser.TRY = 47;\r\nJava8Parser.VOID = 48;\r\nJava8Parser.VOLATILE = 49;\r\nJava8Parser.WHILE = 50;\r\nJava8Parser.IntegerLiteral = 51;\r\nJava8Parser.FloatingPointLiteral = 52;\r\nJava8Parser.BooleanLiteral = 53;\r\nJava8Parser.CharacterLiteral = 54;\r\nJava8Parser.StringLiteral = 55;\r\nJava8Parser.NullLiteral = 56;\r\nJava8Parser.LPAREN = 57;\r\nJava8Parser.RPAREN = 58;\r\nJava8Parser.LBRACE = 59;\r\nJava8Parser.RBRACE = 60;\r\nJava8Parser.LBRACK = 61;\r\nJava8Parser.RBRACK = 62;\r\nJava8Parser.SEMI = 63;\r\nJava8Parser.COMMA = 64;\r\nJava8Parser.DOT = 65;\r\nJava8Parser.ASSIGN = 66;\r\nJava8Parser.GT = 67;\r\nJava8Parser.LT = 68;\r\nJava8Parser.BANG = 69;\r\nJava8Parser.TILDE = 70;\r\nJava8Parser.QUESTION = 71;\r\nJava8Parser.COLON = 72;\r\nJava8Parser.EQUAL = 73;\r\nJava8Parser.LE = 74;\r\nJava8Parser.GE = 75;\r\nJava8Parser.NOTEQUAL = 76;\r\nJava8Parser.AND = 77;\r\nJava8Parser.OR = 78;\r\nJava8Parser.INC = 79;\r\nJava8Parser.DEC = 80;\r\nJava8Parser.ADD = 81;\r\nJava8Parser.SUB = 82;\r\nJava8Parser.MUL = 83;\r\nJava8Parser.DIV = 84;\r\nJava8Parser.BITAND = 85;\r\nJava8Parser.BITOR = 86;\r\nJava8Parser.CARET = 87;\r\nJava8Parser.MOD = 88;\r\nJava8Parser.ARROW = 89;\r\nJava8Parser.COLONCOLON = 90;\r\nJava8Parser.ADD_ASSIGN = 91;\r\nJava8Parser.SUB_ASSIGN = 92;\r\nJava8Parser.MUL_ASSIGN = 93;\r\nJava8Parser.DIV_ASSIGN = 94;\r\nJava8Parser.AND_ASSIGN = 95;\r\nJava8Parser.OR_ASSIGN = 96;\r\nJava8Parser.XOR_ASSIGN = 97;\r\nJava8Parser.MOD_ASSIGN = 98;\r\nJava8Parser.LSHIFT_ASSIGN = 99;\r\nJava8Parser.RSHIFT_ASSIGN = 100;\r\nJava8Parser.URSHIFT_ASSIGN = 101;\r\nJava8Parser.Identifier = 102;\r\nJava8Parser.AT = 103;\r\nJava8Parser.ELLIPSIS = 104;\r\nJava8Parser.WS = 105;\r\nJava8Parser.COMMENT = 106;\r\nJava8Parser.LINE_COMMENT = 107;\r\nJava8Parser.RULE_translationunit = 0;\r\nJava8Parser.RULE_literal = 1;\r\nJava8Parser.RULE_integerLiteral = 2;\r\nJava8Parser.RULE_floatingPointLiteral = 3;\r\nJava8Parser.RULE_booleanLiteral = 4;\r\nJava8Parser.RULE_stringLiteral = 5;\r\nJava8Parser.RULE_characterLiteral = 6;\r\nJava8Parser.RULE_nullLiteral = 7;\r\nJava8Parser.RULE_type = 8;\r\nJava8Parser.RULE_primitiveType = 9;\r\nJava8Parser.RULE_numericType = 10;\r\nJava8Parser.RULE_integralType = 11;\r\nJava8Parser.RULE_floatingPointType = 12;\r\nJava8Parser.RULE_referenceType = 13;\r\nJava8Parser.RULE_classOrInterfaceType = 14;\r\nJava8Parser.RULE_classType = 15;\r\nJava8Parser.RULE_classType_lf_classOrInterfaceType = 16;\r\nJava8Parser.RULE_classType_lfno_classOrInterfaceType = 17;\r\nJava8Parser.RULE_interfaceType = 18;\r\nJava8Parser.RULE_interfaceType_lf_classOrInterfaceType = 19;\r\nJava8Parser.RULE_interfaceType_lfno_classOrInterfaceType = 20;\r\nJava8Parser.RULE_typeVariable = 21;\r\nJava8Parser.RULE_arrayType = 22;\r\nJava8Parser.RULE_dims = 23;\r\nJava8Parser.RULE_typeParameter = 24;\r\nJava8Parser.RULE_typeParameterModifier = 25;\r\nJava8Parser.RULE_typeBound = 26;\r\nJava8Parser.RULE_additionalBound = 27;\r\nJava8Parser.RULE_typeArguments = 28;\r\nJava8Parser.RULE_typeArgumentList = 29;\r\nJava8Parser.RULE_typeArgument = 30;\r\nJava8Parser.RULE_wildcard = 31;\r\nJava8Parser.RULE_wildcardBounds = 32;\r\nJava8Parser.RULE_packageName = 33;\r\nJava8Parser.RULE_typeName = 34;\r\nJava8Parser.RULE_typeNameIdent = 35;\r\nJava8Parser.RULE_packageOrTypeName = 36;\r\nJava8Parser.RULE_expressionName = 37;\r\nJava8Parser.RULE_ambiguousName = 38;\r\nJava8Parser.RULE_compilationUnit = 39;\r\nJava8Parser.RULE_packageDeclaration = 40;\r\nJava8Parser.RULE_packageModifier = 41;\r\nJava8Parser.RULE_importDeclaration = 42;\r\nJava8Parser.RULE_singleTypeImportDeclaration = 43;\r\nJava8Parser.RULE_typeImportOnDemandDeclaration = 44;\r\nJava8Parser.RULE_singleStaticImportDeclaration = 45;\r\nJava8Parser.RULE_staticImportOnDemandDeclaration = 46;\r\nJava8Parser.RULE_typeDeclaration = 47;\r\nJava8Parser.RULE_classDeclaration = 48;\r\nJava8Parser.RULE_normalClassDeclaration = 49;\r\nJava8Parser.RULE_className = 50;\r\nJava8Parser.RULE_classModifiers = 51;\r\nJava8Parser.RULE_classModifier = 52;\r\nJava8Parser.RULE_typeParameters = 53;\r\nJava8Parser.RULE_typeParameterList = 54;\r\nJava8Parser.RULE_superclass = 55;\r\nJava8Parser.RULE_superinterfaces = 56;\r\nJava8Parser.RULE_interfaceTypeList = 57;\r\nJava8Parser.RULE_classBody = 58;\r\nJava8Parser.RULE_classBodyDeclaration = 59;\r\nJava8Parser.RULE_classMemberDeclaration = 60;\r\nJava8Parser.RULE_fieldDeclaration = 61;\r\nJava8Parser.RULE_fieldModifiers = 62;\r\nJava8Parser.RULE_fieldModifier = 63;\r\nJava8Parser.RULE_variableDeclaratorList = 64;\r\nJava8Parser.RULE_variableDeclarator = 65;\r\nJava8Parser.RULE_variableDeclaratorId = 66;\r\nJava8Parser.RULE_variableInitializer = 67;\r\nJava8Parser.RULE_unannType = 68;\r\nJava8Parser.RULE_unannPrimitiveType = 69;\r\nJava8Parser.RULE_unannReferenceType = 70;\r\nJava8Parser.RULE_unannClassOrInterfaceType = 71;\r\nJava8Parser.RULE_unannClassType = 72;\r\nJava8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType = 73;\r\nJava8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType = 74;\r\nJava8Parser.RULE_unannInterfaceType = 75;\r\nJava8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 76;\r\nJava8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 77;\r\nJava8Parser.RULE_unannTypeVariable = 78;\r\nJava8Parser.RULE_unannArrayType = 79;\r\nJava8Parser.RULE_methodDeclaration = 80;\r\nJava8Parser.RULE_methodModifier = 81;\r\nJava8Parser.RULE_methodHeader = 82;\r\nJava8Parser.RULE_result = 83;\r\nJava8Parser.RULE_methodDeclarator = 84;\r\nJava8Parser.RULE_methodName = 85;\r\nJava8Parser.RULE_formalParameterList = 86;\r\nJava8Parser.RULE_formalParameters = 87;\r\nJava8Parser.RULE_formalParameter = 88;\r\nJava8Parser.RULE_parameterDeclaratorIds = 89;\r\nJava8Parser.RULE_parameterDeclaratorId = 90;\r\nJava8Parser.RULE_parameterName = 91;\r\nJava8Parser.RULE_variableModifier = 92;\r\nJava8Parser.RULE_lastFormalParameter = 93;\r\nJava8Parser.RULE_receiverParameter = 94;\r\nJava8Parser.RULE_throws_ = 95;\r\nJava8Parser.RULE_exceptionTypeList = 96;\r\nJava8Parser.RULE_exceptionType = 97;\r\nJava8Parser.RULE_methodBody = 98;\r\nJava8Parser.RULE_instanceInitializer = 99;\r\nJava8Parser.RULE_staticInitializer = 100;\r\nJava8Parser.RULE_constructorDeclaration = 101;\r\nJava8Parser.RULE_constructorModifier = 102;\r\nJava8Parser.RULE_constructorDeclarator = 103;\r\nJava8Parser.RULE_simpleTypeName = 104;\r\nJava8Parser.RULE_constructorBody = 105;\r\nJava8Parser.RULE_explicitConstructorInvocation = 106;\r\nJava8Parser.RULE_enumDeclaration = 107;\r\nJava8Parser.RULE_enumBody = 108;\r\nJava8Parser.RULE_enumConstantList = 109;\r\nJava8Parser.RULE_enumConstant = 110;\r\nJava8Parser.RULE_enumConstantModifier = 111;\r\nJava8Parser.RULE_enumBodyDeclarations = 112;\r\nJava8Parser.RULE_interfaceDeclaration = 113;\r\nJava8Parser.RULE_normalInterfaceDeclaration = 114;\r\nJava8Parser.RULE_interfaceModifiers = 115;\r\nJava8Parser.RULE_interfaceName = 116;\r\nJava8Parser.RULE_interfaceModifier = 117;\r\nJava8Parser.RULE_extendsInterfaces = 118;\r\nJava8Parser.RULE_interfaceBody = 119;\r\nJava8Parser.RULE_interfaceMemberDeclaration = 120;\r\nJava8Parser.RULE_constantDeclaration = 121;\r\nJava8Parser.RULE_constantModifiers = 122;\r\nJava8Parser.RULE_constantModifier = 123;\r\nJava8Parser.RULE_interfaceMethodDeclaration = 124;\r\nJava8Parser.RULE_interfaceMethodModifiers = 125;\r\nJava8Parser.RULE_interfaceMethodModifier = 126;\r\nJava8Parser.RULE_annotationTypeDeclaration = 127;\r\nJava8Parser.RULE_annotationTypeBody = 128;\r\nJava8Parser.RULE_annotationTypeMemberDeclaration = 129;\r\nJava8Parser.RULE_annotationTypeElementDeclaration = 130;\r\nJava8Parser.RULE_annotationTypeElementModifier = 131;\r\nJava8Parser.RULE_defaultValue = 132;\r\nJava8Parser.RULE_annotation = 133;\r\nJava8Parser.RULE_normalAnnotation = 134;\r\nJava8Parser.RULE_elementValuePairList = 135;\r\nJava8Parser.RULE_elementValuePair = 136;\r\nJava8Parser.RULE_elementValue = 137;\r\nJava8Parser.RULE_elementValueArrayInitializer = 138;\r\nJava8Parser.RULE_elementValueList = 139;\r\nJava8Parser.RULE_markerAnnotation = 140;\r\nJava8Parser.RULE_singleElementAnnotation = 141;\r\nJava8Parser.RULE_arrayInitializer = 142;\r\nJava8Parser.RULE_variableInitializerList = 143;\r\nJava8Parser.RULE_block = 144;\r\nJava8Parser.RULE_blockStatements = 145;\r\nJava8Parser.RULE_blockStatement = 146;\r\nJava8Parser.RULE_localVariableDeclarationStatement = 147;\r\nJava8Parser.RULE_localVariableDeclaration = 148;\r\nJava8Parser.RULE_statement = 149;\r\nJava8Parser.RULE_statementNoShortIf = 150;\r\nJava8Parser.RULE_statementWithoutTrailingSubstatement = 151;\r\nJava8Parser.RULE_emptyStatement = 152;\r\nJava8Parser.RULE_labeledStatement = 153;\r\nJava8Parser.RULE_labeledStatementNoShortIf = 154;\r\nJava8Parser.RULE_expressionStatement = 155;\r\nJava8Parser.RULE_statementExpression = 156;\r\nJava8Parser.RULE_ifThenStatement = 157;\r\nJava8Parser.RULE_ifThenElseStatement = 158;\r\nJava8Parser.RULE_ifThenElseStatementNoShortIf = 159;\r\nJava8Parser.RULE_assertStatement = 160;\r\nJava8Parser.RULE_switchStatement = 161;\r\nJava8Parser.RULE_switchBlock = 162;\r\nJava8Parser.RULE_switchBlockStatementGroup = 163;\r\nJava8Parser.RULE_switchLabels = 164;\r\nJava8Parser.RULE_switchLabel = 165;\r\nJava8Parser.RULE_enumConstantName = 166;\r\nJava8Parser.RULE_whileStatement = 167;\r\nJava8Parser.RULE_whileStatementNoShortIf = 168;\r\nJava8Parser.RULE_doStatement = 169;\r\nJava8Parser.RULE_forStatement = 170;\r\nJava8Parser.RULE_forStatementNoShortIf = 171;\r\nJava8Parser.RULE_basicForStatement = 172;\r\nJava8Parser.RULE_basicForStatementNoShortIf = 173;\r\nJava8Parser.RULE_forInit = 174;\r\nJava8Parser.RULE_forUpdate = 175;\r\nJava8Parser.RULE_statementExpressionList = 176;\r\nJava8Parser.RULE_enhancedForStatement = 177;\r\nJava8Parser.RULE_enhancedForStatementNoShortIf = 178;\r\nJava8Parser.RULE_breakStatement = 179;\r\nJava8Parser.RULE_continueStatement = 180;\r\nJava8Parser.RULE_returnStatement = 181;\r\nJava8Parser.RULE_throwStatement = 182;\r\nJava8Parser.RULE_synchronizedStatement = 183;\r\nJava8Parser.RULE_tryStatement = 184;\r\nJava8Parser.RULE_catches = 185;\r\nJava8Parser.RULE_catchClause = 186;\r\nJava8Parser.RULE_catchFormalParameter = 187;\r\nJava8Parser.RULE_catchType = 188;\r\nJava8Parser.RULE_finally_ = 189;\r\nJava8Parser.RULE_tryWithResourcesStatement = 190;\r\nJava8Parser.RULE_resourceSpecification = 191;\r\nJava8Parser.RULE_resourceList = 192;\r\nJava8Parser.RULE_resource = 193;\r\nJava8Parser.RULE_primary = 194;\r\nJava8Parser.RULE_primaryNoNewArray = 195;\r\nJava8Parser.RULE_primaryNoNewArray_lf_arrayAccess = 196;\r\nJava8Parser.RULE_primaryNoNewArray_lfno_arrayAccess = 197;\r\nJava8Parser.RULE_primaryNoNewArray_lf_primary = 198;\r\nJava8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 199;\r\nJava8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 200;\r\nJava8Parser.RULE_primaryNoNewArray_lfno_primary = 201;\r\nJava8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 202;\r\nJava8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 203;\r\nJava8Parser.RULE_classInstanceCreationExpression = 204;\r\nJava8Parser.RULE_classInstanceCreationExpression_lf_primary = 205;\r\nJava8Parser.RULE_classInstanceCreationExpression_lfno_primary = 206;\r\nJava8Parser.RULE_typeArgumentsOrDiamond = 207;\r\nJava8Parser.RULE_fieldAccess = 208;\r\nJava8Parser.RULE_fieldAccess_lf_primary = 209;\r\nJava8Parser.RULE_fieldAccess_lfno_primary = 210;\r\nJava8Parser.RULE_arrayAccess = 211;\r\nJava8Parser.RULE_arrayAccess_lf_primary = 212;\r\nJava8Parser.RULE_arrayAccess_lfno_primary = 213;\r\nJava8Parser.RULE_methodInvocation = 214;\r\nJava8Parser.RULE_receivers = 215;\r\nJava8Parser.RULE_receiver = 216;\r\nJava8Parser.RULE_ident = 217;\r\nJava8Parser.RULE_methodInvocation_lf_primary = 218;\r\nJava8Parser.RULE_methodInvocation_lfno_primary = 219;\r\nJava8Parser.RULE_argumentList = 220;\r\nJava8Parser.RULE_methodReference = 221;\r\nJava8Parser.RULE_methodReference_lf_primary = 222;\r\nJava8Parser.RULE_methodReference_lfno_primary = 223;\r\nJava8Parser.RULE_arrayCreationExpression = 224;\r\nJava8Parser.RULE_dimExprs = 225;\r\nJava8Parser.RULE_dimExpr = 226;\r\nJava8Parser.RULE_constantExpression = 227;\r\nJava8Parser.RULE_expression = 228;\r\nJava8Parser.RULE_lambdaExpression = 229;\r\nJava8Parser.RULE_lambdaParameters = 230;\r\nJava8Parser.RULE_inferredFormalParameterList = 231;\r\nJava8Parser.RULE_lambdaBody = 232;\r\nJava8Parser.RULE_assignmentExpression = 233;\r\nJava8Parser.RULE_assignment = 234;\r\nJava8Parser.RULE_leftHandSide = 235;\r\nJava8Parser.RULE_assignmentOperator = 236;\r\nJava8Parser.RULE_conditionalExpression = 237;\r\nJava8Parser.RULE_or = 238;\r\nJava8Parser.RULE_conditionalOrExpression = 239;\r\nJava8Parser.RULE_and = 240;\r\nJava8Parser.RULE_conditionalAndExpression = 241;\r\nJava8Parser.RULE_bitor = 242;\r\nJava8Parser.RULE_inclusiveOrExpression = 243;\r\nJava8Parser.RULE_caret = 244;\r\nJava8Parser.RULE_exclusiveOrExpression = 245;\r\nJava8Parser.RULE_bitand = 246;\r\nJava8Parser.RULE_andExpression = 247;\r\nJava8Parser.RULE_equal = 248;\r\nJava8Parser.RULE_notequal = 249;\r\nJava8Parser.RULE_equalityExpression = 250;\r\nJava8Parser.RULE_lt = 251;\r\nJava8Parser.RULE_gt = 252;\r\nJava8Parser.RULE_le = 253;\r\nJava8Parser.RULE_ge = 254;\r\nJava8Parser.RULE_instanceof = 255;\r\nJava8Parser.RULE_relationalExpression = 256;\r\nJava8Parser.RULE_ltlt = 257;\r\nJava8Parser.RULE_gtgt = 258;\r\nJava8Parser.RULE_gtgtgt = 259;\r\nJava8Parser.RULE_shiftExpression = 260;\r\nJava8Parser.RULE_additiveExpression = 261;\r\nJava8Parser.RULE_mul = 262;\r\nJava8Parser.RULE_div = 263;\r\nJava8Parser.RULE_mod = 264;\r\nJava8Parser.RULE_multiplicativeExpression = 265;\r\nJava8Parser.RULE_add = 266;\r\nJava8Parser.RULE_sub = 267;\r\nJava8Parser.RULE_unaryExpression = 268;\r\nJava8Parser.RULE_inc = 269;\r\nJava8Parser.RULE_preIncrementExpression = 270;\r\nJava8Parser.RULE_dec = 271;\r\nJava8Parser.RULE_preDecrementExpression = 272;\r\nJava8Parser.RULE_tilde = 273;\r\nJava8Parser.RULE_bang = 274;\r\nJava8Parser.RULE_unaryExpressionNotPlusMinus = 275;\r\nJava8Parser.RULE_postfixExpression = 276;\r\nJava8Parser.RULE_postIncrementExpression = 277;\r\nJava8Parser.RULE_postIncrementExpression_lf_postfixExpression = 278;\r\nJava8Parser.RULE_postDecrementExpression = 279;\r\nJava8Parser.RULE_postDecrementExpression_lf_postfixExpression = 280;\r\nJava8Parser.RULE_castExpression = 281;\r\n// tslint:disable:no-trailing-whitespace\r\nJava8Parser.ruleNames = [\r\n    'translationunit',\r\n    'literal',\r\n    'integerLiteral',\r\n    'floatingPointLiteral',\r\n    'booleanLiteral',\r\n    'stringLiteral',\r\n    'characterLiteral',\r\n    'nullLiteral',\r\n    'type',\r\n    'primitiveType',\r\n    'numericType',\r\n    'integralType',\r\n    'floatingPointType',\r\n    'referenceType',\r\n    'classOrInterfaceType',\r\n    'classType',\r\n    'classType_lf_classOrInterfaceType',\r\n    'classType_lfno_classOrInterfaceType',\r\n    'interfaceType',\r\n    'interfaceType_lf_classOrInterfaceType',\r\n    'interfaceType_lfno_classOrInterfaceType',\r\n    'typeVariable',\r\n    'arrayType',\r\n    'dims',\r\n    'typeParameter',\r\n    'typeParameterModifier',\r\n    'typeBound',\r\n    'additionalBound',\r\n    'typeArguments',\r\n    'typeArgumentList',\r\n    'typeArgument',\r\n    'wildcard',\r\n    'wildcardBounds',\r\n    'packageName',\r\n    'typeName',\r\n    'typeNameIdent',\r\n    'packageOrTypeName',\r\n    'expressionName',\r\n    'ambiguousName',\r\n    'compilationUnit',\r\n    'packageDeclaration',\r\n    'packageModifier',\r\n    'importDeclaration',\r\n    'singleTypeImportDeclaration',\r\n    'typeImportOnDemandDeclaration',\r\n    'singleStaticImportDeclaration',\r\n    'staticImportOnDemandDeclaration',\r\n    'typeDeclaration',\r\n    'classDeclaration',\r\n    'normalClassDeclaration',\r\n    'className',\r\n    'classModifiers',\r\n    'classModifier',\r\n    'typeParameters',\r\n    'typeParameterList',\r\n    'superclass',\r\n    'superinterfaces',\r\n    'interfaceTypeList',\r\n    'classBody',\r\n    'classBodyDeclaration',\r\n    'classMemberDeclaration',\r\n    'fieldDeclaration',\r\n    'fieldModifiers',\r\n    'fieldModifier',\r\n    'variableDeclaratorList',\r\n    'variableDeclarator',\r\n    'variableDeclaratorId',\r\n    'variableInitializer',\r\n    'unannType',\r\n    'unannPrimitiveType',\r\n    'unannReferenceType',\r\n    'unannClassOrInterfaceType',\r\n    'unannClassType',\r\n    'unannClassType_lf_unannClassOrInterfaceType',\r\n    'unannClassType_lfno_unannClassOrInterfaceType',\r\n    'unannInterfaceType',\r\n    'unannInterfaceType_lf_unannClassOrInterfaceType',\r\n    'unannInterfaceType_lfno_unannClassOrInterfaceType',\r\n    'unannTypeVariable',\r\n    'unannArrayType',\r\n    'methodDeclaration',\r\n    'methodModifier',\r\n    'methodHeader',\r\n    'result',\r\n    'methodDeclarator',\r\n    'methodName',\r\n    'formalParameterList',\r\n    'formalParameters',\r\n    'formalParameter',\r\n    'parameterDeclaratorIds',\r\n    'parameterDeclaratorId',\r\n    'parameterName',\r\n    'variableModifier',\r\n    'lastFormalParameter',\r\n    'receiverParameter',\r\n    'throws_',\r\n    'exceptionTypeList',\r\n    'exceptionType',\r\n    'methodBody',\r\n    'instanceInitializer',\r\n    'staticInitializer',\r\n    'constructorDeclaration',\r\n    'constructorModifier',\r\n    'constructorDeclarator',\r\n    'simpleTypeName',\r\n    'constructorBody',\r\n    'explicitConstructorInvocation',\r\n    'enumDeclaration',\r\n    'enumBody',\r\n    'enumConstantList',\r\n    'enumConstant',\r\n    'enumConstantModifier',\r\n    'enumBodyDeclarations',\r\n    'interfaceDeclaration',\r\n    'normalInterfaceDeclaration',\r\n    'interfaceModifiers',\r\n    'interfaceName',\r\n    'interfaceModifier',\r\n    'extendsInterfaces',\r\n    'interfaceBody',\r\n    'interfaceMemberDeclaration',\r\n    'constantDeclaration',\r\n    'constantModifiers',\r\n    'constantModifier',\r\n    'interfaceMethodDeclaration',\r\n    'interfaceMethodModifiers',\r\n    'interfaceMethodModifier',\r\n    'annotationTypeDeclaration',\r\n    'annotationTypeBody',\r\n    'annotationTypeMemberDeclaration',\r\n    'annotationTypeElementDeclaration',\r\n    'annotationTypeElementModifier',\r\n    'defaultValue',\r\n    'annotation',\r\n    'normalAnnotation',\r\n    'elementValuePairList',\r\n    'elementValuePair',\r\n    'elementValue',\r\n    'elementValueArrayInitializer',\r\n    'elementValueList',\r\n    'markerAnnotation',\r\n    'singleElementAnnotation',\r\n    'arrayInitializer',\r\n    'variableInitializerList',\r\n    'block',\r\n    'blockStatements',\r\n    'blockStatement',\r\n    'localVariableDeclarationStatement',\r\n    'localVariableDeclaration',\r\n    'statement',\r\n    'statementNoShortIf',\r\n    'statementWithoutTrailingSubstatement',\r\n    'emptyStatement',\r\n    'labeledStatement',\r\n    'labeledStatementNoShortIf',\r\n    'expressionStatement',\r\n    'statementExpression',\r\n    'ifThenStatement',\r\n    'ifThenElseStatement',\r\n    'ifThenElseStatementNoShortIf',\r\n    'assertStatement',\r\n    'switchStatement',\r\n    'switchBlock',\r\n    'switchBlockStatementGroup',\r\n    'switchLabels',\r\n    'switchLabel',\r\n    'enumConstantName',\r\n    'whileStatement',\r\n    'whileStatementNoShortIf',\r\n    'doStatement',\r\n    'forStatement',\r\n    'forStatementNoShortIf',\r\n    'basicForStatement',\r\n    'basicForStatementNoShortIf',\r\n    'forInit',\r\n    'forUpdate',\r\n    'statementExpressionList',\r\n    'enhancedForStatement',\r\n    'enhancedForStatementNoShortIf',\r\n    'breakStatement',\r\n    'continueStatement',\r\n    'returnStatement',\r\n    'throwStatement',\r\n    'synchronizedStatement',\r\n    'tryStatement',\r\n    'catches',\r\n    'catchClause',\r\n    'catchFormalParameter',\r\n    'catchType',\r\n    'finally_',\r\n    'tryWithResourcesStatement',\r\n    'resourceSpecification',\r\n    'resourceList',\r\n    'resource',\r\n    'primary',\r\n    'primaryNoNewArray',\r\n    'primaryNoNewArray_lf_arrayAccess',\r\n    'primaryNoNewArray_lfno_arrayAccess',\r\n    'primaryNoNewArray_lf_primary',\r\n    'primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary',\r\n    'primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary',\r\n    'primaryNoNewArray_lfno_primary',\r\n    'primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary',\r\n    'primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary',\r\n    'classInstanceCreationExpression',\r\n    'classInstanceCreationExpression_lf_primary',\r\n    'classInstanceCreationExpression_lfno_primary',\r\n    'typeArgumentsOrDiamond',\r\n    'fieldAccess',\r\n    'fieldAccess_lf_primary',\r\n    'fieldAccess_lfno_primary',\r\n    'arrayAccess',\r\n    'arrayAccess_lf_primary',\r\n    'arrayAccess_lfno_primary',\r\n    'methodInvocation',\r\n    'receivers',\r\n    'receiver',\r\n    'ident',\r\n    'methodInvocation_lf_primary',\r\n    'methodInvocation_lfno_primary',\r\n    'argumentList',\r\n    'methodReference',\r\n    'methodReference_lf_primary',\r\n    'methodReference_lfno_primary',\r\n    'arrayCreationExpression',\r\n    'dimExprs',\r\n    'dimExpr',\r\n    'constantExpression',\r\n    'expression',\r\n    'lambdaExpression',\r\n    'lambdaParameters',\r\n    'inferredFormalParameterList',\r\n    'lambdaBody',\r\n    'assignmentExpression',\r\n    'assignment',\r\n    'leftHandSide',\r\n    'assignmentOperator',\r\n    'conditionalExpression',\r\n    'or',\r\n    'conditionalOrExpression',\r\n    'and',\r\n    'conditionalAndExpression',\r\n    'bitor',\r\n    'inclusiveOrExpression',\r\n    'caret',\r\n    'exclusiveOrExpression',\r\n    'bitand',\r\n    'andExpression',\r\n    'equal',\r\n    'notequal',\r\n    'equalityExpression',\r\n    'lt',\r\n    'gt',\r\n    'le',\r\n    'ge',\r\n    'instanceof',\r\n    'relationalExpression',\r\n    'ltlt',\r\n    'gtgt',\r\n    'gtgtgt',\r\n    'shiftExpression',\r\n    'additiveExpression',\r\n    'mul',\r\n    'div',\r\n    'mod',\r\n    'multiplicativeExpression',\r\n    'add',\r\n    'sub',\r\n    'unaryExpression',\r\n    'inc',\r\n    'preIncrementExpression',\r\n    'dec',\r\n    'preDecrementExpression',\r\n    'tilde',\r\n    'bang',\r\n    'unaryExpressionNotPlusMinus',\r\n    'postfixExpression',\r\n    'postIncrementExpression',\r\n    'postIncrementExpression_lf_postfixExpression',\r\n    'postDecrementExpression',\r\n    'postDecrementExpression_lf_postfixExpression',\r\n    'castExpression',\r\n];\r\nJava8Parser._LITERAL_NAMES = [\r\n    undefined,\r\n    \"'abstract'\",\r\n    \"'assert'\",\r\n    \"'boolean'\",\r\n    \"'break'\",\r\n    \"'byte'\",\r\n    \"'case'\",\r\n    \"'catch'\",\r\n    \"'char'\",\r\n    \"'class'\",\r\n    \"'const'\",\r\n    \"'continue'\",\r\n    \"'default'\",\r\n    \"'do'\",\r\n    \"'double'\",\r\n    \"'else'\",\r\n    \"'enum'\",\r\n    \"'extends'\",\r\n    \"'final'\",\r\n    \"'finally'\",\r\n    \"'float'\",\r\n    \"'for'\",\r\n    \"'if'\",\r\n    \"'goto'\",\r\n    \"'implements'\",\r\n    \"'import'\",\r\n    \"'instanceof'\",\r\n    \"'int'\",\r\n    \"'interface'\",\r\n    \"'long'\",\r\n    \"'native'\",\r\n    \"'new'\",\r\n    \"'package'\",\r\n    \"'private'\",\r\n    \"'protected'\",\r\n    \"'public'\",\r\n    \"'return'\",\r\n    \"'short'\",\r\n    \"'static'\",\r\n    \"'strictfp'\",\r\n    \"'super'\",\r\n    \"'switch'\",\r\n    \"'synchronized'\",\r\n    \"'this'\",\r\n    \"'throw'\",\r\n    \"'throws'\",\r\n    \"'transient'\",\r\n    \"'try'\",\r\n    \"'void'\",\r\n    \"'volatile'\",\r\n    \"'while'\",\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    undefined,\r\n    \"'null'\",\r\n    \"'('\",\r\n    \"')'\",\r\n    \"'{'\",\r\n    \"'}'\",\r\n    \"'['\",\r\n    \"']'\",\r\n    \"';'\",\r\n    \"','\",\r\n    \"'.'\",\r\n    \"'='\",\r\n    \"'>'\",\r\n    \"'<'\",\r\n    \"'!'\",\r\n    \"'~'\",\r\n    \"'?'\",\r\n    \"':'\",\r\n    \"'=='\",\r\n    \"'<='\",\r\n    \"'>='\",\r\n    \"'!='\",\r\n    \"'&&'\",\r\n    \"'||'\",\r\n    \"'++'\",\r\n    \"'--'\",\r\n    \"'+'\",\r\n    \"'-'\",\r\n    \"'*'\",\r\n    \"'/'\",\r\n    \"'&'\",\r\n    \"'|'\",\r\n    \"'^'\",\r\n    \"'%'\",\r\n    \"'->'\",\r\n    \"'::'\",\r\n    \"'+='\",\r\n    \"'-='\",\r\n    \"'*='\",\r\n    \"'/='\",\r\n    \"'&='\",\r\n    \"'|='\",\r\n    \"'^='\",\r\n    \"'%='\",\r\n    \"'<<='\",\r\n    \"'>>='\",\r\n    \"'>>>='\",\r\n    undefined,\r\n    \"'@'\",\r\n    \"'...'\",\r\n];\r\nJava8Parser._SYMBOLIC_NAMES = [\r\n    undefined,\r\n    'ABSTRACT',\r\n    'ASSERT',\r\n    'BOOLEAN',\r\n    'BREAK',\r\n    'BYTE',\r\n    'CASE',\r\n    'CATCH',\r\n    'CHAR',\r\n    'CLASS',\r\n    'CONST',\r\n    'CONTINUE',\r\n    'DEFAULT',\r\n    'DO',\r\n    'DOUBLE',\r\n    'ELSE',\r\n    'ENUM',\r\n    'EXTENDS',\r\n    'FINAL',\r\n    'FINALLY',\r\n    'FLOAT',\r\n    'FOR',\r\n    'IF',\r\n    'GOTO',\r\n    'IMPLEMENTS',\r\n    'IMPORT',\r\n    'INSTANCEOF',\r\n    'INT',\r\n    'INTERFACE',\r\n    'LONG',\r\n    'NATIVE',\r\n    'NEW',\r\n    'PACKAGE',\r\n    'PRIVATE',\r\n    'PROTECTED',\r\n    'PUBLIC',\r\n    'RETURN',\r\n    'SHORT',\r\n    'STATIC',\r\n    'STRICTFP',\r\n    'SUPER',\r\n    'SWITCH',\r\n    'SYNCHRONIZED',\r\n    'THIS',\r\n    'THROW',\r\n    'THROWS',\r\n    'TRANSIENT',\r\n    'TRY',\r\n    'VOID',\r\n    'VOLATILE',\r\n    'WHILE',\r\n    'IntegerLiteral',\r\n    'FloatingPointLiteral',\r\n    'BooleanLiteral',\r\n    'CharacterLiteral',\r\n    'StringLiteral',\r\n    'NullLiteral',\r\n    'LPAREN',\r\n    'RPAREN',\r\n    'LBRACE',\r\n    'RBRACE',\r\n    'LBRACK',\r\n    'RBRACK',\r\n    'SEMI',\r\n    'COMMA',\r\n    'DOT',\r\n    'ASSIGN',\r\n    'GT',\r\n    'LT',\r\n    'BANG',\r\n    'TILDE',\r\n    'QUESTION',\r\n    'COLON',\r\n    'EQUAL',\r\n    'LE',\r\n    'GE',\r\n    'NOTEQUAL',\r\n    'AND',\r\n    'OR',\r\n    'INC',\r\n    'DEC',\r\n    'ADD',\r\n    'SUB',\r\n    'MUL',\r\n    'DIV',\r\n    'BITAND',\r\n    'BITOR',\r\n    'CARET',\r\n    'MOD',\r\n    'ARROW',\r\n    'COLONCOLON',\r\n    'ADD_ASSIGN',\r\n    'SUB_ASSIGN',\r\n    'MUL_ASSIGN',\r\n    'DIV_ASSIGN',\r\n    'AND_ASSIGN',\r\n    'OR_ASSIGN',\r\n    'XOR_ASSIGN',\r\n    'MOD_ASSIGN',\r\n    'LSHIFT_ASSIGN',\r\n    'RSHIFT_ASSIGN',\r\n    'URSHIFT_ASSIGN',\r\n    'Identifier',\r\n    'AT',\r\n    'ELLIPSIS',\r\n    'WS',\r\n    'COMMENT',\r\n    'LINE_COMMENT',\r\n];\r\nJava8Parser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(Java8Parser._LITERAL_NAMES, Java8Parser._SYMBOLIC_NAMES, []);\r\nJava8Parser._serializedATNSegments = 6;\r\nJava8Parser._serializedATNSegment0 = '\\x03\\uAF6F\\u8320\\u479D\\uB75C\\u4880\\u1605\\u191C\\uAB37\\x03m\\u0C05\\x04\\x02' +\r\n    '\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07' +\r\n    '\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\\x04' +\r\n    '\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04' +\r\n    '\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\\x17\\x04' +\r\n    '\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x04\\x1C\\t\\x1C\\x04' +\r\n    '\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\"\\t\"\\x04#' +\r\n    \"\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04+\\t+\" +\r\n    '\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x041\\t1\\x042\\t2\\x043\\t3\\x044' +\r\n    '\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x048\\t8\\x049\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04' +\r\n    '=\\t=\\x04>\\t>\\x04?\\t?\\x04@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04' +\r\n    'F\\tF\\x04G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04M\\tM\\x04N\\tN\\x04' +\r\n    'O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04T\\tT\\x04U\\tU\\x04V\\tV\\x04W\\tW\\x04' +\r\n    'X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04[\\t[\\x04\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t' +\r\n    '`\\x04a\\ta\\x04b\\tb\\x04c\\tc\\x04d\\td\\x04e\\te\\x04f\\tf\\x04g\\tg\\x04h\\th\\x04' +\r\n    'i\\ti\\x04j\\tj\\x04k\\tk\\x04l\\tl\\x04m\\tm\\x04n\\tn\\x04o\\to\\x04p\\tp\\x04q\\tq\\x04' +\r\n    'r\\tr\\x04s\\ts\\x04t\\tt\\x04u\\tu\\x04v\\tv\\x04w\\tw\\x04x\\tx\\x04y\\ty\\x04z\\tz\\x04' +\r\n    '{\\t{\\x04|\\t|\\x04}\\t}\\x04~\\t~\\x04\\x7F\\t\\x7F\\x04\\x80\\t\\x80\\x04\\x81\\t\\x81' +\r\n    '\\x04\\x82\\t\\x82\\x04\\x83\\t\\x83\\x04\\x84\\t\\x84\\x04\\x85\\t\\x85\\x04\\x86\\t\\x86' +\r\n    '\\x04\\x87\\t\\x87\\x04\\x88\\t\\x88\\x04\\x89\\t\\x89\\x04\\x8A\\t\\x8A\\x04\\x8B\\t\\x8B' +\r\n    '\\x04\\x8C\\t\\x8C\\x04\\x8D\\t\\x8D\\x04\\x8E\\t\\x8E\\x04\\x8F\\t\\x8F\\x04\\x90\\t\\x90' +\r\n    '\\x04\\x91\\t\\x91\\x04\\x92\\t\\x92\\x04\\x93\\t\\x93\\x04\\x94\\t\\x94\\x04\\x95\\t\\x95' +\r\n    '\\x04\\x96\\t\\x96\\x04\\x97\\t\\x97\\x04\\x98\\t\\x98\\x04\\x99\\t\\x99\\x04\\x9A\\t\\x9A' +\r\n    '\\x04\\x9B\\t\\x9B\\x04\\x9C\\t\\x9C\\x04\\x9D\\t\\x9D\\x04\\x9E\\t\\x9E\\x04\\x9F\\t\\x9F' +\r\n    '\\x04\\xA0\\t\\xA0\\x04\\xA1\\t\\xA1\\x04\\xA2\\t\\xA2\\x04\\xA3\\t\\xA3\\x04\\xA4\\t\\xA4' +\r\n    '\\x04\\xA5\\t\\xA5\\x04\\xA6\\t\\xA6\\x04\\xA7\\t\\xA7\\x04\\xA8\\t\\xA8\\x04\\xA9\\t\\xA9' +\r\n    '\\x04\\xAA\\t\\xAA\\x04\\xAB\\t\\xAB\\x04\\xAC\\t\\xAC\\x04\\xAD\\t\\xAD\\x04\\xAE\\t\\xAE' +\r\n    '\\x04\\xAF\\t\\xAF\\x04\\xB0\\t\\xB0\\x04\\xB1\\t\\xB1\\x04\\xB2\\t\\xB2\\x04\\xB3\\t\\xB3' +\r\n    '\\x04\\xB4\\t\\xB4\\x04\\xB5\\t\\xB5\\x04\\xB6\\t\\xB6\\x04\\xB7\\t\\xB7\\x04\\xB8\\t\\xB8' +\r\n    '\\x04\\xB9\\t\\xB9\\x04\\xBA\\t\\xBA\\x04\\xBB\\t\\xBB\\x04\\xBC\\t\\xBC\\x04\\xBD\\t\\xBD' +\r\n    '\\x04\\xBE\\t\\xBE\\x04\\xBF\\t\\xBF\\x04\\xC0\\t\\xC0\\x04\\xC1\\t\\xC1\\x04\\xC2\\t\\xC2' +\r\n    '\\x04\\xC3\\t\\xC3\\x04\\xC4\\t\\xC4\\x04\\xC5\\t\\xC5\\x04\\xC6\\t\\xC6\\x04\\xC7\\t\\xC7' +\r\n    '\\x04\\xC8\\t\\xC8\\x04\\xC9\\t\\xC9\\x04\\xCA\\t\\xCA\\x04\\xCB\\t\\xCB\\x04\\xCC\\t\\xCC' +\r\n    '\\x04\\xCD\\t\\xCD\\x04\\xCE\\t\\xCE\\x04\\xCF\\t\\xCF\\x04\\xD0\\t\\xD0\\x04\\xD1\\t\\xD1' +\r\n    '\\x04\\xD2\\t\\xD2\\x04\\xD3\\t\\xD3\\x04\\xD4\\t\\xD4\\x04\\xD5\\t\\xD5\\x04\\xD6\\t\\xD6' +\r\n    '\\x04\\xD7\\t\\xD7\\x04\\xD8\\t\\xD8\\x04\\xD9\\t\\xD9\\x04\\xDA\\t\\xDA\\x04\\xDB\\t\\xDB' +\r\n    '\\x04\\xDC\\t\\xDC\\x04\\xDD\\t\\xDD\\x04\\xDE\\t\\xDE\\x04\\xDF\\t\\xDF\\x04\\xE0\\t\\xE0' +\r\n    '\\x04\\xE1\\t\\xE1\\x04\\xE2\\t\\xE2\\x04\\xE3\\t\\xE3\\x04\\xE4\\t\\xE4\\x04\\xE5\\t\\xE5' +\r\n    '\\x04\\xE6\\t\\xE6\\x04\\xE7\\t\\xE7\\x04\\xE8\\t\\xE8\\x04\\xE9\\t\\xE9\\x04\\xEA\\t\\xEA' +\r\n    '\\x04\\xEB\\t\\xEB\\x04\\xEC\\t\\xEC\\x04\\xED\\t\\xED\\x04\\xEE\\t\\xEE\\x04\\xEF\\t\\xEF' +\r\n    '\\x04\\xF0\\t\\xF0\\x04\\xF1\\t\\xF1\\x04\\xF2\\t\\xF2\\x04\\xF3\\t\\xF3\\x04\\xF4\\t\\xF4' +\r\n    '\\x04\\xF5\\t\\xF5\\x04\\xF6\\t\\xF6\\x04\\xF7\\t\\xF7\\x04\\xF8\\t\\xF8\\x04\\xF9\\t\\xF9' +\r\n    '\\x04\\xFA\\t\\xFA\\x04\\xFB\\t\\xFB\\x04\\xFC\\t\\xFC\\x04\\xFD\\t\\xFD\\x04\\xFE\\t\\xFE' +\r\n    '\\x04\\xFF\\t\\xFF\\x04\\u0100\\t\\u0100\\x04\\u0101\\t\\u0101\\x04\\u0102\\t\\u0102\\x04' +\r\n    '\\u0103\\t\\u0103\\x04\\u0104\\t\\u0104\\x04\\u0105\\t\\u0105\\x04\\u0106\\t\\u0106\\x04' +\r\n    '\\u0107\\t\\u0107\\x04\\u0108\\t\\u0108\\x04\\u0109\\t\\u0109\\x04\\u010A\\t\\u010A\\x04' +\r\n    '\\u010B\\t\\u010B\\x04\\u010C\\t\\u010C\\x04\\u010D\\t\\u010D\\x04\\u010E\\t\\u010E\\x04' +\r\n    '\\u010F\\t\\u010F\\x04\\u0110\\t\\u0110\\x04\\u0111\\t\\u0111\\x04\\u0112\\t\\u0112\\x04' +\r\n    '\\u0113\\t\\u0113\\x04\\u0114\\t\\u0114\\x04\\u0115\\t\\u0115\\x04\\u0116\\t\\u0116\\x04' +\r\n    '\\u0117\\t\\u0117\\x04\\u0118\\t\\u0118\\x04\\u0119\\t\\u0119\\x04\\u011A\\t\\u011A\\x04' +\r\n    '\\u011B\\t\\u011B\\x03\\x02\\x05\\x02\\u0238\\n\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03' +\r\n    '\\x03\\x03\\x03\\x03\\x03\\x05\\x03\\u0240\\n\\x03\\x03\\x04\\x03\\x04\\x03\\x05\\x03\\x05' +\r\n    '\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x05' +\r\n    '\\n\\u0250\\n\\n\\x03\\v\\x07\\v\\u0253\\n\\v\\f\\v\\x0E\\v\\u0256\\v\\v\\x03\\v\\x03\\v\\x07' +\r\n    '\\v\\u025A\\n\\v\\f\\v\\x0E\\v\\u025D\\v\\v\\x03\\v\\x05\\v\\u0260\\n\\v\\x03\\f\\x03\\f\\x05' +\r\n    '\\f\\u0264\\n\\f\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x05\\x0F' +\r\n    '\\u026D\\n\\x0F\\x03\\x10\\x03\\x10\\x05\\x10\\u0271\\n\\x10\\x03\\x10\\x03\\x10\\x07\\x10' +\r\n    '\\u0275\\n\\x10\\f\\x10\\x0E\\x10\\u0278\\v\\x10\\x03\\x11\\x07\\x11\\u027B\\n\\x11\\f\\x11' +\r\n    '\\x0E\\x11\\u027E\\v\\x11\\x03\\x11\\x03\\x11\\x05\\x11\\u0282\\n\\x11\\x03\\x11\\x03\\x11' +\r\n    '\\x03\\x11\\x07\\x11\\u0287\\n\\x11\\f\\x11\\x0E\\x11\\u028A\\v\\x11\\x03\\x11\\x03\\x11' +\r\n    '\\x05\\x11\\u028E\\n\\x11\\x05\\x11\\u0290\\n\\x11\\x03\\x12\\x03\\x12\\x07\\x12\\u0294' +\r\n    '\\n\\x12\\f\\x12\\x0E\\x12\\u0297\\v\\x12\\x03\\x12\\x03\\x12\\x05\\x12\\u029B\\n\\x12\\x03' +\r\n    '\\x13\\x07\\x13\\u029E\\n\\x13\\f\\x13\\x0E\\x13\\u02A1\\v\\x13\\x03\\x13\\x03\\x13\\x05' +\r\n    '\\x13\\u02A5\\n\\x13\\x03\\x14\\x03\\x14\\x03\\x15\\x03\\x15\\x03\\x16\\x03\\x16\\x03\\x17' +\r\n    '\\x07\\x17\\u02AE\\n\\x17\\f\\x17\\x0E\\x17\\u02B1\\v\\x17\\x03\\x17\\x03\\x17\\x03\\x18' +\r\n    '\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x05\\x18' +\r\n    '\\u02BE\\n\\x18\\x03\\x19\\x07\\x19\\u02C1\\n\\x19\\f\\x19\\x0E\\x19\\u02C4\\v\\x19\\x03' +\r\n    '\\x19\\x03\\x19\\x03\\x19\\x07\\x19\\u02C9\\n\\x19\\f\\x19\\x0E\\x19\\u02CC\\v\\x19\\x03' +\r\n    '\\x19\\x03\\x19\\x07\\x19\\u02D0\\n\\x19\\f\\x19\\x0E\\x19\\u02D3\\v\\x19\\x03\\x1A\\x07' +\r\n    '\\x1A\\u02D6\\n\\x1A\\f\\x1A\\x0E\\x1A\\u02D9\\v\\x1A\\x03\\x1A\\x03\\x1A\\x05\\x1A\\u02DD' +\r\n    '\\n\\x1A\\x03\\x1B\\x03\\x1B\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x07\\x1C' +\r\n    '\\u02E6\\n\\x1C\\f\\x1C\\x0E\\x1C\\u02E9\\v\\x1C\\x05\\x1C\\u02EB\\n\\x1C\\x03\\x1D\\x03' +\r\n    '\\x1D\\x03\\x1D\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x07' +\r\n    '\\x1F\\u02F7\\n\\x1F\\f\\x1F\\x0E\\x1F\\u02FA\\v\\x1F\\x03 \\x03 \\x05 \\u02FE\\n \\x03' +\r\n    '!\\x07!\\u0301\\n!\\f!\\x0E!\\u0304\\v!\\x03!\\x03!\\x05!\\u0308\\n!\\x03\"\\x03\"\\x03' +\r\n    '\"\\x03\"\\x05\"\\u030E\\n\"\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x07#\\u0316\\n#\\f' +\r\n    '#\\x0E#\\u0319\\v#\\x03$\\x03$\\x03$\\x03$\\x03$\\x05$\\u0320\\n$\\x03%\\x03%\\x03&' +\r\n    \"\\x03&\\x03&\\x03&\\x03&\\x03&\\x07&\\u032A\\n&\\f&\\x0E&\\u032D\\v&\\x03'\\x03'\\x03\" +\r\n    \"'\\x03'\\x03'\\x05'\\u0334\\n'\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x07(\\u033C\" +\r\n    '\\n(\\f(\\x0E(\\u033F\\v(\\x03)\\x05)\\u0342\\n)\\x03)\\x07)\\u0345\\n)\\f)\\x0E)\\u0348' +\r\n    '\\v)\\x03)\\x07)\\u034B\\n)\\f)\\x0E)\\u034E\\v)\\x03*\\x07*\\u0351\\n*\\f*\\x0E*\\u0354' +\r\n    '\\v*\\x03*\\x03*\\x03*\\x03*\\x07*\\u035A\\n*\\f*\\x0E*\\u035D\\v*\\x03*\\x03*\\x03+' +\r\n    '\\x03+\\x03,\\x03,\\x03,\\x03,\\x05,\\u0367\\n,\\x03-\\x03-\\x03-\\x03-\\x03.\\x03.' +\r\n    '\\x03.\\x03.\\x03.\\x03.\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x030\\x030\\x03' +\r\n    '0\\x030\\x030\\x030\\x030\\x031\\x031\\x031\\x051\\u0384\\n1\\x032\\x032\\x052\\u0388' +\r\n    '\\n2\\x033\\x033\\x033\\x033\\x053\\u038E\\n3\\x033\\x053\\u0391\\n3\\x033\\x053\\u0394' +\r\n    '\\n3\\x033\\x033\\x034\\x034\\x035\\x075\\u039B\\n5\\f5\\x0E5\\u039E\\v5\\x036\\x036' +\r\n    '\\x036\\x036\\x036\\x036\\x036\\x036\\x056\\u03A8\\n6\\x037\\x037\\x037\\x037\\x038' +\r\n    '\\x038\\x038\\x078\\u03B1\\n8\\f8\\x0E8\\u03B4\\v8\\x039\\x039\\x039\\x03:\\x03:\\x03' +\r\n    ':\\x03;\\x03;\\x03;\\x07;\\u03BF\\n;\\f;\\x0E;\\u03C2\\v;\\x03<\\x03<\\x07<\\u03C6\\n' +\r\n    '<\\f<\\x0E<\\u03C9\\v<\\x03<\\x03<\\x03=\\x03=\\x03=\\x03=\\x05=\\u03D1\\n=\\x03>\\x03' +\r\n    '>\\x03>\\x03>\\x03>\\x05>\\u03D8\\n>\\x03?\\x03?\\x03?\\x03?\\x03?\\x03@\\x07@\\u03E0' +\r\n    '\\n@\\f@\\x0E@\\u03E3\\v@\\x03A\\x03A\\x03A\\x03A\\x03A\\x03A\\x03A\\x03A\\x05A\\u03ED' +\r\n    '\\nA\\x03B\\x03B\\x03B\\x07B\\u03F2\\nB\\fB\\x0EB\\u03F5\\vB\\x03C\\x03C\\x03C\\x05C' +\r\n    '\\u03FA\\nC\\x03D\\x03D\\x05D\\u03FE\\nD\\x03E\\x03E\\x05E\\u0402\\nE\\x03F\\x03F\\x05' +\r\n    'F\\u0406\\nF\\x03G\\x03G\\x05G\\u040A\\nG\\x03H\\x03H\\x03H\\x05H\\u040F\\nH\\x03I\\x03' +\r\n    'I\\x05I\\u0413\\nI\\x03I\\x03I\\x07I\\u0417\\nI\\fI\\x0EI\\u041A\\vI\\x03J\\x03J\\x05' +\r\n    'J\\u041E\\nJ\\x03J\\x03J\\x03J\\x07J\\u0423\\nJ\\fJ\\x0EJ\\u0426\\vJ\\x03J\\x03J\\x05' +\r\n    'J\\u042A\\nJ\\x05J\\u042C\\nJ\\x03K\\x03K\\x07K\\u0430\\nK\\fK\\x0EK\\u0433\\vK\\x03' +\r\n    'K\\x03K\\x05K\\u0437\\nK\\x03L\\x03L\\x05L\\u043B\\nL\\x03M\\x03M\\x03N\\x03N\\x03O' +\r\n    '\\x03O\\x03P\\x03P\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x05Q\\u044E' +\r\n    '\\nQ\\x03R\\x07R\\u0451\\nR\\fR\\x0ER\\u0454\\vR\\x03R\\x03R\\x03R\\x03S\\x03S\\x03S' +\r\n    '\\x03S\\x03S\\x03S\\x03S\\x03S\\x03S\\x03S\\x05S\\u0463\\nS\\x03T\\x03T\\x03T\\x05T' +\r\n    '\\u0468\\nT\\x03T\\x03T\\x07T\\u046C\\nT\\fT\\x0ET\\u046F\\vT\\x03T\\x03T\\x03T\\x05' +\r\n    'T\\u0474\\nT\\x05T\\u0476\\nT\\x03U\\x03U\\x05U\\u047A\\nU\\x03V\\x03V\\x03V\\x05V\\u047F' +\r\n    '\\nV\\x03V\\x03V\\x05V\\u0483\\nV\\x03W\\x03W\\x03X\\x03X\\x03X\\x03X\\x03X\\x05X\\u048C' +\r\n    '\\nX\\x03Y\\x03Y\\x03Y\\x07Y\\u0491\\nY\\fY\\x0EY\\u0494\\vY\\x03Y\\x03Y\\x03Y\\x07Y' +\r\n    '\\u0499\\nY\\fY\\x0EY\\u049C\\vY\\x05Y\\u049E\\nY\\x03Z\\x07Z\\u04A1\\nZ\\fZ\\x0EZ\\u04A4' +\r\n    '\\vZ\\x03Z\\x03Z\\x03Z\\x03[\\x03[\\x03\\\\\\x03\\\\\\x05\\\\\\u04AD\\n\\\\\\x03]\\x03]\\x03' +\r\n    '^\\x03^\\x05^\\u04B3\\n^\\x03_\\x07_\\u04B6\\n_\\f_\\x0E_\\u04B9\\v_\\x03_\\x03_\\x07' +\r\n    '_\\u04BD\\n_\\f_\\x0E_\\u04C0\\v_\\x03_\\x03_\\x03_\\x03_\\x05_\\u04C6\\n_\\x03`\\x07' +\r\n    '`\\u04C9\\n`\\f`\\x0E`\\u04CC\\v`\\x03`\\x03`\\x03`\\x05`\\u04D1\\n`\\x03`\\x03`\\x03' +\r\n    'a\\x03a\\x03a\\x03b\\x03b\\x03b\\x07b\\u04DB\\nb\\fb\\x0Eb\\u04DE\\vb\\x03c\\x03c\\x05' +\r\n    'c\\u04E2\\nc\\x03d\\x03d\\x05d\\u04E6\\nd\\x03e\\x03e\\x03f\\x03f\\x03f\\x03g\\x07g' +\r\n    '\\u04EE\\ng\\fg\\x0Eg\\u04F1\\vg\\x03g\\x03g\\x05g\\u04F5\\ng\\x03g\\x03g\\x03h\\x03' +\r\n    'h\\x03h\\x03h\\x05h\\u04FD\\nh\\x03i\\x05i\\u0500\\ni\\x03i\\x03i\\x03i\\x05i\\u0505' +\r\n    '\\ni\\x03i\\x03i\\x03j\\x03j\\x03k\\x03k\\x05k\\u050D\\nk\\x03k\\x05k\\u0510\\nk\\x03' +\r\n    'k\\x03k\\x03l\\x05l\\u0515\\nl\\x03l\\x03l\\x03l\\x05l\\u051A\\nl\\x03l\\x03l\\x03l' +\r\n    '\\x05l\\u051F\\nl\\x03l\\x03l\\x03l\\x05l\\u0524\\nl\\x03l\\x03l\\x03l\\x03l\\x03l\\x05' +\r\n    'l\\u052B\\nl\\x03l\\x03l\\x03l\\x05l\\u0530\\nl\\x03l\\x03l\\x03l\\x03l\\x03l\\x03l' +\r\n    '\\x05l\\u0538\\nl\\x03l\\x03l\\x03l\\x05l\\u053D\\nl\\x03l\\x03l\\x03l\\x05l\\u0542' +\r\n    '\\nl\\x03m\\x07m\\u0545\\nm\\fm\\x0Em\\u0548\\vm\\x03m\\x03m\\x03m\\x05m\\u054D\\nm\\x03' +\r\n    'm\\x03m\\x03n\\x03n\\x05n\\u0553\\nn\\x03n\\x05n\\u0556\\nn\\x03n\\x05n\\u0559\\nn\\x03' +\r\n    'n\\x03n\\x03o\\x03o\\x03o\\x07o\\u0560\\no\\fo\\x0Eo\\u0563\\vo\\x03p\\x07p\\u0566\\n' +\r\n    'p\\fp\\x0Ep\\u0569\\vp\\x03p\\x03p\\x03p\\x05p\\u056E\\np\\x03p\\x05p\\u0571\\np\\x03' +\r\n    'p\\x05p\\u0574\\np\\x03q\\x03q\\x03r\\x03r\\x07r\\u057A\\nr\\fr\\x0Er\\u057D\\vr\\x03' +\r\n    's\\x03s\\x05s\\u0581\\ns\\x03t\\x03t\\x03t\\x03t\\x05t\\u0587\\nt\\x03t\\x05t\\u058A' +\r\n    '\\nt\\x03t\\x03t\\x03u\\x07u\\u058F\\nu\\fu\\x0Eu\\u0592\\vu\\x03v\\x03v\\x03w\\x03w' +\r\n    '\\x03w\\x03w\\x03w\\x03w\\x03w\\x05w\\u059D\\nw\\x03x\\x03x\\x03x\\x03y\\x03y\\x07y' +\r\n    '\\u05A4\\ny\\fy\\x0Ey\\u05A7\\vy\\x03y\\x03y\\x03z\\x03z\\x03z\\x03z\\x03z\\x05z\\u05B0' +\r\n    '\\nz\\x03{\\x03{\\x03{\\x03{\\x03{\\x03|\\x07|\\u05B8\\n|\\f|\\x0E|\\u05BB\\v|\\x03}' +\r\n    '\\x03}\\x03}\\x03}\\x05}\\u05C1\\n}\\x03~\\x03~\\x03~\\x03~\\x03\\x7F\\x07\\x7F\\u05C8' +\r\n    '\\n\\x7F\\f\\x7F\\x0E\\x7F\\u05CB\\v\\x7F\\x03\\x80\\x03\\x80\\x03\\x80\\x03\\x80\\x03\\x80' +\r\n    '\\x03\\x80\\x05\\x80\\u05D3\\n\\x80\\x03\\x81\\x07\\x81\\u05D6\\n\\x81\\f\\x81\\x0E\\x81' +\r\n    '\\u05D9\\v\\x81\\x03\\x81\\x03\\x81\\x03\\x81\\x03\\x81\\x03\\x81\\x03\\x82\\x03\\x82\\x07' +\r\n    '\\x82\\u05E2\\n\\x82\\f\\x82\\x0E\\x82\\u05E5\\v\\x82\\x03\\x82\\x03\\x82\\x03\\x83\\x03' +\r\n    '\\x83\\x03\\x83\\x03\\x83\\x03\\x83\\x05\\x83\\u05EE\\n\\x83\\x03\\x84\\x07\\x84\\u05F1' +\r\n    '\\n\\x84\\f\\x84\\x0E\\x84\\u05F4\\v\\x84\\x03\\x84\\x03\\x84\\x03\\x84\\x03\\x84\\x03\\x84' +\r\n    '\\x05\\x84\\u05FB\\n\\x84\\x03\\x84\\x05\\x84\\u05FE\\n\\x84\\x03\\x84\\x03\\x84\\x03\\x85' +\r\n    '\\x03\\x85\\x03\\x85\\x05\\x85\\u0605\\n\\x85\\x03\\x86\\x03\\x86\\x03\\x86\\x03\\x87\\x03' +\r\n    '\\x87\\x03\\x87\\x05\\x87\\u060D\\n\\x87\\x03\\x88\\x03\\x88\\x03\\x88\\x03\\x88\\x05\\x88' +\r\n    '\\u0613\\n\\x88\\x03\\x88\\x03\\x88\\x03\\x89\\x03\\x89\\x03\\x89\\x07\\x89\\u061A\\n\\x89' +\r\n    '\\f\\x89\\x0E\\x89\\u061D\\v\\x89\\x03\\x8A\\x03\\x8A\\x03\\x8A\\x03\\x8A\\x03\\x8B\\x03' +\r\n    '\\x8B\\x03\\x8B\\x05\\x8B\\u0626\\n\\x8B\\x03\\x8C\\x03\\x8C\\x05\\x8C\\u062A\\n\\x8C\\x03' +\r\n    '\\x8C\\x05\\x8C\\u062D\\n\\x8C\\x03\\x8C\\x03\\x8C\\x03\\x8D\\x03\\x8D\\x03\\x8D\\x07\\x8D' +\r\n    '\\u0634\\n\\x8D\\f\\x8D\\x0E\\x8D\\u0637\\v\\x8D\\x03\\x8E\\x03\\x8E\\x03\\x8E\\x03\\x8F' +\r\n    '\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x90\\x03\\x90\\x05\\x90\\u0644' +\r\n    '\\n\\x90\\x03\\x90\\x05\\x90\\u0647\\n\\x90\\x03\\x90\\x03\\x90\\x03\\x91\\x03\\x91\\x03' +\r\n    '\\x91\\x07\\x91\\u064E\\n\\x91\\f\\x91\\x0E\\x91\\u0651\\v\\x91\\x03\\x92\\x03\\x92\\x05' +\r\n    '\\x92\\u0655\\n\\x92\\x03\\x92\\x03\\x92\\x03\\x93\\x03\\x93\\x07\\x93\\u065B\\n\\x93\\f' +\r\n    '\\x93\\x0E\\x93\\u065E\\v\\x93\\x03\\x94\\x03\\x94\\x03\\x94\\x05\\x94\\u0663\\n\\x94\\x03' +\r\n    '\\x95\\x03\\x95\\x03\\x95\\x03\\x96\\x07\\x96\\u0669\\n\\x96\\f\\x96\\x0E\\x96\\u066C\\v' +\r\n    '\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x03' +\r\n    '\\x97\\x05\\x97\\u0677\\n\\x97\\x03\\x98\\x03\\x98\\x03\\x98\\x03\\x98\\x03\\x98\\x05\\x98' +\r\n    '\\u067E\\n\\x98\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03' +\r\n    '\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x05\\x99\\u068C\\n\\x99\\x03\\x9A\\x03\\x9A' +\r\n    '\\x03\\x9B\\x03\\x9B\\x03\\x9B\\x03\\x9B\\x03\\x9C\\x03\\x9C\\x03\\x9C\\x03\\x9C\\x03\\x9D' +\r\n    '\\x03\\x9D\\x03\\x9D\\x03\\x9E\\x03\\x9E\\x03\\x9E\\x03\\x9E\\x03\\x9E\\x03\\x9E\\x03\\x9E' +\r\n    '\\x05\\x9E\\u06A2\\n\\x9E\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03' +\r\n    '\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA1\\x03' +\r\n    '\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA2\\x03\\xA2\\x03' +\r\n    '\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x05\\xA2\\u06C4' +\r\n    '\\n\\xA2\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA4\\x03\\xA4' +\r\n    '\\x07\\xA4\\u06CE\\n\\xA4\\f\\xA4\\x0E\\xA4\\u06D1\\v\\xA4\\x03\\xA4\\x07\\xA4\\u06D4\\n' +\r\n    '\\xA4\\f\\xA4\\x0E\\xA4\\u06D7\\v\\xA4\\x03\\xA4\\x03\\xA4\\x03\\xA5\\x03\\xA5\\x03\\xA5' +\r\n    '\\x03\\xA6\\x03\\xA6\\x07\\xA6\\u06E0\\n\\xA6\\f\\xA6\\x0E\\xA6\\u06E3\\v\\xA6\\x03\\xA7' +\r\n    '\\x03\\xA7\\x03\\xA7\\x03\\xA7\\x03\\xA7\\x03\\xA7\\x03\\xA7\\x03\\xA7\\x03\\xA7\\x03\\xA7' +\r\n    '\\x05\\xA7\\u06EF\\n\\xA7\\x03\\xA8\\x03\\xA8\\x03\\xA9\\x03\\xA9\\x03\\xA9\\x03\\xA9\\x03' +\r\n    '\\xA9\\x03\\xA9\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAB\\x03' +\r\n    '\\xAB\\x03\\xAB\\x03\\xAB\\x03\\xAB\\x03\\xAB\\x03\\xAB\\x03\\xAB\\x03\\xAC\\x03\\xAC\\x05' +\r\n    '\\xAC\\u0709\\n\\xAC\\x03\\xAD\\x03\\xAD\\x05\\xAD\\u070D\\n\\xAD\\x03\\xAE\\x03\\xAE\\x03' +\r\n    '\\xAE\\x05\\xAE\\u0712\\n\\xAE\\x03\\xAE\\x03\\xAE\\x05\\xAE\\u0716\\n\\xAE\\x03\\xAE\\x03' +\r\n    '\\xAE\\x05\\xAE\\u071A\\n\\xAE\\x03\\xAE\\x03\\xAE\\x03\\xAE\\x03\\xAF\\x03\\xAF\\x03\\xAF' +\r\n    '\\x05\\xAF\\u0722\\n\\xAF\\x03\\xAF\\x03\\xAF\\x05\\xAF\\u0726\\n\\xAF\\x03\\xAF\\x03\\xAF' +\r\n    '\\x05\\xAF\\u072A\\n\\xAF\\x03\\xAF\\x03\\xAF\\x03\\xAF\\x03\\xB0\\x03\\xB0\\x05\\xB0\\u0731' +\r\n    '\\n\\xB0\\x03\\xB1\\x03\\xB1\\x03\\xB2\\x03\\xB2\\x03\\xB2\\x07\\xB2\\u0738\\n\\xB2\\f\\xB2' +\r\n    '\\x0E\\xB2\\u073B\\v\\xB2\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x07\\xB3\\u0740\\n\\xB3\\f\\xB3' +\r\n    '\\x0E\\xB3\\u0743\\v\\xB3\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x03' +\r\n    '\\xB3\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x07\\xB4\\u074F\\n\\xB4\\f\\xB4\\x0E\\xB4\\u0752\\v' +\r\n    '\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB5\\x03' +\r\n    '\\xB5\\x05\\xB5\\u075D\\n\\xB5\\x03\\xB5\\x03\\xB5\\x03\\xB6\\x03\\xB6\\x05\\xB6\\u0763' +\r\n    '\\n\\xB6\\x03\\xB6\\x03\\xB6\\x03\\xB7\\x03\\xB7\\x05\\xB7\\u0769\\n\\xB7\\x03\\xB7\\x03' +\r\n    '\\xB7\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03' +\r\n    '\\xB9\\x03\\xB9\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x05' +\r\n    '\\xBA\\u077E\\n\\xBA\\x03\\xBA\\x03\\xBA\\x03\\xBA\\x05\\xBA\\u0783\\n\\xBA\\x03\\xBB\\x03' +\r\n    '\\xBB\\x07\\xBB\\u0787\\n\\xBB\\f\\xBB\\x0E\\xBB\\u078A\\v\\xBB\\x03\\xBC\\x03\\xBC\\x03' +\r\n    '\\xBC\\x03\\xBC\\x03\\xBC\\x03\\xBC\\x03\\xBD\\x07\\xBD\\u0793\\n\\xBD\\f\\xBD\\x0E\\xBD' +\r\n    '\\u0796\\v\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBE\\x03\\xBE\\x03\\xBE\\x07\\xBE\\u079E' +\r\n    '\\n\\xBE\\f\\xBE\\x0E\\xBE\\u07A1\\v\\xBE\\x03\\xBF\\x03\\xBF\\x03\\xBF\\x03\\xC0\\x03\\xC0' +\r\n    '\\x03\\xC0\\x03\\xC0\\x05\\xC0\\u07AA\\n\\xC0\\x03\\xC0\\x05\\xC0\\u07AD\\n\\xC0\\x03\\xC1' +\r\n    '\\x03\\xC1\\x03\\xC1\\x05\\xC1\\u07B2\\n\\xC1\\x03\\xC1\\x03\\xC1\\x03\\xC2\\x03\\xC2\\x03' +\r\n    '\\xC2\\x07\\xC2\\u07B9\\n\\xC2\\f\\xC2\\x0E\\xC2\\u07BC\\v\\xC2\\x03\\xC3\\x07\\xC3\\u07BF' +\r\n    '\\n\\xC3\\f\\xC3\\x0E\\xC3\\u07C2\\v\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3' +\r\n    '\\x03\\xC4\\x03\\xC4\\x05\\xC4\\u07CB\\n\\xC4\\x03\\xC4\\x07\\xC4\\u07CE\\n\\xC4\\f\\xC4' +\r\n    '\\x0E\\xC4\\u07D1\\v\\xC4\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x07\\xC5\\u07D7\\n\\xC5' +\r\n    '\\f\\xC5\\x0E\\xC5\\u07DA\\v\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03' +\r\n    '\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03' +\r\n    '\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x03\\xC5\\x05\\xC5\\u07F0\\n\\xC5\\x03\\xC6' +\r\n    '\\x03\\xC6\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x07\\xC7\\u07F8\\n\\xC7\\f\\xC7\\x0E' +\r\n    '\\xC7\\u07FB\\v\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7' +\r\n    '\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x03\\xC7' +\r\n    '\\x03\\xC7\\x03\\xC7\\x03\\xC7\\x05\\xC7\\u0810\\n\\xC7\\x03\\xC8\\x03\\xC8\\x03\\xC8\\x03' +\r\n    '\\xC8\\x03\\xC8\\x05\\xC8\\u0817\\n\\xC8\\x03\\xC9\\x03\\xC9\\x03\\xCA\\x03\\xCA\\x03\\xCA' +\r\n    '\\x03\\xCA\\x05\\xCA\\u081F\\n\\xCA\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x07\\xCB\\u0825' +\r\n    '\\n\\xCB\\f\\xCB\\x0E\\xCB\\u0828\\v\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB' +\r\n    '\\x03\\xCB\\x07\\xCB\\u0830\\n\\xCB\\f\\xCB\\x0E\\xCB\\u0833\\v\\xCB\\x03\\xCB\\x03\\xCB' +\r\n    '\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB' +\r\n    '\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB' +\r\n    '\\x05\\xCB\\u0849\\n\\xCB\\x03\\xCC\\x03\\xCC\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x07' +\r\n    '\\xCD\\u0851\\n\\xCD\\f\\xCD\\x0E\\xCD\\u0854\\v\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03' +\r\n    '\\xCD\\x03\\xCD\\x03\\xCD\\x07\\xCD\\u085C\\n\\xCD\\f\\xCD\\x0E\\xCD\\u085F\\v\\xCD\\x03' +\r\n    '\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03' +\r\n    '\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03\\xCD\\x03' +\r\n    '\\xCD\\x05\\xCD\\u0874\\n\\xCD\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u0878\\n\\xCE\\x03\\xCE\\x07' +\r\n    '\\xCE\\u087B\\n\\xCE\\f\\xCE\\x0E\\xCE\\u087E\\v\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x07' +\r\n    '\\xCE\\u0883\\n\\xCE\\f\\xCE\\x0E\\xCE\\u0886\\v\\xCE\\x03\\xCE\\x07\\xCE\\u0889\\n\\xCE' +\r\n    '\\f\\xCE\\x0E\\xCE\\u088C\\v\\xCE\\x03\\xCE\\x05\\xCE\\u088F\\n\\xCE\\x03\\xCE\\x03\\xCE' +\r\n    '\\x05\\xCE\\u0893\\n\\xCE\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u0897\\n\\xCE\\x03\\xCE\\x03\\xCE' +\r\n    '\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u089D\\n\\xCE\\x03\\xCE\\x07\\xCE\\u08A0\\n\\xCE\\f\\xCE' +\r\n    '\\x0E\\xCE\\u08A3\\v\\xCE\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u08A7\\n\\xCE\\x03\\xCE\\x03\\xCE' +\r\n    '\\x05\\xCE\\u08AB\\n\\xCE\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u08AF\\n\\xCE\\x03\\xCE\\x03\\xCE' +\r\n    '\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u08B5\\n\\xCE\\x03\\xCE\\x07\\xCE\\u08B8\\n\\xCE\\f\\xCE' +\r\n    '\\x0E\\xCE\\u08BB\\v\\xCE\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u08BF\\n\\xCE\\x03\\xCE\\x03\\xCE' +\r\n    '\\x05\\xCE\\u08C3\\n\\xCE\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u08C7\\n\\xCE\\x05\\xCE\\u08C9' +\r\n    '\\n\\xCE\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x05\\xCF\\u08CE\\n\\xCF\\x03\\xCF\\x07\\xCF\\u08D1' +\r\n    '\\n\\xCF\\f\\xCF\\x0E\\xCF\\u08D4\\v\\xCF\\x03\\xCF\\x03\\xCF\\x05\\xCF\\u08D8\\n\\xCF\\x03' +\r\n    '\\xCF\\x03\\xCF\\x05\\xCF\\u08DC\\n\\xCF\\x03\\xCF\\x03\\xCF\\x05\\xCF\\u08E0\\n\\xCF\\x03' +\r\n    '\\xD0\\x03\\xD0\\x05\\xD0\\u08E4\\n\\xD0\\x03\\xD0\\x07\\xD0\\u08E7\\n\\xD0\\f\\xD0\\x0E' +\r\n    '\\xD0\\u08EA\\v\\xD0\\x03\\xD0\\x03\\xD0\\x03\\xD0\\x07\\xD0\\u08EF\\n\\xD0\\f\\xD0\\x0E' +\r\n    '\\xD0\\u08F2\\v\\xD0\\x03\\xD0\\x07\\xD0\\u08F5\\n\\xD0\\f\\xD0\\x0E\\xD0\\u08F8\\v\\xD0' +\r\n    '\\x03\\xD0\\x05\\xD0\\u08FB\\n\\xD0\\x03\\xD0\\x03\\xD0\\x05\\xD0\\u08FF\\n\\xD0\\x03\\xD0' +\r\n    '\\x03\\xD0\\x05\\xD0\\u0903\\n\\xD0\\x03\\xD0\\x03\\xD0\\x03\\xD0\\x03\\xD0\\x05\\xD0\\u0909' +\r\n    '\\n\\xD0\\x03\\xD0\\x07\\xD0\\u090C\\n\\xD0\\f\\xD0\\x0E\\xD0\\u090F\\v\\xD0\\x03\\xD0\\x03' +\r\n    '\\xD0\\x05\\xD0\\u0913\\n\\xD0\\x03\\xD0\\x03\\xD0\\x05\\xD0\\u0917\\n\\xD0\\x03\\xD0\\x03' +\r\n    '\\xD0\\x05\\xD0\\u091B\\n\\xD0\\x05\\xD0';\r\nJava8Parser._serializedATNSegment1 = '\\u091D\\n\\xD0\\x03\\xD1\\x03\\xD1\\x03\\xD1\\x05\\xD1\\u0922\\n\\xD1\\x03\\xD2\\x03\\xD2' +\r\n    '\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2' +\r\n    '\\x03\\xD2\\x03\\xD2\\x05\\xD2\\u0931\\n\\xD2\\x03\\xD3\\x03\\xD3\\x03\\xD3\\x03\\xD4\\x03' +\r\n    '\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x05\\xD4\\u093F' +\r\n    '\\n\\xD4\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5' +\r\n    '\\x03\\xD5\\x03\\xD5\\x05\\xD5\\u094B\\n\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03\\xD5\\x03' +\r\n    '\\xD5\\x07\\xD5\\u0952\\n\\xD5\\f\\xD5\\x0E\\xD5\\u0955\\v\\xD5\\x03\\xD6\\x03\\xD6\\x03' +\r\n    '\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x07\\xD6\\u0961' +\r\n    '\\n\\xD6\\f\\xD6\\x0E\\xD6\\u0964\\v\\xD6\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7' +\r\n    '\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x05\\xD7\\u0970\\n\\xD7\\x03\\xD7\\x03' +\r\n    '\\xD7\\x03\\xD7\\x03\\xD7\\x03\\xD7\\x07\\xD7\\u0977\\n\\xD7\\f\\xD7\\x0E\\xD7\\u097A\\v' +\r\n    '\\xD7\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u097F\\n\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8' +\r\n    '\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u0986\\n\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u098B' +\r\n    '\\n\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u0992\\n\\xD8\\x03' +\r\n    '\\xD8\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u0997\\n\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8' +\r\n    '\\x03\\xD8\\x05\\xD8\\u099E\\n\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u09A3\\n\\xD8' +\r\n    '\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u09AA\\n\\xD8\\x03\\xD8\\x03' +\r\n    '\\xD8\\x03\\xD8\\x05\\xD8\\u09AF\\n\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8' +\r\n    '\\x03\\xD8\\x05\\xD8\\u09B7\\n\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u09BC\\n\\xD8' +\r\n    '\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u09C0\\n\\xD8\\x03\\xD9\\x03\\xD9\\x03\\xDA\\x03\\xDA\\x03' +\r\n    '\\xDA\\x07\\xDA\\u09C7\\n\\xDA\\f\\xDA\\x0E\\xDA\\u09CA\\v\\xDA\\x03\\xDB\\x03\\xDB\\x03' +\r\n    '\\xDC\\x03\\xDC\\x05\\xDC\\u09D0\\n\\xDC\\x03\\xDC\\x03\\xDC\\x03\\xDC\\x05\\xDC\\u09D5' +\r\n    '\\n\\xDC\\x03\\xDC\\x03\\xDC\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x05\\xDD\\u09DC\\n\\xDD\\x03' +\r\n    '\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x05\\xDD\\u09E3\\n\\xDD\\x03\\xDD\\x03\\xDD' +\r\n    '\\x03\\xDD\\x05\\xDD\\u09E8\\n\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x05' +\r\n    '\\xDD\\u09EF\\n\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x05\\xDD\\u09F4\\n\\xDD\\x03\\xDD\\x03' +\r\n    '\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x05\\xDD\\u09FB\\n\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD' +\r\n    '\\x05\\xDD\\u0A00\\n\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x03' +\r\n    '\\xDD\\x05\\xDD\\u0A09\\n\\xDD\\x03\\xDD\\x03\\xDD\\x03\\xDD\\x05\\xDD\\u0A0E\\n\\xDD\\x03' +\r\n    '\\xDD\\x03\\xDD\\x05\\xDD\\u0A12\\n\\xDD\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x07\\xDE\\u0A17' +\r\n    '\\n\\xDE\\f\\xDE\\x0E\\xDE\\u0A1A\\v\\xDE\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x05\\xDF\\u0A1F' +\r\n    '\\n\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x05\\xDF\\u0A26\\n\\xDF\\x03' +\r\n    '\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x05\\xDF\\u0A2D\\n\\xDF\\x03\\xDF\\x03\\xDF' +\r\n    '\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x05\\xDF\\u0A34\\n\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03' +\r\n    '\\xDF\\x03\\xDF\\x03\\xDF\\x05\\xDF\\u0A3C\\n\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF' +\r\n    '\\x03\\xDF\\x05\\xDF\\u0A43\\n\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03' +\r\n    '\\xDF\\x05\\xDF\\u0A4B\\n\\xDF\\x03\\xE0\\x03\\xE0\\x05\\xE0\\u0A4F\\n\\xE0\\x03\\xE0\\x03' +\r\n    '\\xE0\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x05\\xE1\\u0A56\\n\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1' +\r\n    '\\x03\\xE1\\x03\\xE1\\x05\\xE1\\u0A5D\\n\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03' +\r\n    '\\xE1\\x05\\xE1\\u0A64\\n\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1' +\r\n    '\\x05\\xE1\\u0A6C\\n\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x05\\xE1\\u0A73' +\r\n    '\\n\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x03\\xE1\\x05\\xE1\\u0A7B\\n' +\r\n    '\\xE1\\x03\\xE2\\x03\\xE2\\x03\\xE2\\x03\\xE2\\x05\\xE2\\u0A81\\n\\xE2\\x03\\xE2\\x03\\xE2' +\r\n    '\\x03\\xE2\\x03\\xE2\\x05\\xE2\\u0A87\\n\\xE2\\x03\\xE2\\x03\\xE2\\x03\\xE2\\x03\\xE2\\x03' +\r\n    '\\xE2\\x03\\xE2\\x03\\xE2\\x03\\xE2\\x03\\xE2\\x03\\xE2\\x05\\xE2\\u0A93\\n\\xE2\\x03\\xE3' +\r\n    '\\x03\\xE3\\x07\\xE3\\u0A97\\n\\xE3\\f\\xE3\\x0E\\xE3\\u0A9A\\v\\xE3\\x03\\xE4\\x07\\xE4' +\r\n    '\\u0A9D\\n\\xE4\\f\\xE4\\x0E\\xE4\\u0AA0\\v\\xE4\\x03\\xE4\\x03\\xE4\\x03\\xE4\\x03\\xE4' +\r\n    '\\x03\\xE5\\x03\\xE5\\x03\\xE6\\x03\\xE6\\x05\\xE6\\u0AAA\\n\\xE6\\x03\\xE7\\x03\\xE7\\x03' +\r\n    '\\xE7\\x03\\xE7\\x03\\xE8\\x03\\xE8\\x03\\xE8\\x05\\xE8\\u0AB3\\n\\xE8\\x03\\xE8\\x03\\xE8' +\r\n    '\\x03\\xE8\\x03\\xE8\\x03\\xE8\\x05\\xE8\\u0ABA\\n\\xE8\\x03\\xE9\\x03\\xE9\\x03\\xE9\\x07' +\r\n    '\\xE9\\u0ABF\\n\\xE9\\f\\xE9\\x0E\\xE9\\u0AC2\\v\\xE9\\x03\\xEA\\x03\\xEA\\x05\\xEA\\u0AC6' +\r\n    '\\n\\xEA\\x03\\xEB\\x03\\xEB\\x05\\xEB\\u0ACA\\n\\xEB\\x03\\xEC\\x03\\xEC\\x03\\xEC\\x03' +\r\n    '\\xEC\\x03\\xED\\x03\\xED\\x03\\xED\\x05\\xED\\u0AD3\\n\\xED\\x03\\xEE\\x03\\xEE\\x03\\xEF' +\r\n    '\\x03\\xEF\\x03\\xEF\\x03\\xEF\\x03\\xEF\\x03\\xEF\\x03\\xEF\\x05\\xEF\\u0ADE\\n\\xEF\\x03' +\r\n    '\\xF0\\x03\\xF0\\x03\\xF1\\x03\\xF1\\x03\\xF1\\x03\\xF1\\x03\\xF1\\x03\\xF1\\x03\\xF1\\x07' +\r\n    '\\xF1\\u0AE9\\n\\xF1\\f\\xF1\\x0E\\xF1\\u0AEC\\v\\xF1\\x03\\xF2\\x03\\xF2\\x03\\xF3\\x03' +\r\n    '\\xF3\\x03\\xF3\\x03\\xF3\\x03\\xF3\\x03\\xF3\\x03\\xF3\\x07\\xF3\\u0AF7\\n\\xF3\\f\\xF3' +\r\n    '\\x0E\\xF3\\u0AFA\\v\\xF3\\x03\\xF4\\x03\\xF4\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03\\xF5\\x03' +\r\n    '\\xF5\\x03\\xF5\\x03\\xF5\\x07\\xF5\\u0B05\\n\\xF5\\f\\xF5\\x0E\\xF5\\u0B08\\v\\xF5\\x03' +\r\n    '\\xF6\\x03\\xF6\\x03\\xF7\\x03\\xF7\\x03\\xF7\\x03\\xF7\\x03\\xF7\\x03\\xF7\\x03\\xF7\\x07' +\r\n    '\\xF7\\u0B13\\n\\xF7\\f\\xF7\\x0E\\xF7\\u0B16\\v\\xF7\\x03\\xF8\\x03\\xF8\\x03\\xF9\\x03' +\r\n    '\\xF9\\x03\\xF9\\x03\\xF9\\x03\\xF9\\x03\\xF9\\x03\\xF9\\x07\\xF9\\u0B21\\n\\xF9\\f\\xF9' +\r\n    '\\x0E\\xF9\\u0B24\\v\\xF9\\x03\\xFA\\x03\\xFA\\x03\\xFB\\x03\\xFB\\x03\\xFC\\x03\\xFC\\x03' +\r\n    '\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\\x03\\xFC\\x07' +\r\n    '\\xFC\\u0B35\\n\\xFC\\f\\xFC\\x0E\\xFC\\u0B38\\v\\xFC\\x03\\xFD\\x03\\xFD\\x03\\xFE\\x03' +\r\n    '\\xFE\\x03\\xFF\\x03\\xFF\\x03\\u0100\\x03\\u0100\\x03\\u0101\\x03\\u0101\\x03\\u0102' +\r\n    '\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102' +\r\n    '\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102' +\r\n    '\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102\\x03\\u0102' +\r\n    '\\x03\\u0102\\x07\\u0102\\u0B5B\\n\\u0102\\f\\u0102\\x0E\\u0102\\u0B5E\\v\\u0102\\x03' +\r\n    '\\u0103\\x03\\u0103\\x03\\u0103\\x03\\u0104\\x03\\u0104\\x03\\u0104\\x03\\u0105\\x03' +\r\n    '\\u0105\\x03\\u0105\\x03\\u0105\\x03\\u0106\\x03\\u0106\\x03\\u0106\\x03\\u0106\\x03' +\r\n    '\\u0106\\x03\\u0106\\x03\\u0106\\x03\\u0106\\x03\\u0106\\x03\\u0106\\x03\\u0106\\x03' +\r\n    '\\u0106\\x03\\u0106\\x03\\u0106\\x03\\u0106\\x07\\u0106\\u0B79\\n\\u0106\\f\\u0106\\x0E' +\r\n    '\\u0106\\u0B7C\\v\\u0106\\x03\\u0107\\x03\\u0107\\x03\\u0107\\x03\\u0107\\x03\\u0107' +\r\n    '\\x03\\u0107\\x03\\u0107\\x03\\u0107\\x03\\u0107\\x03\\u0107\\x03\\u0107\\x07\\u0107' +\r\n    '\\u0B89\\n\\u0107\\f\\u0107\\x0E\\u0107\\u0B8C\\v\\u0107\\x03\\u0108\\x03\\u0108\\x03' +\r\n    '\\u0109\\x03\\u0109\\x03\\u010A\\x03\\u010A\\x03\\u010B\\x03\\u010B\\x03\\u010B\\x03' +\r\n    '\\u010B\\x03\\u010B\\x03\\u010B\\x03\\u010B\\x03\\u010B\\x03\\u010B\\x03\\u010B\\x03' +\r\n    '\\u010B\\x03\\u010B\\x03\\u010B\\x03\\u010B\\x03\\u010B\\x07\\u010B\\u0BA3\\n\\u010B' +\r\n    '\\f\\u010B\\x0E\\u010B\\u0BA6\\v\\u010B\\x03\\u010C\\x03\\u010C\\x03\\u010D\\x03\\u010D' +\r\n    '\\x03\\u010E\\x03\\u010E\\x03\\u010E\\x03\\u010E\\x03\\u010E\\x03\\u010E\\x03\\u010E' +\r\n    '\\x03\\u010E\\x03\\u010E\\x05\\u010E\\u0BB5\\n\\u010E\\x03\\u010F\\x03\\u010F\\x03\\u0110' +\r\n    '\\x03\\u0110\\x03\\u0110\\x03\\u0111\\x03\\u0111\\x03\\u0112\\x03\\u0112\\x03\\u0112' +\r\n    '\\x03\\u0113\\x03\\u0113\\x03\\u0114\\x03\\u0114\\x03\\u0115\\x03\\u0115\\x03\\u0115' +\r\n    '\\x03\\u0115\\x03\\u0115\\x03\\u0115\\x03\\u0115\\x03\\u0115\\x05\\u0115\\u0BCD\\n\\u0115' +\r\n    '\\x03\\u0116\\x03\\u0116\\x03\\u0116\\x03\\u0116\\x05\\u0116\\u0BD3\\n\\u0116\\x03\\u0116' +\r\n    '\\x03\\u0116\\x07\\u0116\\u0BD7\\n\\u0116\\f\\u0116\\x0E\\u0116\\u0BDA\\v\\u0116\\x05' +\r\n    '\\u0116\\u0BDC\\n\\u0116\\x03\\u0117\\x03\\u0117\\x03\\u0117\\x03\\u0118\\x03\\u0118' +\r\n    '\\x03\\u0119\\x03\\u0119\\x03\\u0119\\x03\\u011A\\x03\\u011A\\x03\\u011B\\x03\\u011B' +\r\n    '\\x03\\u011B\\x03\\u011B\\x03\\u011B\\x03\\u011B\\x03\\u011B\\x03\\u011B\\x07\\u011B' +\r\n    '\\u0BF0\\n\\u011B\\f\\u011B\\x0E\\u011B\\u0BF3\\v\\u011B\\x03\\u011B\\x03\\u011B\\x03' +\r\n    '\\u011B\\x03\\u011B\\x03\\u011B\\x03\\u011B\\x07\\u011B\\u0BFB\\n\\u011B\\f\\u011B\\x0E' +\r\n    '\\u011B\\u0BFE\\v\\u011B\\x03\\u011B\\x03\\u011B\\x03\\u011B\\x05\\u011B\\u0C03\\n\\u011B' +\r\n    '\\x03\\u011B\\x02\\x02\\x0FDJN\\u01E0\\u01E4\\u01E8\\u01EC\\u01F0\\u01F6\\u0202\\u020A' +\r\n    '\\u020C\\u0214\\u011C\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\\f\\x02\\x0E\\x02\\x10' +\r\n    '\\x02\\x12\\x02\\x14\\x02\\x16\\x02\\x18\\x02\\x1A\\x02\\x1C\\x02\\x1E\\x02 \\x02\"\\x02' +\r\n    '$\\x02&\\x02(\\x02*\\x02,\\x02.\\x020\\x022\\x024\\x026\\x028\\x02:\\x02<\\x02>\\x02' +\r\n    '@\\x02B\\x02D\\x02F\\x02H\\x02J\\x02L\\x02N\\x02P\\x02R\\x02T\\x02V\\x02X\\x02Z\\x02' +\r\n    '\\\\\\x02^\\x02`\\x02b\\x02d\\x02f\\x02h\\x02j\\x02l\\x02n\\x02p\\x02r\\x02t\\x02v\\x02' +\r\n    'x\\x02z\\x02|\\x02~\\x02\\x80\\x02\\x82\\x02\\x84\\x02\\x86\\x02\\x88\\x02\\x8A\\x02\\x8C' +\r\n    '\\x02\\x8E\\x02\\x90\\x02\\x92\\x02\\x94\\x02\\x96\\x02\\x98\\x02\\x9A\\x02\\x9C\\x02\\x9E' +\r\n    '\\x02\\xA0\\x02\\xA2\\x02\\xA4\\x02\\xA6\\x02\\xA8\\x02\\xAA\\x02\\xAC\\x02\\xAE\\x02\\xB0' +\r\n    '\\x02\\xB2\\x02\\xB4\\x02\\xB6\\x02\\xB8\\x02\\xBA\\x02\\xBC\\x02\\xBE\\x02\\xC0\\x02\\xC2' +\r\n    '\\x02\\xC4\\x02\\xC6\\x02\\xC8\\x02\\xCA\\x02\\xCC\\x02\\xCE\\x02\\xD0\\x02\\xD2\\x02\\xD4' +\r\n    '\\x02\\xD6\\x02\\xD8\\x02\\xDA\\x02\\xDC\\x02\\xDE\\x02\\xE0\\x02\\xE2\\x02\\xE4\\x02\\xE6' +\r\n    '\\x02\\xE8\\x02\\xEA\\x02\\xEC\\x02\\xEE\\x02\\xF0\\x02\\xF2\\x02\\xF4\\x02\\xF6\\x02\\xF8' +\r\n    '\\x02\\xFA\\x02\\xFC\\x02\\xFE\\x02\\u0100\\x02\\u0102\\x02\\u0104\\x02\\u0106\\x02\\u0108' +\r\n    '\\x02\\u010A\\x02\\u010C\\x02\\u010E\\x02\\u0110\\x02\\u0112\\x02\\u0114\\x02\\u0116' +\r\n    '\\x02\\u0118\\x02\\u011A\\x02\\u011C\\x02\\u011E\\x02\\u0120\\x02\\u0122\\x02\\u0124' +\r\n    '\\x02\\u0126\\x02\\u0128\\x02\\u012A\\x02\\u012C\\x02\\u012E\\x02\\u0130\\x02\\u0132' +\r\n    '\\x02\\u0134\\x02\\u0136\\x02\\u0138\\x02\\u013A\\x02\\u013C\\x02\\u013E\\x02\\u0140' +\r\n    '\\x02\\u0142\\x02\\u0144\\x02\\u0146\\x02\\u0148\\x02\\u014A\\x02\\u014C\\x02\\u014E' +\r\n    '\\x02\\u0150\\x02\\u0152\\x02\\u0154\\x02\\u0156\\x02\\u0158\\x02\\u015A\\x02\\u015C' +\r\n    '\\x02\\u015E\\x02\\u0160\\x02\\u0162\\x02\\u0164\\x02\\u0166\\x02\\u0168\\x02\\u016A' +\r\n    '\\x02\\u016C\\x02\\u016E\\x02\\u0170\\x02\\u0172\\x02\\u0174\\x02\\u0176\\x02\\u0178' +\r\n    '\\x02\\u017A\\x02\\u017C\\x02\\u017E\\x02\\u0180\\x02\\u0182\\x02\\u0184\\x02\\u0186' +\r\n    '\\x02\\u0188\\x02\\u018A\\x02\\u018C\\x02\\u018E\\x02\\u0190\\x02\\u0192\\x02\\u0194' +\r\n    '\\x02\\u0196\\x02\\u0198\\x02\\u019A\\x02\\u019C\\x02\\u019E\\x02\\u01A0\\x02\\u01A2' +\r\n    '\\x02\\u01A4\\x02\\u01A6\\x02\\u01A8\\x02\\u01AA\\x02\\u01AC\\x02\\u01AE\\x02\\u01B0' +\r\n    '\\x02\\u01B2\\x02\\u01B4\\x02\\u01B6\\x02\\u01B8\\x02\\u01BA\\x02\\u01BC\\x02\\u01BE' +\r\n    '\\x02\\u01C0\\x02\\u01C2\\x02\\u01C4\\x02\\u01C6\\x02\\u01C8\\x02\\u01CA\\x02\\u01CC' +\r\n    '\\x02\\u01CE\\x02\\u01D0\\x02\\u01D2\\x02\\u01D4\\x02\\u01D6\\x02\\u01D8\\x02\\u01DA' +\r\n    '\\x02\\u01DC\\x02\\u01DE\\x02\\u01E0\\x02\\u01E2\\x02\\u01E4\\x02\\u01E6\\x02\\u01E8' +\r\n    '\\x02\\u01EA\\x02\\u01EC\\x02\\u01EE\\x02\\u01F0\\x02\\u01F2\\x02\\u01F4\\x02\\u01F6' +\r\n    '\\x02\\u01F8\\x02\\u01FA\\x02\\u01FC\\x02\\u01FE\\x02\\u0200\\x02\\u0202\\x02\\u0204' +\r\n    '\\x02\\u0206\\x02\\u0208\\x02\\u020A\\x02\\u020C\\x02\\u020E\\x02\\u0210\\x02\\u0212' +\r\n    '\\x02\\u0214\\x02\\u0216\\x02\\u0218\\x02\\u021A\\x02\\u021C\\x02\\u021E\\x02\\u0220' +\r\n    '\\x02\\u0222\\x02\\u0224\\x02\\u0226\\x02\\u0228\\x02\\u022A\\x02\\u022C\\x02\\u022E' +\r\n    '\\x02\\u0230\\x02\\u0232\\x02\\u0234\\x02\\x02\\x05\\x07\\x02\\x07\\x07\\n\\n\\x1D\\x1D' +\r\n    \"\\x1F\\x1F''\\x04\\x02\\x10\\x10\\x16\\x16\\x04\\x02DD]g\\u0CD3\\x02\\u0237\\x03\\x02\" +\r\n    '\\x02\\x02\\x04\\u023F\\x03\\x02\\x02\\x02\\x06\\u0241\\x03\\x02\\x02\\x02\\b\\u0243\\x03' +\r\n    '\\x02\\x02\\x02\\n\\u0245\\x03\\x02\\x02\\x02\\f\\u0247\\x03\\x02\\x02\\x02\\x0E\\u0249' +\r\n    '\\x03\\x02\\x02\\x02\\x10\\u024B\\x03\\x02\\x02\\x02\\x12\\u024F\\x03\\x02\\x02\\x02\\x14' +\r\n    '\\u025F\\x03\\x02\\x02\\x02\\x16\\u0263\\x03\\x02\\x02\\x02\\x18\\u0265\\x03\\x02\\x02' +\r\n    '\\x02\\x1A\\u0267\\x03\\x02\\x02\\x02\\x1C\\u026C\\x03\\x02\\x02\\x02\\x1E\\u0270\\x03' +\r\n    '\\x02\\x02\\x02 \\u028F\\x03\\x02\\x02\\x02\"\\u0291\\x03\\x02\\x02\\x02$\\u029F\\x03' +\r\n    '\\x02\\x02\\x02&\\u02A6\\x03\\x02\\x02\\x02(\\u02A8\\x03\\x02\\x02\\x02*\\u02AA\\x03' +\r\n    '\\x02\\x02\\x02,\\u02AF\\x03\\x02\\x02\\x02.\\u02BD\\x03\\x02\\x02\\x020\\u02C2\\x03' +\r\n    '\\x02\\x02\\x022\\u02D7\\x03\\x02\\x02\\x024\\u02DE\\x03\\x02\\x02\\x026\\u02EA\\x03' +\r\n    '\\x02\\x02\\x028\\u02EC\\x03\\x02\\x02\\x02:\\u02EF\\x03\\x02\\x02\\x02<\\u02F3\\x03' +\r\n    '\\x02\\x02\\x02>\\u02FD\\x03\\x02\\x02\\x02@\\u0302\\x03\\x02\\x02\\x02B\\u030D\\x03' +\r\n    '\\x02\\x02\\x02D\\u030F\\x03\\x02\\x02\\x02F\\u031F\\x03\\x02\\x02\\x02H\\u0321\\x03' +\r\n    '\\x02\\x02\\x02J\\u0323\\x03\\x02\\x02\\x02L\\u0333\\x03\\x02\\x02\\x02N\\u0335\\x03' +\r\n    '\\x02\\x02\\x02P\\u0341\\x03\\x02\\x02\\x02R\\u0352\\x03\\x02\\x02\\x02T\\u0360\\x03' +\r\n    '\\x02\\x02\\x02V\\u0366\\x03\\x02\\x02\\x02X\\u0368\\x03\\x02\\x02\\x02Z\\u036C\\x03' +\r\n    '\\x02\\x02\\x02\\\\\\u0372\\x03\\x02\\x02\\x02^\\u0379\\x03\\x02\\x02\\x02`\\u0383\\x03' +\r\n    '\\x02\\x02\\x02b\\u0387\\x03\\x02\\x02\\x02d\\u0389\\x03\\x02\\x02\\x02f\\u0397\\x03' +\r\n    '\\x02\\x02\\x02h\\u039C\\x03\\x02\\x02\\x02j\\u03A7\\x03\\x02\\x02\\x02l\\u03A9\\x03' +\r\n    '\\x02\\x02\\x02n\\u03AD\\x03\\x02\\x02\\x02p\\u03B5\\x03\\x02\\x02\\x02r\\u03B8\\x03' +\r\n    '\\x02\\x02\\x02t\\u03BB\\x03\\x02\\x02\\x02v\\u03C3\\x03\\x02\\x02\\x02x\\u03D0\\x03' +\r\n    '\\x02\\x02\\x02z\\u03D7\\x03\\x02\\x02\\x02|\\u03D9\\x03\\x02\\x02\\x02~\\u03E1\\x03' +\r\n    '\\x02\\x02\\x02\\x80\\u03EC\\x03\\x02\\x02\\x02\\x82\\u03EE\\x03\\x02\\x02\\x02\\x84\\u03F6' +\r\n    '\\x03\\x02\\x02\\x02\\x86\\u03FB\\x03\\x02\\x02\\x02\\x88\\u0401\\x03\\x02\\x02\\x02\\x8A' +\r\n    '\\u0405\\x03\\x02\\x02\\x02\\x8C\\u0409\\x03\\x02\\x02\\x02\\x8E\\u040E\\x03\\x02\\x02' +\r\n    '\\x02\\x90\\u0412\\x03\\x02\\x02\\x02\\x92\\u042B\\x03\\x02\\x02\\x02\\x94\\u042D\\x03' +\r\n    '\\x02\\x02\\x02\\x96\\u0438\\x03\\x02\\x02\\x02\\x98\\u043C\\x03\\x02\\x02\\x02\\x9A\\u043E' +\r\n    '\\x03\\x02\\x02\\x02\\x9C\\u0440\\x03\\x02\\x02\\x02\\x9E\\u0442\\x03\\x02\\x02\\x02\\xA0' +\r\n    '\\u044D\\x03\\x02\\x02\\x02\\xA2\\u0452\\x03\\x02\\x02\\x02\\xA4\\u0462\\x03\\x02\\x02' +\r\n    '\\x02\\xA6\\u0475\\x03\\x02\\x02\\x02\\xA8\\u0479\\x03\\x02\\x02\\x02\\xAA\\u047B\\x03' +\r\n    '\\x02\\x02\\x02\\xAC\\u0484\\x03\\x02\\x02\\x02\\xAE\\u048B\\x03\\x02\\x02\\x02\\xB0\\u049D' +\r\n    '\\x03\\x02\\x02\\x02\\xB2\\u04A2\\x03\\x02\\x02\\x02\\xB4\\u04A8\\x03\\x02\\x02\\x02\\xB6' +\r\n    '\\u04AA\\x03\\x02\\x02\\x02\\xB8\\u04AE\\x03\\x02\\x02\\x02\\xBA\\u04B2\\x03\\x02\\x02' +\r\n    '\\x02\\xBC\\u04C5\\x03\\x02\\x02\\x02\\xBE\\u04CA\\x03\\x02\\x02\\x02\\xC0\\u04D4\\x03' +\r\n    '\\x02\\x02\\x02\\xC2\\u04D7\\x03\\x02\\x02\\x02\\xC4\\u04E1\\x03\\x02\\x02\\x02\\xC6\\u04E5' +\r\n    '\\x03\\x02\\x02\\x02\\xC8\\u04E7\\x03\\x02\\x02\\x02\\xCA\\u04E9\\x03\\x02\\x02\\x02\\xCC' +\r\n    '\\u04EF\\x03\\x02\\x02\\x02\\xCE\\u04FC\\x03\\x02\\x02\\x02\\xD0\\u04FF\\x03\\x02\\x02' +\r\n    '\\x02\\xD2\\u0508\\x03\\x02\\x02\\x02\\xD4\\u050A\\x03\\x02\\x02\\x02\\xD6\\u0541\\x03' +\r\n    '\\x02\\x02\\x02\\xD8\\u0546\\x03\\x02\\x02\\x02\\xDA\\u0550\\x03\\x02\\x02\\x02\\xDC\\u055C' +\r\n    '\\x03\\x02\\x02\\x02\\xDE\\u0567\\x03\\x02\\x02\\x02\\xE0\\u0575\\x03\\x02\\x02\\x02\\xE2' +\r\n    '\\u0577\\x03\\x02\\x02\\x02\\xE4\\u0580\\x03\\x02\\x02\\x02\\xE6\\u0582\\x03\\x02\\x02' +\r\n    '\\x02\\xE8\\u0590\\x03\\x02\\x02\\x02\\xEA\\u0593\\x03\\x02\\x02\\x02\\xEC\\u059C\\x03' +\r\n    '\\x02\\x02\\x02\\xEE\\u059E\\x03\\x02\\x02\\x02\\xF0\\u05A1\\x03\\x02\\x02\\x02\\xF2\\u05AF' +\r\n    '\\x03\\x02\\x02\\x02\\xF4\\u05B1\\x03\\x02\\x02\\x02\\xF6\\u05B9\\x03\\x02\\x02\\x02\\xF8' +\r\n    '\\u05C0\\x03\\x02\\x02\\x02\\xFA\\u05C2\\x03\\x02\\x02\\x02\\xFC\\u05C9\\x03\\x02\\x02' +\r\n    '\\x02\\xFE\\u05D2\\x03\\x02\\x02\\x02\\u0100\\u05D7\\x03\\x02\\x02\\x02\\u0102\\u05DF' +\r\n    '\\x03\\x02\\x02\\x02\\u0104\\u05ED\\x03\\x02\\x02\\x02\\u0106\\u05F2\\x03\\x02\\x02\\x02' +\r\n    '\\u0108\\u0604\\x03\\x02\\x02\\x02\\u010A\\u0606\\x03\\x02\\x02\\x02\\u010C\\u060C\\x03' +\r\n    '\\x02\\x02\\x02\\u010E\\u060E\\x03\\x02\\x02\\x02\\u0110\\u0616\\x03\\x02\\x02\\x02\\u0112' +\r\n    '\\u061E\\x03\\x02\\x02\\x02\\u0114\\u0625\\x03\\x02\\x02\\x02\\u0116\\u0627\\x03\\x02' +\r\n    '\\x02\\x02\\u0118\\u0630\\x03\\x02\\x02\\x02\\u011A\\u0638\\x03\\x02\\x02\\x02\\u011C' +\r\n    '\\u063B\\x03\\x02\\x02\\x02\\u011E\\u0641\\x03\\x02\\x02\\x02\\u0120\\u064A\\x03\\x02' +\r\n    '\\x02\\x02\\u0122\\u0652\\x03\\x02\\x02\\x02\\u0124\\u0658\\x03\\x02\\x02\\x02\\u0126' +\r\n    '\\u0662\\x03\\x02\\x02\\x02\\u0128\\u0664\\x03\\x02\\x02\\x02\\u012A\\u066A\\x03\\x02' +\r\n    '\\x02\\x02\\u012C\\u0676\\x03\\x02\\x02\\x02\\u012E\\u067D\\x03\\x02\\x02\\x02\\u0130' +\r\n    '\\u068B\\x03\\x02\\x02\\x02\\u0132\\u068D\\x03\\x02\\x02\\x02\\u0134\\u068F\\x03\\x02' +\r\n    '\\x02\\x02\\u0136\\u0693\\x03\\x02\\x02\\x02\\u0138\\u0697\\x03\\x02\\x02\\x02\\u013A' +\r\n    '\\u06A1\\x03\\x02\\x02\\x02\\u013C\\u06A3\\x03\\x02\\x02\\x02\\u013E\\u06A9\\x03\\x02' +\r\n    '\\x02\\x02\\u0140\\u06B1\\x03\\x02\\x02\\x02\\u0142\\u06C3\\x03\\x02\\x02\\x02\\u0144' +\r\n    '\\u06C5\\x03\\x02\\x02\\x02\\u0146\\u06CB\\x03\\x02\\x02\\x02\\u0148\\u06DA\\x03\\x02' +\r\n    '\\x02\\x02\\u014A\\u06DD\\x03\\x02\\x02\\x02\\u014C\\u06EE\\x03\\x02\\x02\\x02\\u014E' +\r\n    '\\u06F0\\x03\\x02\\x02\\x02\\u0150\\u06F2\\x03\\x02\\x02\\x02\\u0152\\u06F8\\x03\\x02' +\r\n    '\\x02\\x02\\u0154\\u06FE\\x03\\x02\\x02\\x02\\u0156\\u0708\\x03\\x02\\x02\\x02\\u0158' +\r\n    '\\u070C\\x03\\x02\\x02\\x02\\u015A\\u070E\\x03\\x02\\x02\\x02\\u015C\\u071E\\x03\\x02' +\r\n    '\\x02\\x02\\u015E\\u0730\\x03\\x02\\x02\\x02\\u0160\\u0732\\x03\\x02\\x02\\x02\\u0162' +\r\n    '\\u0734\\x03\\x02\\x02\\x02\\u0164\\u073C\\x03\\x02\\x02\\x02\\u0166\\u074B\\x03\\x02' +\r\n    '\\x02\\x02\\u0168\\u075A\\x03\\x02\\x02\\x02\\u016A\\u0760\\x03\\x02\\x02\\x02\\u016C' +\r\n    '\\u0766\\x03\\x02\\x02\\x02\\u016E\\u076C\\x03\\x02\\x02\\x02\\u0170\\u0770\\x03\\x02' +\r\n    '\\x02\\x02\\u0172\\u0782\\x03\\x02\\x02\\x02\\u0174\\u0784\\x03\\x02\\x02\\x02\\u0176' +\r\n    '\\u078B\\x03\\x02\\x02\\x02\\u0178\\u0794\\x03\\x02\\x02\\x02\\u017A\\u079A\\x03\\x02' +\r\n    '\\x02\\x02\\u017C\\u07A2\\x03\\x02\\x02\\x02\\u017E\\u07A5\\x03\\x02\\x02\\x02\\u0180' +\r\n    '\\u07AE\\x03\\x02\\x02\\x02\\u0182\\u07B5\\x03\\x02\\x02\\x02\\u0184\\u07C0\\x03\\x02' +\r\n    '\\x02\\x02\\u0186\\u07CA\\x03\\x02\\x02\\x02\\u0188\\u07EF\\x03\\x02\\x02\\x02\\u018A' +\r\n    '\\u07F1\\x03\\x02\\x02\\x02\\u018C\\u080F\\x03\\x02\\x02\\x02\\u018E\\u0816\\x03\\x02' +\r\n    '\\x02\\x02\\u0190\\u0818\\x03\\x02\\x02\\x02\\u0192\\u081E\\x03\\x02\\x02\\x02\\u0194' +\r\n    '\\u0848\\x03\\x02\\x02\\x02\\u0196\\u084A\\x03\\x02\\x02\\x02\\u0198\\u0873\\x03\\x02' +\r\n    '\\x02\\x02\\u019A\\u08C8\\x03\\x02\\x02\\x02\\u019C\\u08CA\\x03\\x02\\x02\\x02\\u019E' +\r\n    '\\u091C\\x03\\x02\\x02\\x02\\u01A0\\u0921\\x03\\x02\\x02\\x02\\u01A2\\u0930\\x03\\x02' +\r\n    '\\x02\\x02\\u01A4\\u0932\\x03\\x02\\x02\\x02\\u01A6\\u093E\\x03\\x02\\x02\\x02\\u01A8' +\r\n    '\\u094A\\x03\\x02\\x02\\x02\\u01AA\\u0956\\x03\\x02\\x02\\x02\\u01AC\\u096F\\x03\\x02' +\r\n    '\\x02\\x02\\u01AE\\u09BF\\x03\\x02\\x02\\x02\\u01B0\\u09C1\\x03\\x02\\x02\\x02\\u01B2' +\r\n    '\\u09C3\\x03\\x02\\x02\\x02\\u01B4\\u09CB\\x03\\x02\\x02\\x02\\u01B6\\u09CD\\x03\\x02' +\r\n    '\\x02\\x02\\u01B8\\u0A11\\x03\\x02\\x02\\x02\\u01BA\\u0A13\\x03\\x02\\x02\\x02\\u01BC' +\r\n    '\\u0A4A\\x03\\x02\\x02\\x02\\u01BE\\u0A4C\\x03\\x02\\x02\\x02\\u01C0\\u0A7A\\x03\\x02' +\r\n    '\\x02\\x02\\u01C2\\u0A92\\x03\\x02\\x02\\x02\\u01C4\\u0A94\\x03\\x02\\x02\\x02\\u01C6' +\r\n    '\\u0A9E\\x03\\x02\\x02\\x02\\u01C8\\u0AA5\\x03\\x02\\x02\\x02\\u01CA\\u0AA9\\x03\\x02' +\r\n    '\\x02\\x02\\u01CC\\u0AAB\\x03\\x02\\x02\\x02\\u01CE\\u0AB9\\x03\\x02\\x02\\x02\\u01D0' +\r\n    '\\u0ABB\\x03\\x02\\x02\\x02\\u01D2\\u0AC5\\x03\\x02\\x02\\x02\\u01D4\\u0AC9\\x03\\x02' +\r\n    '\\x02\\x02\\u01D6\\u0ACB\\x03\\x02\\x02\\x02\\u01D8\\u0AD2\\x03\\x02\\x02\\x02\\u01DA' +\r\n    '\\u0AD4\\x03\\x02\\x02\\x02\\u01DC\\u0ADD\\x03\\x02\\x02\\x02\\u01DE\\u0ADF\\x03\\x02' +\r\n    '\\x02\\x02\\u01E0\\u0AE1\\x03\\x02\\x02\\x02\\u01E2\\u0AED\\x03\\x02\\x02\\x02\\u01E4' +\r\n    '\\u0AEF\\x03\\x02\\x02\\x02\\u01E6\\u0AFB\\x03\\x02\\x02\\x02\\u01E8\\u0AFD\\x03\\x02' +\r\n    '\\x02\\x02\\u01EA\\u0B09\\x03\\x02\\x02\\x02\\u01EC\\u0B0B\\x03\\x02\\x02\\x02\\u01EE' +\r\n    '\\u0B17\\x03\\x02\\x02\\x02\\u01F0\\u0B19\\x03\\x02\\x02\\x02\\u01F2\\u0B25\\x03\\x02' +\r\n    '\\x02\\x02\\u01F4\\u0B27\\x03\\x02\\x02\\x02\\u01F6\\u0B29\\x03\\x02\\x02\\x02\\u01F8' +\r\n    '\\u0B39\\x03\\x02\\x02\\x02\\u01FA\\u0B3B\\x03\\x02\\x02\\x02\\u01FC\\u0B3D\\x03\\x02' +\r\n    '\\x02\\x02\\u01FE\\u0B3F\\x03\\x02\\x02\\x02\\u0200\\u0B41\\x03\\x02\\x02\\x02\\u0202' +\r\n    '\\u0B43\\x03\\x02\\x02\\x02\\u0204\\u0B5F\\x03\\x02\\x02\\x02\\u0206\\u0B62\\x03\\x02' +\r\n    '\\x02\\x02\\u0208\\u0B65\\x03\\x02\\x02\\x02\\u020A\\u0B69\\x03\\x02\\x02\\x02\\u020C' +\r\n    '\\u0B7D\\x03\\x02\\x02\\x02\\u020E\\u0B8D\\x03\\x02\\x02\\x02\\u0210\\u0B8F\\x03\\x02' +\r\n    '\\x02\\x02\\u0212\\u0B91\\x03\\x02\\x02\\x02\\u0214\\u0B93\\x03\\x02\\x02\\x02\\u0216' +\r\n    '\\u0BA7\\x03\\x02\\x02\\x02\\u0218\\u0BA9\\x03\\x02\\x02\\x02\\u021A\\u0BB4\\x03\\x02' +\r\n    '\\x02\\x02\\u021C\\u0BB6\\x03\\x02\\x02\\x02\\u021E\\u0BB8\\x03\\x02\\x02\\x02\\u0220' +\r\n    '\\u0BBB\\x03\\x02\\x02\\x02\\u0222\\u0BBD\\x03\\x02\\x02\\x02\\u0224\\u0BC0\\x03\\x02' +\r\n    '\\x02\\x02\\u0226\\u0BC2\\x03\\x02\\x02\\x02\\u0228\\u0BCC\\x03\\x02\\x02\\x02\\u022A' +\r\n    '\\u0BDB\\x03\\x02\\x02\\x02\\u022C\\u0BDD\\x03\\x02\\x02\\x02\\u022E\\u0BE0\\x03\\x02' +\r\n    '\\x02\\x02\\u0230\\u0BE2\\x03\\x02\\x02\\x02\\u0232\\u0BE5\\x03\\x02\\x02\\x02\\u0234' +\r\n    '\\u0C02\\x03\\x02\\x02\\x02\\u0236\\u0238\\x05P)\\x02\\u0237\\u0236\\x03\\x02\\x02\\x02' +\r\n    '\\u0237\\u0238\\x03\\x02\\x02\\x02\\u0238\\x03\\x03\\x02\\x02\\x02\\u0239\\u0240\\x05' +\r\n    '\\x06\\x04\\x02\\u023A\\u0240\\x05\\b\\x05\\x02\\u023B\\u0240\\x05\\n\\x06\\x02\\u023C' +\r\n    '\\u0240\\x05\\x0E\\b\\x02\\u023D\\u0240\\x05\\f\\x07\\x02\\u023E\\u0240\\x05\\x10\\t\\x02' +\r\n    '\\u023F\\u0239\\x03\\x02\\x02\\x02\\u023F\\u023A\\x03\\x02\\x02\\x02\\u023F\\u023B\\x03' +\r\n    '\\x02\\x02\\x02\\u023F\\u023C\\x03\\x02\\x02\\x02\\u023F\\u023D\\x03\\x02\\x02\\x02\\u023F' +\r\n    '\\u023E\\x03\\x02\\x02\\x02\\u0240\\x05\\x03\\x02\\x02\\x02\\u0241\\u0242\\x075\\x02' +\r\n    '\\x02\\u0242\\x07\\x03\\x02\\x02\\x02\\u0243\\u0244\\x076\\x02\\x02\\u0244\\t\\x03\\x02' +\r\n    '\\x02\\x02\\u0245\\u0246\\x077\\x02\\x02\\u0246\\v\\x03\\x02\\x02\\x02\\u0247\\u0248' +\r\n    '\\x079\\x02\\x02\\u0248\\r\\x03\\x02\\x02\\x02\\u0249\\u024A\\x078\\x02\\x02\\u024A\\x0F' +\r\n    '\\x03\\x02\\x02\\x02\\u024B\\u024C\\x07:\\x02\\x02\\u024C\\x11\\x03\\x02\\x02\\x02\\u024D' +\r\n    '\\u0250\\x05\\x14\\v\\x02\\u024E\\u0250\\x05\\x1C\\x0F\\x02\\u024F\\u024D\\x03\\x02\\x02' +\r\n    '\\x02\\u024F\\u024E\\x03\\x02\\x02\\x02\\u0250\\x13\\x03\\x02\\x02\\x02\\u0251\\u0253' +\r\n    '\\x05\\u010C\\x87\\x02\\u0252\\u0251\\x03\\x02\\x02\\x02\\u0253\\u0256\\x03\\x02\\x02' +\r\n    '\\x02\\u0254\\u0252\\x03\\x02\\x02\\x02\\u0254\\u0255\\x03\\x02\\x02\\x02\\u0255\\u0257' +\r\n    '\\x03\\x02\\x02\\x02\\u0256\\u0254\\x03\\x02\\x02\\x02\\u0257\\u0260\\x05\\x16\\f\\x02' +\r\n    '\\u0258\\u025A\\x05\\u010C\\x87\\x02\\u0259\\u0258\\x03\\x02\\x02\\x02\\u025A\\u025D' +\r\n    '\\x03\\x02\\x02\\x02\\u025B\\u0259\\x03\\x02\\x02\\x02\\u025B\\u025C\\x03\\x02\\x02\\x02' +\r\n    '\\u025C\\u025E\\x03\\x02\\x02\\x02\\u025D\\u025B\\x03\\x02\\x02\\x02\\u025E\\u0260\\x07' +\r\n    '\\x05\\x02\\x02\\u025F\\u0254\\x03\\x02\\x02\\x02\\u025F\\u025B\\x03\\x02\\x02\\x02\\u0260' +\r\n    '\\x15\\x03\\x02\\x02\\x02\\u0261\\u0264\\x05\\x18\\r\\x02\\u0262\\u0264\\x05\\x1A\\x0E' +\r\n    '\\x02\\u0263\\u0261\\x03\\x02\\x02\\x02\\u0263\\u0262\\x03\\x02\\x02\\x02\\u0264\\x17' +\r\n    '\\x03\\x02\\x02\\x02\\u0265\\u0266\\t\\x02\\x02\\x02\\u0266\\x19\\x03\\x02\\x02\\x02\\u0267' +\r\n    '\\u0268\\t\\x03\\x02\\x02\\u0268\\x1B\\x03\\x02\\x02\\x02\\u0269\\u026D\\x05\\x1E\\x10' +\r\n    '\\x02\\u026A\\u026D\\x05,\\x17\\x02\\u026B\\u026D\\x05.\\x18\\x02\\u026C\\u0269\\x03' +\r\n    '\\x02\\x02\\x02\\u026C\\u026A\\x03\\x02\\x02\\x02\\u026C\\u026B\\x03\\x02\\x02\\x02\\u026D' +\r\n    '\\x1D\\x03\\x02\\x02\\x02\\u026E\\u0271\\x05$\\x13\\x02\\u026F\\u0271\\x05*\\x16\\x02' +\r\n    '\\u0270\\u026E\\x03\\x02\\x02\\x02\\u0270\\u026F\\x03\\x02\\x02\\x02\\u0271\\u0276\\x03' +\r\n    '\\x02\\x02\\x02\\u0272\\u0275\\x05\"\\x12\\x02\\u0273\\u0275\\x05(\\x15\\x02\\u0274' +\r\n    '\\u0272\\x03\\x02\\x02\\x02\\u0274\\u0273\\x03\\x02\\x02\\x02\\u0275\\u0278\\x03\\x02' +\r\n    '\\x02\\x02\\u0276\\u0274\\x03\\x02\\x02\\x02\\u0276\\u0277\\x03\\x02\\x02\\x02\\u0277' +\r\n    '\\x1F\\x03\\x02\\x02\\x02\\u0278\\u0276\\x03\\x02\\x02\\x02\\u0279\\u027B\\x05\\u010C' +\r\n    '\\x87\\x02\\u027A\\u0279\\x03\\x02\\x02\\x02\\u027B\\u027E\\x03\\x02\\x02\\x02\\u027C' +\r\n    '\\u027A\\x03\\x02\\x02\\x02\\u027C\\u027D\\x03\\x02\\x02\\x02\\u027D\\u027F\\x03\\x02' +\r\n    '\\x02\\x02\\u027E\\u027C\\x03\\x02\\x02\\x02\\u027F\\u0281\\x07h\\x02\\x02\\u0280\\u0282' +\r\n    '\\x05:\\x1E\\x02\\u0281\\u0280\\x03\\x02\\x02\\x02\\u0281\\u0282\\x03\\x02\\x02\\x02' +\r\n    '\\u0282\\u0290\\x03\\x02\\x02\\x02\\u0283\\u0284\\x05\\x1E\\x10\\x02\\u0284\\u0288\\x07' +\r\n    'C\\x02\\x02\\u0285\\u0287\\x05\\u010C\\x87\\x02\\u0286\\u0285\\x03\\x02\\x02\\x02\\u0287' +\r\n    '\\u028A\\x03\\x02\\x02\\x02\\u0288\\u0286\\x03\\x02\\x02\\x02\\u0288\\u0289\\x03\\x02' +\r\n    '\\x02\\x02\\u0289\\u028B\\x03\\x02\\x02\\x02\\u028A\\u0288\\x03\\x02\\x02\\x02\\u028B' +\r\n    '\\u028D\\x07h\\x02\\x02\\u028C\\u028E\\x05:\\x1E\\x02\\u028D\\u028C\\x03\\x02\\x02\\x02' +\r\n    '\\u028D\\u028E\\x03\\x02\\x02\\x02\\u028E\\u0290\\x03\\x02\\x02\\x02\\u028F\\u027C\\x03' +\r\n    '\\x02\\x02\\x02\\u028F\\u0283\\x03\\x02\\x02\\x02\\u0290!\\x03\\x02\\x02\\x02\\u0291' +\r\n    '\\u0295\\x07C\\x02\\x02\\u0292\\u0294\\x05\\u010C\\x87\\x02\\u0293\\u0292\\x03\\x02' +\r\n    '\\x02\\x02\\u0294\\u0297\\x03\\x02\\x02\\x02\\u0295\\u0293\\x03\\x02\\x02\\x02\\u0295' +\r\n    '\\u0296\\x03\\x02\\x02\\x02\\u0296\\u0298\\x03\\x02\\x02\\x02\\u0297\\u0295\\x03\\x02' +\r\n    '\\x02\\x02\\u0298\\u029A\\x07h\\x02\\x02\\u0299\\u029B\\x05:\\x1E\\x02\\u029A\\u0299' +\r\n    '\\x03\\x02\\x02\\x02\\u029A\\u029B\\x03\\x02\\x02\\x02\\u029B#\\x03\\x02\\x02\\x02\\u029C' +\r\n    '\\u029E\\x05\\u010C\\x87\\x02\\u029D\\u029C\\x03\\x02\\x02\\x02\\u029E\\u02A1\\x03\\x02' +\r\n    '\\x02\\x02\\u029F\\u029D\\x03\\x02\\x02\\x02\\u029F\\u02A0\\x03\\x02\\x02\\x02\\u02A0' +\r\n    '\\u02A2\\x03\\x02\\x02\\x02\\u02A1\\u029F\\x03\\x02\\x02\\x02\\u02A2\\u02A4\\x07h\\x02' +\r\n    '\\x02\\u02A3\\u02A5\\x05:\\x1E\\x02\\u02A4\\u02A3\\x03\\x02\\x02\\x02\\u02A4\\u02A5' +\r\n    '\\x03\\x02\\x02\\x02\\u02A5%\\x03\\x02\\x02\\x02\\u02A6\\u02A7\\x05 \\x11\\x02\\u02A7' +\r\n    '\\'\\x03\\x02\\x02\\x02\\u02A8\\u02A9\\x05\"\\x12\\x02\\u02A9)\\x03\\x02\\x02\\x02\\u02AA' +\r\n    '\\u02AB\\x05$\\x13\\x02\\u02AB+\\x03\\x02\\x02\\x02\\u02AC\\u02AE\\x05\\u010C\\x87\\x02' +\r\n    '\\u02AD\\u02AC\\x03\\x02\\x02\\x02\\u02AE\\u02B1\\x03\\x02\\x02\\x02\\u02AF\\u02AD\\x03' +\r\n    '\\x02\\x02\\x02\\u02AF\\u02B0\\x03\\x02\\x02\\x02\\u02B0\\u02B2\\x03\\x02\\x02\\x02\\u02B1' +\r\n    '\\u02AF\\x03\\x02\\x02\\x02\\u02B2\\u02B3\\x07h\\x02\\x02\\u02B3-\\x03\\x02\\x02\\x02' +\r\n    '\\u02B4\\u02B5\\x05\\x14\\v\\x02\\u02B5\\u02B6\\x050\\x19\\x02\\u02B6\\u02BE\\x03\\x02' +\r\n    '\\x02\\x02\\u02B7\\u02B8\\x05\\x1E\\x10\\x02\\u02B8\\u02B9\\x050\\x19\\x02\\u02B9\\u02BE' +\r\n    '\\x03\\x02\\x02\\x02\\u02BA\\u02BB\\x05,\\x17\\x02\\u02BB\\u02BC\\x050\\x19\\x02\\u02BC' +\r\n    '\\u02BE\\x03\\x02\\x02\\x02\\u02BD\\u02B4\\x03\\x02\\x02\\x02\\u02BD\\u02B7\\x03\\x02' +\r\n    '\\x02\\x02\\u02BD\\u02BA\\x03\\x02\\x02\\x02\\u02BE/\\x03\\x02\\x02\\x02\\u02BF\\u02C1' +\r\n    '\\x05\\u010C\\x87\\x02\\u02C0\\u02BF\\x03\\x02\\x02\\x02\\u02C1\\u02C4\\x03\\x02\\x02' +\r\n    '\\x02\\u02C2\\u02C0\\x03\\x02\\x02\\x02\\u02C2\\u02C3\\x03\\x02\\x02\\x02\\u02C3\\u02C5' +\r\n    '\\x03\\x02\\x02\\x02\\u02C4\\u02C2\\x03\\x02\\x02\\x02\\u02C5\\u02C6\\x07?\\x02\\x02' +\r\n    '\\u02C6\\u02D1\\x07@\\x02\\x02\\u02C7\\u02C9\\x05\\u010C\\x87\\x02\\u02C8\\u02C7\\x03' +\r\n    '\\x02\\x02\\x02\\u02C9\\u02CC\\x03\\x02\\x02\\x02\\u02CA\\u02C8\\x03\\x02\\x02\\x02\\u02CA' +\r\n    '\\u02CB\\x03\\x02\\x02\\x02\\u02CB\\u02CD\\x03\\x02\\x02\\x02\\u02CC\\u02CA\\x03\\x02' +\r\n    '\\x02\\x02\\u02CD\\u02CE\\x07?\\x02\\x02\\u02CE\\u02D0\\x07@\\x02\\x02\\u02CF\\u02CA' +\r\n    '\\x03\\x02\\x02\\x02\\u02D0\\u02D3\\x03\\x02\\x02\\x02\\u02D1';\r\nJava8Parser._serializedATNSegment2 = '\\u02CF\\x03\\x02\\x02\\x02\\u02D1\\u02D2\\x03\\x02\\x02\\x02\\u02D21\\x03\\x02\\x02' +\r\n    '\\x02\\u02D3\\u02D1\\x03\\x02\\x02\\x02\\u02D4\\u02D6\\x054\\x1B\\x02\\u02D5\\u02D4' +\r\n    '\\x03\\x02\\x02\\x02\\u02D6\\u02D9\\x03\\x02\\x02\\x02\\u02D7\\u02D5\\x03\\x02\\x02\\x02' +\r\n    '\\u02D7\\u02D8\\x03\\x02\\x02\\x02\\u02D8\\u02DA\\x03\\x02\\x02\\x02\\u02D9\\u02D7\\x03' +\r\n    '\\x02\\x02\\x02\\u02DA\\u02DC\\x07h\\x02\\x02\\u02DB\\u02DD\\x056\\x1C\\x02\\u02DC\\u02DB' +\r\n    '\\x03\\x02\\x02\\x02\\u02DC\\u02DD\\x03\\x02\\x02\\x02\\u02DD3\\x03\\x02\\x02\\x02\\u02DE' +\r\n    '\\u02DF\\x05\\u010C\\x87\\x02\\u02DF5\\x03\\x02\\x02\\x02\\u02E0\\u02E1\\x07\\x13\\x02' +\r\n    '\\x02\\u02E1\\u02EB\\x05,\\x17\\x02\\u02E2\\u02E3\\x07\\x13\\x02\\x02\\u02E3\\u02E7' +\r\n    '\\x05\\x1E\\x10\\x02\\u02E4\\u02E6\\x058\\x1D\\x02\\u02E5\\u02E4\\x03\\x02\\x02\\x02' +\r\n    '\\u02E6\\u02E9\\x03\\x02\\x02\\x02\\u02E7\\u02E5\\x03\\x02\\x02\\x02\\u02E7\\u02E8\\x03' +\r\n    '\\x02\\x02\\x02\\u02E8\\u02EB\\x03\\x02\\x02\\x02\\u02E9\\u02E7\\x03\\x02\\x02\\x02\\u02EA' +\r\n    '\\u02E0\\x03\\x02\\x02\\x02\\u02EA\\u02E2\\x03\\x02\\x02\\x02\\u02EB7\\x03\\x02\\x02' +\r\n    '\\x02\\u02EC\\u02ED\\x07W\\x02\\x02\\u02ED\\u02EE\\x05&\\x14\\x02\\u02EE9\\x03\\x02' +\r\n    '\\x02\\x02\\u02EF\\u02F0\\x07F\\x02\\x02\\u02F0\\u02F1\\x05<\\x1F\\x02\\u02F1\\u02F2' +\r\n    '\\x07E\\x02\\x02\\u02F2;\\x03\\x02\\x02\\x02\\u02F3\\u02F8\\x05> \\x02\\u02F4\\u02F5' +\r\n    '\\x07B\\x02\\x02\\u02F5\\u02F7\\x05> \\x02\\u02F6\\u02F4\\x03\\x02\\x02\\x02\\u02F7' +\r\n    '\\u02FA\\x03\\x02\\x02\\x02\\u02F8\\u02F6\\x03\\x02\\x02\\x02\\u02F8\\u02F9\\x03\\x02' +\r\n    '\\x02\\x02\\u02F9=\\x03\\x02\\x02\\x02\\u02FA\\u02F8\\x03\\x02\\x02\\x02\\u02FB\\u02FE' +\r\n    '\\x05\\x1C\\x0F\\x02\\u02FC\\u02FE\\x05@!\\x02\\u02FD\\u02FB\\x03\\x02\\x02\\x02\\u02FD' +\r\n    '\\u02FC\\x03\\x02\\x02\\x02\\u02FE?\\x03\\x02\\x02\\x02\\u02FF\\u0301\\x05\\u010C\\x87' +\r\n    '\\x02\\u0300\\u02FF\\x03\\x02\\x02\\x02\\u0301\\u0304\\x03\\x02\\x02\\x02\\u0302\\u0300' +\r\n    '\\x03\\x02\\x02\\x02\\u0302\\u0303\\x03\\x02\\x02\\x02\\u0303\\u0305\\x03\\x02\\x02\\x02' +\r\n    '\\u0304\\u0302\\x03\\x02\\x02\\x02\\u0305\\u0307\\x07I\\x02\\x02\\u0306\\u0308\\x05' +\r\n    'B\"\\x02\\u0307\\u0306\\x03\\x02\\x02\\x02\\u0307\\u0308\\x03\\x02\\x02\\x02\\u0308' +\r\n    'A\\x03\\x02\\x02\\x02\\u0309\\u030A\\x07\\x13\\x02\\x02\\u030A\\u030E\\x05\\x1C\\x0F' +\r\n    '\\x02\\u030B\\u030C\\x07*\\x02\\x02\\u030C\\u030E\\x05\\x1C\\x0F\\x02\\u030D\\u0309' +\r\n    '\\x03\\x02\\x02\\x02\\u030D\\u030B\\x03\\x02\\x02\\x02\\u030EC\\x03\\x02\\x02\\x02\\u030F' +\r\n    '\\u0310\\b#\\x01\\x02\\u0310\\u0311\\x07h\\x02\\x02\\u0311\\u0317\\x03\\x02\\x02\\x02' +\r\n    '\\u0312\\u0313\\f\\x03\\x02\\x02\\u0313\\u0314\\x07C\\x02\\x02\\u0314\\u0316\\x07h\\x02' +\r\n    '\\x02\\u0315\\u0312\\x03\\x02\\x02\\x02\\u0316\\u0319\\x03\\x02\\x02\\x02\\u0317\\u0315' +\r\n    '\\x03\\x02\\x02\\x02\\u0317\\u0318\\x03\\x02\\x02\\x02\\u0318E\\x03\\x02\\x02\\x02\\u0319' +\r\n    '\\u0317\\x03\\x02\\x02\\x02\\u031A\\u0320\\x07h\\x02\\x02\\u031B\\u031C\\x05J&\\x02' +\r\n    '\\u031C\\u031D\\x07C\\x02\\x02\\u031D\\u031E\\x07h\\x02\\x02\\u031E\\u0320\\x03\\x02' +\r\n    '\\x02\\x02\\u031F\\u031A\\x03\\x02\\x02\\x02\\u031F\\u031B\\x03\\x02\\x02\\x02\\u0320' +\r\n    'G\\x03\\x02\\x02\\x02\\u0321\\u0322\\x05F$\\x02\\u0322I\\x03\\x02\\x02\\x02\\u0323\\u0324' +\r\n    '\\b&\\x01\\x02\\u0324\\u0325\\x07h\\x02\\x02\\u0325\\u032B\\x03\\x02\\x02\\x02\\u0326' +\r\n    '\\u0327\\f\\x03\\x02\\x02\\u0327\\u0328\\x07C\\x02\\x02\\u0328\\u032A\\x07h\\x02\\x02' +\r\n    '\\u0329\\u0326\\x03\\x02\\x02\\x02\\u032A\\u032D\\x03\\x02\\x02\\x02\\u032B\\u0329\\x03' +\r\n    '\\x02\\x02\\x02\\u032B\\u032C\\x03\\x02\\x02\\x02\\u032CK\\x03\\x02\\x02\\x02\\u032D' +\r\n    '\\u032B\\x03\\x02\\x02\\x02\\u032E\\u0334\\x07h\\x02\\x02\\u032F\\u0330\\x05N(\\x02' +\r\n    '\\u0330\\u0331\\x07C\\x02\\x02\\u0331\\u0332\\x07h\\x02\\x02\\u0332\\u0334\\x03\\x02' +\r\n    '\\x02\\x02\\u0333\\u032E\\x03\\x02\\x02\\x02\\u0333\\u032F\\x03\\x02\\x02\\x02\\u0334' +\r\n    'M\\x03\\x02\\x02\\x02\\u0335\\u0336\\b(\\x01\\x02\\u0336\\u0337\\x07h\\x02\\x02\\u0337' +\r\n    '\\u033D\\x03\\x02\\x02\\x02\\u0338\\u0339\\f\\x03\\x02\\x02\\u0339\\u033A\\x07C\\x02' +\r\n    '\\x02\\u033A\\u033C\\x07h\\x02\\x02\\u033B\\u0338\\x03\\x02\\x02\\x02\\u033C\\u033F' +\r\n    '\\x03\\x02\\x02\\x02\\u033D\\u033B\\x03\\x02\\x02\\x02\\u033D\\u033E\\x03\\x02\\x02\\x02' +\r\n    '\\u033EO\\x03\\x02\\x02\\x02\\u033F\\u033D\\x03\\x02\\x02\\x02\\u0340\\u0342\\x05R*' +\r\n    '\\x02\\u0341\\u0340\\x03\\x02\\x02\\x02\\u0341\\u0342\\x03\\x02\\x02\\x02\\u0342\\u0346' +\r\n    '\\x03\\x02\\x02\\x02\\u0343\\u0345\\x05V,\\x02\\u0344\\u0343\\x03\\x02\\x02\\x02\\u0345' +\r\n    '\\u0348\\x03\\x02\\x02\\x02\\u0346\\u0344\\x03\\x02\\x02\\x02\\u0346\\u0347\\x03\\x02' +\r\n    '\\x02\\x02\\u0347\\u034C\\x03\\x02\\x02\\x02\\u0348\\u0346\\x03\\x02\\x02\\x02\\u0349' +\r\n    '\\u034B\\x05`1\\x02\\u034A\\u0349\\x03\\x02\\x02\\x02\\u034B\\u034E\\x03\\x02\\x02\\x02' +\r\n    '\\u034C\\u034A\\x03\\x02\\x02\\x02\\u034C\\u034D\\x03\\x02\\x02\\x02\\u034DQ\\x03\\x02' +\r\n    '\\x02\\x02\\u034E\\u034C\\x03\\x02\\x02\\x02\\u034F\\u0351\\x05T+\\x02\\u0350\\u034F' +\r\n    '\\x03\\x02\\x02\\x02\\u0351\\u0354\\x03\\x02\\x02\\x02\\u0352\\u0350\\x03\\x02\\x02\\x02' +\r\n    '\\u0352\\u0353\\x03\\x02\\x02\\x02\\u0353\\u0355\\x03\\x02\\x02\\x02\\u0354\\u0352\\x03' +\r\n    '\\x02\\x02\\x02\\u0355\\u0356\\x07\"\\x02\\x02\\u0356\\u035B\\x07h\\x02\\x02\\u0357' +\r\n    '\\u0358\\x07C\\x02\\x02\\u0358\\u035A\\x07h\\x02\\x02\\u0359\\u0357\\x03\\x02\\x02\\x02' +\r\n    '\\u035A\\u035D\\x03\\x02\\x02\\x02\\u035B\\u0359\\x03\\x02\\x02\\x02\\u035B\\u035C\\x03' +\r\n    '\\x02\\x02\\x02\\u035C\\u035E\\x03\\x02\\x02\\x02\\u035D\\u035B\\x03\\x02\\x02\\x02\\u035E' +\r\n    '\\u035F\\x07A\\x02\\x02\\u035FS\\x03\\x02\\x02\\x02\\u0360\\u0361\\x05\\u010C\\x87\\x02' +\r\n    '\\u0361U\\x03\\x02\\x02\\x02\\u0362\\u0367\\x05X-\\x02\\u0363\\u0367\\x05Z.\\x02\\u0364' +\r\n    '\\u0367\\x05\\\\/\\x02\\u0365\\u0367\\x05^0\\x02\\u0366\\u0362\\x03\\x02\\x02\\x02\\u0366' +\r\n    '\\u0363\\x03\\x02\\x02\\x02\\u0366\\u0364\\x03\\x02\\x02\\x02\\u0366\\u0365\\x03\\x02' +\r\n    '\\x02\\x02\\u0367W\\x03\\x02\\x02\\x02\\u0368\\u0369\\x07\\x1B\\x02\\x02\\u0369\\u036A' +\r\n    '\\x05F$\\x02\\u036A\\u036B\\x07A\\x02\\x02\\u036BY\\x03\\x02\\x02\\x02\\u036C\\u036D' +\r\n    '\\x07\\x1B\\x02\\x02\\u036D\\u036E\\x05J&\\x02\\u036E\\u036F\\x07C\\x02\\x02\\u036F' +\r\n    '\\u0370\\x05\\u020E\\u0108\\x02\\u0370\\u0371\\x07A\\x02\\x02\\u0371[\\x03\\x02\\x02' +\r\n    '\\x02\\u0372\\u0373\\x07\\x1B\\x02\\x02\\u0373\\u0374\\x07(\\x02\\x02\\u0374\\u0375' +\r\n    '\\x05F$\\x02\\u0375\\u0376\\x07C\\x02\\x02\\u0376\\u0377\\x07h\\x02\\x02\\u0377\\u0378' +\r\n    '\\x07A\\x02\\x02\\u0378]\\x03\\x02\\x02\\x02\\u0379\\u037A\\x07\\x1B\\x02\\x02\\u037A' +\r\n    '\\u037B\\x07(\\x02\\x02\\u037B\\u037C\\x05F$\\x02\\u037C\\u037D\\x07C\\x02\\x02\\u037D' +\r\n    '\\u037E\\x07U\\x02\\x02\\u037E\\u037F\\x07A\\x02\\x02\\u037F_\\x03\\x02\\x02\\x02\\u0380' +\r\n    '\\u0384\\x05b2\\x02\\u0381\\u0384\\x05\\xE4s\\x02\\u0382\\u0384\\x07A\\x02\\x02\\u0383' +\r\n    '\\u0380\\x03\\x02\\x02\\x02\\u0383\\u0381\\x03\\x02\\x02\\x02\\u0383\\u0382\\x03\\x02' +\r\n    '\\x02\\x02\\u0384a\\x03\\x02\\x02\\x02\\u0385\\u0388\\x05d3\\x02\\u0386\\u0388\\x05' +\r\n    '\\xD8m\\x02\\u0387\\u0385\\x03\\x02\\x02\\x02\\u0387\\u0386\\x03\\x02\\x02\\x02\\u0388' +\r\n    'c\\x03\\x02\\x02\\x02\\u0389\\u038A\\x05h5\\x02\\u038A\\u038B\\x07\\v\\x02\\x02\\u038B' +\r\n    '\\u038D\\x05f4\\x02\\u038C\\u038E\\x05l7\\x02\\u038D\\u038C\\x03\\x02\\x02\\x02\\u038D' +\r\n    '\\u038E\\x03\\x02\\x02\\x02\\u038E\\u0390\\x03\\x02\\x02\\x02\\u038F\\u0391\\x05p9\\x02' +\r\n    '\\u0390\\u038F\\x03\\x02\\x02\\x02\\u0390\\u0391\\x03\\x02\\x02\\x02\\u0391\\u0393\\x03' +\r\n    '\\x02\\x02\\x02\\u0392\\u0394\\x05r:\\x02\\u0393\\u0392\\x03\\x02\\x02\\x02\\u0393\\u0394' +\r\n    '\\x03\\x02\\x02\\x02\\u0394\\u0395\\x03\\x02\\x02\\x02\\u0395\\u0396\\x05v<\\x02\\u0396' +\r\n    'e\\x03\\x02\\x02\\x02\\u0397\\u0398\\x07h\\x02\\x02\\u0398g\\x03\\x02\\x02\\x02\\u0399' +\r\n    '\\u039B\\x05j6\\x02\\u039A\\u0399\\x03\\x02\\x02\\x02\\u039B\\u039E\\x03\\x02\\x02\\x02' +\r\n    '\\u039C\\u039A\\x03\\x02\\x02\\x02\\u039C\\u039D\\x03\\x02\\x02\\x02\\u039Di\\x03\\x02' +\r\n    '\\x02\\x02\\u039E\\u039C\\x03\\x02\\x02\\x02\\u039F\\u03A8\\x05\\u010C\\x87\\x02\\u03A0' +\r\n    '\\u03A8\\x07%\\x02\\x02\\u03A1\\u03A8\\x07$\\x02\\x02\\u03A2\\u03A8\\x07#\\x02\\x02' +\r\n    '\\u03A3\\u03A8\\x07\\x03\\x02\\x02\\u03A4\\u03A8\\x07(\\x02\\x02\\u03A5\\u03A8\\x07' +\r\n    '\\x14\\x02\\x02\\u03A6\\u03A8\\x07)\\x02\\x02\\u03A7\\u039F\\x03\\x02\\x02\\x02\\u03A7' +\r\n    '\\u03A0\\x03\\x02\\x02\\x02\\u03A7\\u03A1\\x03\\x02\\x02\\x02\\u03A7\\u03A2\\x03\\x02' +\r\n    '\\x02\\x02\\u03A7\\u03A3\\x03\\x02\\x02\\x02\\u03A7\\u03A4\\x03\\x02\\x02\\x02\\u03A7' +\r\n    '\\u03A5\\x03\\x02\\x02\\x02\\u03A7\\u03A6\\x03\\x02\\x02\\x02\\u03A8k\\x03\\x02\\x02' +\r\n    '\\x02\\u03A9\\u03AA\\x07F\\x02\\x02\\u03AA\\u03AB\\x05n8\\x02\\u03AB\\u03AC\\x07E\\x02' +\r\n    '\\x02\\u03ACm\\x03\\x02\\x02\\x02\\u03AD\\u03B2\\x052\\x1A\\x02\\u03AE\\u03AF\\x07B' +\r\n    '\\x02\\x02\\u03AF\\u03B1\\x052\\x1A\\x02\\u03B0\\u03AE\\x03\\x02\\x02\\x02\\u03B1\\u03B4' +\r\n    '\\x03\\x02\\x02\\x02\\u03B2\\u03B0\\x03\\x02\\x02\\x02\\u03B2\\u03B3\\x03\\x02\\x02\\x02' +\r\n    '\\u03B3o\\x03\\x02\\x02\\x02\\u03B4\\u03B2\\x03\\x02\\x02\\x02\\u03B5\\u03B6\\x07\\x13' +\r\n    '\\x02\\x02\\u03B6\\u03B7\\x05 \\x11\\x02\\u03B7q\\x03\\x02\\x02\\x02\\u03B8\\u03B9\\x07' +\r\n    '\\x1A\\x02\\x02\\u03B9\\u03BA\\x05t;\\x02\\u03BAs\\x03\\x02\\x02\\x02\\u03BB\\u03C0' +\r\n    '\\x05&\\x14\\x02\\u03BC\\u03BD\\x07B\\x02\\x02\\u03BD\\u03BF\\x05&\\x14\\x02\\u03BE' +\r\n    '\\u03BC\\x03\\x02\\x02\\x02\\u03BF\\u03C2\\x03\\x02\\x02\\x02\\u03C0\\u03BE\\x03\\x02' +\r\n    '\\x02\\x02\\u03C0\\u03C1\\x03\\x02\\x02\\x02\\u03C1u\\x03\\x02\\x02\\x02\\u03C2\\u03C0' +\r\n    '\\x03\\x02\\x02\\x02\\u03C3\\u03C7\\x07=\\x02\\x02\\u03C4\\u03C6\\x05x=\\x02\\u03C5' +\r\n    '\\u03C4\\x03\\x02\\x02\\x02\\u03C6\\u03C9\\x03\\x02\\x02\\x02\\u03C7\\u03C5\\x03\\x02' +\r\n    '\\x02\\x02\\u03C7\\u03C8\\x03\\x02\\x02\\x02\\u03C8\\u03CA\\x03\\x02\\x02\\x02\\u03C9' +\r\n    '\\u03C7\\x03\\x02\\x02\\x02\\u03CA\\u03CB\\x07>\\x02\\x02\\u03CBw\\x03\\x02\\x02\\x02' +\r\n    '\\u03CC\\u03D1\\x05z>\\x02\\u03CD\\u03D1\\x05\\xC8e\\x02\\u03CE\\u03D1\\x05\\xCAf\\x02' +\r\n    '\\u03CF\\u03D1\\x05\\xCCg\\x02\\u03D0\\u03CC\\x03\\x02\\x02\\x02\\u03D0\\u03CD\\x03' +\r\n    '\\x02\\x02\\x02\\u03D0\\u03CE\\x03\\x02\\x02\\x02\\u03D0\\u03CF\\x03\\x02\\x02\\x02\\u03D1' +\r\n    'y\\x03\\x02\\x02\\x02\\u03D2\\u03D8\\x05|?\\x02\\u03D3\\u03D8\\x05\\xA2R\\x02\\u03D4' +\r\n    '\\u03D8\\x05b2\\x02\\u03D5\\u03D8\\x05\\xE4s\\x02\\u03D6\\u03D8\\x07A\\x02\\x02\\u03D7' +\r\n    '\\u03D2\\x03\\x02\\x02\\x02\\u03D7\\u03D3\\x03\\x02\\x02\\x02\\u03D7\\u03D4\\x03\\x02' +\r\n    '\\x02\\x02\\u03D7\\u03D5\\x03\\x02\\x02\\x02\\u03D7\\u03D6\\x03\\x02\\x02\\x02\\u03D8' +\r\n    '{\\x03\\x02\\x02\\x02\\u03D9\\u03DA\\x05~@\\x02\\u03DA\\u03DB\\x05\\x8AF\\x02\\u03DB' +\r\n    '\\u03DC\\x05\\x82B\\x02\\u03DC\\u03DD\\x07A\\x02\\x02\\u03DD}\\x03\\x02\\x02\\x02\\u03DE' +\r\n    '\\u03E0\\x05\\x80A\\x02\\u03DF\\u03DE\\x03\\x02\\x02\\x02\\u03E0\\u03E3\\x03\\x02\\x02' +\r\n    '\\x02\\u03E1\\u03DF\\x03\\x02\\x02\\x02\\u03E1\\u03E2\\x03\\x02\\x02\\x02\\u03E2\\x7F' +\r\n    '\\x03\\x02\\x02\\x02\\u03E3\\u03E1\\x03\\x02\\x02\\x02\\u03E4\\u03ED\\x05\\u010C\\x87' +\r\n    '\\x02\\u03E5\\u03ED\\x07%\\x02\\x02\\u03E6\\u03ED\\x07$\\x02\\x02\\u03E7\\u03ED\\x07' +\r\n    '#\\x02\\x02\\u03E8\\u03ED\\x07(\\x02\\x02\\u03E9\\u03ED\\x07\\x14\\x02\\x02\\u03EA\\u03ED' +\r\n    '\\x070\\x02\\x02\\u03EB\\u03ED\\x073\\x02\\x02\\u03EC\\u03E4\\x03\\x02\\x02\\x02\\u03EC' +\r\n    '\\u03E5\\x03\\x02\\x02\\x02\\u03EC\\u03E6\\x03\\x02\\x02\\x02\\u03EC\\u03E7\\x03\\x02' +\r\n    '\\x02\\x02\\u03EC\\u03E8\\x03\\x02\\x02\\x02\\u03EC\\u03E9\\x03\\x02\\x02\\x02\\u03EC' +\r\n    '\\u03EA\\x03\\x02\\x02\\x02\\u03EC\\u03EB\\x03\\x02\\x02\\x02\\u03ED\\x81\\x03\\x02\\x02' +\r\n    '\\x02\\u03EE\\u03F3\\x05\\x84C\\x02\\u03EF\\u03F0\\x07B\\x02\\x02\\u03F0\\u03F2\\x05' +\r\n    '\\x84C\\x02\\u03F1\\u03EF\\x03\\x02\\x02\\x02\\u03F2\\u03F5\\x03\\x02\\x02\\x02\\u03F3' +\r\n    '\\u03F1\\x03\\x02\\x02\\x02\\u03F3\\u03F4\\x03\\x02\\x02\\x02\\u03F4\\x83\\x03\\x02\\x02' +\r\n    '\\x02\\u03F5\\u03F3\\x03\\x02\\x02\\x02\\u03F6\\u03F9\\x05\\x86D\\x02\\u03F7\\u03F8' +\r\n    '\\x07D\\x02\\x02\\u03F8\\u03FA\\x05\\x88E\\x02\\u03F9\\u03F7\\x03\\x02\\x02\\x02\\u03F9' +\r\n    '\\u03FA\\x03\\x02\\x02\\x02\\u03FA\\x85\\x03\\x02\\x02\\x02\\u03FB\\u03FD\\x07h\\x02' +\r\n    '\\x02\\u03FC\\u03FE\\x050\\x19\\x02\\u03FD\\u03FC\\x03\\x02\\x02\\x02\\u03FD\\u03FE' +\r\n    '\\x03\\x02\\x02\\x02\\u03FE\\x87\\x03\\x02\\x02\\x02\\u03FF\\u0402\\x05\\u01CA\\xE6\\x02' +\r\n    '\\u0400\\u0402\\x05\\u011E\\x90\\x02\\u0401\\u03FF\\x03\\x02\\x02\\x02\\u0401\\u0400' +\r\n    '\\x03\\x02\\x02\\x02\\u0402\\x89\\x03\\x02\\x02\\x02\\u0403\\u0406\\x05\\x8CG\\x02\\u0404' +\r\n    '\\u0406\\x05\\x8EH\\x02\\u0405\\u0403\\x03\\x02\\x02\\x02\\u0405\\u0404\\x03\\x02\\x02' +\r\n    '\\x02\\u0406\\x8B\\x03\\x02\\x02\\x02\\u0407\\u040A\\x05\\x16\\f\\x02\\u0408\\u040A\\x07' +\r\n    '\\x05\\x02\\x02\\u0409\\u0407\\x03\\x02\\x02\\x02\\u0409\\u0408\\x03\\x02\\x02\\x02\\u040A' +\r\n    '\\x8D\\x03\\x02\\x02\\x02\\u040B\\u040F\\x05\\x90I\\x02\\u040C\\u040F\\x05\\x9EP\\x02' +\r\n    '\\u040D\\u040F\\x05\\xA0Q\\x02\\u040E\\u040B\\x03\\x02\\x02\\x02\\u040E\\u040C\\x03' +\r\n    '\\x02\\x02\\x02\\u040E\\u040D\\x03\\x02\\x02\\x02\\u040F\\x8F\\x03\\x02\\x02\\x02\\u0410' +\r\n    '\\u0413\\x05\\x96L\\x02\\u0411\\u0413\\x05\\x9CO\\x02\\u0412\\u0410\\x03\\x02\\x02\\x02' +\r\n    '\\u0412\\u0411\\x03\\x02\\x02\\x02\\u0413\\u0418\\x03\\x02\\x02\\x02\\u0414\\u0417\\x05' +\r\n    '\\x94K\\x02\\u0415\\u0417\\x05\\x9AN\\x02\\u0416\\u0414\\x03\\x02\\x02\\x02\\u0416\\u0415' +\r\n    '\\x03\\x02\\x02\\x02\\u0417\\u041A\\x03\\x02\\x02\\x02\\u0418\\u0416\\x03\\x02\\x02\\x02' +\r\n    '\\u0418\\u0419\\x03\\x02\\x02\\x02\\u0419\\x91\\x03\\x02\\x02\\x02\\u041A\\u0418\\x03' +\r\n    '\\x02\\x02\\x02\\u041B\\u041D\\x07h\\x02\\x02\\u041C\\u041E\\x05:\\x1E\\x02\\u041D\\u041C' +\r\n    '\\x03\\x02\\x02\\x02\\u041D\\u041E\\x03\\x02\\x02\\x02\\u041E\\u042C\\x03\\x02\\x02\\x02' +\r\n    '\\u041F\\u0420\\x05\\x90I\\x02\\u0420\\u0424\\x07C\\x02\\x02\\u0421\\u0423\\x05\\u010C' +\r\n    '\\x87\\x02\\u0422\\u0421\\x03\\x02\\x02\\x02\\u0423\\u0426\\x03\\x02\\x02\\x02\\u0424' +\r\n    '\\u0422\\x03\\x02\\x02\\x02\\u0424\\u0425\\x03\\x02\\x02\\x02\\u0425\\u0427\\x03\\x02' +\r\n    '\\x02\\x02\\u0426\\u0424\\x03\\x02\\x02\\x02\\u0427\\u0429\\x07h\\x02\\x02\\u0428\\u042A' +\r\n    '\\x05:\\x1E\\x02\\u0429\\u0428\\x03\\x02\\x02\\x02\\u0429\\u042A\\x03\\x02\\x02\\x02' +\r\n    '\\u042A\\u042C\\x03\\x02\\x02\\x02\\u042B\\u041B\\x03\\x02\\x02\\x02\\u042B\\u041F\\x03' +\r\n    '\\x02\\x02\\x02\\u042C\\x93\\x03\\x02\\x02\\x02\\u042D\\u0431\\x07C\\x02\\x02\\u042E' +\r\n    '\\u0430\\x05\\u010C\\x87\\x02\\u042F\\u042E\\x03\\x02\\x02\\x02\\u0430\\u0433\\x03\\x02' +\r\n    '\\x02\\x02\\u0431\\u042F\\x03\\x02\\x02\\x02\\u0431\\u0432\\x03\\x02\\x02\\x02\\u0432' +\r\n    '\\u0434\\x03\\x02\\x02\\x02\\u0433\\u0431\\x03\\x02\\x02\\x02\\u0434\\u0436\\x07h\\x02' +\r\n    '\\x02\\u0435\\u0437\\x05:\\x1E\\x02\\u0436\\u0435\\x03\\x02\\x02\\x02\\u0436\\u0437' +\r\n    '\\x03\\x02\\x02\\x02\\u0437\\x95\\x03\\x02\\x02\\x02\\u0438\\u043A\\x07h\\x02\\x02\\u0439' +\r\n    '\\u043B\\x05:\\x1E\\x02\\u043A\\u0439\\x03\\x02\\x02\\x02\\u043A\\u043B\\x03\\x02\\x02' +\r\n    '\\x02\\u043B\\x97\\x03\\x02\\x02\\x02\\u043C\\u043D\\x05\\x92J\\x02\\u043D\\x99\\x03' +\r\n    '\\x02\\x02\\x02\\u043E\\u043F\\x05\\x94K\\x02\\u043F\\x9B\\x03\\x02\\x02\\x02\\u0440' +\r\n    '\\u0441\\x05\\x96L\\x02\\u0441\\x9D\\x03\\x02\\x02\\x02\\u0442\\u0443\\x07h\\x02\\x02' +\r\n    '\\u0443\\x9F\\x03\\x02\\x02\\x02\\u0444\\u0445\\x05\\x8CG\\x02\\u0445\\u0446\\x050\\x19' +\r\n    '\\x02\\u0446\\u044E\\x03\\x02\\x02\\x02\\u0447\\u0448\\x05\\x90I\\x02\\u0448\\u0449' +\r\n    '\\x050\\x19\\x02\\u0449\\u044E\\x03\\x02\\x02\\x02\\u044A\\u044B\\x05\\x9EP\\x02\\u044B' +\r\n    '\\u044C\\x050\\x19\\x02\\u044C\\u044E\\x03\\x02\\x02\\x02\\u044D\\u0444\\x03\\x02\\x02' +\r\n    '\\x02\\u044D\\u0447\\x03\\x02\\x02\\x02\\u044D\\u044A\\x03\\x02\\x02\\x02\\u044E\\xA1' +\r\n    '\\x03\\x02\\x02\\x02\\u044F\\u0451\\x05\\xA4S\\x02\\u0450\\u044F\\x03\\x02\\x02\\x02' +\r\n    '\\u0451\\u0454\\x03\\x02\\x02\\x02\\u0452\\u0450\\x03\\x02\\x02\\x02\\u0452\\u0453\\x03' +\r\n    '\\x02\\x02\\x02\\u0453\\u0455\\x03\\x02\\x02\\x02\\u0454\\u0452\\x03\\x02\\x02\\x02\\u0455' +\r\n    '\\u0456\\x05\\xA6T\\x02\\u0456\\u0457\\x05\\xC6d\\x02\\u0457\\xA3\\x03\\x02\\x02\\x02' +\r\n    '\\u0458\\u0463\\x05\\u010C\\x87\\x02\\u0459\\u0463\\x07%\\x02\\x02\\u045A\\u0463\\x07' +\r\n    '$\\x02\\x02\\u045B\\u0463\\x07#\\x02\\x02\\u045C\\u0463\\x07\\x03\\x02\\x02\\u045D\\u0463' +\r\n    '\\x07(\\x02\\x02\\u045E\\u0463\\x07\\x14\\x02\\x02\\u045F\\u0463\\x07,\\x02\\x02\\u0460' +\r\n    '\\u0463\\x07 \\x02\\x02\\u0461\\u0463\\x07)\\x02\\x02\\u0462\\u0458\\x03\\x02\\x02\\x02' +\r\n    '\\u0462\\u0459\\x03\\x02\\x02\\x02\\u0462\\u045A\\x03\\x02\\x02\\x02\\u0462\\u045B\\x03' +\r\n    '\\x02\\x02\\x02\\u0462\\u045C\\x03\\x02\\x02\\x02\\u0462\\u045D\\x03\\x02\\x02\\x02\\u0462' +\r\n    '\\u045E\\x03\\x02\\x02\\x02\\u0462\\u045F\\x03\\x02\\x02\\x02\\u0462\\u0460\\x03\\x02' +\r\n    '\\x02\\x02\\u0462\\u0461\\x03\\x02\\x02\\x02\\u0463\\xA5\\x03\\x02\\x02\\x02\\u0464\\u0465' +\r\n    '\\x05\\xA8U\\x02\\u0465\\u0467\\x05\\xAAV\\x02\\u0466\\u0468\\x05\\xC0a\\x02\\u0467' +\r\n    '\\u0466\\x03\\x02\\x02\\x02\\u0467\\u0468\\x03\\x02\\x02\\x02\\u0468\\u0476\\x03\\x02' +\r\n    '\\x02\\x02\\u0469\\u046D\\x05l7\\x02\\u046A\\u046C\\x05\\u010C\\x87\\x02\\u046B\\u046A' +\r\n    '\\x03\\x02\\x02\\x02\\u046C\\u046F\\x03\\x02\\x02\\x02\\u046D\\u046B\\x03\\x02\\x02\\x02' +\r\n    '\\u046D\\u046E\\x03\\x02\\x02\\x02\\u046E\\u0470\\x03\\x02\\x02\\x02\\u046F\\u046D\\x03' +\r\n    '\\x02\\x02\\x02\\u0470\\u0471\\x05\\xA8U\\x02\\u0471\\u0473\\x05\\xAAV\\x02\\u0472\\u0474' +\r\n    '\\x05\\xC0a\\x02\\u0473\\u0472\\x03\\x02\\x02\\x02\\u0473\\u0474\\x03\\x02\\x02\\x02' +\r\n    '\\u0474\\u0476\\x03\\x02\\x02\\x02\\u0475\\u0464\\x03\\x02\\x02\\x02\\u0475\\u0469\\x03' +\r\n    '\\x02\\x02\\x02\\u0476\\xA7\\x03\\x02\\x02\\x02\\u0477\\u047A\\x05\\x8AF\\x02\\u0478' +\r\n    '\\u047A\\x072\\x02\\x02\\u0479\\u0477\\x03\\x02\\x02\\x02\\u0479\\u0478\\x03\\x02\\x02' +\r\n    '\\x02\\u047A\\xA9\\x03\\x02\\x02\\x02\\u047B\\u047C\\x05\\xACW\\x02\\u047C\\u047E\\x07' +\r\n    ';\\x02\\x02\\u047D\\u047F\\x05\\xAEX\\x02\\u047E\\u047D\\x03\\x02\\x02\\x02\\u047E\\u047F' +\r\n    '\\x03\\x02\\x02\\x02\\u047F\\u0480\\x03\\x02\\x02\\x02\\u0480\\u0482\\x07<\\x02\\x02' +\r\n    '\\u0481\\u0483\\x050\\x19\\x02\\u0482\\u0481\\x03\\x02\\x02\\x02\\u0482\\u0483\\x03' +\r\n    '\\x02\\x02\\x02\\u0483\\xAB\\x03\\x02\\x02\\x02\\u0484\\u0485\\x07h\\x02\\x02\\u0485' +\r\n    '\\xAD\\x03\\x02\\x02\\x02\\u0486\\u0487\\x05\\xB0Y\\x02\\u0487\\u0488\\x07B\\x02\\x02' +\r\n    '\\u0488\\u0489\\x05\\xBC_\\x02\\u0489\\u048C\\x03\\x02\\x02\\x02\\u048A\\u048C\\x05' +\r\n    '\\xBC_\\x02\\u048B\\u0486\\x03\\x02\\x02\\x02\\u048B\\u048A\\x03\\x02\\x02\\x02\\u048C' +\r\n    '\\xAF\\x03\\x02\\x02\\x02\\u048D\\u0492\\x05\\xB2Z\\x02\\u048E\\u048F\\x07B\\x02\\x02' +\r\n    '\\u048F\\u0491\\x05\\xB2Z\\x02\\u0490\\u048E\\x03\\x02\\x02\\x02\\u0491\\u0494\\x03' +\r\n    '\\x02\\x02\\x02\\u0492\\u0490\\x03\\x02\\x02\\x02\\u0492\\u0493\\x03\\x02\\x02\\x02\\u0493' +\r\n    '\\u049E\\x03\\x02\\x02\\x02\\u0494\\u0492\\x03\\x02\\x02\\x02\\u0495\\u049A\\x05\\xBE' +\r\n    '`\\x02\\u0496\\u0497\\x07B\\x02\\x02\\u0497\\u0499\\x05\\xB2Z\\x02\\u0498\\u0496\\x03' +\r\n    '\\x02\\x02\\x02\\u0499\\u049C\\x03\\x02\\x02\\x02\\u049A\\u0498\\x03\\x02\\x02\\x02\\u049A' +\r\n    '\\u049B\\x03\\x02\\x02\\x02\\u049B\\u049E\\x03\\x02\\x02\\x02\\u049C\\u049A\\x03\\x02' +\r\n    '\\x02\\x02\\u049D\\u048D\\x03\\x02\\x02\\x02\\u049D\\u0495\\x03\\x02\\x02\\x02\\u049E' +\r\n    '\\xB1\\x03\\x02\\x02\\x02\\u049F\\u04A1\\x05\\xBA^\\x02\\u04A0\\u049F\\x03\\x02\\x02' +\r\n    '\\x02\\u04A1\\u04A4\\x03\\x02\\x02\\x02\\u04A2\\u04A0\\x03\\x02\\x02\\x02\\u04A2\\u04A3' +\r\n    '\\x03\\x02\\x02\\x02\\u04A3\\u04A5\\x03\\x02\\x02\\x02\\u04A4\\u04A2\\x03\\x02\\x02\\x02' +\r\n    '\\u04A5\\u04A6\\x05\\x8AF\\x02\\u04A6\\u04A7\\x05\\xB4[\\x02\\u04A7\\xB3\\x03\\x02\\x02' +\r\n    '\\x02\\u04A8\\u04A9\\x05\\xB6\\\\\\x02\\u04A9\\xB5\\x03\\x02\\x02\\x02\\u04AA\\u04AC\\x05' +\r\n    '\\xB8]\\x02\\u04AB\\u04AD\\x050\\x19\\x02\\u04AC\\u04AB\\x03\\x02\\x02\\x02\\u04AC\\u04AD' +\r\n    '\\x03\\x02\\x02\\x02\\u04AD\\xB7\\x03\\x02\\x02\\x02\\u04AE\\u04AF\\x07h\\x02\\x02\\u04AF' +\r\n    '\\xB9\\x03\\x02\\x02\\x02\\u04B0\\u04B3\\x05\\u010C\\x87\\x02\\u04B1\\u04B3\\x07\\x14' +\r\n    '\\x02\\x02\\u04B2\\u04B0\\x03\\x02\\x02\\x02\\u04B2\\u04B1\\x03\\x02\\x02\\x02\\u04B3' +\r\n    '\\xBB\\x03\\x02\\x02\\x02\\u04B4\\u04B6\\x05\\xBA^\\x02\\u04B5\\u04B4\\x03\\x02\\x02' +\r\n    '\\x02\\u04B6\\u04B9\\x03\\x02\\x02\\x02\\u04B7\\u04B5\\x03\\x02\\x02\\x02\\u04B7\\u04B8' +\r\n    '\\x03\\x02\\x02\\x02\\u04B8\\u04BA\\x03\\x02\\x02\\x02\\u04B9\\u04B7\\x03\\x02\\x02\\x02' +\r\n    '\\u04BA\\u04BE\\x05\\x8AF\\x02\\u04BB\\u04BD\\x05\\u010C\\x87\\x02\\u04BC\\u04BB\\x03' +\r\n    '\\x02\\x02\\x02\\u04BD\\u04C0\\x03\\x02\\x02\\x02\\u04BE\\u04BC\\x03\\x02\\x02\\x02\\u04BE' +\r\n    '\\u04BF\\x03\\x02\\x02\\x02\\u04BF\\u04C1\\x03\\x02\\x02\\x02\\u04C0\\u04BE\\x03\\x02' +\r\n    '\\x02\\x02\\u04C1\\u04C2\\x07j\\x02\\x02\\u04C2\\u04C3\\x05\\x86D\\x02\\u04C3\\u04C6' +\r\n    '\\x03\\x02\\x02\\x02\\u04C4\\u04C6\\x05\\xB2Z\\x02\\u04C5\\u04B7\\x03\\x02\\x02\\x02' +\r\n    '\\u04C5\\u04C4\\x03\\x02\\x02\\x02\\u04C6\\xBD\\x03\\x02\\x02\\x02\\u04C7\\u04C9\\x05' +\r\n    '\\u010C\\x87\\x02\\u04C8\\u04C7\\x03\\x02\\x02\\x02\\u04C9\\u04CC\\x03\\x02\\x02\\x02' +\r\n    '\\u04CA\\u04C8\\x03\\x02\\x02\\x02\\u04CA\\u04CB\\x03\\x02\\x02\\x02\\u04CB\\u04CD\\x03' +\r\n    '\\x02\\x02\\x02\\u04CC\\u04CA\\x03\\x02\\x02\\x02\\u04CD\\u04D0\\x05\\x8AF\\x02\\u04CE' +\r\n    '\\u04CF\\x07h\\x02\\x02\\u04CF\\u04D1\\x07C\\x02\\x02\\u04D0\\u04CE\\x03\\x02\\x02\\x02' +\r\n    '\\u04D0\\u04D1\\x03\\x02\\x02\\x02\\u04D1\\u04D2\\x03\\x02\\x02\\x02\\u04D2\\u04D3\\x07' +\r\n    '-\\x02\\x02\\u04D3\\xBF\\x03\\x02\\x02\\x02\\u04D4\\u04D5\\x07/\\x02\\x02\\u04D5\\u04D6' +\r\n    '\\x05\\xC2b\\x02\\u04D6\\xC1\\x03\\x02\\x02\\x02\\u04D7\\u04DC\\x05\\xC4c\\x02\\u04D8' +\r\n    '\\u04D9\\x07B\\x02\\x02\\u04D9\\u04DB\\x05\\xC4c\\x02\\u04DA\\u04D8\\x03\\x02\\x02\\x02' +\r\n    '\\u04DB\\u04DE\\x03\\x02\\x02\\x02\\u04DC\\u04DA\\x03\\x02\\x02\\x02\\u04DC\\u04DD\\x03' +\r\n    '\\x02\\x02\\x02\\u04DD\\xC3\\x03\\x02\\x02\\x02\\u04DE\\u04DC\\x03\\x02\\x02\\x02\\u04DF' +\r\n    '\\u04E2\\x05 \\x11\\x02\\u04E0\\u04E2\\x05,\\x17\\x02\\u04E1\\u04DF\\x03\\x02\\x02\\x02' +\r\n    '\\u04E1\\u04E0\\x03\\x02\\x02\\x02\\u04E2\\xC5\\x03\\x02\\x02\\x02\\u04E3\\u04E6\\x05' +\r\n    '\\u0122\\x92\\x02\\u04E4\\u04E6\\x07A\\x02\\x02\\u04E5\\u04E3\\x03\\x02\\x02\\x02\\u04E5' +\r\n    '\\u04E4\\x03\\x02\\x02\\x02\\u04E6\\xC7\\x03\\x02\\x02\\x02\\u04E7\\u04E8\\x05\\u0122' +\r\n    '\\x92\\x02\\u04E8\\xC9\\x03\\x02\\x02\\x02\\u04E9\\u04EA\\x07(\\x02\\x02\\u04EA\\u04EB' +\r\n    '\\x05\\u0122\\x92\\x02\\u04EB\\xCB\\x03\\x02\\x02\\x02\\u04EC\\u04EE\\x05\\xCEh\\x02' +\r\n    '\\u04ED\\u04EC\\x03\\x02\\x02\\x02\\u04EE\\u04F1\\x03\\x02\\x02\\x02\\u04EF\\u04ED\\x03' +\r\n    '\\x02\\x02\\x02\\u04EF\\u04F0\\x03\\x02\\x02\\x02\\u04F0\\u04F2\\x03\\x02\\x02\\x02\\u04F1' +\r\n    '\\u04EF\\x03\\x02\\x02\\x02\\u04F2\\u04F4\\x05\\xD0i\\x02\\u04F3\\u04F5\\x05\\xC0a\\x02' +\r\n    '\\u04F4\\u04F3\\x03\\x02\\x02\\x02\\u04F4\\u04F5\\x03\\x02\\x02\\x02\\u04F5\\u04F6\\x03' +\r\n    '\\x02\\x02\\x02\\u04F6\\u04F7\\x05\\xD4k\\x02\\u04F7\\xCD\\x03\\x02\\x02\\x02\\u04F8' +\r\n    '\\u04FD\\x05\\u010C\\x87\\x02\\u04F9\\u04FD\\x07%\\x02\\x02\\u04FA\\u04FD\\x07$\\x02' +\r\n    '\\x02\\u04FB\\u04FD\\x07#\\x02\\x02\\u04FC\\u04F8\\x03\\x02\\x02\\x02\\u04FC\\u04F9' +\r\n    '\\x03\\x02\\x02\\x02\\u04FC\\u04FA\\x03\\x02\\x02\\x02\\u04FC\\u04FB\\x03\\x02\\x02\\x02' +\r\n    '\\u04FD\\xCF\\x03\\x02\\x02\\x02\\u04FE\\u0500\\x05l7\\x02\\u04FF\\u04FE\\x03\\x02\\x02' +\r\n    '\\x02\\u04FF\\u0500\\x03\\x02\\x02\\x02\\u0500\\u0501\\x03\\x02\\x02\\x02\\u0501\\u0502' +\r\n    '\\x05\\xD2j\\x02\\u0502\\u0504\\x07;\\x02\\x02\\u0503\\u0505\\x05\\xAEX\\x02\\u0504' +\r\n    '\\u0503\\x03\\x02\\x02\\x02\\u0504\\u0505\\x03\\x02\\x02\\x02\\u0505\\u0506\\x03\\x02' +\r\n    '\\x02\\x02\\u0506\\u0507\\x07<\\x02\\x02\\u0507\\xD1\\x03\\x02\\x02\\x02\\u0508\\u0509' +\r\n    '\\x07h\\x02\\x02\\u0509\\xD3\\x03\\x02\\x02\\x02\\u050A\\u050C\\x07=\\x02\\x02\\u050B' +\r\n    '\\u050D\\x05\\xD6l\\x02\\u050C\\u050B\\x03\\x02\\x02\\x02\\u050C\\u050D\\x03\\x02\\x02' +\r\n    '\\x02\\u050D\\u050F\\x03\\x02\\x02\\x02\\u050E\\u0510\\x05\\u0124\\x93\\x02\\u050F\\u050E' +\r\n    '\\x03\\x02\\x02\\x02\\u050F\\u0510\\x03\\x02\\x02\\x02\\u0510\\u0511\\x03\\x02\\x02\\x02' +\r\n    '\\u0511\\u0512\\x07>\\x02\\x02\\u0512\\xD5\\x03\\x02\\x02\\x02\\u0513\\u0515\\x05:\\x1E' +\r\n    '\\x02\\u0514\\u0513\\x03\\x02\\x02\\x02\\u0514\\u0515\\x03\\x02\\x02\\x02\\u0515\\u0516' +\r\n    '\\x03\\x02\\x02\\x02\\u0516\\u0517\\x07-\\x02\\x02\\u0517\\u0519\\x07;\\x02\\x02\\u0518' +\r\n    '\\u051A\\x05\\u01BA\\xDE\\x02\\u0519\\u0518\\x03\\x02\\x02\\x02\\u0519\\u051A\\x03\\x02' +\r\n    '\\x02\\x02\\u051A\\u051B\\x03\\x02\\x02\\x02\\u051B\\u051C\\x07<\\x02\\x02\\u051C\\u0542' +\r\n    '\\x07A\\x02\\x02\\u051D\\u051F\\x05:\\x1E\\x02\\u051E\\u051D\\x03\\x02\\x02\\x02\\u051E' +\r\n    '\\u051F\\x03\\x02\\x02\\x02\\u051F\\u0520\\x03\\x02\\x02\\x02\\u0520\\u0521\\x07*\\x02' +\r\n    '\\x02\\u0521\\u0523\\x07;\\x02\\x02\\u0522\\u0524\\x05\\u01BA\\xDE\\x02\\u0523\\u0522' +\r\n    '\\x03\\x02\\x02\\x02\\u0523\\u0524\\x03\\x02\\x02\\x02\\u0524\\u0525\\x03\\x02\\x02\\x02' +\r\n    \"\\u0525\\u0526\\x07<\\x02\\x02\\u0526\\u0542\\x07A\\x02\\x02\\u0527\\u0528\\x05L'\" +\r\n    '\\x02\\u0528\\u052A\\x07C\\x02\\x02\\u0529\\u052B\\x05:\\x1E\\x02\\u052A\\u0529\\x03' +\r\n    '\\x02\\x02\\x02\\u052A\\u052B\\x03\\x02\\x02\\x02\\u052B\\u052C\\x03\\x02\\x02\\x02\\u052C' +\r\n    '\\u052D\\x07*\\x02\\x02\\u052D\\u052F\\x07;\\x02\\x02\\u052E\\u0530\\x05\\u01BA\\xDE' +\r\n    '\\x02\\u052F\\u052E\\x03\\x02\\x02\\x02\\u052F\\u0530\\x03\\x02\\x02\\x02\\u0530\\u0531' +\r\n    '\\x03\\x02\\x02\\x02\\u0531\\u0532\\x07<\\x02\\x02\\u0532\\u0533\\x07A\\x02\\x02\\u0533' +\r\n    '\\u0542\\x03\\x02\\x02\\x02\\u0534\\u0535\\x05\\u0186\\xC4\\x02\\u0535\\u0537\\x07C' +\r\n    '\\x02\\x02\\u0536\\u0538\\x05:\\x1E\\x02\\u0537\\u0536\\x03\\x02\\x02\\x02\\u0537\\u0538' +\r\n    '\\x03\\x02\\x02\\x02\\u0538\\u0539\\x03\\x02\\x02\\x02\\u0539\\u053A\\x07*\\x02\\x02' +\r\n    '\\u053A\\u053C\\x07;\\x02\\x02\\u053B\\u053D\\x05\\u01BA\\xDE\\x02\\u053C\\u053B\\x03' +\r\n    '\\x02\\x02\\x02\\u053C\\u053D\\x03\\x02\\x02\\x02\\u053D\\u053E\\x03\\x02\\x02\\x02\\u053E' +\r\n    '\\u053F\\x07<\\x02\\x02\\u053F\\u0540\\x07A\\x02\\x02\\u0540\\u0542\\x03\\x02\\x02\\x02' +\r\n    '\\u0541\\u0514\\x03\\x02\\x02\\x02\\u0541\\u051E\\x03\\x02\\x02\\x02\\u0541\\u0527\\x03' +\r\n    '\\x02\\x02\\x02\\u0541\\u0534\\x03\\x02\\x02\\x02\\u0542\\xD7\\x03\\x02\\x02\\x02\\u0543' +\r\n    '\\u0545\\x05j6\\x02\\u0544\\u0543\\x03\\x02\\x02\\x02\\u0545\\u0548\\x03\\x02\\x02\\x02' +\r\n    '\\u0546\\u0544\\x03\\x02\\x02\\x02\\u0546\\u0547\\x03\\x02\\x02\\x02\\u0547\\u0549\\x03' +\r\n    '\\x02\\x02\\x02\\u0548\\u0546\\x03\\x02\\x02\\x02\\u0549\\u054A\\x07\\x12\\x02\\x02\\u054A' +\r\n    '\\u054C\\x07h\\x02\\x02\\u054B\\u054D\\x05r:\\x02\\u054C\\u054B\\x03\\x02\\x02\\x02' +\r\n    '\\u054C\\u054D\\x03\\x02\\x02\\x02\\u054D\\u054E\\x03\\x02\\x02\\x02\\u054E\\u054F\\x05' +\r\n    '\\xDAn\\x02\\u054F\\xD9\\x03\\x02\\x02\\x02\\u0550\\u0552\\x07=\\x02\\x02\\u0551\\u0553' +\r\n    '\\x05\\xDCo\\x02\\u0552\\u0551\\x03\\x02\\x02\\x02\\u0552\\u0553\\x03\\x02\\x02\\x02' +\r\n    '\\u0553\\u0555\\x03\\x02\\x02\\x02\\u0554\\u0556\\x07B\\x02\\x02\\u0555\\u0554\\x03' +\r\n    '\\x02\\x02\\x02\\u0555\\u0556\\x03\\x02\\x02\\x02\\u0556\\u0558\\x03\\x02\\x02\\x02\\u0557' +\r\n    '\\u0559\\x05\\xE2r\\x02\\u0558\\u0557\\x03\\x02\\x02\\x02\\u0558\\u0559\\x03\\x02\\x02' +\r\n    '\\x02\\u0559\\u055A\\x03\\x02\\x02\\x02\\u055A\\u055B\\x07>\\x02\\x02\\u055B\\xDB\\x03' +\r\n    '\\x02\\x02\\x02\\u055C\\u0561\\x05\\xDEp\\x02\\u055D\\u055E\\x07B\\x02\\x02\\u055E\\u0560' +\r\n    '\\x05\\xDEp\\x02\\u055F\\u055D\\x03\\x02\\x02\\x02\\u0560\\u0563\\x03\\x02\\x02\\x02' +\r\n    '\\u0561\\u055F\\x03\\x02\\x02\\x02\\u0561\\u0562\\x03\\x02\\x02\\x02\\u0562\\xDD\\x03' +\r\n    '\\x02\\x02\\x02\\u0563\\u0561\\x03\\x02\\x02\\x02\\u0564\\u0566\\x05\\xE0q\\x02\\u0565' +\r\n    '\\u0564\\x03\\x02\\x02\\x02\\u0566\\u0569\\x03\\x02\\x02\\x02\\u0567\\u0565\\x03\\x02' +\r\n    '\\x02\\x02\\u0567\\u0568\\x03\\x02\\x02\\x02\\u0568\\u056A\\x03\\x02\\x02\\x02\\u0569' +\r\n    '\\u0567\\x03\\x02\\x02\\x02\\u056A\\u0570\\x07h\\x02\\x02\\u056B\\u056D\\x07;\\x02\\x02' +\r\n    '\\u056C\\u056E\\x05\\u01BA\\xDE\\x02\\u056D\\u056C\\x03\\x02\\x02\\x02\\u056D\\u056E' +\r\n    '\\x03\\x02\\x02\\x02\\u056E\\u056F\\x03\\x02\\x02\\x02\\u056F\\u0571\\x07<\\x02\\x02' +\r\n    '\\u0570\\u056B\\x03\\x02\\x02\\x02\\u0570\\u0571\\x03\\x02\\x02\\x02\\u0571\\u0573\\x03' +\r\n    '\\x02\\x02\\x02\\u0572\\u0574\\x05v<\\x02\\u0573\\u0572\\x03\\x02\\x02\\x02\\u0573\\u0574' +\r\n    '\\x03\\x02\\x02\\x02\\u0574\\xDF\\x03\\x02\\x02\\x02\\u0575\\u0576\\x05\\u010C\\x87\\x02' +\r\n    '\\u0576\\xE1\\x03\\x02\\x02\\x02\\u0577\\u057B\\x07A\\x02\\x02\\u0578\\u057A\\x05x=' +\r\n    '\\x02\\u0579\\u0578\\x03\\x02\\x02\\x02\\u057A\\u057D\\x03\\x02\\x02\\x02\\u057B\\u0579' +\r\n    '\\x03\\x02\\x02\\x02\\u057B\\u057C\\x03\\x02\\x02\\x02\\u057C\\xE3\\x03\\x02\\x02\\x02' +\r\n    '\\u057D\\u057B\\x03\\x02\\x02\\x02\\u057E\\u0581\\x05\\xE6t\\x02\\u057F\\u0581\\x05' +\r\n    '\\u0100\\x81\\x02\\u0580\\u057E\\x03\\x02\\x02\\x02\\u0580\\u057F\\x03\\x02\\x02\\x02' +\r\n    '\\u0581\\xE5\\x03\\x02\\x02\\x02\\u0582\\u0583\\x05\\xE8u\\x02\\u0583\\u0584\\x07\\x1E' +\r\n    '\\x02\\x02\\u0584\\u0586\\x05\\xEAv\\x02\\u0585\\u0587\\x05l7\\x02\\u0586\\u0585\\x03' +\r\n    '\\x02\\x02\\x02\\u0586\\u0587\\x03';\r\nJava8Parser._serializedATNSegment3 = '\\x02\\x02\\x02\\u0587\\u0589\\x03\\x02\\x02\\x02\\u0588\\u058A\\x05\\xEEx\\x02\\u0589' +\r\n    '\\u0588\\x03\\x02\\x02\\x02\\u0589\\u058A\\x03\\x02\\x02\\x02\\u058A\\u058B\\x03\\x02' +\r\n    '\\x02\\x02\\u058B\\u058C\\x05\\xF0y\\x02\\u058C\\xE7\\x03\\x02\\x02\\x02\\u058D\\u058F' +\r\n    '\\x05\\xECw\\x02\\u058E\\u058D\\x03\\x02\\x02\\x02\\u058F\\u0592\\x03\\x02\\x02\\x02' +\r\n    '\\u0590\\u058E\\x03\\x02\\x02\\x02\\u0590\\u0591\\x03\\x02\\x02\\x02\\u0591\\xE9\\x03' +\r\n    '\\x02\\x02\\x02\\u0592\\u0590\\x03\\x02\\x02\\x02\\u0593\\u0594\\x07h\\x02\\x02\\u0594' +\r\n    '\\xEB\\x03\\x02\\x02\\x02\\u0595\\u059D\\x05\\u010C\\x87\\x02\\u0596\\u059D\\x07%\\x02' +\r\n    '\\x02\\u0597\\u059D\\x07$\\x02\\x02\\u0598\\u059D\\x07#\\x02\\x02\\u0599\\u059D\\x07' +\r\n    '\\x03\\x02\\x02\\u059A\\u059D\\x07(\\x02\\x02\\u059B\\u059D\\x07)\\x02\\x02\\u059C\\u0595' +\r\n    '\\x03\\x02\\x02\\x02\\u059C\\u0596\\x03\\x02\\x02\\x02\\u059C\\u0597\\x03\\x02\\x02\\x02' +\r\n    '\\u059C\\u0598\\x03\\x02\\x02\\x02\\u059C\\u0599\\x03\\x02\\x02\\x02\\u059C\\u059A\\x03' +\r\n    '\\x02\\x02\\x02\\u059C\\u059B\\x03\\x02\\x02\\x02\\u059D\\xED\\x03\\x02\\x02\\x02\\u059E' +\r\n    '\\u059F\\x07\\x13\\x02\\x02\\u059F\\u05A0\\x05t;\\x02\\u05A0\\xEF\\x03\\x02\\x02\\x02' +\r\n    '\\u05A1\\u05A5\\x07=\\x02\\x02\\u05A2\\u05A4\\x05\\xF2z\\x02\\u05A3\\u05A2\\x03\\x02' +\r\n    '\\x02\\x02\\u05A4\\u05A7\\x03\\x02\\x02\\x02\\u05A5\\u05A3\\x03\\x02\\x02\\x02\\u05A5' +\r\n    '\\u05A6\\x03\\x02\\x02\\x02\\u05A6\\u05A8\\x03\\x02\\x02\\x02\\u05A7\\u05A5\\x03\\x02' +\r\n    '\\x02\\x02\\u05A8\\u05A9\\x07>\\x02\\x02\\u05A9\\xF1\\x03\\x02\\x02\\x02\\u05AA\\u05B0' +\r\n    '\\x05\\xF4{\\x02\\u05AB\\u05B0\\x05\\xFA~\\x02\\u05AC\\u05B0\\x05b2\\x02\\u05AD\\u05B0' +\r\n    '\\x05\\xE4s\\x02\\u05AE\\u05B0\\x07A\\x02\\x02\\u05AF\\u05AA\\x03\\x02\\x02\\x02\\u05AF' +\r\n    '\\u05AB\\x03\\x02\\x02\\x02\\u05AF\\u05AC\\x03\\x02\\x02\\x02\\u05AF\\u05AD\\x03\\x02' +\r\n    '\\x02\\x02\\u05AF\\u05AE\\x03\\x02\\x02\\x02\\u05B0\\xF3\\x03\\x02\\x02\\x02\\u05B1\\u05B2' +\r\n    '\\x05\\xF6|\\x02\\u05B2\\u05B3\\x05\\x8AF\\x02\\u05B3\\u05B4\\x05\\x82B\\x02\\u05B4' +\r\n    '\\u05B5\\x07A\\x02\\x02\\u05B5\\xF5\\x03\\x02\\x02\\x02\\u05B6\\u05B8\\x05\\xF8}\\x02' +\r\n    '\\u05B7\\u05B6\\x03\\x02\\x02\\x02\\u05B8\\u05BB\\x03\\x02\\x02\\x02\\u05B9\\u05B7\\x03' +\r\n    '\\x02\\x02\\x02\\u05B9\\u05BA\\x03\\x02\\x02\\x02\\u05BA\\xF7\\x03\\x02\\x02\\x02\\u05BB' +\r\n    '\\u05B9\\x03\\x02\\x02\\x02\\u05BC\\u05C1\\x05\\u010C\\x87\\x02\\u05BD\\u05C1\\x07%' +\r\n    '\\x02\\x02\\u05BE\\u05C1\\x07(\\x02\\x02\\u05BF\\u05C1\\x07\\x14\\x02\\x02\\u05C0\\u05BC' +\r\n    '\\x03\\x02\\x02\\x02\\u05C0\\u05BD\\x03\\x02\\x02\\x02\\u05C0\\u05BE\\x03\\x02\\x02\\x02' +\r\n    '\\u05C0\\u05BF\\x03\\x02\\x02\\x02\\u05C1\\xF9\\x03\\x02\\x02\\x02\\u05C2\\u05C3\\x05' +\r\n    '\\xFC\\x7F\\x02\\u05C3\\u05C4\\x05\\xA6T\\x02\\u05C4\\u05C5\\x05\\xC6d\\x02\\u05C5\\xFB' +\r\n    '\\x03\\x02\\x02\\x02\\u05C6\\u05C8\\x05\\xFE\\x80\\x02\\u05C7\\u05C6\\x03\\x02\\x02\\x02' +\r\n    '\\u05C8\\u05CB\\x03\\x02\\x02\\x02\\u05C9\\u05C7\\x03\\x02\\x02\\x02\\u05C9\\u05CA\\x03' +\r\n    '\\x02\\x02\\x02\\u05CA\\xFD\\x03\\x02\\x02\\x02\\u05CB\\u05C9\\x03\\x02\\x02\\x02\\u05CC' +\r\n    '\\u05D3\\x05\\u010C\\x87\\x02\\u05CD\\u05D3\\x07%\\x02\\x02\\u05CE\\u05D3\\x07\\x03' +\r\n    '\\x02\\x02\\u05CF\\u05D3\\x07\\x0E\\x02\\x02\\u05D0\\u05D3\\x07(\\x02\\x02\\u05D1\\u05D3' +\r\n    '\\x07)\\x02\\x02\\u05D2\\u05CC\\x03\\x02\\x02\\x02\\u05D2\\u05CD\\x03\\x02\\x02\\x02' +\r\n    '\\u05D2\\u05CE\\x03\\x02\\x02\\x02\\u05D2\\u05CF\\x03\\x02\\x02\\x02\\u05D2\\u05D0\\x03' +\r\n    '\\x02\\x02\\x02\\u05D2\\u05D1\\x03\\x02\\x02\\x02\\u05D3\\xFF\\x03\\x02\\x02\\x02\\u05D4' +\r\n    '\\u05D6\\x05\\xECw\\x02\\u05D5\\u05D4\\x03\\x02\\x02\\x02\\u05D6\\u05D9\\x03\\x02\\x02' +\r\n    '\\x02\\u05D7\\u05D5\\x03\\x02\\x02\\x02\\u05D7\\u05D8\\x03\\x02\\x02\\x02\\u05D8\\u05DA' +\r\n    '\\x03\\x02\\x02\\x02\\u05D9\\u05D7\\x03\\x02\\x02\\x02\\u05DA\\u05DB\\x07i\\x02\\x02' +\r\n    '\\u05DB\\u05DC\\x07\\x1E\\x02\\x02\\u05DC\\u05DD\\x07h\\x02\\x02\\u05DD\\u05DE\\x05' +\r\n    '\\u0102\\x82\\x02\\u05DE\\u0101\\x03\\x02\\x02\\x02\\u05DF\\u05E3\\x07=\\x02\\x02\\u05E0' +\r\n    '\\u05E2\\x05\\u0104\\x83\\x02\\u05E1\\u05E0\\x03\\x02\\x02\\x02\\u05E2\\u05E5\\x03\\x02' +\r\n    '\\x02\\x02\\u05E3\\u05E1\\x03\\x02\\x02\\x02\\u05E3\\u05E4\\x03\\x02\\x02\\x02\\u05E4' +\r\n    '\\u05E6\\x03\\x02\\x02\\x02\\u05E5\\u05E3\\x03\\x02\\x02\\x02\\u05E6\\u05E7\\x07>\\x02' +\r\n    '\\x02\\u05E7\\u0103\\x03\\x02\\x02\\x02\\u05E8\\u05EE\\x05\\u0106\\x84\\x02\\u05E9\\u05EE' +\r\n    '\\x05\\xF4{\\x02\\u05EA\\u05EE\\x05b2\\x02\\u05EB\\u05EE\\x05\\xE4s\\x02\\u05EC\\u05EE' +\r\n    '\\x07A\\x02\\x02\\u05ED\\u05E8\\x03\\x02\\x02\\x02\\u05ED\\u05E9\\x03\\x02\\x02\\x02' +\r\n    '\\u05ED\\u05EA\\x03\\x02\\x02\\x02\\u05ED\\u05EB\\x03\\x02\\x02\\x02\\u05ED\\u05EC\\x03' +\r\n    '\\x02\\x02\\x02\\u05EE\\u0105\\x03\\x02\\x02\\x02\\u05EF\\u05F1\\x05\\u0108\\x85\\x02' +\r\n    '\\u05F0\\u05EF\\x03\\x02\\x02\\x02\\u05F1\\u05F4\\x03\\x02\\x02\\x02\\u05F2\\u05F0\\x03' +\r\n    '\\x02\\x02\\x02\\u05F2\\u05F3\\x03\\x02\\x02\\x02\\u05F3\\u05F5\\x03\\x02\\x02\\x02\\u05F4' +\r\n    '\\u05F2\\x03\\x02\\x02\\x02\\u05F5\\u05F6\\x05\\x8AF\\x02\\u05F6\\u05F7\\x07h\\x02\\x02' +\r\n    '\\u05F7\\u05F8\\x07;\\x02\\x02\\u05F8\\u05FA\\x07<\\x02\\x02\\u05F9\\u05FB\\x050\\x19' +\r\n    '\\x02\\u05FA\\u05F9\\x03\\x02\\x02\\x02\\u05FA\\u05FB\\x03\\x02\\x02\\x02\\u05FB\\u05FD' +\r\n    '\\x03\\x02\\x02\\x02\\u05FC\\u05FE\\x05\\u010A\\x86\\x02\\u05FD\\u05FC\\x03\\x02\\x02' +\r\n    '\\x02\\u05FD\\u05FE\\x03\\x02\\x02\\x02\\u05FE\\u05FF\\x03\\x02\\x02\\x02\\u05FF\\u0600' +\r\n    '\\x07A\\x02\\x02\\u0600\\u0107\\x03\\x02\\x02\\x02\\u0601\\u0605\\x05\\u010C\\x87\\x02' +\r\n    '\\u0602\\u0605\\x07%\\x02\\x02\\u0603\\u0605\\x07\\x03\\x02\\x02\\u0604\\u0601\\x03' +\r\n    '\\x02\\x02\\x02\\u0604\\u0602\\x03\\x02\\x02\\x02\\u0604\\u0603\\x03\\x02\\x02\\x02\\u0605' +\r\n    '\\u0109\\x03\\x02\\x02\\x02\\u0606\\u0607\\x07\\x0E\\x02\\x02\\u0607\\u0608\\x05\\u0114' +\r\n    '\\x8B\\x02\\u0608\\u010B\\x03\\x02\\x02\\x02\\u0609\\u060D\\x05\\u010E\\x88\\x02\\u060A' +\r\n    '\\u060D\\x05\\u011A\\x8E\\x02\\u060B\\u060D\\x05\\u011C\\x8F\\x02\\u060C\\u0609\\x03' +\r\n    '\\x02\\x02\\x02\\u060C\\u060A\\x03\\x02\\x02\\x02\\u060C\\u060B\\x03\\x02\\x02\\x02\\u060D' +\r\n    '\\u010D\\x03\\x02\\x02\\x02\\u060E\\u060F\\x07i\\x02\\x02\\u060F\\u0610\\x05F$\\x02' +\r\n    '\\u0610\\u0612\\x07;\\x02\\x02\\u0611\\u0613\\x05\\u0110\\x89\\x02\\u0612\\u0611\\x03' +\r\n    '\\x02\\x02\\x02\\u0612\\u0613\\x03\\x02\\x02\\x02\\u0613\\u0614\\x03\\x02\\x02\\x02\\u0614' +\r\n    '\\u0615\\x07<\\x02\\x02\\u0615\\u010F\\x03\\x02\\x02\\x02\\u0616\\u061B\\x05\\u0112' +\r\n    '\\x8A\\x02\\u0617\\u0618\\x07B\\x02\\x02\\u0618\\u061A\\x05\\u0112\\x8A\\x02\\u0619' +\r\n    '\\u0617\\x03\\x02\\x02\\x02\\u061A\\u061D\\x03\\x02\\x02\\x02\\u061B\\u0619\\x03\\x02' +\r\n    '\\x02\\x02\\u061B\\u061C\\x03\\x02\\x02\\x02\\u061C\\u0111\\x03\\x02\\x02\\x02\\u061D' +\r\n    '\\u061B\\x03\\x02\\x02\\x02\\u061E\\u061F\\x07h\\x02\\x02\\u061F\\u0620\\x07D\\x02\\x02' +\r\n    '\\u0620\\u0621\\x05\\u0114\\x8B\\x02\\u0621\\u0113\\x03\\x02\\x02\\x02\\u0622\\u0626' +\r\n    '\\x05\\u01DC\\xEF\\x02\\u0623\\u0626\\x05\\u0116\\x8C\\x02\\u0624\\u0626\\x05\\u010C' +\r\n    '\\x87\\x02\\u0625\\u0622\\x03\\x02\\x02\\x02\\u0625\\u0623\\x03\\x02\\x02\\x02\\u0625' +\r\n    '\\u0624\\x03\\x02\\x02\\x02\\u0626\\u0115\\x03\\x02\\x02\\x02\\u0627\\u0629\\x07=\\x02' +\r\n    '\\x02\\u0628\\u062A\\x05\\u0118\\x8D\\x02\\u0629\\u0628\\x03\\x02\\x02\\x02\\u0629\\u062A' +\r\n    '\\x03\\x02\\x02\\x02\\u062A\\u062C\\x03\\x02\\x02\\x02\\u062B\\u062D\\x07B\\x02\\x02' +\r\n    '\\u062C\\u062B\\x03\\x02\\x02\\x02\\u062C\\u062D\\x03\\x02\\x02\\x02\\u062D\\u062E\\x03' +\r\n    '\\x02\\x02\\x02\\u062E\\u062F\\x07>\\x02\\x02\\u062F\\u0117\\x03\\x02\\x02\\x02\\u0630' +\r\n    '\\u0635\\x05\\u0114\\x8B\\x02\\u0631\\u0632\\x07B\\x02\\x02\\u0632\\u0634\\x05\\u0114' +\r\n    '\\x8B\\x02\\u0633\\u0631\\x03\\x02\\x02\\x02\\u0634\\u0637\\x03\\x02\\x02\\x02\\u0635' +\r\n    '\\u0633\\x03\\x02\\x02\\x02\\u0635\\u0636\\x03\\x02\\x02\\x02\\u0636\\u0119\\x03\\x02' +\r\n    '\\x02\\x02\\u0637\\u0635\\x03\\x02\\x02\\x02\\u0638\\u0639\\x07i\\x02\\x02\\u0639\\u063A' +\r\n    '\\x05F$\\x02\\u063A\\u011B\\x03\\x02\\x02\\x02\\u063B\\u063C\\x07i\\x02\\x02\\u063C' +\r\n    '\\u063D\\x05F$\\x02\\u063D\\u063E\\x07;\\x02\\x02\\u063E\\u063F\\x05\\u0114\\x8B\\x02' +\r\n    '\\u063F\\u0640\\x07<\\x02\\x02\\u0640\\u011D\\x03\\x02\\x02\\x02\\u0641\\u0643\\x07' +\r\n    '=\\x02\\x02\\u0642\\u0644\\x05\\u0120\\x91\\x02\\u0643\\u0642\\x03\\x02\\x02\\x02\\u0643' +\r\n    '\\u0644\\x03\\x02\\x02\\x02\\u0644\\u0646\\x03\\x02\\x02\\x02\\u0645\\u0647\\x07B\\x02' +\r\n    '\\x02\\u0646\\u0645\\x03\\x02\\x02\\x02\\u0646\\u0647\\x03\\x02\\x02\\x02\\u0647\\u0648' +\r\n    '\\x03\\x02\\x02\\x02\\u0648\\u0649\\x07>\\x02\\x02\\u0649\\u011F\\x03\\x02\\x02\\x02' +\r\n    '\\u064A\\u064F\\x05\\x88E\\x02\\u064B\\u064C\\x07B\\x02\\x02\\u064C\\u064E\\x05\\x88' +\r\n    'E\\x02\\u064D\\u064B\\x03\\x02\\x02\\x02\\u064E\\u0651\\x03\\x02\\x02\\x02\\u064F\\u064D' +\r\n    '\\x03\\x02\\x02\\x02\\u064F\\u0650\\x03\\x02\\x02\\x02\\u0650\\u0121\\x03\\x02\\x02\\x02' +\r\n    '\\u0651\\u064F\\x03\\x02\\x02\\x02\\u0652\\u0654\\x07=\\x02\\x02\\u0653\\u0655\\x05' +\r\n    '\\u0124\\x93\\x02\\u0654\\u0653\\x03\\x02\\x02\\x02\\u0654\\u0655\\x03\\x02\\x02\\x02' +\r\n    '\\u0655\\u0656\\x03\\x02\\x02\\x02\\u0656\\u0657\\x07>\\x02\\x02\\u0657\\u0123\\x03' +\r\n    '\\x02\\x02\\x02\\u0658\\u065C\\x05\\u0126\\x94\\x02\\u0659\\u065B\\x05\\u0126\\x94\\x02' +\r\n    '\\u065A\\u0659\\x03\\x02\\x02\\x02\\u065B\\u065E\\x03\\x02\\x02\\x02\\u065C\\u065A\\x03' +\r\n    '\\x02\\x02\\x02\\u065C\\u065D\\x03\\x02\\x02\\x02\\u065D\\u0125\\x03\\x02\\x02\\x02\\u065E' +\r\n    '\\u065C\\x03\\x02\\x02\\x02\\u065F\\u0663\\x05\\u0128\\x95\\x02\\u0660\\u0663\\x05b' +\r\n    '2\\x02\\u0661\\u0663\\x05\\u012C\\x97\\x02\\u0662\\u065F\\x03\\x02\\x02\\x02\\u0662' +\r\n    '\\u0660\\x03\\x02\\x02\\x02\\u0662\\u0661\\x03\\x02\\x02\\x02\\u0663\\u0127\\x03\\x02' +\r\n    '\\x02\\x02\\u0664\\u0665\\x05\\u012A\\x96\\x02\\u0665\\u0666\\x07A\\x02\\x02\\u0666' +\r\n    '\\u0129\\x03\\x02\\x02\\x02\\u0667\\u0669\\x05\\xBA^\\x02\\u0668\\u0667\\x03\\x02\\x02' +\r\n    '\\x02\\u0669\\u066C\\x03\\x02\\x02\\x02\\u066A\\u0668\\x03\\x02\\x02\\x02\\u066A\\u066B' +\r\n    '\\x03\\x02\\x02\\x02\\u066B\\u066D\\x03\\x02\\x02\\x02\\u066C\\u066A\\x03\\x02\\x02\\x02' +\r\n    '\\u066D\\u066E\\x05\\x8AF\\x02\\u066E\\u066F\\x05\\x82B\\x02\\u066F\\u012B\\x03\\x02' +\r\n    '\\x02\\x02\\u0670\\u0677\\x05\\u0130\\x99\\x02\\u0671\\u0677\\x05\\u0134\\x9B\\x02\\u0672' +\r\n    '\\u0677\\x05\\u013C\\x9F\\x02\\u0673\\u0677\\x05\\u013E\\xA0\\x02\\u0674\\u0677\\x05' +\r\n    '\\u0150\\xA9\\x02\\u0675\\u0677\\x05\\u0156\\xAC\\x02\\u0676\\u0670\\x03\\x02\\x02\\x02' +\r\n    '\\u0676\\u0671\\x03\\x02\\x02\\x02\\u0676\\u0672\\x03\\x02\\x02\\x02\\u0676\\u0673\\x03' +\r\n    '\\x02\\x02\\x02\\u0676\\u0674\\x03\\x02\\x02\\x02\\u0676\\u0675\\x03\\x02\\x02\\x02\\u0677' +\r\n    '\\u012D\\x03\\x02\\x02\\x02\\u0678\\u067E\\x05\\u0130\\x99\\x02\\u0679\\u067E\\x05\\u0136' +\r\n    '\\x9C\\x02\\u067A\\u067E\\x05\\u0140\\xA1\\x02\\u067B\\u067E\\x05\\u0152\\xAA\\x02\\u067C' +\r\n    '\\u067E\\x05\\u0158\\xAD\\x02\\u067D\\u0678\\x03\\x02\\x02\\x02\\u067D\\u0679\\x03\\x02' +\r\n    '\\x02\\x02\\u067D\\u067A\\x03\\x02\\x02\\x02\\u067D\\u067B\\x03\\x02\\x02\\x02\\u067D' +\r\n    '\\u067C\\x03\\x02\\x02\\x02\\u067E\\u012F\\x03\\x02\\x02\\x02\\u067F\\u068C\\x05\\u0122' +\r\n    '\\x92\\x02\\u0680\\u068C\\x05\\u0132\\x9A\\x02\\u0681\\u068C\\x05\\u0138\\x9D\\x02\\u0682' +\r\n    '\\u068C\\x05\\u0142\\xA2\\x02\\u0683\\u068C\\x05\\u0144\\xA3\\x02\\u0684\\u068C\\x05' +\r\n    '\\u0154\\xAB\\x02\\u0685\\u068C\\x05\\u0168\\xB5\\x02\\u0686\\u068C\\x05\\u016A\\xB6' +\r\n    '\\x02\\u0687\\u068C\\x05\\u016C\\xB7\\x02\\u0688\\u068C\\x05\\u0170\\xB9\\x02\\u0689' +\r\n    '\\u068C\\x05\\u016E\\xB8\\x02\\u068A\\u068C\\x05\\u0172\\xBA\\x02\\u068B\\u067F\\x03' +\r\n    '\\x02\\x02\\x02\\u068B\\u0680\\x03\\x02\\x02\\x02\\u068B\\u0681\\x03\\x02\\x02\\x02\\u068B' +\r\n    '\\u0682\\x03\\x02\\x02\\x02\\u068B\\u0683\\x03\\x02\\x02\\x02\\u068B\\u0684\\x03\\x02' +\r\n    '\\x02\\x02\\u068B\\u0685\\x03\\x02\\x02\\x02\\u068B\\u0686\\x03\\x02\\x02\\x02\\u068B' +\r\n    '\\u0687\\x03\\x02\\x02\\x02\\u068B\\u0688\\x03\\x02\\x02\\x02\\u068B\\u0689\\x03\\x02' +\r\n    '\\x02\\x02\\u068B\\u068A\\x03\\x02\\x02\\x02\\u068C\\u0131\\x03\\x02\\x02\\x02\\u068D' +\r\n    '\\u068E\\x07A\\x02\\x02\\u068E\\u0133\\x03\\x02\\x02\\x02\\u068F\\u0690\\x07h\\x02\\x02' +\r\n    '\\u0690\\u0691\\x07J\\x02\\x02\\u0691\\u0692\\x05\\u012C\\x97\\x02\\u0692\\u0135\\x03' +\r\n    '\\x02\\x02\\x02\\u0693\\u0694\\x07h\\x02\\x02\\u0694\\u0695\\x07J\\x02\\x02\\u0695\\u0696' +\r\n    '\\x05\\u012E\\x98\\x02\\u0696\\u0137\\x03\\x02\\x02\\x02\\u0697\\u0698\\x05\\u013A\\x9E' +\r\n    '\\x02\\u0698\\u0699\\x07A\\x02\\x02\\u0699\\u0139\\x03\\x02\\x02\\x02\\u069A\\u06A2' +\r\n    '\\x05\\u01D6\\xEC\\x02\\u069B\\u06A2\\x05\\u021E\\u0110\\x02\\u069C\\u06A2\\x05\\u0222' +\r\n    '\\u0112\\x02\\u069D\\u06A2\\x05\\u022C\\u0117\\x02\\u069E\\u06A2\\x05\\u0230\\u0119' +\r\n    '\\x02\\u069F\\u06A2\\x05\\u01AE\\xD8\\x02\\u06A0\\u06A2\\x05\\u019A\\xCE\\x02\\u06A1' +\r\n    '\\u069A\\x03\\x02\\x02\\x02\\u06A1\\u069B\\x03\\x02\\x02\\x02\\u06A1\\u069C\\x03\\x02' +\r\n    '\\x02\\x02\\u06A1\\u069D\\x03\\x02\\x02\\x02\\u06A1\\u069E\\x03\\x02\\x02\\x02\\u06A1' +\r\n    '\\u069F\\x03\\x02\\x02\\x02\\u06A1\\u06A0\\x03\\x02\\x02\\x02\\u06A2\\u013B\\x03\\x02' +\r\n    '\\x02\\x02\\u06A3\\u06A4\\x07\\x18\\x02\\x02\\u06A4\\u06A5\\x07;\\x02\\x02\\u06A5\\u06A6' +\r\n    '\\x05\\u01CA\\xE6\\x02\\u06A6\\u06A7\\x07<\\x02\\x02\\u06A7\\u06A8\\x05\\u012C\\x97' +\r\n    '\\x02\\u06A8\\u013D\\x03\\x02\\x02\\x02\\u06A9\\u06AA\\x07\\x18\\x02\\x02\\u06AA\\u06AB' +\r\n    '\\x07;\\x02\\x02\\u06AB\\u06AC\\x05\\u01CA\\xE6\\x02\\u06AC\\u06AD\\x07<\\x02\\x02\\u06AD' +\r\n    '\\u06AE\\x05\\u012E\\x98\\x02\\u06AE\\u06AF\\x07\\x11\\x02\\x02\\u06AF\\u06B0\\x05\\u012C' +\r\n    '\\x97\\x02\\u06B0\\u013F\\x03\\x02\\x02\\x02\\u06B1\\u06B2\\x07\\x18\\x02\\x02\\u06B2' +\r\n    '\\u06B3\\x07;\\x02\\x02\\u06B3\\u06B4\\x05\\u01CA\\xE6\\x02\\u06B4\\u06B5\\x07<\\x02' +\r\n    '\\x02\\u06B5\\u06B6\\x05\\u012E\\x98\\x02\\u06B6\\u06B7\\x07\\x11\\x02\\x02\\u06B7\\u06B8' +\r\n    '\\x05\\u012E\\x98\\x02\\u06B8\\u0141\\x03\\x02\\x02\\x02\\u06B9\\u06BA\\x07\\x04\\x02' +\r\n    '\\x02\\u06BA\\u06BB\\x05\\u01CA\\xE6\\x02\\u06BB\\u06BC\\x07A\\x02\\x02\\u06BC\\u06C4' +\r\n    '\\x03\\x02\\x02\\x02\\u06BD\\u06BE\\x07\\x04\\x02\\x02\\u06BE\\u06BF\\x05\\u01CA\\xE6' +\r\n    '\\x02\\u06BF\\u06C0\\x07J\\x02\\x02\\u06C0\\u06C1\\x05\\u01CA\\xE6\\x02\\u06C1\\u06C2' +\r\n    '\\x07A\\x02\\x02\\u06C2\\u06C4\\x03\\x02\\x02\\x02\\u06C3\\u06B9\\x03\\x02\\x02\\x02' +\r\n    '\\u06C3\\u06BD\\x03\\x02\\x02\\x02\\u06C4\\u0143\\x03\\x02\\x02\\x02\\u06C5\\u06C6\\x07' +\r\n    '+\\x02\\x02\\u06C6\\u06C7\\x07;\\x02\\x02\\u06C7\\u06C8\\x05\\u01CA\\xE6\\x02\\u06C8' +\r\n    '\\u06C9\\x07<\\x02\\x02\\u06C9\\u06CA\\x05\\u0146\\xA4\\x02\\u06CA\\u0145\\x03\\x02' +\r\n    '\\x02\\x02\\u06CB\\u06CF\\x07=\\x02\\x02\\u06CC\\u06CE\\x05\\u0148\\xA5\\x02\\u06CD' +\r\n    '\\u06CC\\x03\\x02\\x02\\x02\\u06CE\\u06D1\\x03\\x02\\x02\\x02\\u06CF\\u06CD\\x03\\x02' +\r\n    '\\x02\\x02\\u06CF\\u06D0\\x03\\x02\\x02\\x02\\u06D0\\u06D5\\x03\\x02\\x02\\x02\\u06D1' +\r\n    '\\u06CF\\x03\\x02\\x02\\x02\\u06D2\\u06D4\\x05\\u014C\\xA7\\x02\\u06D3\\u06D2\\x03\\x02' +\r\n    '\\x02\\x02\\u06D4\\u06D7\\x03\\x02\\x02\\x02\\u06D5\\u06D3\\x03\\x02\\x02\\x02\\u06D5' +\r\n    '\\u06D6\\x03\\x02\\x02\\x02\\u06D6\\u06D8\\x03\\x02\\x02\\x02\\u06D7\\u06D5\\x03\\x02' +\r\n    '\\x02\\x02\\u06D8\\u06D9\\x07>\\x02\\x02\\u06D9\\u0147\\x03\\x02\\x02\\x02\\u06DA\\u06DB' +\r\n    '\\x05\\u014A\\xA6\\x02\\u06DB\\u06DC\\x05\\u0124\\x93\\x02\\u06DC\\u0149\\x03\\x02\\x02' +\r\n    '\\x02\\u06DD\\u06E1\\x05\\u014C\\xA7\\x02\\u06DE\\u06E0\\x05\\u014C\\xA7\\x02\\u06DF' +\r\n    '\\u06DE\\x03\\x02\\x02\\x02\\u06E0\\u06E3\\x03\\x02\\x02\\x02\\u06E1\\u06DF\\x03\\x02' +\r\n    '\\x02\\x02\\u06E1\\u06E2\\x03\\x02\\x02\\x02\\u06E2\\u014B\\x03\\x02\\x02\\x02\\u06E3' +\r\n    '\\u06E1\\x03\\x02\\x02\\x02\\u06E4\\u06E5\\x07\\b\\x02\\x02\\u06E5\\u06E6\\x05\\u01C8' +\r\n    '\\xE5\\x02\\u06E6\\u06E7\\x07J\\x02\\x02\\u06E7\\u06EF\\x03\\x02\\x02\\x02\\u06E8\\u06E9' +\r\n    '\\x07\\b\\x02\\x02\\u06E9\\u06EA\\x05\\u014E\\xA8\\x02\\u06EA\\u06EB\\x07J\\x02\\x02' +\r\n    '\\u06EB\\u06EF\\x03\\x02\\x02\\x02\\u06EC\\u06ED\\x07\\x0E\\x02\\x02\\u06ED\\u06EF\\x07' +\r\n    'J\\x02\\x02\\u06EE\\u06E4\\x03\\x02\\x02\\x02\\u06EE\\u06E8\\x03\\x02\\x02\\x02\\u06EE' +\r\n    '\\u06EC\\x03\\x02\\x02\\x02\\u06EF\\u014D\\x03\\x02\\x02\\x02\\u06F0\\u06F1\\x07h\\x02' +\r\n    '\\x02\\u06F1\\u014F\\x03\\x02\\x02\\x02\\u06F2\\u06F3\\x074\\x02\\x02\\u06F3\\u06F4' +\r\n    '\\x07;\\x02\\x02\\u06F4\\u06F5\\x05\\u01CA\\xE6\\x02\\u06F5\\u06F6\\x07<\\x02\\x02\\u06F6' +\r\n    '\\u06F7\\x05\\u012C\\x97\\x02\\u06F7\\u0151\\x03\\x02\\x02\\x02\\u06F8\\u06F9\\x074' +\r\n    '\\x02\\x02\\u06F9\\u06FA\\x07;\\x02\\x02\\u06FA\\u06FB\\x05\\u01CA\\xE6\\x02\\u06FB' +\r\n    '\\u06FC\\x07<\\x02\\x02\\u06FC\\u06FD\\x05\\u012E\\x98\\x02\\u06FD\\u0153\\x03\\x02' +\r\n    '\\x02\\x02\\u06FE\\u06FF\\x07\\x0F\\x02\\x02\\u06FF\\u0700\\x05\\u012C\\x97\\x02\\u0700' +\r\n    '\\u0701\\x074\\x02\\x02\\u0701\\u0702\\x07;\\x02\\x02\\u0702\\u0703\\x05\\u01CA\\xE6' +\r\n    '\\x02\\u0703\\u0704\\x07<\\x02\\x02\\u0704\\u0705\\x07A\\x02\\x02\\u0705\\u0155\\x03' +\r\n    '\\x02\\x02\\x02\\u0706\\u0709\\x05\\u015A\\xAE\\x02\\u0707\\u0709\\x05\\u0164\\xB3\\x02' +\r\n    '\\u0708\\u0706\\x03\\x02\\x02\\x02\\u0708\\u0707\\x03\\x02\\x02\\x02\\u0709\\u0157\\x03' +\r\n    '\\x02\\x02\\x02\\u070A\\u070D\\x05\\u015C\\xAF\\x02\\u070B\\u070D\\x05\\u0166\\xB4\\x02' +\r\n    '\\u070C\\u070A\\x03\\x02\\x02\\x02\\u070C\\u070B\\x03\\x02\\x02\\x02\\u070D\\u0159\\x03' +\r\n    '\\x02\\x02\\x02\\u070E\\u070F\\x07\\x17\\x02\\x02\\u070F\\u0711\\x07;\\x02\\x02\\u0710' +\r\n    '\\u0712\\x05\\u015E\\xB0\\x02\\u0711\\u0710\\x03\\x02\\x02\\x02\\u0711\\u0712\\x03\\x02' +\r\n    '\\x02\\x02\\u0712\\u0713\\x03\\x02\\x02\\x02\\u0713\\u0715\\x07A\\x02\\x02\\u0714\\u0716' +\r\n    '\\x05\\u01CA\\xE6\\x02\\u0715\\u0714\\x03\\x02\\x02\\x02\\u0715\\u0716\\x03\\x02\\x02' +\r\n    '\\x02\\u0716\\u0717\\x03\\x02\\x02\\x02\\u0717\\u0719\\x07A\\x02\\x02\\u0718\\u071A' +\r\n    '\\x05\\u0160\\xB1\\x02\\u0719\\u0718\\x03\\x02\\x02\\x02\\u0719\\u071A\\x03\\x02\\x02' +\r\n    '\\x02\\u071A\\u071B\\x03\\x02\\x02\\x02\\u071B\\u071C\\x07<\\x02\\x02\\u071C\\u071D' +\r\n    '\\x05\\u012C\\x97\\x02\\u071D\\u015B\\x03\\x02\\x02\\x02\\u071E\\u071F\\x07\\x17\\x02' +\r\n    '\\x02\\u071F\\u0721\\x07;\\x02\\x02\\u0720\\u0722\\x05\\u015E\\xB0\\x02\\u0721\\u0720' +\r\n    '\\x03\\x02\\x02\\x02\\u0721\\u0722\\x03\\x02\\x02\\x02\\u0722\\u0723\\x03\\x02\\x02\\x02' +\r\n    '\\u0723\\u0725\\x07A\\x02\\x02\\u0724\\u0726\\x05\\u01CA\\xE6\\x02\\u0725\\u0724\\x03' +\r\n    '\\x02\\x02\\x02\\u0725\\u0726\\x03\\x02\\x02\\x02\\u0726\\u0727\\x03\\x02\\x02\\x02\\u0727' +\r\n    '\\u0729\\x07A\\x02\\x02\\u0728\\u072A\\x05\\u0160\\xB1\\x02\\u0729\\u0728\\x03\\x02' +\r\n    '\\x02\\x02\\u0729\\u072A\\x03\\x02\\x02\\x02\\u072A\\u072B\\x03\\x02\\x02\\x02\\u072B' +\r\n    '\\u072C\\x07<\\x02\\x02\\u072C\\u072D\\x05\\u012E\\x98\\x02\\u072D\\u015D\\x03\\x02' +\r\n    '\\x02\\x02\\u072E\\u0731\\x05\\u0162\\xB2\\x02\\u072F\\u0731\\x05\\u012A\\x96\\x02\\u0730' +\r\n    '\\u072E\\x03\\x02\\x02\\x02\\u0730\\u072F\\x03\\x02\\x02\\x02\\u0731\\u015F\\x03\\x02' +\r\n    '\\x02\\x02\\u0732\\u0733\\x05\\u0162\\xB2\\x02\\u0733\\u0161\\x03\\x02\\x02\\x02\\u0734' +\r\n    '\\u0739\\x05\\u013A\\x9E\\x02\\u0735\\u0736\\x07B\\x02\\x02\\u0736\\u0738\\x05\\u013A' +\r\n    '\\x9E\\x02\\u0737\\u0735\\x03\\x02\\x02\\x02\\u0738\\u073B\\x03\\x02\\x02\\x02\\u0739' +\r\n    '\\u0737\\x03\\x02\\x02\\x02\\u0739\\u073A\\x03\\x02\\x02\\x02\\u073A\\u0163\\x03\\x02' +\r\n    '\\x02\\x02\\u073B\\u0739\\x03\\x02\\x02\\x02\\u073C\\u073D\\x07\\x17\\x02\\x02\\u073D' +\r\n    '\\u0741\\x07;\\x02\\x02\\u073E\\u0740\\x05\\xBA^\\x02\\u073F\\u073E\\x03\\x02\\x02\\x02' +\r\n    '\\u0740\\u0743\\x03\\x02\\x02\\x02\\u0741\\u073F\\x03\\x02\\x02\\x02\\u0741\\u0742\\x03' +\r\n    '\\x02\\x02\\x02\\u0742\\u0744\\x03\\x02\\x02\\x02\\u0743\\u0741\\x03\\x02\\x02\\x02\\u0744' +\r\n    '\\u0745\\x05\\x8AF\\x02\\u0745\\u0746\\x05\\x86D\\x02\\u0746\\u0747\\x07J\\x02\\x02' +\r\n    '\\u0747\\u0748\\x05\\u01CA\\xE6\\x02\\u0748\\u0749\\x07<\\x02\\x02\\u0749\\u074A\\x05' +\r\n    '\\u012C\\x97\\x02\\u074A\\u0165\\x03\\x02\\x02\\x02\\u074B\\u074C\\x07\\x17\\x02\\x02' +\r\n    '\\u074C\\u0750\\x07;\\x02\\x02\\u074D\\u074F\\x05\\xBA^\\x02\\u074E\\u074D\\x03\\x02' +\r\n    '\\x02\\x02\\u074F\\u0752\\x03\\x02\\x02\\x02\\u0750\\u074E\\x03\\x02\\x02\\x02\\u0750' +\r\n    '\\u0751\\x03\\x02\\x02\\x02\\u0751\\u0753\\x03\\x02\\x02\\x02\\u0752\\u0750\\x03\\x02' +\r\n    '\\x02\\x02\\u0753\\u0754\\x05\\x8AF\\x02\\u0754\\u0755\\x05\\x86D\\x02\\u0755\\u0756' +\r\n    '\\x07J\\x02\\x02\\u0756\\u0757\\x05\\u01CA\\xE6\\x02\\u0757\\u0758\\x07<\\x02\\x02\\u0758' +\r\n    '\\u0759\\x05\\u012E\\x98\\x02\\u0759\\u0167\\x03\\x02\\x02\\x02\\u075A\\u075C\\x07\\x06' +\r\n    '\\x02\\x02\\u075B\\u075D\\x07h\\x02\\x02\\u075C\\u075B\\x03\\x02\\x02\\x02\\u075C\\u075D' +\r\n    '\\x03\\x02\\x02\\x02\\u075D\\u075E\\x03\\x02\\x02\\x02\\u075E\\u075F\\x07A\\x02\\x02' +\r\n    '\\u075F\\u0169\\x03\\x02\\x02\\x02\\u0760\\u0762\\x07\\r\\x02\\x02\\u0761\\u0763\\x07' +\r\n    'h\\x02\\x02\\u0762\\u0761\\x03\\x02\\x02\\x02\\u0762\\u0763\\x03\\x02\\x02\\x02\\u0763' +\r\n    '\\u0764\\x03\\x02\\x02\\x02\\u0764\\u0765\\x07A\\x02\\x02\\u0765\\u016B\\x03\\x02\\x02' +\r\n    '\\x02\\u0766\\u0768\\x07&\\x02\\x02\\u0767\\u0769\\x05\\u01CA\\xE6\\x02\\u0768\\u0767' +\r\n    '\\x03\\x02\\x02\\x02\\u0768\\u0769\\x03\\x02\\x02\\x02\\u0769\\u076A\\x03\\x02\\x02\\x02' +\r\n    '\\u076A\\u076B\\x07A\\x02\\x02\\u076B\\u016D\\x03\\x02\\x02\\x02\\u076C\\u076D\\x07' +\r\n    '.\\x02\\x02\\u076D\\u076E\\x05\\u01CA\\xE6\\x02\\u076E\\u076F\\x07A\\x02\\x02\\u076F' +\r\n    '\\u016F\\x03\\x02\\x02\\x02\\u0770\\u0771\\x07,\\x02\\x02\\u0771\\u0772\\x07;\\x02\\x02' +\r\n    '\\u0772\\u0773\\x05\\u01CA\\xE6\\x02\\u0773\\u0774\\x07<\\x02\\x02\\u0774\\u0775\\x05' +\r\n    '\\u0122\\x92\\x02\\u0775\\u0171\\x03\\x02\\x02\\x02\\u0776\\u0777\\x071\\x02\\x02\\u0777' +\r\n    '\\u0778\\x05\\u0122\\x92\\x02\\u0778\\u0779\\x05\\u0174\\xBB\\x02\\u0779\\u0783\\x03' +\r\n    '\\x02\\x02\\x02\\u077A\\u077B\\x071\\x02\\x02\\u077B\\u077D\\x05\\u0122\\x92\\x02\\u077C' +\r\n    '\\u077E\\x05\\u0174\\xBB\\x02\\u077D\\u077C\\x03\\x02\\x02\\x02\\u077D\\u077E\\x03\\x02' +\r\n    '\\x02\\x02\\u077E\\u077F\\x03\\x02\\x02\\x02\\u077F\\u0780\\x05\\u017C\\xBF\\x02\\u0780' +\r\n    '\\u0783\\x03\\x02\\x02\\x02\\u0781\\u0783\\x05\\u017E\\xC0\\x02\\u0782\\u0776\\x03\\x02' +\r\n    '\\x02\\x02\\u0782\\u077A\\x03\\x02\\x02\\x02\\u0782\\u0781\\x03\\x02\\x02\\x02\\u0783' +\r\n    '\\u0173\\x03\\x02\\x02\\x02\\u0784\\u0788\\x05\\u0176\\xBC\\x02\\u0785\\u0787\\x05\\u0176' +\r\n    '\\xBC\\x02\\u0786\\u0785\\x03\\x02\\x02\\x02\\u0787\\u078A\\x03\\x02\\x02\\x02\\u0788' +\r\n    '\\u0786\\x03\\x02\\x02\\x02\\u0788\\u0789\\x03\\x02\\x02\\x02\\u0789\\u0175\\x03\\x02' +\r\n    '\\x02\\x02\\u078A\\u0788\\x03\\x02\\x02\\x02\\u078B\\u078C\\x07\\t\\x02\\x02\\u078C\\u078D' +\r\n    '\\x07;\\x02\\x02\\u078D\\u078E\\x05\\u0178\\xBD\\x02\\u078E\\u078F\\x07<\\x02\\x02\\u078F' +\r\n    '\\u0790\\x05\\u0122\\x92\\x02\\u0790\\u0177\\x03\\x02\\x02\\x02\\u0791\\u0793\\x05\\xBA' +\r\n    '^\\x02\\u0792\\u0791\\x03\\x02\\x02\\x02\\u0793\\u0796\\x03\\x02\\x02\\x02\\u0794\\u0792' +\r\n    '\\x03\\x02\\x02\\x02\\u0794\\u0795\\x03\\x02\\x02\\x02\\u0795\\u0797\\x03\\x02\\x02\\x02' +\r\n    '\\u0796\\u0794\\x03\\x02\\x02\\x02\\u0797\\u0798\\x05\\u017A\\xBE\\x02\\u0798\\u0799' +\r\n    '\\x05\\x86D\\x02\\u0799\\u0179\\x03\\x02\\x02\\x02\\u079A\\u079F\\x05\\x92J\\x02\\u079B' +\r\n    '\\u079C\\x07X\\x02\\x02\\u079C\\u079E\\x05 \\x11\\x02\\u079D\\u079B\\x03\\x02\\x02\\x02' +\r\n    '\\u079E\\u07A1\\x03\\x02\\x02\\x02\\u079F\\u079D\\x03\\x02\\x02\\x02\\u079F\\u07A0\\x03' +\r\n    '\\x02\\x02\\x02\\u07A0\\u017B\\x03\\x02\\x02\\x02\\u07A1\\u079F\\x03\\x02\\x02\\x02\\u07A2' +\r\n    '\\u07A3\\x07\\x15\\x02\\x02\\u07A3\\u07A4\\x05\\u0122\\x92\\x02\\u07A4\\u017D\\x03\\x02' +\r\n    '\\x02\\x02\\u07A5\\u07A6\\x071\\x02\\x02\\u07A6\\u07A7\\x05\\u0180\\xC1\\x02\\u07A7' +\r\n    '\\u07A9\\x05\\u0122\\x92\\x02\\u07A8\\u07AA\\x05\\u0174\\xBB\\x02\\u07A9\\u07A8\\x03' +\r\n    '\\x02\\x02\\x02\\u07A9\\u07AA\\x03\\x02\\x02\\x02\\u07AA\\u07AC\\x03\\x02\\x02\\x02\\u07AB' +\r\n    '\\u07AD\\x05\\u017C\\xBF\\x02\\u07AC\\u07AB\\x03\\x02\\x02\\x02\\u07AC\\u07AD\\x03\\x02' +\r\n    '\\x02\\x02\\u07AD\\u017F\\x03\\x02\\x02\\x02\\u07AE\\u07AF\\x07;\\x02\\x02\\u07AF\\u07B1' +\r\n    '\\x05\\u0182\\xC2\\x02\\u07B0\\u07B2\\x07A\\x02\\x02\\u07B1\\u07B0\\x03\\x02\\x02\\x02' +\r\n    '\\u07B1\\u07B2\\x03\\x02\\x02\\x02\\u07B2\\u07B3\\x03\\x02\\x02\\x02\\u07B3\\u07B4\\x07' +\r\n    '<\\x02\\x02\\u07B4\\u0181\\x03\\x02\\x02\\x02\\u07B5\\u07BA\\x05\\u0184\\xC3\\x02\\u07B6' +\r\n    '\\u07B7\\x07A\\x02\\x02\\u07B7\\u07B9\\x05\\u0184\\xC3\\x02\\u07B8\\u07B6\\x03\\x02' +\r\n    '\\x02\\x02\\u07B9\\u07BC\\x03\\x02\\x02\\x02\\u07BA\\u07B8\\x03\\x02\\x02\\x02\\u07BA' +\r\n    '\\u07BB\\x03\\x02\\x02\\x02\\u07BB\\u0183\\x03\\x02\\x02\\x02\\u07BC\\u07BA\\x03\\x02' +\r\n    '\\x02\\x02\\u07BD\\u07BF\\x05\\xBA^\\x02\\u07BE\\u07BD\\x03\\x02\\x02\\x02\\u07BF\\u07C2' +\r\n    '\\x03\\x02\\x02\\x02\\u07C0\\u07BE\\x03\\x02\\x02\\x02\\u07C0\\u07C1\\x03\\x02\\x02\\x02' +\r\n    '\\u07C1\\u07C3\\x03\\x02\\x02\\x02\\u07C2\\u07C0\\x03\\x02\\x02\\x02\\u07C3\\u07C4\\x05' +\r\n    '\\x8AF\\x02\\u07C4\\u07C5\\x05\\x86D\\x02\\u07C5\\u07C6\\x07D\\x02\\x02\\u07C6\\u07C7' +\r\n    '\\x05\\u01CA\\xE6\\x02\\u07C7\\u0185\\x03\\x02\\x02\\x02\\u07C8\\u07CB\\x05\\u0194\\xCB' +\r\n    '\\x02\\u07C9\\u07CB\\x05\\u01C2\\xE2\\x02\\u07CA\\u07C8\\x03\\x02\\x02\\x02\\u07CA\\u07C9' +\r\n    '\\x03\\x02\\x02\\x02\\u07CB\\u07CF\\x03\\x02\\x02\\x02\\u07CC\\u07CE\\x05\\u018E\\xC8' +\r\n    '\\x02\\u07CD\\u07CC\\x03\\x02\\x02\\x02\\u07CE\\u07D1\\x03\\x02\\x02\\x02\\u07CF\\u07CD' +\r\n    '\\x03\\x02\\x02\\x02\\u07CF\\u07D0\\x03\\x02\\x02\\x02\\u07D0\\u0187\\x03\\x02\\x02\\x02' +\r\n    '\\u07D1\\u07CF\\x03\\x02\\x02\\x02\\u07D2\\u07F0\\x05\\x04\\x03\\x02\\u07D3\\u07D8\\x05' +\r\n    'F$\\x02\\u07D4\\u07D5\\x07?\\x02\\x02\\u07D5\\u07D7\\x07@\\x02\\x02\\u07D6\\u07D4\\x03' +\r\n    '\\x02\\x02\\x02\\u07D7\\u07DA\\x03\\x02\\x02\\x02\\u07D8\\u07D6\\x03\\x02\\x02\\x02\\u07D8' +\r\n    '\\u07D9\\x03\\x02\\x02\\x02\\u07D9\\u07DB\\x03\\x02\\x02\\x02\\u07DA\\u07D8\\x03\\x02' +\r\n    '\\x02\\x02\\u07DB\\u07DC\\x07C\\x02\\x02\\u07DC\\u07DD\\x07\\v\\x02\\x02\\u07DD\\u07F0' +\r\n    '\\x03\\x02\\x02\\x02\\u07DE\\u07DF\\x072\\x02\\x02\\u07DF\\u07E0\\x07C\\x02\\x02\\u07E0' +\r\n    '\\u07F0\\x07\\v\\x02\\x02\\u07E1\\u07F0\\x07-\\x02\\x02\\u07E2\\u07E3\\x05F$\\x02\\u07E3' +\r\n    '\\u07E4\\x07C\\x02\\x02\\u07E4\\u07E5\\x07-\\x02\\x02\\u07E5\\u07F0\\x03\\x02\\x02\\x02' +\r\n    '\\u07E6\\u07E7\\x07;\\x02\\x02\\u07E7\\u07E8\\x05\\u01CA\\xE6\\x02\\u07E8\\u07E9\\x07' +\r\n    '<\\x02\\x02\\u07E9\\u07F0\\x03\\x02\\x02\\x02\\u07EA\\u07F0\\x05\\u019A\\xCE\\x02\\u07EB' +\r\n    '\\u07F0\\x05\\u01A2\\xD2\\x02\\u07EC\\u07F0\\x05\\u01A8\\xD5\\x02\\u07ED\\u07F0\\x05' +\r\n    '\\u01AE\\xD8\\x02\\u07EE\\u07F0\\x05\\u01BC\\xDF\\x02\\u07EF\\u07D2\\x03\\x02\\x02\\x02' +\r\n    '\\u07EF\\u07D3\\x03\\x02\\x02\\x02\\u07EF\\u07DE\\x03\\x02\\x02\\x02\\u07EF\\u07E1\\x03' +\r\n    '\\x02\\x02\\x02\\u07EF\\u07E2\\x03\\x02\\x02\\x02\\u07EF\\u07E6\\x03\\x02\\x02\\x02\\u07EF' +\r\n    '\\u07EA\\x03\\x02\\x02\\x02\\u07EF\\u07EB\\x03\\x02\\x02\\x02\\u07EF\\u07EC\\x03\\x02' +\r\n    '\\x02\\x02\\u07EF\\u07ED\\x03\\x02\\x02\\x02\\u07EF\\u07EE\\x03\\x02\\x02\\x02\\u07F0' +\r\n    '\\u0189\\x03\\x02\\x02\\x02\\u07F1\\u07F2\\x03\\x02\\x02\\x02\\u07F2\\u018B\\x03\\x02' +\r\n    '\\x02\\x02\\u07F3\\u0810\\x05\\x04\\x03\\x02\\u07F4\\u07F9\\x05F$\\x02\\u07F5\\u07F6' +\r\n    '\\x07?\\x02\\x02\\u07F6\\u07F8\\x07@\\x02\\x02\\u07F7\\u07F5\\x03\\x02\\x02\\x02\\u07F8' +\r\n    '\\u07FB\\x03\\x02\\x02\\x02\\u07F9\\u07F7\\x03\\x02\\x02\\x02\\u07F9\\u07FA\\x03\\x02' +\r\n    '\\x02\\x02\\u07FA\\u07FC\\x03\\x02\\x02\\x02\\u07FB\\u07F9\\x03\\x02\\x02\\x02\\u07FC' +\r\n    '\\u07FD\\x07C\\x02\\x02\\u07FD\\u07FE\\x07\\v\\x02\\x02\\u07FE\\u0810\\x03\\x02\\x02' +\r\n    '\\x02\\u07FF\\u0800\\x072\\x02\\x02\\u0800\\u0801\\x07C\\x02\\x02\\u0801\\u0810\\x07' +\r\n    '\\v\\x02\\x02\\u0802\\u0810\\x07-\\x02\\x02\\u0803\\u0804\\x05F$\\x02\\u0804\\u0805' +\r\n    '\\x07C\\x02\\x02\\u0805\\u0806\\x07-\\x02\\x02\\u0806\\u0810\\x03\\x02\\x02\\x02\\u0807' +\r\n    '\\u0808\\x07;\\x02\\x02\\u0808\\u0809\\x05\\u01CA\\xE6\\x02\\u0809\\u080A\\x07<\\x02' +\r\n    '\\x02\\u080A\\u0810\\x03\\x02\\x02\\x02\\u080B\\u0810\\x05\\u019A\\xCE\\x02\\u080C\\u0810' +\r\n    '\\x05\\u01A2\\xD2\\x02\\u080D\\u0810\\x05\\u01AE\\xD8\\x02\\u080E\\u0810\\x05\\u01BC' +\r\n    '\\xDF\\x02\\u080F\\u07F3\\x03\\x02\\x02\\x02\\u080F\\u07F4\\x03\\x02\\x02\\x02\\u080F' +\r\n    '\\u07FF\\x03\\x02\\x02\\x02\\u080F\\u0802\\x03\\x02\\x02\\x02\\u080F\\u0803\\x03\\x02' +\r\n    '\\x02\\x02\\u080F\\u0807\\x03\\x02\\x02\\x02\\u080F\\u080B\\x03\\x02\\x02\\x02\\u080F' +\r\n    '\\u080C\\x03\\x02\\x02\\x02\\u080F\\u080D\\x03\\x02\\x02\\x02\\u080F\\u080E\\x03\\x02' +\r\n    '\\x02\\x02\\u0810\\u018D\\x03\\x02\\x02\\x02\\u0811\\u0817\\x05\\u019C\\xCF\\x02\\u0812' +\r\n    '\\u0817\\x05\\u01A4\\xD3\\x02\\u0813\\u0817\\x05\\u01AA\\xD6\\x02\\u0814\\u0817\\x05' +\r\n    '\\u01B6\\xDC\\x02\\u0815\\u0817\\x05\\u01BE\\xE0\\x02\\u0816\\u0811\\x03\\x02\\x02\\x02' +\r\n    '\\u0816\\u0812\\x03\\x02\\x02\\x02\\u0816\\u0813\\x03\\x02\\x02\\x02\\u0816\\u0814\\x03' +\r\n    '\\x02\\x02\\x02\\u0816\\u0815\\x03\\x02\\x02\\x02\\u0817\\u018F\\x03\\x02\\x02\\x02\\u0818' +\r\n    '\\u0819\\x03\\x02\\x02\\x02\\u0819\\u0191\\x03\\x02\\x02\\x02\\u081A\\u081F\\x05\\u019C' +\r\n    '\\xCF\\x02\\u081B\\u081F\\x05\\u01A4\\xD3\\x02\\u081C\\u081F\\x05\\u01B6\\xDC\\x02\\u081D' +\r\n    '\\u081F\\x05\\u01BE\\xE0\\x02\\u081E\\u081A\\x03\\x02\\x02\\x02\\u081E\\u081B\\x03\\x02' +\r\n    '\\x02\\x02\\u081E\\u081C\\x03\\x02\\x02\\x02\\u081E\\u081D\\x03\\x02\\x02\\x02\\u081F' +\r\n    '\\u0193\\x03\\x02\\x02\\x02\\u0820\\u0849\\x05\\x04\\x03\\x02\\u0821\\u0826\\x05F$\\x02' +\r\n    '\\u0822\\u0823\\x07?\\x02\\x02\\u0823\\u0825\\x07@\\x02\\x02\\u0824\\u0822\\x03\\x02' +\r\n    '\\x02\\x02\\u0825\\u0828\\x03\\x02\\x02\\x02\\u0826\\u0824\\x03\\x02\\x02\\x02\\u0826' +\r\n    '\\u0827\\x03\\x02\\x02\\x02\\u0827\\u0829\\x03\\x02\\x02\\x02\\u0828\\u0826\\x03\\x02' +\r\n    '\\x02\\x02\\u0829\\u082A\\x07C\\x02\\x02\\u082A\\u082B\\x07\\v\\x02\\x02\\u082B\\u0849' +\r\n    '\\x03\\x02\\x02\\x02\\u082C\\u0831\\x05\\x8CG\\x02\\u082D\\u082E\\x07?\\x02\\x02\\u082E' +\r\n    '\\u0830\\x07@\\x02\\x02\\u082F\\u082D\\x03\\x02\\x02\\x02\\u0830\\u0833\\x03\\x02\\x02' +\r\n    '\\x02\\u0831\\u082F\\x03\\x02\\x02\\x02\\u0831\\u0832\\x03\\x02\\x02\\x02\\u0832\\u0834' +\r\n    '\\x03\\x02\\x02\\x02\\u0833\\u0831\\x03\\x02\\x02\\x02\\u0834\\u0835\\x07C\\x02\\x02' +\r\n    '\\u0835\\u0836\\x07\\v\\x02\\x02\\u0836\\u0849\\x03\\x02\\x02\\x02\\u0837\\u0838\\x07' +\r\n    '2\\x02\\x02\\u0838\\u0839\\x07C\\x02\\x02\\u0839\\u0849\\x07\\v\\x02\\x02\\u083A\\u0849' +\r\n    '\\x07-\\x02';\r\nJava8Parser._serializedATNSegment4 = '\\x02\\u083B\\u083C\\x05F$\\x02\\u083C\\u083D\\x07C\\x02\\x02\\u083D\\u083E\\x07-\\x02' +\r\n    '\\x02\\u083E\\u0849\\x03\\x02\\x02\\x02\\u083F\\u0840\\x07;\\x02\\x02\\u0840\\u0841' +\r\n    '\\x05\\u01CA\\xE6\\x02\\u0841\\u0842\\x07<\\x02\\x02\\u0842\\u0849\\x03\\x02\\x02\\x02' +\r\n    '\\u0843\\u0849\\x05\\u019E\\xD0\\x02\\u0844\\u0849\\x05\\u01A6\\xD4\\x02\\u0845\\u0849' +\r\n    '\\x05\\u01AC\\xD7\\x02\\u0846\\u0849\\x05\\u01B8\\xDD\\x02\\u0847\\u0849\\x05\\u01C0' +\r\n    '\\xE1\\x02\\u0848\\u0820\\x03\\x02\\x02\\x02\\u0848\\u0821\\x03\\x02\\x02\\x02\\u0848' +\r\n    '\\u082C\\x03\\x02\\x02\\x02\\u0848\\u0837\\x03\\x02\\x02\\x02\\u0848\\u083A\\x03\\x02' +\r\n    '\\x02\\x02\\u0848\\u083B\\x03\\x02\\x02\\x02\\u0848\\u083F\\x03\\x02\\x02\\x02\\u0848' +\r\n    '\\u0843\\x03\\x02\\x02\\x02\\u0848\\u0844\\x03\\x02\\x02\\x02\\u0848\\u0845\\x03\\x02' +\r\n    '\\x02\\x02\\u0848\\u0846\\x03\\x02\\x02\\x02\\u0848\\u0847\\x03\\x02\\x02\\x02\\u0849' +\r\n    '\\u0195\\x03\\x02\\x02\\x02\\u084A\\u084B\\x03\\x02\\x02\\x02\\u084B\\u0197\\x03\\x02' +\r\n    '\\x02\\x02\\u084C\\u0874\\x05\\x04\\x03\\x02\\u084D\\u0852\\x05F$\\x02\\u084E\\u084F' +\r\n    '\\x07?\\x02\\x02\\u084F\\u0851\\x07@\\x02\\x02\\u0850\\u084E\\x03\\x02\\x02\\x02\\u0851' +\r\n    '\\u0854\\x03\\x02\\x02\\x02\\u0852\\u0850\\x03\\x02\\x02\\x02\\u0852\\u0853\\x03\\x02' +\r\n    '\\x02\\x02\\u0853\\u0855\\x03\\x02\\x02\\x02\\u0854\\u0852\\x03\\x02\\x02\\x02\\u0855' +\r\n    '\\u0856\\x07C\\x02\\x02\\u0856\\u0857\\x07\\v\\x02\\x02\\u0857\\u0874\\x03\\x02\\x02' +\r\n    '\\x02\\u0858\\u085D\\x05\\x8CG\\x02\\u0859\\u085A\\x07?\\x02\\x02\\u085A\\u085C\\x07' +\r\n    '@\\x02\\x02\\u085B\\u0859\\x03\\x02\\x02\\x02\\u085C\\u085F\\x03\\x02\\x02\\x02\\u085D' +\r\n    '\\u085B\\x03\\x02\\x02\\x02\\u085D\\u085E\\x03\\x02\\x02\\x02\\u085E\\u0860\\x03\\x02' +\r\n    '\\x02\\x02\\u085F\\u085D\\x03\\x02\\x02\\x02\\u0860\\u0861\\x07C\\x02\\x02\\u0861\\u0862' +\r\n    '\\x07\\v\\x02\\x02\\u0862\\u0874\\x03\\x02\\x02\\x02\\u0863\\u0864\\x072\\x02\\x02\\u0864' +\r\n    '\\u0865\\x07C\\x02\\x02\\u0865\\u0874\\x07\\v\\x02\\x02\\u0866\\u0874\\x07-\\x02\\x02' +\r\n    '\\u0867\\u0868\\x05F$\\x02\\u0868\\u0869\\x07C\\x02\\x02\\u0869\\u086A\\x07-\\x02\\x02' +\r\n    '\\u086A\\u0874\\x03\\x02\\x02\\x02\\u086B\\u086C\\x07;\\x02\\x02\\u086C\\u086D\\x05' +\r\n    '\\u01CA\\xE6\\x02\\u086D\\u086E\\x07<\\x02\\x02\\u086E\\u0874\\x03\\x02\\x02\\x02\\u086F' +\r\n    '\\u0874\\x05\\u019E\\xD0\\x02\\u0870\\u0874\\x05\\u01A6\\xD4\\x02\\u0871\\u0874\\x05' +\r\n    '\\u01B8\\xDD\\x02\\u0872\\u0874\\x05\\u01C0\\xE1\\x02\\u0873\\u084C\\x03\\x02\\x02\\x02' +\r\n    '\\u0873\\u084D\\x03\\x02\\x02\\x02\\u0873\\u0858\\x03\\x02\\x02\\x02\\u0873\\u0863\\x03' +\r\n    '\\x02\\x02\\x02\\u0873\\u0866\\x03\\x02\\x02\\x02\\u0873\\u0867\\x03\\x02\\x02\\x02\\u0873' +\r\n    '\\u086B\\x03\\x02\\x02\\x02\\u0873\\u086F\\x03\\x02\\x02\\x02\\u0873\\u0870\\x03\\x02' +\r\n    '\\x02\\x02\\u0873\\u0871\\x03\\x02\\x02\\x02\\u0873\\u0872\\x03\\x02\\x02\\x02\\u0874' +\r\n    '\\u0199\\x03\\x02\\x02\\x02\\u0875\\u0877\\x07!\\x02\\x02\\u0876\\u0878\\x05:\\x1E\\x02' +\r\n    '\\u0877\\u0876\\x03\\x02\\x02\\x02\\u0877\\u0878\\x03\\x02\\x02\\x02\\u0878\\u087C\\x03' +\r\n    '\\x02\\x02\\x02\\u0879\\u087B\\x05\\u010C\\x87\\x02\\u087A\\u0879\\x03\\x02\\x02\\x02' +\r\n    '\\u087B\\u087E\\x03\\x02\\x02\\x02\\u087C\\u087A\\x03\\x02\\x02\\x02\\u087C\\u087D\\x03' +\r\n    '\\x02\\x02\\x02\\u087D\\u087F\\x03\\x02\\x02\\x02\\u087E\\u087C\\x03\\x02\\x02\\x02\\u087F' +\r\n    '\\u088A\\x07h\\x02\\x02\\u0880\\u0884\\x07C\\x02\\x02\\u0881\\u0883\\x05\\u010C\\x87' +\r\n    '\\x02\\u0882\\u0881\\x03\\x02\\x02\\x02\\u0883\\u0886\\x03\\x02\\x02\\x02\\u0884\\u0882' +\r\n    '\\x03\\x02\\x02\\x02\\u0884\\u0885\\x03\\x02\\x02\\x02\\u0885\\u0887\\x03\\x02\\x02\\x02' +\r\n    '\\u0886\\u0884\\x03\\x02\\x02\\x02\\u0887\\u0889\\x07h\\x02\\x02\\u0888\\u0880\\x03' +\r\n    '\\x02\\x02\\x02\\u0889\\u088C\\x03\\x02\\x02\\x02\\u088A\\u0888\\x03\\x02\\x02\\x02\\u088A' +\r\n    '\\u088B\\x03\\x02\\x02\\x02\\u088B\\u088E\\x03\\x02\\x02\\x02\\u088C\\u088A\\x03\\x02' +\r\n    '\\x02\\x02\\u088D\\u088F\\x05\\u01A0\\xD1\\x02\\u088E\\u088D\\x03\\x02\\x02\\x02\\u088E' +\r\n    '\\u088F\\x03\\x02\\x02\\x02\\u088F\\u0890\\x03\\x02\\x02\\x02\\u0890\\u0892\\x07;\\x02' +\r\n    '\\x02\\u0891\\u0893\\x05\\u01BA\\xDE\\x02\\u0892\\u0891\\x03\\x02\\x02\\x02\\u0892\\u0893' +\r\n    '\\x03\\x02\\x02\\x02\\u0893\\u0894\\x03\\x02\\x02\\x02\\u0894\\u0896\\x07<\\x02\\x02' +\r\n    '\\u0895\\u0897\\x05v<\\x02\\u0896\\u0895\\x03\\x02\\x02\\x02\\u0896\\u0897\\x03\\x02' +\r\n    \"\\x02\\x02\\u0897\\u08C9\\x03\\x02\\x02\\x02\\u0898\\u0899\\x05L'\\x02\\u0899\\u089A\" +\r\n    '\\x07C\\x02\\x02\\u089A\\u089C\\x07!\\x02\\x02\\u089B\\u089D\\x05:\\x1E\\x02\\u089C' +\r\n    '\\u089B\\x03\\x02\\x02\\x02\\u089C\\u089D\\x03\\x02\\x02\\x02\\u089D\\u08A1\\x03\\x02' +\r\n    '\\x02\\x02\\u089E\\u08A0\\x05\\u010C\\x87\\x02\\u089F\\u089E\\x03\\x02\\x02\\x02\\u08A0' +\r\n    '\\u08A3\\x03\\x02\\x02\\x02\\u08A1\\u089F\\x03\\x02\\x02\\x02\\u08A1\\u08A2\\x03\\x02' +\r\n    '\\x02\\x02\\u08A2\\u08A4\\x03\\x02\\x02\\x02\\u08A3\\u08A1\\x03\\x02\\x02\\x02\\u08A4' +\r\n    '\\u08A6\\x07h\\x02\\x02\\u08A5\\u08A7\\x05\\u01A0\\xD1\\x02\\u08A6\\u08A5\\x03\\x02' +\r\n    '\\x02\\x02\\u08A6\\u08A7\\x03\\x02\\x02\\x02\\u08A7\\u08A8\\x03\\x02\\x02\\x02\\u08A8' +\r\n    '\\u08AA\\x07;\\x02\\x02\\u08A9\\u08AB\\x05\\u01BA\\xDE\\x02\\u08AA\\u08A9\\x03\\x02' +\r\n    '\\x02\\x02\\u08AA\\u08AB\\x03\\x02\\x02\\x02\\u08AB\\u08AC\\x03\\x02\\x02\\x02\\u08AC' +\r\n    '\\u08AE\\x07<\\x02\\x02\\u08AD\\u08AF\\x05v<\\x02\\u08AE\\u08AD\\x03\\x02\\x02\\x02' +\r\n    '\\u08AE\\u08AF\\x03\\x02\\x02\\x02\\u08AF\\u08C9\\x03\\x02\\x02\\x02\\u08B0\\u08B1\\x05' +\r\n    '\\u0186\\xC4\\x02\\u08B1\\u08B2\\x07C\\x02\\x02\\u08B2\\u08B4\\x07!\\x02\\x02\\u08B3' +\r\n    '\\u08B5\\x05:\\x1E\\x02\\u08B4\\u08B3\\x03\\x02\\x02\\x02\\u08B4\\u08B5\\x03\\x02\\x02' +\r\n    '\\x02\\u08B5\\u08B9\\x03\\x02\\x02\\x02\\u08B6\\u08B8\\x05\\u010C\\x87\\x02\\u08B7\\u08B6' +\r\n    '\\x03\\x02\\x02\\x02\\u08B8\\u08BB\\x03\\x02\\x02\\x02\\u08B9\\u08B7\\x03\\x02\\x02\\x02' +\r\n    '\\u08B9\\u08BA\\x03\\x02\\x02\\x02\\u08BA\\u08BC\\x03\\x02\\x02\\x02\\u08BB\\u08B9\\x03' +\r\n    '\\x02\\x02\\x02\\u08BC\\u08BE\\x07h\\x02\\x02\\u08BD\\u08BF\\x05\\u01A0\\xD1\\x02\\u08BE' +\r\n    '\\u08BD\\x03\\x02\\x02\\x02\\u08BE\\u08BF\\x03\\x02\\x02\\x02\\u08BF\\u08C0\\x03\\x02' +\r\n    '\\x02\\x02\\u08C0\\u08C2\\x07;\\x02\\x02\\u08C1\\u08C3\\x05\\u01BA\\xDE\\x02\\u08C2' +\r\n    '\\u08C1\\x03\\x02\\x02\\x02\\u08C2\\u08C3\\x03\\x02\\x02\\x02\\u08C3\\u08C4\\x03\\x02' +\r\n    '\\x02\\x02\\u08C4\\u08C6\\x07<\\x02\\x02\\u08C5\\u08C7\\x05v<\\x02\\u08C6\\u08C5\\x03' +\r\n    '\\x02\\x02\\x02\\u08C6\\u08C7\\x03\\x02\\x02\\x02\\u08C7\\u08C9\\x03\\x02\\x02\\x02\\u08C8' +\r\n    '\\u0875\\x03\\x02\\x02\\x02\\u08C8\\u0898\\x03\\x02\\x02\\x02\\u08C8\\u08B0\\x03\\x02' +\r\n    '\\x02\\x02\\u08C9\\u019B\\x03\\x02\\x02\\x02\\u08CA\\u08CB\\x07C\\x02\\x02\\u08CB\\u08CD' +\r\n    '\\x07!\\x02\\x02\\u08CC\\u08CE\\x05:\\x1E\\x02\\u08CD\\u08CC\\x03\\x02\\x02\\x02\\u08CD' +\r\n    '\\u08CE\\x03\\x02\\x02\\x02\\u08CE\\u08D2\\x03\\x02\\x02\\x02\\u08CF\\u08D1\\x05\\u010C' +\r\n    '\\x87\\x02\\u08D0\\u08CF\\x03\\x02\\x02\\x02\\u08D1\\u08D4\\x03\\x02\\x02\\x02\\u08D2' +\r\n    '\\u08D0\\x03\\x02\\x02\\x02\\u08D2\\u08D3\\x03\\x02\\x02\\x02\\u08D3\\u08D5\\x03\\x02' +\r\n    '\\x02\\x02\\u08D4\\u08D2\\x03\\x02\\x02\\x02\\u08D5\\u08D7\\x07h\\x02\\x02\\u08D6\\u08D8' +\r\n    '\\x05\\u01A0\\xD1\\x02\\u08D7\\u08D6\\x03\\x02\\x02\\x02\\u08D7\\u08D8\\x03\\x02\\x02' +\r\n    '\\x02\\u08D8\\u08D9\\x03\\x02\\x02\\x02\\u08D9\\u08DB\\x07;\\x02\\x02\\u08DA\\u08DC' +\r\n    '\\x05\\u01BA\\xDE\\x02\\u08DB\\u08DA\\x03\\x02\\x02\\x02\\u08DB\\u08DC\\x03\\x02\\x02' +\r\n    '\\x02\\u08DC\\u08DD\\x03\\x02\\x02\\x02\\u08DD\\u08DF\\x07<\\x02\\x02\\u08DE\\u08E0' +\r\n    '\\x05v<\\x02\\u08DF\\u08DE\\x03\\x02\\x02\\x02\\u08DF\\u08E0\\x03\\x02\\x02\\x02\\u08E0' +\r\n    '\\u019D\\x03\\x02\\x02\\x02\\u08E1\\u08E3\\x07!\\x02\\x02\\u08E2\\u08E4\\x05:\\x1E\\x02' +\r\n    '\\u08E3\\u08E2\\x03\\x02\\x02\\x02\\u08E3\\u08E4\\x03\\x02\\x02\\x02\\u08E4\\u08E8\\x03' +\r\n    '\\x02\\x02\\x02\\u08E5\\u08E7\\x05\\u010C\\x87\\x02\\u08E6\\u08E5\\x03\\x02\\x02\\x02' +\r\n    '\\u08E7\\u08EA\\x03\\x02\\x02\\x02\\u08E8\\u08E6\\x03\\x02\\x02\\x02\\u08E8\\u08E9\\x03' +\r\n    '\\x02\\x02\\x02\\u08E9\\u08EB\\x03\\x02\\x02\\x02\\u08EA\\u08E8\\x03\\x02\\x02\\x02\\u08EB' +\r\n    '\\u08F6\\x07h\\x02\\x02\\u08EC\\u08F0\\x07C\\x02\\x02\\u08ED\\u08EF\\x05\\u010C\\x87' +\r\n    '\\x02\\u08EE\\u08ED\\x03\\x02\\x02\\x02\\u08EF\\u08F2\\x03\\x02\\x02\\x02\\u08F0\\u08EE' +\r\n    '\\x03\\x02\\x02\\x02\\u08F0\\u08F1\\x03\\x02\\x02\\x02\\u08F1\\u08F3\\x03\\x02\\x02\\x02' +\r\n    '\\u08F2\\u08F0\\x03\\x02\\x02\\x02\\u08F3\\u08F5\\x07h\\x02\\x02\\u08F4\\u08EC\\x03' +\r\n    '\\x02\\x02\\x02\\u08F5\\u08F8\\x03\\x02\\x02\\x02\\u08F6\\u08F4\\x03\\x02\\x02\\x02\\u08F6' +\r\n    '\\u08F7\\x03\\x02\\x02\\x02\\u08F7\\u08FA\\x03\\x02\\x02\\x02\\u08F8\\u08F6\\x03\\x02' +\r\n    '\\x02\\x02\\u08F9\\u08FB\\x05\\u01A0\\xD1\\x02\\u08FA\\u08F9\\x03\\x02\\x02\\x02\\u08FA' +\r\n    '\\u08FB\\x03\\x02\\x02\\x02\\u08FB\\u08FC\\x03\\x02\\x02\\x02\\u08FC\\u08FE\\x07;\\x02' +\r\n    '\\x02\\u08FD\\u08FF\\x05\\u01BA\\xDE\\x02\\u08FE\\u08FD\\x03\\x02\\x02\\x02\\u08FE\\u08FF' +\r\n    '\\x03\\x02\\x02\\x02\\u08FF\\u0900\\x03\\x02\\x02\\x02\\u0900\\u0902\\x07<\\x02\\x02' +\r\n    '\\u0901\\u0903\\x05v<\\x02\\u0902\\u0901\\x03\\x02\\x02\\x02\\u0902\\u0903\\x03\\x02' +\r\n    \"\\x02\\x02\\u0903\\u091D\\x03\\x02\\x02\\x02\\u0904\\u0905\\x05L'\\x02\\u0905\\u0906\" +\r\n    '\\x07C\\x02\\x02\\u0906\\u0908\\x07!\\x02\\x02\\u0907\\u0909\\x05:\\x1E\\x02\\u0908' +\r\n    '\\u0907\\x03\\x02\\x02\\x02\\u0908\\u0909\\x03\\x02\\x02\\x02\\u0909\\u090D\\x03\\x02' +\r\n    '\\x02\\x02\\u090A\\u090C\\x05\\u010C\\x87\\x02\\u090B\\u090A\\x03\\x02\\x02\\x02\\u090C' +\r\n    '\\u090F\\x03\\x02\\x02\\x02\\u090D\\u090B\\x03\\x02\\x02\\x02\\u090D\\u090E\\x03\\x02' +\r\n    '\\x02\\x02\\u090E\\u0910\\x03\\x02\\x02\\x02\\u090F\\u090D\\x03\\x02\\x02\\x02\\u0910' +\r\n    '\\u0912\\x07h\\x02\\x02\\u0911\\u0913\\x05\\u01A0\\xD1\\x02\\u0912\\u0911\\x03\\x02' +\r\n    '\\x02\\x02\\u0912\\u0913\\x03\\x02\\x02\\x02\\u0913\\u0914\\x03\\x02\\x02\\x02\\u0914' +\r\n    '\\u0916\\x07;\\x02\\x02\\u0915\\u0917\\x05\\u01BA\\xDE\\x02\\u0916\\u0915\\x03\\x02' +\r\n    '\\x02\\x02\\u0916\\u0917\\x03\\x02\\x02\\x02\\u0917\\u0918\\x03\\x02\\x02\\x02\\u0918' +\r\n    '\\u091A\\x07<\\x02\\x02\\u0919\\u091B\\x05v<\\x02\\u091A\\u0919\\x03\\x02\\x02\\x02' +\r\n    '\\u091A\\u091B\\x03\\x02\\x02\\x02\\u091B\\u091D\\x03\\x02\\x02\\x02\\u091C\\u08E1\\x03' +\r\n    '\\x02\\x02\\x02\\u091C\\u0904\\x03\\x02\\x02\\x02\\u091D\\u019F\\x03\\x02\\x02\\x02\\u091E' +\r\n    '\\u0922\\x05:\\x1E\\x02\\u091F\\u0920\\x07F\\x02\\x02\\u0920\\u0922\\x07E\\x02\\x02' +\r\n    '\\u0921\\u091E\\x03\\x02\\x02\\x02\\u0921\\u091F\\x03\\x02\\x02\\x02\\u0922\\u01A1\\x03' +\r\n    '\\x02\\x02\\x02\\u0923\\u0924\\x05\\u0186\\xC4\\x02\\u0924\\u0925\\x07C\\x02\\x02\\u0925' +\r\n    '\\u0926\\x07h\\x02\\x02\\u0926\\u0931\\x03\\x02\\x02\\x02\\u0927\\u0928\\x07*\\x02\\x02' +\r\n    '\\u0928\\u0929\\x07C\\x02\\x02\\u0929\\u0931\\x07h\\x02\\x02\\u092A\\u092B\\x05F$\\x02' +\r\n    '\\u092B\\u092C\\x07C\\x02\\x02\\u092C\\u092D\\x07*\\x02\\x02\\u092D\\u092E\\x07C\\x02' +\r\n    '\\x02\\u092E\\u092F\\x07h\\x02\\x02\\u092F\\u0931\\x03\\x02\\x02\\x02\\u0930\\u0923' +\r\n    '\\x03\\x02\\x02\\x02\\u0930\\u0927\\x03\\x02\\x02\\x02\\u0930\\u092A\\x03\\x02\\x02\\x02' +\r\n    '\\u0931\\u01A3\\x03\\x02\\x02\\x02\\u0932\\u0933\\x07C\\x02\\x02\\u0933\\u0934\\x07' +\r\n    'h\\x02\\x02\\u0934\\u01A5\\x03\\x02\\x02\\x02\\u0935\\u0936\\x07*\\x02\\x02\\u0936\\u0937' +\r\n    '\\x07C\\x02\\x02\\u0937\\u093F\\x07h\\x02\\x02\\u0938\\u0939\\x05F$\\x02\\u0939\\u093A' +\r\n    '\\x07C\\x02\\x02\\u093A\\u093B\\x07*\\x02\\x02\\u093B\\u093C\\x07C\\x02\\x02\\u093C' +\r\n    '\\u093D\\x07h\\x02\\x02\\u093D\\u093F\\x03\\x02\\x02\\x02\\u093E\\u0935\\x03\\x02\\x02' +\r\n    '\\x02\\u093E\\u0938\\x03\\x02\\x02\\x02\\u093F\\u01A7\\x03\\x02\\x02\\x02\\u0940\\u0941' +\r\n    \"\\x05L'\\x02\\u0941\\u0942\\x07?\\x02\\x02\\u0942\\u0943\\x05\\u01CA\\xE6\\x02\\u0943\" +\r\n    '\\u0944\\x07@\\x02\\x02\\u0944\\u094B\\x03\\x02\\x02\\x02\\u0945\\u0946\\x05\\u018C' +\r\n    '\\xC7\\x02\\u0946\\u0947\\x07?\\x02\\x02\\u0947\\u0948\\x05\\u01CA\\xE6\\x02\\u0948' +\r\n    '\\u0949\\x07@\\x02\\x02\\u0949\\u094B\\x03\\x02\\x02\\x02\\u094A\\u0940\\x03\\x02\\x02' +\r\n    '\\x02\\u094A\\u0945\\x03\\x02\\x02\\x02\\u094B\\u0953\\x03\\x02\\x02\\x02\\u094C\\u094D' +\r\n    '\\x05\\u018A\\xC6\\x02\\u094D\\u094E\\x07?\\x02\\x02\\u094E\\u094F\\x05\\u01CA\\xE6' +\r\n    '\\x02\\u094F\\u0950\\x07@\\x02\\x02\\u0950\\u0952\\x03\\x02\\x02\\x02\\u0951\\u094C' +\r\n    '\\x03\\x02\\x02\\x02\\u0952\\u0955\\x03\\x02\\x02\\x02\\u0953\\u0951\\x03\\x02\\x02\\x02' +\r\n    '\\u0953\\u0954\\x03\\x02\\x02\\x02\\u0954\\u01A9\\x03\\x02\\x02\\x02\\u0955\\u0953\\x03' +\r\n    '\\x02\\x02\\x02\\u0956\\u0957\\x05\\u0192\\xCA\\x02\\u0957\\u0958\\x07?\\x02\\x02\\u0958' +\r\n    '\\u0959\\x05\\u01CA\\xE6\\x02\\u0959\\u095A\\x07@\\x02\\x02\\u095A\\u0962\\x03\\x02' +\r\n    '\\x02\\x02\\u095B\\u095C\\x05\\u0190\\xC9\\x02\\u095C\\u095D\\x07?\\x02\\x02\\u095D' +\r\n    '\\u095E\\x05\\u01CA\\xE6\\x02\\u095E\\u095F\\x07@\\x02\\x02\\u095F\\u0961\\x03\\x02' +\r\n    '\\x02\\x02\\u0960\\u095B\\x03\\x02\\x02\\x02\\u0961\\u0964\\x03\\x02\\x02\\x02\\u0962' +\r\n    '\\u0960\\x03\\x02\\x02\\x02\\u0962\\u0963\\x03\\x02\\x02\\x02\\u0963\\u01AB\\x03\\x02' +\r\n    \"\\x02\\x02\\u0964\\u0962\\x03\\x02\\x02\\x02\\u0965\\u0966\\x05L'\\x02\\u0966\\u0967\" +\r\n    '\\x07?\\x02\\x02\\u0967\\u0968\\x05\\u01CA\\xE6\\x02\\u0968\\u0969\\x07@\\x02\\x02\\u0969' +\r\n    '\\u0970\\x03\\x02\\x02\\x02\\u096A\\u096B\\x05\\u0198\\xCD\\x02\\u096B\\u096C\\x07?' +\r\n    '\\x02\\x02\\u096C\\u096D\\x05\\u01CA\\xE6\\x02\\u096D\\u096E\\x07@\\x02\\x02\\u096E' +\r\n    '\\u0970\\x03\\x02\\x02\\x02\\u096F\\u0965\\x03\\x02\\x02\\x02\\u096F\\u096A\\x03\\x02' +\r\n    '\\x02\\x02\\u0970\\u0978\\x03\\x02\\x02\\x02\\u0971\\u0972\\x05\\u0196\\xCC\\x02\\u0972' +\r\n    '\\u0973\\x07?\\x02\\x02\\u0973\\u0974\\x05\\u01CA\\xE6\\x02\\u0974\\u0975\\x07@\\x02' +\r\n    '\\x02\\u0975\\u0977\\x03\\x02\\x02\\x02\\u0976\\u0971\\x03\\x02\\x02\\x02\\u0977\\u097A' +\r\n    '\\x03\\x02\\x02\\x02\\u0978\\u0976\\x03\\x02\\x02\\x02\\u0978\\u0979\\x03\\x02\\x02\\x02' +\r\n    '\\u0979\\u01AD\\x03\\x02\\x02\\x02\\u097A\\u0978\\x03\\x02\\x02\\x02\\u097B\\u097C\\x05' +\r\n    '\\u01B4\\xDB\\x02\\u097C\\u097E\\x07;\\x02\\x02\\u097D\\u097F\\x05\\u01BA\\xDE\\x02' +\r\n    '\\u097E\\u097D\\x03\\x02\\x02\\x02\\u097E\\u097F\\x03\\x02\\x02\\x02\\u097F\\u0980\\x03' +\r\n    '\\x02\\x02\\x02\\u0980\\u0981\\x07<\\x02\\x02\\u0981\\u09C0\\x03\\x02\\x02\\x02\\u0982' +\r\n    '\\u0983\\x05\\u01B0\\xD9\\x02\\u0983\\u0985\\x07C\\x02\\x02\\u0984\\u0986\\x05:\\x1E' +\r\n    '\\x02\\u0985\\u0984\\x03\\x02\\x02\\x02\\u0985\\u0986\\x03\\x02\\x02\\x02\\u0986\\u0987' +\r\n    '\\x03\\x02\\x02\\x02\\u0987\\u0988\\x05\\u01B4\\xDB\\x02\\u0988\\u098A\\x07;\\x02\\x02' +\r\n    '\\u0989\\u098B\\x05\\u01BA\\xDE\\x02\\u098A\\u0989\\x03\\x02\\x02\\x02\\u098A\\u098B' +\r\n    '\\x03\\x02\\x02\\x02\\u098B\\u098C\\x03\\x02\\x02\\x02\\u098C\\u098D\\x07<\\x02\\x02' +\r\n    \"\\u098D\\u09C0\\x03\\x02\\x02\\x02\\u098E\\u098F\\x05L'\\x02\\u098F\\u0991\\x07C\\x02\" +\r\n    '\\x02\\u0990\\u0992\\x05:\\x1E\\x02\\u0991\\u0990\\x03\\x02\\x02\\x02\\u0991\\u0992' +\r\n    '\\x03\\x02\\x02\\x02\\u0992\\u0993\\x03\\x02\\x02\\x02\\u0993\\u0994\\x05\\u01B4\\xDB' +\r\n    '\\x02\\u0994\\u0996\\x07;\\x02\\x02\\u0995\\u0997\\x05\\u01BA\\xDE\\x02\\u0996\\u0995' +\r\n    '\\x03\\x02\\x02\\x02\\u0996\\u0997\\x03\\x02\\x02\\x02\\u0997\\u0998\\x03\\x02\\x02\\x02' +\r\n    '\\u0998\\u0999\\x07<\\x02\\x02\\u0999\\u09C0\\x03\\x02\\x02\\x02\\u099A\\u099B\\x05' +\r\n    '\\u0186\\xC4\\x02\\u099B\\u099D\\x07C\\x02\\x02\\u099C\\u099E\\x05:\\x1E\\x02\\u099D' +\r\n    '\\u099C\\x03\\x02\\x02\\x02\\u099D\\u099E\\x03\\x02\\x02\\x02\\u099E\\u099F\\x03\\x02' +\r\n    '\\x02\\x02\\u099F\\u09A0\\x07h\\x02\\x02\\u09A0\\u09A2\\x07;\\x02\\x02\\u09A1\\u09A3' +\r\n    '\\x05\\u01BA\\xDE\\x02\\u09A2\\u09A1\\x03\\x02\\x02\\x02\\u09A2\\u09A3\\x03\\x02\\x02' +\r\n    '\\x02\\u09A3\\u09A4\\x03\\x02\\x02\\x02\\u09A4\\u09A5\\x07<\\x02\\x02\\u09A5\\u09C0' +\r\n    '\\x03\\x02\\x02\\x02\\u09A6\\u09A7\\x07*\\x02\\x02\\u09A7\\u09A9\\x07C\\x02\\x02\\u09A8' +\r\n    '\\u09AA\\x05:\\x1E\\x02\\u09A9\\u09A8\\x03\\x02\\x02\\x02\\u09A9\\u09AA\\x03\\x02\\x02' +\r\n    '\\x02\\u09AA\\u09AB\\x03\\x02\\x02\\x02\\u09AB\\u09AC\\x07h\\x02\\x02\\u09AC\\u09AE' +\r\n    '\\x07;\\x02\\x02\\u09AD\\u09AF\\x05\\u01BA\\xDE\\x02\\u09AE\\u09AD\\x03\\x02\\x02\\x02' +\r\n    '\\u09AE\\u09AF\\x03\\x02\\x02\\x02\\u09AF\\u09B0\\x03\\x02\\x02\\x02\\u09B0\\u09C0\\x07' +\r\n    '<\\x02\\x02\\u09B1\\u09B2\\x05F$\\x02\\u09B2\\u09B3\\x07C\\x02\\x02\\u09B3\\u09B4\\x07' +\r\n    '*\\x02\\x02\\u09B4\\u09B6\\x07C\\x02\\x02\\u09B5\\u09B7\\x05:\\x1E\\x02\\u09B6\\u09B5' +\r\n    '\\x03\\x02\\x02\\x02\\u09B6\\u09B7\\x03\\x02\\x02\\x02\\u09B7\\u09B8\\x03\\x02\\x02\\x02' +\r\n    '\\u09B8\\u09B9\\x07h\\x02\\x02\\u09B9\\u09BB\\x07;\\x02\\x02\\u09BA\\u09BC\\x05\\u01BA' +\r\n    '\\xDE\\x02\\u09BB\\u09BA\\x03\\x02\\x02\\x02\\u09BB\\u09BC\\x03\\x02\\x02\\x02\\u09BC' +\r\n    '\\u09BD\\x03\\x02\\x02\\x02\\u09BD\\u09BE\\x07<\\x02\\x02\\u09BE\\u09C0\\x03\\x02\\x02' +\r\n    '\\x02\\u09BF\\u097B\\x03\\x02\\x02\\x02\\u09BF\\u0982\\x03\\x02\\x02\\x02\\u09BF\\u098E' +\r\n    '\\x03\\x02\\x02\\x02\\u09BF\\u099A\\x03\\x02\\x02\\x02\\u09BF\\u09A6\\x03\\x02\\x02\\x02' +\r\n    '\\u09BF\\u09B1\\x03\\x02\\x02\\x02\\u09C0\\u01AF\\x03\\x02\\x02\\x02\\u09C1\\u09C2\\x05' +\r\n    '\\u01B2\\xDA\\x02\\u09C2\\u01B1\\x03\\x02\\x02\\x02\\u09C3\\u09C8\\x05\\u01B4\\xDB\\x02' +\r\n    '\\u09C4\\u09C5\\x07C\\x02\\x02\\u09C5\\u09C7\\x05\\u01B4\\xDB\\x02\\u09C6\\u09C4\\x03' +\r\n    '\\x02\\x02\\x02\\u09C7\\u09CA\\x03\\x02\\x02\\x02\\u09C8\\u09C6\\x03\\x02\\x02\\x02\\u09C8' +\r\n    '\\u09C9\\x03\\x02\\x02\\x02\\u09C9\\u01B3\\x03\\x02\\x02\\x02\\u09CA\\u09C8\\x03\\x02' +\r\n    '\\x02\\x02\\u09CB\\u09CC\\x07h\\x02\\x02\\u09CC\\u01B5\\x03\\x02\\x02\\x02\\u09CD\\u09CF' +\r\n    '\\x07C\\x02\\x02\\u09CE\\u09D0\\x05:\\x1E\\x02\\u09CF\\u09CE\\x03\\x02\\x02\\x02\\u09CF' +\r\n    '\\u09D0\\x03\\x02\\x02\\x02\\u09D0\\u09D1\\x03\\x02\\x02\\x02\\u09D1\\u09D2\\x07h\\x02' +\r\n    '\\x02\\u09D2\\u09D4\\x07;\\x02\\x02\\u09D3\\u09D5\\x05\\u01BA\\xDE\\x02\\u09D4\\u09D3' +\r\n    '\\x03\\x02\\x02\\x02\\u09D4\\u09D5\\x03\\x02\\x02\\x02\\u09D5\\u09D6\\x03\\x02\\x02\\x02' +\r\n    '\\u09D6\\u09D7\\x07<\\x02\\x02\\u09D7\\u01B7\\x03\\x02\\x02\\x02\\u09D8\\u09D9\\x05' +\r\n    '\\xACW\\x02\\u09D9\\u09DB\\x07;\\x02\\x02\\u09DA\\u09DC\\x05\\u01BA\\xDE\\x02\\u09DB' +\r\n    '\\u09DA\\x03\\x02\\x02\\x02\\u09DB\\u09DC\\x03\\x02\\x02\\x02\\u09DC\\u09DD\\x03\\x02' +\r\n    '\\x02\\x02\\u09DD\\u09DE\\x07<\\x02\\x02\\u09DE\\u0A12\\x03\\x02\\x02\\x02\\u09DF\\u09E0' +\r\n    '\\x05H%\\x02\\u09E0\\u09E2\\x07C\\x02\\x02\\u09E1\\u09E3\\x05:\\x1E\\x02\\u09E2\\u09E1' +\r\n    '\\x03\\x02\\x02\\x02\\u09E2\\u09E3\\x03\\x02\\x02\\x02\\u09E3\\u09E4\\x03\\x02\\x02\\x02' +\r\n    '\\u09E4\\u09E5\\x05\\u01B4\\xDB\\x02\\u09E5\\u09E7\\x07;\\x02\\x02\\u09E6\\u09E8\\x05' +\r\n    '\\u01BA\\xDE\\x02\\u09E7\\u09E6\\x03\\x02\\x02\\x02\\u09E7\\u09E8\\x03\\x02\\x02\\x02' +\r\n    '\\u09E8\\u09E9\\x03\\x02\\x02\\x02\\u09E9\\u09EA\\x07<\\x02\\x02\\u09EA\\u0A12\\x03' +\r\n    \"\\x02\\x02\\x02\\u09EB\\u09EC\\x05L'\\x02\\u09EC\\u09EE\\x07C\\x02\\x02\\u09ED\\u09EF\" +\r\n    '\\x05:\\x1E\\x02\\u09EE\\u09ED\\x03\\x02\\x02\\x02\\u09EE\\u09EF\\x03\\x02\\x02\\x02' +\r\n    '\\u09EF\\u09F0\\x03\\x02\\x02\\x02\\u09F0\\u09F1\\x05\\u01B4\\xDB\\x02\\u09F1\\u09F3' +\r\n    '\\x07;\\x02\\x02\\u09F2\\u09F4\\x05\\u01BA\\xDE\\x02\\u09F3\\u09F2\\x03\\x02\\x02\\x02' +\r\n    '\\u09F3\\u09F4\\x03\\x02\\x02\\x02\\u09F4\\u09F5\\x03\\x02\\x02\\x02\\u09F5\\u09F6\\x07' +\r\n    '<\\x02\\x02\\u09F6\\u0A12\\x03\\x02\\x02\\x02\\u09F7\\u09F8\\x07*\\x02\\x02\\u09F8\\u09FA' +\r\n    '\\x07C\\x02\\x02\\u09F9\\u09FB\\x05:\\x1E\\x02\\u09FA\\u09F9\\x03\\x02\\x02\\x02\\u09FA' +\r\n    '\\u09FB\\x03\\x02\\x02\\x02\\u09FB\\u09FC\\x03\\x02\\x02\\x02\\u09FC\\u09FD\\x05\\u01B4' +\r\n    '\\xDB\\x02\\u09FD\\u09FF\\x07;\\x02\\x02\\u09FE\\u0A00\\x05\\u01BA\\xDE\\x02\\u09FF' +\r\n    '\\u09FE\\x03\\x02\\x02\\x02\\u09FF\\u0A00\\x03\\x02\\x02\\x02\\u0A00\\u0A01\\x03\\x02' +\r\n    '\\x02\\x02\\u0A01\\u0A02\\x07<\\x02\\x02\\u0A02\\u0A12\\x03\\x02\\x02\\x02\\u0A03\\u0A04' +\r\n    '\\x05H%\\x02\\u0A04\\u0A05\\x07C\\x02\\x02\\u0A05\\u0A06\\x07*\\x02\\x02\\u0A06\\u0A08' +\r\n    '\\x07C\\x02\\x02\\u0A07\\u0A09\\x05:\\x1E\\x02\\u0A08\\u0A07\\x03\\x02\\x02\\x02\\u0A08' +\r\n    '\\u0A09\\x03\\x02\\x02\\x02\\u0A09\\u0A0A\\x03\\x02\\x02\\x02\\u0A0A\\u0A0B\\x05\\u01B4' +\r\n    '\\xDB\\x02\\u0A0B\\u0A0D\\x07;\\x02\\x02\\u0A0C\\u0A0E\\x05\\u01BA\\xDE\\x02\\u0A0D' +\r\n    '\\u0A0C\\x03\\x02\\x02\\x02\\u0A0D\\u0A0E\\x03\\x02\\x02\\x02\\u0A0E\\u0A0F\\x03\\x02' +\r\n    '\\x02\\x02\\u0A0F\\u0A10\\x07<\\x02\\x02\\u0A10\\u0A12\\x03\\x02\\x02\\x02\\u0A11\\u09D8' +\r\n    '\\x03\\x02\\x02\\x02\\u0A11\\u09DF\\x03\\x02\\x02\\x02\\u0A11\\u09EB\\x03\\x02\\x02\\x02' +\r\n    '\\u0A11\\u09F7\\x03\\x02\\x02\\x02\\u0A11\\u0A03\\x03\\x02\\x02\\x02\\u0A12\\u01B9\\x03' +\r\n    '\\x02\\x02\\x02\\u0A13\\u0A18\\x05\\u01CA\\xE6\\x02\\u0A14\\u0A15\\x07B\\x02\\x02\\u0A15' +\r\n    '\\u0A17\\x05\\u01CA\\xE6\\x02\\u0A16\\u0A14\\x03\\x02\\x02\\x02\\u0A17\\u0A1A\\x03\\x02' +\r\n    '\\x02\\x02\\u0A18\\u0A16\\x03\\x02\\x02\\x02\\u0A18\\u0A19\\x03\\x02\\x02\\x02\\u0A19' +\r\n    \"\\u01BB\\x03\\x02\\x02\\x02\\u0A1A\\u0A18\\x03\\x02\\x02\\x02\\u0A1B\\u0A1C\\x05L'\" +\r\n    '\\x02\\u0A1C\\u0A1E\\x07\\\\\\x02\\x02\\u0A1D\\u0A1F\\x05:\\x1E\\x02\\u0A1E\\u0A1D\\x03' +\r\n    '\\x02\\x02\\x02\\u0A1E\\u0A1F\\x03\\x02\\x02\\x02\\u0A1F\\u0A20\\x03\\x02\\x02\\x02\\u0A20' +\r\n    '\\u0A21\\x07h\\x02\\x02\\u0A21\\u0A4B\\x03\\x02\\x02\\x02\\u0A22\\u0A23\\x05\\x1C\\x0F' +\r\n    '\\x02\\u0A23\\u0A25\\x07\\\\\\x02\\x02\\u0A24\\u0A26\\x05:\\x1E\\x02\\u0A25\\u0A24\\x03' +\r\n    '\\x02\\x02\\x02\\u0A25\\u0A26\\x03\\x02\\x02\\x02\\u0A26\\u0A27\\x03\\x02\\x02\\x02\\u0A27' +\r\n    '\\u0A28\\x07h\\x02\\x02\\u0A28\\u0A4B\\x03\\x02\\x02\\x02\\u0A29\\u0A2A\\x05\\u0186' +\r\n    '\\xC4\\x02\\u0A2A\\u0A2C\\x07\\\\\\x02\\x02\\u0A2B\\u0A2D\\x05:\\x1E\\x02\\u0A2C\\u0A2B' +\r\n    '\\x03\\x02\\x02\\x02\\u0A2C\\u0A2D\\x03\\x02\\x02\\x02\\u0A2D\\u0A2E\\x03\\x02\\x02\\x02' +\r\n    '\\u0A2E\\u0A2F\\x07h\\x02\\x02\\u0A2F\\u0A4B\\x03\\x02\\x02\\x02\\u0A30\\u0A31\\x07' +\r\n    '*\\x02\\x02\\u0A31\\u0A33\\x07\\\\\\x02\\x02\\u0A32\\u0A34\\x05:\\x1E\\x02\\u0A33\\u0A32' +\r\n    '\\x03\\x02\\x02\\x02\\u0A33\\u0A34\\x03\\x02\\x02\\x02\\u0A34\\u0A35\\x03\\x02\\x02\\x02' +\r\n    '\\u0A35\\u0A4B\\x07h\\x02\\x02\\u0A36\\u0A37\\x05F$\\x02\\u0A37\\u0A38\\x07C\\x02\\x02' +\r\n    '\\u0A38\\u0A39\\x07*\\x02\\x02\\u0A39\\u0A3B\\x07\\\\\\x02\\x02\\u0A3A\\u0A3C\\x05:\\x1E' +\r\n    '\\x02\\u0A3B\\u0A3A\\x03\\x02\\x02\\x02\\u0A3B\\u0A3C\\x03\\x02\\x02\\x02\\u0A3C\\u0A3D' +\r\n    '\\x03\\x02\\x02\\x02\\u0A3D\\u0A3E\\x07h\\x02\\x02\\u0A3E\\u0A4B\\x03\\x02\\x02\\x02' +\r\n    '\\u0A3F\\u0A40\\x05 \\x11\\x02\\u0A40\\u0A42\\x07\\\\\\x02\\x02\\u0A41\\u0A43\\x05:\\x1E' +\r\n    '\\x02\\u0A42\\u0A41\\x03\\x02\\x02\\x02\\u0A42\\u0A43\\x03\\x02\\x02\\x02\\u0A43\\u0A44' +\r\n    '\\x03\\x02\\x02\\x02\\u0A44\\u0A45\\x07!\\x02\\x02\\u0A45\\u0A4B\\x03\\x02\\x02\\x02' +\r\n    '\\u0A46\\u0A47\\x05.\\x18\\x02\\u0A47\\u0A48\\x07\\\\\\x02\\x02\\u0A48\\u0A49\\x07!\\x02' +\r\n    '\\x02\\u0A49\\u0A4B\\x03\\x02\\x02\\x02\\u0A4A\\u0A1B\\x03\\x02\\x02\\x02\\u0A4A\\u0A22' +\r\n    '\\x03\\x02\\x02\\x02\\u0A4A\\u0A29\\x03\\x02\\x02\\x02\\u0A4A\\u0A30\\x03\\x02\\x02\\x02' +\r\n    '\\u0A4A\\u0A36\\x03\\x02\\x02\\x02\\u0A4A\\u0A3F\\x03\\x02\\x02\\x02\\u0A4A\\u0A46\\x03' +\r\n    '\\x02\\x02\\x02\\u0A4B\\u01BD\\x03\\x02\\x02\\x02\\u0A4C\\u0A4E\\x07\\\\\\x02\\x02\\u0A4D' +\r\n    '\\u0A4F\\x05:\\x1E\\x02\\u0A4E\\u0A4D\\x03\\x02\\x02\\x02\\u0A4E\\u0A4F\\x03\\x02\\x02' +\r\n    '\\x02\\u0A4F\\u0A50\\x03\\x02\\x02\\x02\\u0A50\\u0A51\\x07h\\x02\\x02\\u0A51\\u01BF' +\r\n    \"\\x03\\x02\\x02\\x02\\u0A52\\u0A53\\x05L'\\x02\\u0A53\\u0A55\\x07\\\\\\x02\\x02\\u0A54\" +\r\n    '\\u0A56\\x05:\\x1E\\x02\\u0A55\\u0A54\\x03\\x02\\x02\\x02\\u0A55\\u0A56\\x03\\x02\\x02' +\r\n    '\\x02\\u0A56\\u0A57\\x03\\x02\\x02\\x02\\u0A57\\u0A58\\x07h\\x02\\x02\\u0A58\\u0A7B' +\r\n    '\\x03\\x02\\x02\\x02\\u0A59\\u0A5A\\x05\\x1C\\x0F\\x02\\u0A5A\\u0A5C\\x07\\\\\\x02\\x02' +\r\n    '\\u0A5B\\u0A5D\\x05:\\x1E\\x02\\u0A5C\\u0A5B\\x03\\x02\\x02\\x02\\u0A5C\\u0A5D\\x03' +\r\n    '\\x02\\x02\\x02\\u0A5D\\u0A5E\\x03\\x02\\x02\\x02\\u0A5E\\u0A5F\\x07h\\x02\\x02\\u0A5F' +\r\n    '\\u0A7B\\x03\\x02\\x02\\x02\\u0A60\\u0A61\\x07*\\x02\\x02\\u0A61\\u0A63\\x07\\\\\\x02' +\r\n    '\\x02\\u0A62\\u0A64\\x05:\\x1E\\x02\\u0A63\\u0A62\\x03\\x02\\x02\\x02\\u0A63\\u0A64' +\r\n    '\\x03\\x02\\x02\\x02\\u0A64\\u0A65\\x03\\x02\\x02\\x02\\u0A65\\u0A7B\\x07h\\x02\\x02' +\r\n    '\\u0A66\\u0A67\\x05F$\\x02\\u0A67\\u0A68\\x07C\\x02\\x02\\u0A68\\u0A69\\x07*\\x02\\x02' +\r\n    '\\u0A69\\u0A6B\\x07\\\\\\x02\\x02\\u0A6A\\u0A6C\\x05:\\x1E\\x02\\u0A6B\\u0A6A\\x03\\x02' +\r\n    '\\x02\\x02\\u0A6B\\u0A6C\\x03\\x02\\x02\\x02\\u0A6C\\u0A6D\\x03\\x02\\x02\\x02\\u0A6D' +\r\n    '\\u0A6E\\x07h\\x02\\x02\\u0A6E\\u0A7B\\x03\\x02\\x02\\x02\\u0A6F\\u0A70\\x05 \\x11\\x02' +\r\n    '\\u0A70\\u0A72\\x07\\\\\\x02\\x02\\u0A71\\u0A73\\x05:\\x1E\\x02\\u0A72\\u0A71\\x03\\x02' +\r\n    '\\x02\\x02\\u0A72\\u0A73\\x03\\x02\\x02\\x02\\u0A73\\u0A74\\x03\\x02\\x02\\x02\\u0A74' +\r\n    '\\u0A75\\x07!\\x02\\x02\\u0A75\\u0A7B\\x03\\x02\\x02\\x02\\u0A76\\u0A77\\x05.\\x18\\x02' +\r\n    '\\u0A77\\u0A78\\x07\\\\\\x02\\x02\\u0A78\\u0A79\\x07!\\x02\\x02\\u0A79\\u0A7B\\x03\\x02' +\r\n    '\\x02\\x02\\u0A7A\\u0A52\\x03\\x02\\x02\\x02\\u0A7A\\u0A59\\x03\\x02\\x02\\x02\\u0A7A' +\r\n    '\\u0A60\\x03\\x02\\x02\\x02\\u0A7A\\u0A66\\x03\\x02\\x02\\x02\\u0A7A\\u0A6F\\x03\\x02' +\r\n    '\\x02\\x02\\u0A7A\\u0A76\\x03\\x02\\x02\\x02\\u0A7B\\u01C1\\x03\\x02\\x02\\x02\\u0A7C' +\r\n    '\\u0A7D\\x07!\\x02\\x02\\u0A7D\\u0A7E\\x05\\x14\\v\\x02\\u0A7E\\u0A80\\x05\\u01C4\\xE3' +\r\n    '\\x02\\u0A7F\\u0A81\\x050\\x19\\x02\\u0A80\\u0A7F\\x03\\x02\\x02\\x02\\u0A80\\u0A81' +\r\n    '\\x03\\x02\\x02\\x02\\u0A81\\u0A93\\x03\\x02\\x02\\x02\\u0A82\\u0A83\\x07!\\x02\\x02' +\r\n    '\\u0A83\\u0A84\\x05\\x1E\\x10\\x02\\u0A84\\u0A86\\x05\\u01C4\\xE3\\x02\\u0A85\\u0A87' +\r\n    '\\x050\\x19\\x02\\u0A86\\u0A85\\x03\\x02\\x02\\x02\\u0A86\\u0A87\\x03\\x02\\x02\\x02' +\r\n    '\\u0A87\\u0A93\\x03\\x02\\x02\\x02\\u0A88\\u0A89\\x07!\\x02\\x02\\u0A89\\u0A8A\\x05' +\r\n    '\\x14\\v\\x02\\u0A8A\\u0A8B\\x050\\x19\\x02\\u0A8B\\u0A8C\\x05\\u011E\\x90\\x02\\u0A8C' +\r\n    '\\u0A93\\x03\\x02\\x02\\x02\\u0A8D\\u0A8E\\x07!\\x02\\x02\\u0A8E\\u0A8F\\x05\\x1E\\x10' +\r\n    '\\x02\\u0A8F\\u0A90\\x050\\x19\\x02\\u0A90\\u0A91\\x05\\u011E\\x90\\x02\\u0A91\\u0A93' +\r\n    '\\x03\\x02\\x02\\x02\\u0A92\\u0A7C\\x03\\x02\\x02\\x02\\u0A92\\u0A82\\x03\\x02\\x02\\x02' +\r\n    '\\u0A92\\u0A88\\x03\\x02\\x02\\x02\\u0A92\\u0A8D\\x03\\x02\\x02\\x02\\u0A93\\u01C3\\x03' +\r\n    '\\x02\\x02\\x02\\u0A94\\u0A98\\x05\\u01C6\\xE4\\x02\\u0A95\\u0A97\\x05\\u01C6\\xE4\\x02' +\r\n    '\\u0A96\\u0A95\\x03\\x02\\x02\\x02\\u0A97\\u0A9A\\x03\\x02\\x02\\x02\\u0A98\\u0A96\\x03' +\r\n    '\\x02\\x02\\x02\\u0A98\\u0A99\\x03\\x02\\x02\\x02\\u0A99\\u01C5\\x03\\x02\\x02\\x02\\u0A9A' +\r\n    '\\u0A98\\x03\\x02\\x02\\x02\\u0A9B\\u0A9D\\x05\\u010C\\x87\\x02\\u0A9C\\u0A9B\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9D\\u0AA0\\x03\\x02\\x02\\x02\\u0A9E\\u0A9C\\x03\\x02\\x02\\x02\\u0A9E' +\r\n    '\\u0A9F\\x03\\x02\\x02\\x02\\u0A9F\\u0AA1\\x03\\x02\\x02\\x02\\u0AA0\\u0A9E\\x03\\x02' +\r\n    '\\x02\\x02\\u0AA1\\u0AA2\\x07?\\x02\\x02\\u0AA2\\u0AA3\\x05\\u01CA\\xE6\\x02\\u0AA3' +\r\n    '\\u0AA4\\x07@\\x02\\x02\\u0AA4\\u01C7\\x03\\x02\\x02\\x02\\u0AA5\\u0AA6\\x05\\u01CA' +\r\n    '\\xE6\\x02\\u0AA6\\u01C9\\x03\\x02\\x02\\x02\\u0AA7\\u0AAA\\x05\\u01CC\\xE7\\x02\\u0AA8' +\r\n    '\\u0AAA\\x05\\u01D4\\xEB\\x02\\u0AA9\\u0AA7\\x03\\x02\\x02\\x02\\u0AA9\\u0AA8\\x03\\x02' +\r\n    '\\x02\\x02\\u0AAA\\u01CB\\x03\\x02\\x02\\x02\\u0AAB\\u0AAC\\x05\\u01CE\\xE8\\x02\\u0AAC' +\r\n    '\\u0AAD\\x07[\\x02\\x02\\u0AAD\\u0AAE\\x05\\u01D2\\xEA\\x02\\u0AAE\\u01CD\\x03\\x02' +\r\n    '\\x02\\x02\\u0AAF\\u0ABA\\x07h\\x02\\x02\\u0AB0\\u0AB2\\x07;\\x02\\x02\\u0AB1\\u0AB3' +\r\n    '\\x05\\xAEX\\x02\\u0AB2\\u0AB1\\x03\\x02\\x02\\x02\\u0AB2\\u0AB3\\x03\\x02\\x02\\x02' +\r\n    '\\u0AB3\\u0AB4\\x03\\x02\\x02\\x02\\u0AB4\\u0ABA\\x07<\\x02\\x02\\u0AB5\\u0AB6\\x07' +\r\n    ';\\x02\\x02\\u0AB6\\u0AB7\\x05\\u01D0\\xE9\\x02\\u0AB7\\u0AB8\\x07<\\x02\\x02\\u0AB8' +\r\n    '\\u0ABA\\x03\\x02\\x02\\x02\\u0AB9\\u0AAF\\x03\\x02\\x02\\x02\\u0AB9\\u0AB0\\x03\\x02' +\r\n    '\\x02\\x02\\u0AB9\\u0AB5\\x03\\x02\\x02\\x02\\u0ABA\\u01CF\\x03\\x02\\x02\\x02\\u0ABB' +\r\n    '\\u0AC0\\x07h\\x02\\x02\\u0ABC\\u0ABD\\x07B\\x02\\x02\\u0ABD\\u0ABF\\x07h\\x02\\x02' +\r\n    '\\u0ABE\\u0ABC\\x03\\x02\\x02\\x02\\u0ABF\\u0AC2\\x03\\x02\\x02\\x02\\u0AC0\\u0ABE\\x03' +\r\n    '\\x02\\x02\\x02\\u0AC0\\u0AC1\\x03\\x02\\x02\\x02\\u0AC1\\u01D1\\x03\\x02\\x02\\x02\\u0AC2' +\r\n    '\\u0AC0\\x03\\x02\\x02\\x02\\u0AC3\\u0AC6\\x05\\u01CA\\xE6\\x02\\u0AC4\\u0AC6\\x05\\u0122' +\r\n    '\\x92\\x02\\u0AC5\\u0AC3\\x03\\x02\\x02\\x02\\u0AC5\\u0AC4\\x03\\x02\\x02\\x02\\u0AC6' +\r\n    '\\u01D3\\x03\\x02\\x02\\x02\\u0AC7\\u0ACA\\x05\\u01DC\\xEF\\x02\\u0AC8\\u0ACA\\x05\\u01D6' +\r\n    '\\xEC\\x02\\u0AC9\\u0AC7\\x03\\x02\\x02\\x02\\u0AC9\\u0AC8\\x03\\x02\\x02\\x02\\u0ACA' +\r\n    '\\u01D5\\x03\\x02\\x02\\x02\\u0ACB\\u0ACC\\x05\\u01D8\\xED\\x02\\u0ACC\\u0ACD\\x05\\u01DA' +\r\n    '\\xEE\\x02\\u0ACD\\u0ACE\\x05\\u01CA\\xE6\\x02\\u0ACE\\u01D7\\x03\\x02\\x02\\x02\\u0ACF' +\r\n    \"\\u0AD3\\x05L'\\x02\\u0AD0\\u0AD3\\x05\\u01A2\\xD2\\x02\\u0AD1\\u0AD3\\x05\\u01A8\" +\r\n    '\\xD5\\x02\\u0AD2\\u0ACF\\x03\\x02\\x02\\x02\\u0AD2\\u0AD0\\x03\\x02\\x02\\x02\\u0AD2' +\r\n    '\\u0AD1\\x03\\x02\\x02\\x02\\u0AD3\\u01D9\\x03\\x02\\x02\\x02\\u0AD4\\u0AD5\\t\\x04\\x02' +\r\n    '\\x02\\u0AD5\\u01DB\\x03\\x02\\x02\\x02\\u0AD6\\u0ADE\\x05\\u01E0\\xF1\\x02\\u0AD7\\u0AD8' +\r\n    '\\x05\\u01E0\\xF1\\x02\\u0AD8\\u0AD9\\x07I\\x02\\x02\\u0AD9\\u0ADA\\x05\\u01CA\\xE6' +\r\n    '\\x02\\u0ADA\\u0ADB\\x07J\\x02\\x02\\u0ADB\\u0ADC\\x05\\u01DC\\xEF\\x02\\u0ADC\\u0ADE' +\r\n    '\\x03\\x02\\x02\\x02\\u0ADD\\u0AD6\\x03\\x02\\x02\\x02\\u0ADD\\u0AD7\\x03\\x02\\x02\\x02' +\r\n    '\\u0ADE\\u01DD\\x03\\x02\\x02\\x02\\u0ADF\\u0AE0\\x07P\\x02\\x02\\u0AE0\\u01DF\\x03' +\r\n    '\\x02\\x02\\x02\\u0AE1\\u0AE2\\b\\xF1\\x01\\x02\\u0AE2\\u0AE3\\x05\\u01E4\\xF3\\x02\\u0AE3' +\r\n    '\\u0AEA\\x03\\x02\\x02\\x02\\u0AE4\\u0AE5\\f\\x03\\x02\\x02\\u0AE5\\u0AE6\\x05\\u01DE' +\r\n    '\\xF0\\x02\\u0AE6\\u0AE7\\x05\\u01E4\\xF3\\x02\\u0AE7\\u0AE9\\x03\\x02\\x02\\x02\\u0AE8' +\r\n    '\\u0AE4\\x03\\x02\\x02\\x02\\u0AE9\\u0AEC\\x03\\x02\\x02\\x02\\u0AEA\\u0AE8\\x03\\x02' +\r\n    '\\x02\\x02\\u0AEA\\u0AEB\\x03\\x02\\x02\\x02\\u0AEB\\u01E1\\x03\\x02\\x02\\x02\\u0AEC' +\r\n    '\\u0AEA\\x03\\x02\\x02\\x02\\u0AED';\r\nJava8Parser._serializedATNSegment5 = '\\u0AEE\\x07O\\x02\\x02\\u0AEE\\u01E3\\x03\\x02\\x02\\x02\\u0AEF\\u0AF0\\b\\xF3\\x01' +\r\n    '\\x02\\u0AF0\\u0AF1\\x05\\u01E8\\xF5\\x02\\u0AF1\\u0AF8\\x03\\x02\\x02\\x02\\u0AF2\\u0AF3' +\r\n    '\\f\\x03\\x02\\x02\\u0AF3\\u0AF4\\x05\\u01E2\\xF2\\x02\\u0AF4\\u0AF5\\x05\\u01E8\\xF5' +\r\n    '\\x02\\u0AF5\\u0AF7\\x03\\x02\\x02\\x02\\u0AF6\\u0AF2\\x03\\x02\\x02\\x02\\u0AF7\\u0AFA' +\r\n    '\\x03\\x02\\x02\\x02\\u0AF8\\u0AF6\\x03\\x02\\x02\\x02\\u0AF8\\u0AF9\\x03\\x02\\x02\\x02' +\r\n    '\\u0AF9\\u01E5\\x03\\x02\\x02\\x02\\u0AFA\\u0AF8\\x03\\x02\\x02\\x02\\u0AFB\\u0AFC\\x07' +\r\n    'X\\x02\\x02\\u0AFC\\u01E7\\x03\\x02\\x02\\x02\\u0AFD\\u0AFE\\b\\xF5\\x01\\x02\\u0AFE' +\r\n    '\\u0AFF\\x05\\u01EC\\xF7\\x02\\u0AFF\\u0B06\\x03\\x02\\x02\\x02\\u0B00\\u0B01\\f\\x03' +\r\n    '\\x02\\x02\\u0B01\\u0B02\\x05\\u01E6\\xF4\\x02\\u0B02\\u0B03\\x05\\u01EC\\xF7\\x02\\u0B03' +\r\n    '\\u0B05\\x03\\x02\\x02\\x02\\u0B04\\u0B00\\x03\\x02\\x02\\x02\\u0B05\\u0B08\\x03\\x02' +\r\n    '\\x02\\x02\\u0B06\\u0B04\\x03\\x02\\x02\\x02\\u0B06\\u0B07\\x03\\x02\\x02\\x02\\u0B07' +\r\n    '\\u01E9\\x03\\x02\\x02\\x02\\u0B08\\u0B06\\x03\\x02\\x02\\x02\\u0B09\\u0B0A\\x07Y\\x02' +\r\n    '\\x02\\u0B0A\\u01EB\\x03\\x02\\x02\\x02\\u0B0B\\u0B0C\\b\\xF7\\x01\\x02\\u0B0C\\u0B0D' +\r\n    '\\x05\\u01F0\\xF9\\x02\\u0B0D\\u0B14\\x03\\x02\\x02\\x02\\u0B0E\\u0B0F\\f\\x03\\x02\\x02' +\r\n    '\\u0B0F\\u0B10\\x05\\u01EA\\xF6\\x02\\u0B10\\u0B11\\x05\\u01F0\\xF9\\x02\\u0B11\\u0B13' +\r\n    '\\x03\\x02\\x02\\x02\\u0B12\\u0B0E\\x03\\x02\\x02\\x02\\u0B13\\u0B16\\x03\\x02\\x02\\x02' +\r\n    '\\u0B14\\u0B12\\x03\\x02\\x02\\x02\\u0B14\\u0B15\\x03\\x02\\x02\\x02\\u0B15\\u01ED\\x03' +\r\n    '\\x02\\x02\\x02\\u0B16\\u0B14\\x03\\x02\\x02\\x02\\u0B17\\u0B18\\x07W\\x02\\x02\\u0B18' +\r\n    '\\u01EF\\x03\\x02\\x02\\x02\\u0B19\\u0B1A\\b\\xF9\\x01\\x02\\u0B1A\\u0B1B\\x05\\u01F6' +\r\n    '\\xFC\\x02\\u0B1B\\u0B22\\x03\\x02\\x02\\x02\\u0B1C\\u0B1D\\f\\x03\\x02\\x02\\u0B1D\\u0B1E' +\r\n    '\\x05\\u01EE\\xF8\\x02\\u0B1E\\u0B1F\\x05\\u01F6\\xFC\\x02\\u0B1F\\u0B21\\x03\\x02\\x02' +\r\n    '\\x02\\u0B20\\u0B1C\\x03\\x02\\x02\\x02\\u0B21\\u0B24\\x03\\x02\\x02\\x02\\u0B22\\u0B20' +\r\n    '\\x03\\x02\\x02\\x02\\u0B22\\u0B23\\x03\\x02\\x02\\x02\\u0B23\\u01F1\\x03\\x02\\x02\\x02' +\r\n    '\\u0B24\\u0B22\\x03\\x02\\x02\\x02\\u0B25\\u0B26\\x07K\\x02\\x02\\u0B26\\u01F3\\x03' +\r\n    '\\x02\\x02\\x02\\u0B27\\u0B28\\x07N\\x02\\x02\\u0B28\\u01F5\\x03\\x02\\x02\\x02\\u0B29' +\r\n    '\\u0B2A\\b\\xFC\\x01\\x02\\u0B2A\\u0B2B\\x05\\u0202\\u0102\\x02\\u0B2B\\u0B36\\x03\\x02' +\r\n    '\\x02\\x02\\u0B2C\\u0B2D\\f\\x04\\x02\\x02\\u0B2D\\u0B2E\\x05\\u01F2\\xFA\\x02\\u0B2E' +\r\n    '\\u0B2F\\x05\\u0202\\u0102\\x02\\u0B2F\\u0B35\\x03\\x02\\x02\\x02\\u0B30\\u0B31\\f\\x03' +\r\n    '\\x02\\x02\\u0B31\\u0B32\\x05\\u01F4\\xFB\\x02\\u0B32\\u0B33\\x05\\u0202\\u0102\\x02' +\r\n    '\\u0B33\\u0B35\\x03\\x02\\x02\\x02\\u0B34\\u0B2C\\x03\\x02\\x02\\x02\\u0B34\\u0B30\\x03' +\r\n    '\\x02\\x02\\x02\\u0B35\\u0B38\\x03\\x02\\x02\\x02\\u0B36\\u0B34\\x03\\x02\\x02\\x02\\u0B36' +\r\n    '\\u0B37\\x03\\x02\\x02\\x02\\u0B37\\u01F7\\x03\\x02\\x02\\x02\\u0B38\\u0B36\\x03\\x02' +\r\n    '\\x02\\x02\\u0B39\\u0B3A\\x07F\\x02\\x02\\u0B3A\\u01F9\\x03\\x02\\x02\\x02\\u0B3B\\u0B3C' +\r\n    '\\x07E\\x02\\x02\\u0B3C\\u01FB\\x03\\x02\\x02\\x02\\u0B3D\\u0B3E\\x07L\\x02\\x02\\u0B3E' +\r\n    '\\u01FD\\x03\\x02\\x02\\x02\\u0B3F\\u0B40\\x07M\\x02\\x02\\u0B40\\u01FF\\x03\\x02\\x02' +\r\n    '\\x02\\u0B41\\u0B42\\x07\\x1C\\x02\\x02\\u0B42\\u0201\\x03\\x02\\x02\\x02\\u0B43\\u0B44' +\r\n    '\\b\\u0102\\x01\\x02\\u0B44\\u0B45\\x05\\u020A\\u0106\\x02\\u0B45\\u0B5C\\x03\\x02\\x02' +\r\n    '\\x02\\u0B46\\u0B47\\f\\x07\\x02\\x02\\u0B47\\u0B48\\x05\\u01F8\\xFD\\x02\\u0B48\\u0B49' +\r\n    '\\x05\\u020A\\u0106\\x02\\u0B49\\u0B5B\\x03\\x02\\x02\\x02\\u0B4A\\u0B4B\\f\\x06\\x02' +\r\n    '\\x02\\u0B4B\\u0B4C\\x05\\u01FA\\xFE\\x02\\u0B4C\\u0B4D\\x05\\u020A\\u0106\\x02\\u0B4D' +\r\n    '\\u0B5B\\x03\\x02\\x02\\x02\\u0B4E\\u0B4F\\f\\x05\\x02\\x02\\u0B4F\\u0B50\\x05\\u01FC' +\r\n    '\\xFF\\x02\\u0B50\\u0B51\\x05\\u020A\\u0106\\x02\\u0B51\\u0B5B\\x03\\x02\\x02\\x02\\u0B52' +\r\n    '\\u0B53\\f\\x04\\x02\\x02\\u0B53\\u0B54\\x05\\u01FE\\u0100\\x02\\u0B54\\u0B55\\x05\\u020A' +\r\n    '\\u0106\\x02\\u0B55\\u0B5B\\x03\\x02\\x02\\x02\\u0B56\\u0B57\\f\\x03\\x02\\x02\\u0B57' +\r\n    '\\u0B58\\x05\\u0200\\u0101\\x02\\u0B58\\u0B59\\x05\\x1C\\x0F\\x02\\u0B59\\u0B5B\\x03' +\r\n    '\\x02\\x02\\x02\\u0B5A\\u0B46\\x03\\x02\\x02\\x02\\u0B5A\\u0B4A\\x03\\x02\\x02\\x02\\u0B5A' +\r\n    '\\u0B4E\\x03\\x02\\x02\\x02\\u0B5A\\u0B52\\x03\\x02\\x02\\x02\\u0B5A\\u0B56\\x03\\x02' +\r\n    '\\x02\\x02\\u0B5B\\u0B5E\\x03\\x02\\x02\\x02\\u0B5C\\u0B5A\\x03\\x02\\x02\\x02\\u0B5C' +\r\n    '\\u0B5D\\x03\\x02\\x02\\x02\\u0B5D\\u0203\\x03\\x02\\x02\\x02\\u0B5E\\u0B5C\\x03\\x02' +\r\n    '\\x02\\x02\\u0B5F\\u0B60\\x07F\\x02\\x02\\u0B60\\u0B61\\x07F\\x02\\x02\\u0B61\\u0205' +\r\n    '\\x03\\x02\\x02\\x02\\u0B62\\u0B63\\x07E\\x02\\x02\\u0B63\\u0B64\\x07E\\x02\\x02\\u0B64' +\r\n    '\\u0207\\x03\\x02\\x02\\x02\\u0B65\\u0B66\\x07E\\x02\\x02\\u0B66\\u0B67\\x07E\\x02\\x02' +\r\n    '\\u0B67\\u0B68\\x07E\\x02\\x02\\u0B68\\u0209\\x03\\x02\\x02\\x02\\u0B69\\u0B6A\\b\\u0106' +\r\n    '\\x01\\x02\\u0B6A\\u0B6B\\x05\\u020C\\u0107\\x02\\u0B6B\\u0B7A\\x03\\x02\\x02\\x02\\u0B6C' +\r\n    '\\u0B6D\\f\\x05\\x02\\x02\\u0B6D\\u0B6E\\x05\\u0204\\u0103\\x02\\u0B6E\\u0B6F\\x05\\u020C' +\r\n    '\\u0107\\x02\\u0B6F\\u0B79\\x03\\x02\\x02\\x02\\u0B70\\u0B71\\f\\x04\\x02\\x02\\u0B71' +\r\n    '\\u0B72\\x05\\u0206\\u0104\\x02\\u0B72\\u0B73\\x05\\u020C\\u0107\\x02\\u0B73\\u0B79' +\r\n    '\\x03\\x02\\x02\\x02\\u0B74\\u0B75\\f\\x03\\x02\\x02\\u0B75\\u0B76\\x05\\u0208\\u0105' +\r\n    '\\x02\\u0B76\\u0B77\\x05\\u020C\\u0107\\x02\\u0B77\\u0B79\\x03\\x02\\x02\\x02\\u0B78' +\r\n    '\\u0B6C\\x03\\x02\\x02\\x02\\u0B78\\u0B70\\x03\\x02\\x02\\x02\\u0B78\\u0B74\\x03\\x02' +\r\n    '\\x02\\x02\\u0B79\\u0B7C\\x03\\x02\\x02\\x02\\u0B7A\\u0B78\\x03\\x02\\x02\\x02\\u0B7A' +\r\n    '\\u0B7B\\x03\\x02\\x02\\x02\\u0B7B\\u020B\\x03\\x02\\x02\\x02\\u0B7C\\u0B7A\\x03\\x02' +\r\n    '\\x02\\x02\\u0B7D\\u0B7E\\b\\u0107\\x01\\x02\\u0B7E\\u0B7F\\x05\\u0214\\u010B\\x02\\u0B7F' +\r\n    '\\u0B8A\\x03\\x02\\x02\\x02\\u0B80\\u0B81\\f\\x04\\x02\\x02\\u0B81\\u0B82\\x05\\u0216' +\r\n    '\\u010C\\x02\\u0B82\\u0B83\\x05\\u0214\\u010B\\x02\\u0B83\\u0B89\\x03\\x02\\x02\\x02' +\r\n    '\\u0B84\\u0B85\\f\\x03\\x02\\x02\\u0B85\\u0B86\\x05\\u0218\\u010D\\x02\\u0B86\\u0B87' +\r\n    '\\x05\\u0214\\u010B\\x02\\u0B87\\u0B89\\x03\\x02\\x02\\x02\\u0B88\\u0B80\\x03\\x02\\x02' +\r\n    '\\x02\\u0B88\\u0B84\\x03\\x02\\x02\\x02\\u0B89\\u0B8C\\x03\\x02\\x02\\x02\\u0B8A\\u0B88' +\r\n    '\\x03\\x02\\x02\\x02\\u0B8A\\u0B8B\\x03\\x02\\x02\\x02\\u0B8B\\u020D\\x03\\x02\\x02\\x02' +\r\n    '\\u0B8C\\u0B8A\\x03\\x02\\x02\\x02\\u0B8D\\u0B8E\\x07U\\x02\\x02\\u0B8E\\u020F\\x03' +\r\n    '\\x02\\x02\\x02\\u0B8F\\u0B90\\x07V\\x02\\x02\\u0B90\\u0211\\x03\\x02\\x02\\x02\\u0B91' +\r\n    '\\u0B92\\x07Z\\x02\\x02\\u0B92\\u0213\\x03\\x02\\x02\\x02\\u0B93\\u0B94\\b\\u010B\\x01' +\r\n    '\\x02\\u0B94\\u0B95\\x05\\u021A\\u010E\\x02\\u0B95\\u0BA4\\x03\\x02\\x02\\x02\\u0B96' +\r\n    '\\u0B97\\f\\x05\\x02\\x02\\u0B97\\u0B98\\x05\\u020E\\u0108\\x02\\u0B98\\u0B99\\x05\\u021A' +\r\n    '\\u010E\\x02\\u0B99\\u0BA3\\x03\\x02\\x02\\x02\\u0B9A\\u0B9B\\f\\x04\\x02\\x02\\u0B9B' +\r\n    '\\u0B9C\\x05\\u0210\\u0109\\x02\\u0B9C\\u0B9D\\x05\\u021A\\u010E\\x02\\u0B9D\\u0BA3' +\r\n    '\\x03\\x02\\x02\\x02\\u0B9E\\u0B9F\\f\\x03\\x02\\x02\\u0B9F\\u0BA0\\x05\\u0212\\u010A' +\r\n    '\\x02\\u0BA0\\u0BA1\\x05\\u021A\\u010E\\x02\\u0BA1\\u0BA3\\x03\\x02\\x02\\x02\\u0BA2' +\r\n    '\\u0B96\\x03\\x02\\x02\\x02\\u0BA2\\u0B9A\\x03\\x02\\x02\\x02\\u0BA2\\u0B9E\\x03\\x02' +\r\n    '\\x02\\x02\\u0BA3\\u0BA6\\x03\\x02\\x02\\x02\\u0BA4\\u0BA2\\x03\\x02\\x02\\x02\\u0BA4' +\r\n    '\\u0BA5\\x03\\x02\\x02\\x02\\u0BA5\\u0215\\x03\\x02\\x02\\x02\\u0BA6\\u0BA4\\x03\\x02' +\r\n    '\\x02\\x02\\u0BA7\\u0BA8\\x07S\\x02\\x02\\u0BA8\\u0217\\x03\\x02\\x02\\x02\\u0BA9\\u0BAA' +\r\n    '\\x07T\\x02\\x02\\u0BAA\\u0219\\x03\\x02\\x02\\x02\\u0BAB\\u0BB5\\x05\\u021E\\u0110' +\r\n    '\\x02\\u0BAC\\u0BB5\\x05\\u0222\\u0112\\x02\\u0BAD\\u0BAE\\x05\\u0216\\u010C\\x02\\u0BAE' +\r\n    '\\u0BAF\\x05\\u021A\\u010E\\x02\\u0BAF\\u0BB5\\x03\\x02\\x02\\x02\\u0BB0\\u0BB1\\x05' +\r\n    '\\u0218\\u010D\\x02\\u0BB1\\u0BB2\\x05\\u021A\\u010E\\x02\\u0BB2\\u0BB5\\x03\\x02\\x02' +\r\n    '\\x02\\u0BB3\\u0BB5\\x05\\u0228\\u0115\\x02\\u0BB4\\u0BAB\\x03\\x02\\x02\\x02\\u0BB4' +\r\n    '\\u0BAC\\x03\\x02\\x02\\x02\\u0BB4\\u0BAD\\x03\\x02\\x02\\x02\\u0BB4\\u0BB0\\x03\\x02' +\r\n    '\\x02\\x02\\u0BB4\\u0BB3\\x03\\x02\\x02\\x02\\u0BB5\\u021B\\x03\\x02\\x02\\x02\\u0BB6' +\r\n    '\\u0BB7\\x07Q\\x02\\x02\\u0BB7\\u021D\\x03\\x02\\x02\\x02\\u0BB8\\u0BB9\\x05\\u021C' +\r\n    '\\u010F\\x02\\u0BB9\\u0BBA\\x05\\u021A\\u010E\\x02\\u0BBA\\u021F\\x03\\x02\\x02\\x02' +\r\n    '\\u0BBB\\u0BBC\\x07R\\x02\\x02\\u0BBC\\u0221\\x03\\x02\\x02\\x02\\u0BBD\\u0BBE\\x05' +\r\n    '\\u0220\\u0111\\x02\\u0BBE\\u0BBF\\x05\\u021A\\u010E\\x02\\u0BBF\\u0223\\x03\\x02\\x02' +\r\n    '\\x02\\u0BC0\\u0BC1\\x07H\\x02\\x02\\u0BC1\\u0225\\x03\\x02\\x02\\x02\\u0BC2\\u0BC3' +\r\n    '\\x07G\\x02\\x02\\u0BC3\\u0227\\x03\\x02\\x02\\x02\\u0BC4\\u0BCD\\x05\\u022A\\u0116' +\r\n    '\\x02\\u0BC5\\u0BC6\\x05\\u0224\\u0113\\x02\\u0BC6\\u0BC7\\x05\\u021A\\u010E\\x02\\u0BC7' +\r\n    '\\u0BCD\\x03\\x02\\x02\\x02\\u0BC8\\u0BC9\\x05\\u0226\\u0114\\x02\\u0BC9\\u0BCA\\x05' +\r\n    '\\u021A\\u010E\\x02\\u0BCA\\u0BCD\\x03\\x02\\x02\\x02\\u0BCB\\u0BCD\\x05\\u0234\\u011B' +\r\n    '\\x02\\u0BCC\\u0BC4\\x03\\x02\\x02\\x02\\u0BCC\\u0BC5\\x03\\x02\\x02\\x02\\u0BCC\\u0BC8' +\r\n    '\\x03\\x02\\x02\\x02\\u0BCC\\u0BCB\\x03\\x02\\x02\\x02\\u0BCD\\u0229\\x03\\x02\\x02\\x02' +\r\n    \"\\u0BCE\\u0BDC\\x05\\u0186\\xC4\\x02\\u0BCF\\u0BDC\\x05L'\\x02\\u0BD0\\u0BD3\\x05\" +\r\n    \"\\u0186\\xC4\\x02\\u0BD1\\u0BD3\\x05L'\\x02\\u0BD2\\u0BD0\\x03\\x02\\x02\\x02\\u0BD2\" +\r\n    '\\u0BD1\\x03\\x02\\x02\\x02\\u0BD3\\u0BD8\\x03\\x02\\x02\\x02\\u0BD4\\u0BD7\\x05\\u022E' +\r\n    '\\u0118\\x02\\u0BD5\\u0BD7\\x05\\u0232\\u011A\\x02\\u0BD6\\u0BD4\\x03\\x02\\x02\\x02' +\r\n    '\\u0BD6\\u0BD5\\x03\\x02\\x02\\x02\\u0BD7\\u0BDA\\x03\\x02\\x02\\x02\\u0BD8\\u0BD6\\x03' +\r\n    '\\x02\\x02\\x02\\u0BD8\\u0BD9\\x03\\x02\\x02\\x02\\u0BD9\\u0BDC\\x03\\x02\\x02\\x02\\u0BDA' +\r\n    '\\u0BD8\\x03\\x02\\x02\\x02\\u0BDB\\u0BCE\\x03\\x02\\x02\\x02\\u0BDB\\u0BCF\\x03\\x02' +\r\n    '\\x02\\x02\\u0BDB\\u0BD2\\x03\\x02\\x02\\x02\\u0BDC\\u022B\\x03\\x02\\x02\\x02\\u0BDD' +\r\n    '\\u0BDE\\x05\\u022A\\u0116\\x02\\u0BDE\\u0BDF\\x05\\u021C\\u010F\\x02\\u0BDF\\u022D' +\r\n    '\\x03\\x02\\x02\\x02\\u0BE0\\u0BE1\\x07Q\\x02\\x02\\u0BE1\\u022F\\x03\\x02\\x02\\x02' +\r\n    '\\u0BE2\\u0BE3\\x05\\u022A\\u0116\\x02\\u0BE3\\u0BE4\\x05\\u0220\\u0111\\x02\\u0BE4' +\r\n    '\\u0231\\x03\\x02\\x02\\x02\\u0BE5\\u0BE6\\x07R\\x02\\x02\\u0BE6\\u0233\\x03\\x02\\x02' +\r\n    '\\x02\\u0BE7\\u0BE8\\x07;\\x02\\x02\\u0BE8\\u0BE9\\x05\\x14\\v\\x02\\u0BE9\\u0BEA\\x07' +\r\n    '<\\x02\\x02\\u0BEA\\u0BEB\\x05\\u021A\\u010E\\x02\\u0BEB\\u0C03\\x03\\x02\\x02\\x02' +\r\n    '\\u0BEC\\u0BED\\x07;\\x02\\x02\\u0BED\\u0BF1\\x05\\x1C\\x0F\\x02\\u0BEE\\u0BF0\\x05' +\r\n    '8\\x1D\\x02\\u0BEF\\u0BEE\\x03\\x02\\x02\\x02\\u0BF0\\u0BF3\\x03\\x02\\x02\\x02\\u0BF1' +\r\n    '\\u0BEF\\x03\\x02\\x02\\x02\\u0BF1\\u0BF2\\x03\\x02\\x02\\x02\\u0BF2\\u0BF4\\x03\\x02' +\r\n    '\\x02\\x02\\u0BF3\\u0BF1\\x03\\x02\\x02\\x02\\u0BF4\\u0BF5\\x07<\\x02\\x02\\u0BF5\\u0BF6' +\r\n    '\\x05\\u0228\\u0115\\x02\\u0BF6\\u0C03\\x03\\x02\\x02\\x02\\u0BF7\\u0BF8\\x07;\\x02' +\r\n    '\\x02\\u0BF8\\u0BFC\\x05\\x1C\\x0F\\x02\\u0BF9\\u0BFB\\x058\\x1D\\x02\\u0BFA\\u0BF9' +\r\n    '\\x03\\x02\\x02\\x02\\u0BFB\\u0BFE\\x03\\x02\\x02\\x02\\u0BFC\\u0BFA\\x03\\x02\\x02\\x02' +\r\n    '\\u0BFC\\u0BFD\\x03\\x02\\x02\\x02\\u0BFD\\u0BFF\\x03\\x02\\x02\\x02\\u0BFE\\u0BFC\\x03' +\r\n    '\\x02\\x02\\x02\\u0BFF\\u0C00\\x07<\\x02\\x02\\u0C00\\u0C01\\x05\\u01CC\\xE7\\x02\\u0C01' +\r\n    '\\u0C03\\x03\\x02\\x02\\x02\\u0C02\\u0BE7\\x03\\x02\\x02\\x02\\u0C02\\u0BEC\\x03\\x02' +\r\n    '\\x02\\x02\\u0C02\\u0BF7\\x03\\x02\\x02\\x02\\u0C03\\u0235\\x03\\x02\\x02\\x02\\u014B' +\r\n    '\\u0237\\u023F\\u024F\\u0254\\u025B\\u025F\\u0263\\u026C\\u0270\\u0274\\u0276\\u027C' +\r\n    '\\u0281\\u0288\\u028D\\u028F\\u0295\\u029A\\u029F\\u02A4\\u02AF\\u02BD\\u02C2\\u02CA' +\r\n    '\\u02D1\\u02D7\\u02DC\\u02E7\\u02EA\\u02F8\\u02FD\\u0302\\u0307\\u030D\\u0317\\u031F' +\r\n    '\\u032B\\u0333\\u033D\\u0341\\u0346\\u034C\\u0352\\u035B\\u0366\\u0383\\u0387\\u038D' +\r\n    '\\u0390\\u0393\\u039C\\u03A7\\u03B2\\u03C0\\u03C7\\u03D0\\u03D7\\u03E1\\u03EC\\u03F3' +\r\n    '\\u03F9\\u03FD\\u0401\\u0405\\u0409\\u040E\\u0412\\u0416\\u0418\\u041D\\u0424\\u0429' +\r\n    '\\u042B\\u0431\\u0436\\u043A\\u044D\\u0452\\u0462\\u0467\\u046D\\u0473\\u0475\\u0479' +\r\n    '\\u047E\\u0482\\u048B\\u0492\\u049A\\u049D\\u04A2\\u04AC\\u04B2\\u04B7\\u04BE\\u04C5' +\r\n    '\\u04CA\\u04D0\\u04DC\\u04E1\\u04E5\\u04EF\\u04F4\\u04FC\\u04FF\\u0504\\u050C\\u050F' +\r\n    '\\u0514\\u0519\\u051E\\u0523\\u052A\\u052F\\u0537\\u053C\\u0541\\u0546\\u054C\\u0552' +\r\n    '\\u0555\\u0558\\u0561\\u0567\\u056D\\u0570\\u0573\\u057B\\u0580\\u0586\\u0589\\u0590' +\r\n    '\\u059C\\u05A5\\u05AF\\u05B9\\u05C0\\u05C9\\u05D2\\u05D7\\u05E3\\u05ED\\u05F2\\u05FA' +\r\n    '\\u05FD\\u0604\\u060C\\u0612\\u061B\\u0625\\u0629\\u062C\\u0635\\u0643\\u0646\\u064F' +\r\n    '\\u0654\\u065C\\u0662\\u066A\\u0676\\u067D\\u068B\\u06A1\\u06C3\\u06CF\\u06D5\\u06E1' +\r\n    '\\u06EE\\u0708\\u070C\\u0711\\u0715\\u0719\\u0721\\u0725\\u0729\\u0730\\u0739\\u0741' +\r\n    '\\u0750\\u075C\\u0762\\u0768\\u077D\\u0782\\u0788\\u0794\\u079F\\u07A9\\u07AC\\u07B1' +\r\n    '\\u07BA\\u07C0\\u07CA\\u07CF\\u07D8\\u07EF\\u07F9\\u080F\\u0816\\u081E\\u0826\\u0831' +\r\n    '\\u0848\\u0852\\u085D\\u0873\\u0877\\u087C\\u0884\\u088A\\u088E\\u0892\\u0896\\u089C' +\r\n    '\\u08A1\\u08A6\\u08AA\\u08AE\\u08B4\\u08B9\\u08BE\\u08C2\\u08C6\\u08C8\\u08CD\\u08D2' +\r\n    '\\u08D7\\u08DB\\u08DF\\u08E3\\u08E8\\u08F0\\u08F6\\u08FA\\u08FE\\u0902\\u0908\\u090D' +\r\n    '\\u0912\\u0916\\u091A\\u091C\\u0921\\u0930\\u093E\\u094A\\u0953\\u0962\\u096F\\u0978' +\r\n    '\\u097E\\u0985\\u098A\\u0991\\u0996\\u099D\\u09A2\\u09A9\\u09AE\\u09B6\\u09BB\\u09BF' +\r\n    '\\u09C8\\u09CF\\u09D4\\u09DB\\u09E2\\u09E7\\u09EE\\u09F3\\u09FA\\u09FF\\u0A08\\u0A0D' +\r\n    '\\u0A11\\u0A18\\u0A1E\\u0A25\\u0A2C\\u0A33\\u0A3B\\u0A42\\u0A4A\\u0A4E\\u0A55\\u0A5C' +\r\n    '\\u0A63\\u0A6B\\u0A72\\u0A7A\\u0A80\\u0A86\\u0A92\\u0A98\\u0A9E\\u0AA9\\u0AB2\\u0AB9' +\r\n    '\\u0AC0\\u0AC5\\u0AC9\\u0AD2\\u0ADD\\u0AEA\\u0AF8\\u0B06\\u0B14\\u0B22\\u0B34\\u0B36' +\r\n    '\\u0B5A\\u0B5C\\u0B78\\u0B7A\\u0B88\\u0B8A\\u0BA2\\u0BA4\\u0BB4\\u0BCC\\u0BD2\\u0BD6' +\r\n    '\\u0BD8\\u0BDB\\u0BF1\\u0BFC\\u0C02';\r\nJava8Parser._serializedATN = Utils.join([\r\n    Java8Parser._serializedATNSegment0,\r\n    Java8Parser._serializedATNSegment1,\r\n    Java8Parser._serializedATNSegment2,\r\n    Java8Parser._serializedATNSegment3,\r\n    Java8Parser._serializedATNSegment4,\r\n    Java8Parser._serializedATNSegment5,\r\n], '');\r\nclass TranslationunitContext extends ParserRuleContext_1.ParserRuleContext {\r\n    compilationUnit() {\r\n        return this.tryGetRuleContext(0, CompilationUnitContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_translationunit;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTranslationunit) {\r\n            return visitor.visitTranslationunit(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TranslationunitContext = TranslationunitContext;\r\nclass LiteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    integerLiteral() {\r\n        return this.tryGetRuleContext(0, IntegerLiteralContext);\r\n    }\r\n    floatingPointLiteral() {\r\n        return this.tryGetRuleContext(0, FloatingPointLiteralContext);\r\n    }\r\n    booleanLiteral() {\r\n        return this.tryGetRuleContext(0, BooleanLiteralContext);\r\n    }\r\n    characterLiteral() {\r\n        return this.tryGetRuleContext(0, CharacterLiteralContext);\r\n    }\r\n    stringLiteral() {\r\n        return this.tryGetRuleContext(0, StringLiteralContext);\r\n    }\r\n    nullLiteral() {\r\n        return this.tryGetRuleContext(0, NullLiteralContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_literal;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLiteral) {\r\n            return visitor.visitLiteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LiteralContext = LiteralContext;\r\nclass IntegerLiteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    IntegerLiteral() {\r\n        return this.getToken(Java8Parser.IntegerLiteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_integerLiteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIntegerLiteral) {\r\n            return visitor.visitIntegerLiteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IntegerLiteralContext = IntegerLiteralContext;\r\nclass FloatingPointLiteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    FloatingPointLiteral() {\r\n        return this.getToken(Java8Parser.FloatingPointLiteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_floatingPointLiteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFloatingPointLiteral) {\r\n            return visitor.visitFloatingPointLiteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FloatingPointLiteralContext = FloatingPointLiteralContext;\r\nclass BooleanLiteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    BooleanLiteral() {\r\n        return this.getToken(Java8Parser.BooleanLiteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_booleanLiteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBooleanLiteral) {\r\n            return visitor.visitBooleanLiteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BooleanLiteralContext = BooleanLiteralContext;\r\nclass StringLiteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    StringLiteral() {\r\n        return this.getToken(Java8Parser.StringLiteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_stringLiteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStringLiteral) {\r\n            return visitor.visitStringLiteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StringLiteralContext = StringLiteralContext;\r\nclass CharacterLiteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    CharacterLiteral() {\r\n        return this.getToken(Java8Parser.CharacterLiteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_characterLiteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCharacterLiteral) {\r\n            return visitor.visitCharacterLiteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CharacterLiteralContext = CharacterLiteralContext;\r\nclass NullLiteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    NullLiteral() {\r\n        return this.getToken(Java8Parser.NullLiteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_nullLiteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNullLiteral) {\r\n            return visitor.visitNullLiteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NullLiteralContext = NullLiteralContext;\r\nclass TypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primitiveType() {\r\n        return this.tryGetRuleContext(0, PrimitiveTypeContext);\r\n    }\r\n    referenceType() {\r\n        return this.tryGetRuleContext(0, ReferenceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_type;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitType) {\r\n            return visitor.visitType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeContext = TypeContext;\r\nclass PrimitiveTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    numericType() {\r\n        return this.tryGetRuleContext(0, NumericTypeContext);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primitiveType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimitiveType) {\r\n            return visitor.visitPrimitiveType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimitiveTypeContext = PrimitiveTypeContext;\r\nclass NumericTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    integralType() {\r\n        return this.tryGetRuleContext(0, IntegralTypeContext);\r\n    }\r\n    floatingPointType() {\r\n        return this.tryGetRuleContext(0, FloatingPointTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_numericType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNumericType) {\r\n            return visitor.visitNumericType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NumericTypeContext = NumericTypeContext;\r\nclass IntegralTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_integralType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIntegralType) {\r\n            return visitor.visitIntegralType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IntegralTypeContext = IntegralTypeContext;\r\nclass FloatingPointTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_floatingPointType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFloatingPointType) {\r\n            return visitor.visitFloatingPointType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FloatingPointTypeContext = FloatingPointTypeContext;\r\nclass ReferenceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);\r\n    }\r\n    typeVariable() {\r\n        return this.tryGetRuleContext(0, TypeVariableContext);\r\n    }\r\n    arrayType() {\r\n        return this.tryGetRuleContext(0, ArrayTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_referenceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitReferenceType) {\r\n            return visitor.visitReferenceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ReferenceTypeContext = ReferenceTypeContext;\r\nclass ClassOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classType_lfno_classOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, ClassType_lfno_classOrInterfaceTypeContext);\r\n    }\r\n    interfaceType_lfno_classOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, InterfaceType_lfno_classOrInterfaceTypeContext);\r\n    }\r\n    classType_lf_classOrInterfaceType(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ClassType_lf_classOrInterfaceTypeContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ClassType_lf_classOrInterfaceTypeContext);\r\n        }\r\n    }\r\n    interfaceType_lf_classOrInterfaceType(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(InterfaceType_lf_classOrInterfaceTypeContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, InterfaceType_lf_classOrInterfaceTypeContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassOrInterfaceType) {\r\n            return visitor.visitClassOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;\r\nclass ClassTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    classOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassType) {\r\n            return visitor.visitClassType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassTypeContext = ClassTypeContext;\r\nclass ClassType_lf_classOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classType_lf_classOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassType_lf_classOrInterfaceType) {\r\n            return visitor.visitClassType_lf_classOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassType_lf_classOrInterfaceTypeContext = ClassType_lf_classOrInterfaceTypeContext;\r\nclass ClassType_lfno_classOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classType_lfno_classOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassType_lfno_classOrInterfaceType) {\r\n            return visitor.visitClassType_lfno_classOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassType_lfno_classOrInterfaceTypeContext = ClassType_lfno_classOrInterfaceTypeContext;\r\nclass InterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classType() {\r\n        return this.getRuleContext(0, ClassTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceType) {\r\n            return visitor.visitInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceTypeContext = InterfaceTypeContext;\r\nclass InterfaceType_lf_classOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classType_lf_classOrInterfaceType() {\r\n        return this.getRuleContext(0, ClassType_lf_classOrInterfaceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceType_lf_classOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceType_lf_classOrInterfaceType) {\r\n            return visitor.visitInterfaceType_lf_classOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceType_lf_classOrInterfaceTypeContext = InterfaceType_lf_classOrInterfaceTypeContext;\r\nclass InterfaceType_lfno_classOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classType_lfno_classOrInterfaceType() {\r\n        return this.getRuleContext(0, ClassType_lfno_classOrInterfaceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceType_lfno_classOrInterfaceType) {\r\n            return visitor.visitInterfaceType_lfno_classOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceType_lfno_classOrInterfaceTypeContext = InterfaceType_lfno_classOrInterfaceTypeContext;\r\nclass TypeVariableContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeVariable;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeVariable) {\r\n            return visitor.visitTypeVariable(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeVariableContext = TypeVariableContext;\r\nclass ArrayTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primitiveType() {\r\n        return this.tryGetRuleContext(0, PrimitiveTypeContext);\r\n    }\r\n    dims() {\r\n        return this.getRuleContext(0, DimsContext);\r\n    }\r\n    classOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);\r\n    }\r\n    typeVariable() {\r\n        return this.tryGetRuleContext(0, TypeVariableContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_arrayType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitArrayType) {\r\n            return visitor.visitArrayType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ArrayTypeContext = ArrayTypeContext;\r\nclass DimsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_dims;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDims) {\r\n            return visitor.visitDims(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DimsContext = DimsContext;\r\nclass TypeParameterContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeParameterModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(TypeParameterModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, TypeParameterModifierContext);\r\n        }\r\n    }\r\n    typeBound() {\r\n        return this.tryGetRuleContext(0, TypeBoundContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeParameter;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeParameter) {\r\n            return visitor.visitTypeParameter(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeParameterContext = TypeParameterContext;\r\nclass TypeParameterModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.getRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeParameterModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeParameterModifier) {\r\n            return visitor.visitTypeParameterModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeParameterModifierContext = TypeParameterModifierContext;\r\nclass TypeBoundContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeVariable() {\r\n        return this.tryGetRuleContext(0, TypeVariableContext);\r\n    }\r\n    classOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);\r\n    }\r\n    additionalBound(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AdditionalBoundContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AdditionalBoundContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeBound;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeBound) {\r\n            return visitor.visitTypeBound(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeBoundContext = TypeBoundContext;\r\nclass AdditionalBoundContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceType() {\r\n        return this.getRuleContext(0, InterfaceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_additionalBound;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAdditionalBound) {\r\n            return visitor.visitAdditionalBound(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AdditionalBoundContext = AdditionalBoundContext;\r\nclass TypeArgumentsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeArgumentList() {\r\n        return this.getRuleContext(0, TypeArgumentListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeArguments;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeArguments) {\r\n            return visitor.visitTypeArguments(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeArgumentsContext = TypeArgumentsContext;\r\nclass TypeArgumentListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeArgument(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(TypeArgumentContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, TypeArgumentContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeArgumentList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeArgumentList) {\r\n            return visitor.visitTypeArgumentList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeArgumentListContext = TypeArgumentListContext;\r\nclass TypeArgumentContext extends ParserRuleContext_1.ParserRuleContext {\r\n    referenceType() {\r\n        return this.tryGetRuleContext(0, ReferenceTypeContext);\r\n    }\r\n    wildcard() {\r\n        return this.tryGetRuleContext(0, WildcardContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeArgument;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeArgument) {\r\n            return visitor.visitTypeArgument(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeArgumentContext = TypeArgumentContext;\r\nclass WildcardContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    wildcardBounds() {\r\n        return this.tryGetRuleContext(0, WildcardBoundsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_wildcard;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitWildcard) {\r\n            return visitor.visitWildcard(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.WildcardContext = WildcardContext;\r\nclass WildcardBoundsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    referenceType() {\r\n        return this.getRuleContext(0, ReferenceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_wildcardBounds;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitWildcardBounds) {\r\n            return visitor.visitWildcardBounds(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.WildcardBoundsContext = WildcardBoundsContext;\r\nclass PackageNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    packageName() {\r\n        return this.tryGetRuleContext(0, PackageNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_packageName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPackageName) {\r\n            return visitor.visitPackageName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PackageNameContext = PackageNameContext;\r\nclass TypeNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    packageOrTypeName() {\r\n        return this.tryGetRuleContext(0, PackageOrTypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeName) {\r\n            return visitor.visitTypeName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeNameContext = TypeNameContext;\r\nclass TypeNameIdentContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeName() {\r\n        return this.getRuleContext(0, TypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeNameIdent;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeNameIdent) {\r\n            return visitor.visitTypeNameIdent(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeNameIdentContext = TypeNameIdentContext;\r\nclass PackageOrTypeNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    packageOrTypeName() {\r\n        return this.tryGetRuleContext(0, PackageOrTypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_packageOrTypeName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPackageOrTypeName) {\r\n            return visitor.visitPackageOrTypeName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PackageOrTypeNameContext = PackageOrTypeNameContext;\r\nclass ExpressionNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    ambiguousName() {\r\n        return this.tryGetRuleContext(0, AmbiguousNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_expressionName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExpressionName) {\r\n            return visitor.visitExpressionName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExpressionNameContext = ExpressionNameContext;\r\nclass AmbiguousNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    ambiguousName() {\r\n        return this.tryGetRuleContext(0, AmbiguousNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_ambiguousName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAmbiguousName) {\r\n            return visitor.visitAmbiguousName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AmbiguousNameContext = AmbiguousNameContext;\r\nclass CompilationUnitContext extends ParserRuleContext_1.ParserRuleContext {\r\n    packageDeclaration() {\r\n        return this.tryGetRuleContext(0, PackageDeclarationContext);\r\n    }\r\n    importDeclaration(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ImportDeclarationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ImportDeclarationContext);\r\n        }\r\n    }\r\n    typeDeclaration(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(TypeDeclarationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, TypeDeclarationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_compilationUnit;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCompilationUnit) {\r\n            return visitor.visitCompilationUnit(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CompilationUnitContext = CompilationUnitContext;\r\nclass PackageDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.Identifier);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.Identifier, i);\r\n        }\r\n    }\r\n    packageModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PackageModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PackageModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_packageDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPackageDeclaration) {\r\n            return visitor.visitPackageDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PackageDeclarationContext = PackageDeclarationContext;\r\nclass PackageModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.getRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_packageModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPackageModifier) {\r\n            return visitor.visitPackageModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PackageModifierContext = PackageModifierContext;\r\nclass ImportDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    singleTypeImportDeclaration() {\r\n        return this.tryGetRuleContext(0, SingleTypeImportDeclarationContext);\r\n    }\r\n    typeImportOnDemandDeclaration() {\r\n        return this.tryGetRuleContext(0, TypeImportOnDemandDeclarationContext);\r\n    }\r\n    singleStaticImportDeclaration() {\r\n        return this.tryGetRuleContext(0, SingleStaticImportDeclarationContext);\r\n    }\r\n    staticImportOnDemandDeclaration() {\r\n        return this.tryGetRuleContext(0, StaticImportOnDemandDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_importDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitImportDeclaration) {\r\n            return visitor.visitImportDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ImportDeclarationContext = ImportDeclarationContext;\r\nclass SingleTypeImportDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeName() {\r\n        return this.getRuleContext(0, TypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_singleTypeImportDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSingleTypeImportDeclaration) {\r\n            return visitor.visitSingleTypeImportDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SingleTypeImportDeclarationContext = SingleTypeImportDeclarationContext;\r\nclass TypeImportOnDemandDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    packageOrTypeName() {\r\n        return this.getRuleContext(0, PackageOrTypeNameContext);\r\n    }\r\n    mul() {\r\n        return this.getRuleContext(0, MulContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeImportOnDemandDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeImportOnDemandDeclaration) {\r\n            return visitor.visitTypeImportOnDemandDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeImportOnDemandDeclarationContext = TypeImportOnDemandDeclarationContext;\r\nclass SingleStaticImportDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeName() {\r\n        return this.getRuleContext(0, TypeNameContext);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_singleStaticImportDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSingleStaticImportDeclaration) {\r\n            return visitor.visitSingleStaticImportDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SingleStaticImportDeclarationContext = SingleStaticImportDeclarationContext;\r\nclass StaticImportOnDemandDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeName() {\r\n        return this.getRuleContext(0, TypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_staticImportOnDemandDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStaticImportOnDemandDeclaration) {\r\n            return visitor.visitStaticImportOnDemandDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StaticImportOnDemandDeclarationContext = StaticImportOnDemandDeclarationContext;\r\nclass TypeDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classDeclaration() {\r\n        return this.tryGetRuleContext(0, ClassDeclarationContext);\r\n    }\r\n    interfaceDeclaration() {\r\n        return this.tryGetRuleContext(0, InterfaceDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeDeclaration) {\r\n            return visitor.visitTypeDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeDeclarationContext = TypeDeclarationContext;\r\nclass ClassDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    normalClassDeclaration() {\r\n        return this.tryGetRuleContext(0, NormalClassDeclarationContext);\r\n    }\r\n    enumDeclaration() {\r\n        return this.tryGetRuleContext(0, EnumDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassDeclaration) {\r\n            return visitor.visitClassDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassDeclarationContext = ClassDeclarationContext;\r\nclass NormalClassDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classModifiers() {\r\n        return this.getRuleContext(0, ClassModifiersContext);\r\n    }\r\n    className() {\r\n        return this.getRuleContext(0, ClassNameContext);\r\n    }\r\n    classBody() {\r\n        return this.getRuleContext(0, ClassBodyContext);\r\n    }\r\n    typeParameters() {\r\n        return this.tryGetRuleContext(0, TypeParametersContext);\r\n    }\r\n    superclass() {\r\n        return this.tryGetRuleContext(0, SuperclassContext);\r\n    }\r\n    superinterfaces() {\r\n        return this.tryGetRuleContext(0, SuperinterfacesContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_normalClassDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNormalClassDeclaration) {\r\n            return visitor.visitNormalClassDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NormalClassDeclarationContext = NormalClassDeclarationContext;\r\nclass ClassNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_className;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassName) {\r\n            return visitor.visitClassName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassNameContext = ClassNameContext;\r\nclass ClassModifiersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ClassModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ClassModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classModifiers;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassModifiers) {\r\n            return visitor.visitClassModifiers(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassModifiersContext = ClassModifiersContext;\r\nclass ClassModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassModifier) {\r\n            return visitor.visitClassModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassModifierContext = ClassModifierContext;\r\nclass TypeParametersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeParameterList() {\r\n        return this.getRuleContext(0, TypeParameterListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeParameters;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeParameters) {\r\n            return visitor.visitTypeParameters(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeParametersContext = TypeParametersContext;\r\nclass TypeParameterListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeParameter(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(TypeParameterContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, TypeParameterContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeParameterList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeParameterList) {\r\n            return visitor.visitTypeParameterList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeParameterListContext = TypeParameterListContext;\r\nclass SuperclassContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classType() {\r\n        return this.getRuleContext(0, ClassTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_superclass;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSuperclass) {\r\n            return visitor.visitSuperclass(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SuperclassContext = SuperclassContext;\r\nclass SuperinterfacesContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceTypeList() {\r\n        return this.getRuleContext(0, InterfaceTypeListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_superinterfaces;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSuperinterfaces) {\r\n            return visitor.visitSuperinterfaces(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SuperinterfacesContext = SuperinterfacesContext;\r\nclass InterfaceTypeListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceType(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(InterfaceTypeContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, InterfaceTypeContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceTypeList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceTypeList) {\r\n            return visitor.visitInterfaceTypeList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceTypeListContext = InterfaceTypeListContext;\r\nclass ClassBodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classBodyDeclaration(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ClassBodyDeclarationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ClassBodyDeclarationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classBody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassBody) {\r\n            return visitor.visitClassBody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassBodyContext = ClassBodyContext;\r\nclass ClassBodyDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classMemberDeclaration() {\r\n        return this.tryGetRuleContext(0, ClassMemberDeclarationContext);\r\n    }\r\n    instanceInitializer() {\r\n        return this.tryGetRuleContext(0, InstanceInitializerContext);\r\n    }\r\n    staticInitializer() {\r\n        return this.tryGetRuleContext(0, StaticInitializerContext);\r\n    }\r\n    constructorDeclaration() {\r\n        return this.tryGetRuleContext(0, ConstructorDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classBodyDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassBodyDeclaration) {\r\n            return visitor.visitClassBodyDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassBodyDeclarationContext = ClassBodyDeclarationContext;\r\nclass ClassMemberDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    fieldDeclaration() {\r\n        return this.tryGetRuleContext(0, FieldDeclarationContext);\r\n    }\r\n    methodDeclaration() {\r\n        return this.tryGetRuleContext(0, MethodDeclarationContext);\r\n    }\r\n    classDeclaration() {\r\n        return this.tryGetRuleContext(0, ClassDeclarationContext);\r\n    }\r\n    interfaceDeclaration() {\r\n        return this.tryGetRuleContext(0, InterfaceDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classMemberDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassMemberDeclaration) {\r\n            return visitor.visitClassMemberDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassMemberDeclarationContext = ClassMemberDeclarationContext;\r\nclass FieldDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    fieldModifiers() {\r\n        return this.getRuleContext(0, FieldModifiersContext);\r\n    }\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    variableDeclaratorList() {\r\n        return this.getRuleContext(0, VariableDeclaratorListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_fieldDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFieldDeclaration) {\r\n            return visitor.visitFieldDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FieldDeclarationContext = FieldDeclarationContext;\r\nclass FieldModifiersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    fieldModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(FieldModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, FieldModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_fieldModifiers;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFieldModifiers) {\r\n            return visitor.visitFieldModifiers(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FieldModifiersContext = FieldModifiersContext;\r\nclass FieldModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_fieldModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFieldModifier) {\r\n            return visitor.visitFieldModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FieldModifierContext = FieldModifierContext;\r\nclass VariableDeclaratorListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    variableDeclarator(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableDeclaratorContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableDeclaratorContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_variableDeclaratorList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariableDeclaratorList) {\r\n            return visitor.visitVariableDeclaratorList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariableDeclaratorListContext = VariableDeclaratorListContext;\r\nclass VariableDeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    variableDeclaratorId() {\r\n        return this.getRuleContext(0, VariableDeclaratorIdContext);\r\n    }\r\n    variableInitializer() {\r\n        return this.tryGetRuleContext(0, VariableInitializerContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_variableDeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariableDeclarator) {\r\n            return visitor.visitVariableDeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariableDeclaratorContext = VariableDeclaratorContext;\r\nclass VariableDeclaratorIdContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    dims() {\r\n        return this.tryGetRuleContext(0, DimsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_variableDeclaratorId;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariableDeclaratorId) {\r\n            return visitor.visitVariableDeclaratorId(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariableDeclaratorIdContext = VariableDeclaratorIdContext;\r\nclass VariableInitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    arrayInitializer() {\r\n        return this.tryGetRuleContext(0, ArrayInitializerContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_variableInitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariableInitializer) {\r\n            return visitor.visitVariableInitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariableInitializerContext = VariableInitializerContext;\r\nclass UnannTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannPrimitiveType() {\r\n        return this.tryGetRuleContext(0, UnannPrimitiveTypeContext);\r\n    }\r\n    unannReferenceType() {\r\n        return this.tryGetRuleContext(0, UnannReferenceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannType) {\r\n            return visitor.visitUnannType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannTypeContext = UnannTypeContext;\r\nclass UnannPrimitiveTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    numericType() {\r\n        return this.tryGetRuleContext(0, NumericTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannPrimitiveType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannPrimitiveType) {\r\n            return visitor.visitUnannPrimitiveType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannPrimitiveTypeContext = UnannPrimitiveTypeContext;\r\nclass UnannReferenceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannClassOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, UnannClassOrInterfaceTypeContext);\r\n    }\r\n    unannTypeVariable() {\r\n        return this.tryGetRuleContext(0, UnannTypeVariableContext);\r\n    }\r\n    unannArrayType() {\r\n        return this.tryGetRuleContext(0, UnannArrayTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannReferenceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannReferenceType) {\r\n            return visitor.visitUnannReferenceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannReferenceTypeContext = UnannReferenceTypeContext;\r\nclass UnannClassOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannClassType_lfno_unannClassOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, UnannClassType_lfno_unannClassOrInterfaceTypeContext);\r\n    }\r\n    unannInterfaceType_lfno_unannClassOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext);\r\n    }\r\n    unannClassType_lf_unannClassOrInterfaceType(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(UnannClassType_lf_unannClassOrInterfaceTypeContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, UnannClassType_lf_unannClassOrInterfaceTypeContext);\r\n        }\r\n    }\r\n    unannInterfaceType_lf_unannClassOrInterfaceType(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, UnannInterfaceType_lf_unannClassOrInterfaceTypeContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannClassOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannClassOrInterfaceType) {\r\n            return visitor.visitUnannClassOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannClassOrInterfaceTypeContext = UnannClassOrInterfaceTypeContext;\r\nclass UnannClassTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    unannClassOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, UnannClassOrInterfaceTypeContext);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannClassType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannClassType) {\r\n            return visitor.visitUnannClassType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannClassTypeContext = UnannClassTypeContext;\r\nclass UnannClassType_lf_unannClassOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannClassType_lf_unannClassOrInterfaceType) {\r\n            return visitor.visitUnannClassType_lf_unannClassOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannClassType_lf_unannClassOrInterfaceTypeContext = UnannClassType_lf_unannClassOrInterfaceTypeContext;\r\nclass UnannClassType_lfno_unannClassOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannClassType_lfno_unannClassOrInterfaceType) {\r\n            return visitor.visitUnannClassType_lfno_unannClassOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannClassType_lfno_unannClassOrInterfaceTypeContext = UnannClassType_lfno_unannClassOrInterfaceTypeContext;\r\nclass UnannInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannClassType() {\r\n        return this.getRuleContext(0, UnannClassTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannInterfaceType) {\r\n            return visitor.visitUnannInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannInterfaceTypeContext = UnannInterfaceTypeContext;\r\nclass UnannInterfaceType_lf_unannClassOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannClassType_lf_unannClassOrInterfaceType() {\r\n        return this.getRuleContext(0, UnannClassType_lf_unannClassOrInterfaceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannInterfaceType_lf_unannClassOrInterfaceType) {\r\n            return visitor.visitUnannInterfaceType_lf_unannClassOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext = UnannInterfaceType_lf_unannClassOrInterfaceTypeContext;\r\nclass UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannClassType_lfno_unannClassOrInterfaceType() {\r\n        return this.getRuleContext(0, UnannClassType_lfno_unannClassOrInterfaceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannInterfaceType_lfno_unannClassOrInterfaceType) {\r\n            return visitor.visitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext = UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext;\r\nclass UnannTypeVariableContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannTypeVariable;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannTypeVariable) {\r\n            return visitor.visitUnannTypeVariable(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannTypeVariableContext = UnannTypeVariableContext;\r\nclass UnannArrayTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannPrimitiveType() {\r\n        return this.tryGetRuleContext(0, UnannPrimitiveTypeContext);\r\n    }\r\n    dims() {\r\n        return this.getRuleContext(0, DimsContext);\r\n    }\r\n    unannClassOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, UnannClassOrInterfaceTypeContext);\r\n    }\r\n    unannTypeVariable() {\r\n        return this.tryGetRuleContext(0, UnannTypeVariableContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unannArrayType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnannArrayType) {\r\n            return visitor.visitUnannArrayType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnannArrayTypeContext = UnannArrayTypeContext;\r\nclass MethodDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    methodHeader() {\r\n        return this.getRuleContext(0, MethodHeaderContext);\r\n    }\r\n    methodBody() {\r\n        return this.getRuleContext(0, MethodBodyContext);\r\n    }\r\n    methodModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(MethodModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, MethodModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodDeclaration) {\r\n            return visitor.visitMethodDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodDeclarationContext = MethodDeclarationContext;\r\nclass MethodModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodModifier) {\r\n            return visitor.visitMethodModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodModifierContext = MethodModifierContext;\r\nclass MethodHeaderContext extends ParserRuleContext_1.ParserRuleContext {\r\n    result() {\r\n        return this.getRuleContext(0, ResultContext);\r\n    }\r\n    methodDeclarator() {\r\n        return this.getRuleContext(0, MethodDeclaratorContext);\r\n    }\r\n    throws_() {\r\n        return this.tryGetRuleContext(0, Throws_Context);\r\n    }\r\n    typeParameters() {\r\n        return this.tryGetRuleContext(0, TypeParametersContext);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodHeader;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodHeader) {\r\n            return visitor.visitMethodHeader(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodHeaderContext = MethodHeaderContext;\r\nclass ResultContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.tryGetRuleContext(0, UnannTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_result;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitResult) {\r\n            return visitor.visitResult(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ResultContext = ResultContext;\r\nclass MethodDeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    methodName() {\r\n        return this.getRuleContext(0, MethodNameContext);\r\n    }\r\n    formalParameterList() {\r\n        return this.tryGetRuleContext(0, FormalParameterListContext);\r\n    }\r\n    dims() {\r\n        return this.tryGetRuleContext(0, DimsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodDeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodDeclarator) {\r\n            return visitor.visitMethodDeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodDeclaratorContext = MethodDeclaratorContext;\r\nclass MethodNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodName) {\r\n            return visitor.visitMethodName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodNameContext = MethodNameContext;\r\nclass FormalParameterListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    formalParameters() {\r\n        return this.tryGetRuleContext(0, FormalParametersContext);\r\n    }\r\n    lastFormalParameter() {\r\n        return this.getRuleContext(0, LastFormalParameterContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_formalParameterList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFormalParameterList) {\r\n            return visitor.visitFormalParameterList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FormalParameterListContext = FormalParameterListContext;\r\nclass FormalParametersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    formalParameter(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(FormalParameterContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, FormalParameterContext);\r\n        }\r\n    }\r\n    receiverParameter() {\r\n        return this.tryGetRuleContext(0, ReceiverParameterContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_formalParameters;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFormalParameters) {\r\n            return visitor.visitFormalParameters(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FormalParametersContext = FormalParametersContext;\r\nclass FormalParameterContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    parameterDeclaratorIds() {\r\n        return this.getRuleContext(0, ParameterDeclaratorIdsContext);\r\n    }\r\n    variableModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_formalParameter;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFormalParameter) {\r\n            return visitor.visitFormalParameter(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FormalParameterContext = FormalParameterContext;\r\nclass ParameterDeclaratorIdsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    parameterDeclaratorId() {\r\n        return this.getRuleContext(0, ParameterDeclaratorIdContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_parameterDeclaratorIds;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitParameterDeclaratorIds) {\r\n            return visitor.visitParameterDeclaratorIds(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ParameterDeclaratorIdsContext = ParameterDeclaratorIdsContext;\r\nclass ParameterDeclaratorIdContext extends ParserRuleContext_1.ParserRuleContext {\r\n    parameterName() {\r\n        return this.getRuleContext(0, ParameterNameContext);\r\n    }\r\n    dims() {\r\n        return this.tryGetRuleContext(0, DimsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_parameterDeclaratorId;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitParameterDeclaratorId) {\r\n            return visitor.visitParameterDeclaratorId(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ParameterDeclaratorIdContext = ParameterDeclaratorIdContext;\r\nclass ParameterNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_parameterName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitParameterName) {\r\n            return visitor.visitParameterName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ParameterNameContext = ParameterNameContext;\r\nclass VariableModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_variableModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariableModifier) {\r\n            return visitor.visitVariableModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariableModifierContext = VariableModifierContext;\r\nclass LastFormalParameterContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.tryGetRuleContext(0, UnannTypeContext);\r\n    }\r\n    variableDeclaratorId() {\r\n        return this.tryGetRuleContext(0, VariableDeclaratorIdContext);\r\n    }\r\n    variableModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableModifierContext);\r\n        }\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    formalParameter() {\r\n        return this.tryGetRuleContext(0, FormalParameterContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_lastFormalParameter;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLastFormalParameter) {\r\n            return visitor.visitLastFormalParameter(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LastFormalParameterContext = LastFormalParameterContext;\r\nclass ReceiverParameterContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_receiverParameter;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitReceiverParameter) {\r\n            return visitor.visitReceiverParameter(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ReceiverParameterContext = ReceiverParameterContext;\r\nclass Throws_Context extends ParserRuleContext_1.ParserRuleContext {\r\n    exceptionTypeList() {\r\n        return this.getRuleContext(0, ExceptionTypeListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_throws_;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitThrows_) {\r\n            return visitor.visitThrows_(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.Throws_Context = Throws_Context;\r\nclass ExceptionTypeListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    exceptionType(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ExceptionTypeContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ExceptionTypeContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_exceptionTypeList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExceptionTypeList) {\r\n            return visitor.visitExceptionTypeList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExceptionTypeListContext = ExceptionTypeListContext;\r\nclass ExceptionTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classType() {\r\n        return this.tryGetRuleContext(0, ClassTypeContext);\r\n    }\r\n    typeVariable() {\r\n        return this.tryGetRuleContext(0, TypeVariableContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_exceptionType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExceptionType) {\r\n            return visitor.visitExceptionType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExceptionTypeContext = ExceptionTypeContext;\r\nclass MethodBodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    block() {\r\n        return this.tryGetRuleContext(0, BlockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodBody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodBody) {\r\n            return visitor.visitMethodBody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodBodyContext = MethodBodyContext;\r\nclass InstanceInitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    block() {\r\n        return this.getRuleContext(0, BlockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_instanceInitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInstanceInitializer) {\r\n            return visitor.visitInstanceInitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InstanceInitializerContext = InstanceInitializerContext;\r\nclass StaticInitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    block() {\r\n        return this.getRuleContext(0, BlockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_staticInitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStaticInitializer) {\r\n            return visitor.visitStaticInitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StaticInitializerContext = StaticInitializerContext;\r\nclass ConstructorDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructorDeclarator() {\r\n        return this.getRuleContext(0, ConstructorDeclaratorContext);\r\n    }\r\n    constructorBody() {\r\n        return this.getRuleContext(0, ConstructorBodyContext);\r\n    }\r\n    constructorModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ConstructorModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ConstructorModifierContext);\r\n        }\r\n    }\r\n    throws_() {\r\n        return this.tryGetRuleContext(0, Throws_Context);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_constructorDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstructorDeclaration) {\r\n            return visitor.visitConstructorDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstructorDeclarationContext = ConstructorDeclarationContext;\r\nclass ConstructorModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_constructorModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstructorModifier) {\r\n            return visitor.visitConstructorModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstructorModifierContext = ConstructorModifierContext;\r\nclass ConstructorDeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    simpleTypeName() {\r\n        return this.getRuleContext(0, SimpleTypeNameContext);\r\n    }\r\n    typeParameters() {\r\n        return this.tryGetRuleContext(0, TypeParametersContext);\r\n    }\r\n    formalParameterList() {\r\n        return this.tryGetRuleContext(0, FormalParameterListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_constructorDeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstructorDeclarator) {\r\n            return visitor.visitConstructorDeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstructorDeclaratorContext = ConstructorDeclaratorContext;\r\nclass SimpleTypeNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_simpleTypeName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSimpleTypeName) {\r\n            return visitor.visitSimpleTypeName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SimpleTypeNameContext = SimpleTypeNameContext;\r\nclass ConstructorBodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    explicitConstructorInvocation() {\r\n        return this.tryGetRuleContext(0, ExplicitConstructorInvocationContext);\r\n    }\r\n    blockStatements() {\r\n        return this.tryGetRuleContext(0, BlockStatementsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_constructorBody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstructorBody) {\r\n            return visitor.visitConstructorBody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstructorBodyContext = ConstructorBodyContext;\r\nclass ExplicitConstructorInvocationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    argumentList() {\r\n        return this.tryGetRuleContext(0, ArgumentListContext);\r\n    }\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    primary() {\r\n        return this.tryGetRuleContext(0, PrimaryContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_explicitConstructorInvocation;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExplicitConstructorInvocation) {\r\n            return visitor.visitExplicitConstructorInvocation(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext;\r\nclass EnumDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    enumBody() {\r\n        return this.getRuleContext(0, EnumBodyContext);\r\n    }\r\n    classModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ClassModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ClassModifierContext);\r\n        }\r\n    }\r\n    superinterfaces() {\r\n        return this.tryGetRuleContext(0, SuperinterfacesContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enumDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumDeclaration) {\r\n            return visitor.visitEnumDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumDeclarationContext = EnumDeclarationContext;\r\nclass EnumBodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    enumConstantList() {\r\n        return this.tryGetRuleContext(0, EnumConstantListContext);\r\n    }\r\n    enumBodyDeclarations() {\r\n        return this.tryGetRuleContext(0, EnumBodyDeclarationsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enumBody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumBody) {\r\n            return visitor.visitEnumBody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumBodyContext = EnumBodyContext;\r\nclass EnumConstantListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    enumConstant(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(EnumConstantContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, EnumConstantContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enumConstantList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumConstantList) {\r\n            return visitor.visitEnumConstantList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumConstantListContext = EnumConstantListContext;\r\nclass EnumConstantContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    enumConstantModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(EnumConstantModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, EnumConstantModifierContext);\r\n        }\r\n    }\r\n    classBody() {\r\n        return this.tryGetRuleContext(0, ClassBodyContext);\r\n    }\r\n    argumentList() {\r\n        return this.tryGetRuleContext(0, ArgumentListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enumConstant;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumConstant) {\r\n            return visitor.visitEnumConstant(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumConstantContext = EnumConstantContext;\r\nclass EnumConstantModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.getRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enumConstantModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumConstantModifier) {\r\n            return visitor.visitEnumConstantModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumConstantModifierContext = EnumConstantModifierContext;\r\nclass EnumBodyDeclarationsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classBodyDeclaration(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ClassBodyDeclarationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ClassBodyDeclarationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enumBodyDeclarations;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumBodyDeclarations) {\r\n            return visitor.visitEnumBodyDeclarations(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;\r\nclass InterfaceDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    normalInterfaceDeclaration() {\r\n        return this.tryGetRuleContext(0, NormalInterfaceDeclarationContext);\r\n    }\r\n    annotationTypeDeclaration() {\r\n        return this.tryGetRuleContext(0, AnnotationTypeDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceDeclaration) {\r\n            return visitor.visitInterfaceDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceDeclarationContext = InterfaceDeclarationContext;\r\nclass NormalInterfaceDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceModifiers() {\r\n        return this.getRuleContext(0, InterfaceModifiersContext);\r\n    }\r\n    interfaceName() {\r\n        return this.getRuleContext(0, InterfaceNameContext);\r\n    }\r\n    interfaceBody() {\r\n        return this.getRuleContext(0, InterfaceBodyContext);\r\n    }\r\n    typeParameters() {\r\n        return this.tryGetRuleContext(0, TypeParametersContext);\r\n    }\r\n    extendsInterfaces() {\r\n        return this.tryGetRuleContext(0, ExtendsInterfacesContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_normalInterfaceDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNormalInterfaceDeclaration) {\r\n            return visitor.visitNormalInterfaceDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NormalInterfaceDeclarationContext = NormalInterfaceDeclarationContext;\r\nclass InterfaceModifiersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(InterfaceModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, InterfaceModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceModifiers;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceModifiers) {\r\n            return visitor.visitInterfaceModifiers(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceModifiersContext = InterfaceModifiersContext;\r\nclass InterfaceNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceName) {\r\n            return visitor.visitInterfaceName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceNameContext = InterfaceNameContext;\r\nclass InterfaceModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceModifier) {\r\n            return visitor.visitInterfaceModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceModifierContext = InterfaceModifierContext;\r\nclass ExtendsInterfacesContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceTypeList() {\r\n        return this.getRuleContext(0, InterfaceTypeListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_extendsInterfaces;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExtendsInterfaces) {\r\n            return visitor.visitExtendsInterfaces(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExtendsInterfacesContext = ExtendsInterfacesContext;\r\nclass InterfaceBodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceMemberDeclaration(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(InterfaceMemberDeclarationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, InterfaceMemberDeclarationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceBody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceBody) {\r\n            return visitor.visitInterfaceBody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceBodyContext = InterfaceBodyContext;\r\nclass InterfaceMemberDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constantDeclaration() {\r\n        return this.tryGetRuleContext(0, ConstantDeclarationContext);\r\n    }\r\n    interfaceMethodDeclaration() {\r\n        return this.tryGetRuleContext(0, InterfaceMethodDeclarationContext);\r\n    }\r\n    classDeclaration() {\r\n        return this.tryGetRuleContext(0, ClassDeclarationContext);\r\n    }\r\n    interfaceDeclaration() {\r\n        return this.tryGetRuleContext(0, InterfaceDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceMemberDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceMemberDeclaration) {\r\n            return visitor.visitInterfaceMemberDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;\r\nclass ConstantDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constantModifiers() {\r\n        return this.getRuleContext(0, ConstantModifiersContext);\r\n    }\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    variableDeclaratorList() {\r\n        return this.getRuleContext(0, VariableDeclaratorListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_constantDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstantDeclaration) {\r\n            return visitor.visitConstantDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstantDeclarationContext = ConstantDeclarationContext;\r\nclass ConstantModifiersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constantModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ConstantModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ConstantModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_constantModifiers;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstantModifiers) {\r\n            return visitor.visitConstantModifiers(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstantModifiersContext = ConstantModifiersContext;\r\nclass ConstantModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_constantModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstantModifier) {\r\n            return visitor.visitConstantModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstantModifierContext = ConstantModifierContext;\r\nclass InterfaceMethodDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceMethodModifiers() {\r\n        return this.getRuleContext(0, InterfaceMethodModifiersContext);\r\n    }\r\n    methodHeader() {\r\n        return this.getRuleContext(0, MethodHeaderContext);\r\n    }\r\n    methodBody() {\r\n        return this.getRuleContext(0, MethodBodyContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceMethodDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceMethodDeclaration) {\r\n            return visitor.visitInterfaceMethodDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;\r\nclass InterfaceMethodModifiersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    interfaceMethodModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(InterfaceMethodModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, InterfaceMethodModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceMethodModifiers;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceMethodModifiers) {\r\n            return visitor.visitInterfaceMethodModifiers(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceMethodModifiersContext = InterfaceMethodModifiersContext;\r\nclass InterfaceMethodModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_interfaceMethodModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInterfaceMethodModifier) {\r\n            return visitor.visitInterfaceMethodModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InterfaceMethodModifierContext = InterfaceMethodModifierContext;\r\nclass AnnotationTypeDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    annotationTypeBody() {\r\n        return this.getRuleContext(0, AnnotationTypeBodyContext);\r\n    }\r\n    interfaceModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(InterfaceModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, InterfaceModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_annotationTypeDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAnnotationTypeDeclaration) {\r\n            return visitor.visitAnnotationTypeDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext;\r\nclass AnnotationTypeBodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotationTypeMemberDeclaration(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationTypeMemberDeclarationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationTypeMemberDeclarationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_annotationTypeBody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAnnotationTypeBody) {\r\n            return visitor.visitAnnotationTypeBody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AnnotationTypeBodyContext = AnnotationTypeBodyContext;\r\nclass AnnotationTypeMemberDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotationTypeElementDeclaration() {\r\n        return this.tryGetRuleContext(0, AnnotationTypeElementDeclarationContext);\r\n    }\r\n    constantDeclaration() {\r\n        return this.tryGetRuleContext(0, ConstantDeclarationContext);\r\n    }\r\n    classDeclaration() {\r\n        return this.tryGetRuleContext(0, ClassDeclarationContext);\r\n    }\r\n    interfaceDeclaration() {\r\n        return this.tryGetRuleContext(0, InterfaceDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_annotationTypeMemberDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAnnotationTypeMemberDeclaration) {\r\n            return visitor.visitAnnotationTypeMemberDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AnnotationTypeMemberDeclarationContext = AnnotationTypeMemberDeclarationContext;\r\nclass AnnotationTypeElementDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    annotationTypeElementModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationTypeElementModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationTypeElementModifierContext);\r\n        }\r\n    }\r\n    dims() {\r\n        return this.tryGetRuleContext(0, DimsContext);\r\n    }\r\n    defaultValue() {\r\n        return this.tryGetRuleContext(0, DefaultValueContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_annotationTypeElementDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAnnotationTypeElementDeclaration) {\r\n            return visitor.visitAnnotationTypeElementDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext;\r\nclass AnnotationTypeElementModifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_annotationTypeElementModifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAnnotationTypeElementModifier) {\r\n            return visitor.visitAnnotationTypeElementModifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AnnotationTypeElementModifierContext = AnnotationTypeElementModifierContext;\r\nclass DefaultValueContext extends ParserRuleContext_1.ParserRuleContext {\r\n    elementValue() {\r\n        return this.getRuleContext(0, ElementValueContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_defaultValue;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDefaultValue) {\r\n            return visitor.visitDefaultValue(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DefaultValueContext = DefaultValueContext;\r\nclass AnnotationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    normalAnnotation() {\r\n        return this.tryGetRuleContext(0, NormalAnnotationContext);\r\n    }\r\n    markerAnnotation() {\r\n        return this.tryGetRuleContext(0, MarkerAnnotationContext);\r\n    }\r\n    singleElementAnnotation() {\r\n        return this.tryGetRuleContext(0, SingleElementAnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_annotation;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAnnotation) {\r\n            return visitor.visitAnnotation(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AnnotationContext = AnnotationContext;\r\nclass NormalAnnotationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeName() {\r\n        return this.getRuleContext(0, TypeNameContext);\r\n    }\r\n    elementValuePairList() {\r\n        return this.tryGetRuleContext(0, ElementValuePairListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_normalAnnotation;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNormalAnnotation) {\r\n            return visitor.visitNormalAnnotation(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NormalAnnotationContext = NormalAnnotationContext;\r\nclass ElementValuePairListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    elementValuePair(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ElementValuePairContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ElementValuePairContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_elementValuePairList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitElementValuePairList) {\r\n            return visitor.visitElementValuePairList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ElementValuePairListContext = ElementValuePairListContext;\r\nclass ElementValuePairContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    elementValue() {\r\n        return this.getRuleContext(0, ElementValueContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_elementValuePair;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitElementValuePair) {\r\n            return visitor.visitElementValuePair(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ElementValuePairContext = ElementValuePairContext;\r\nclass ElementValueContext extends ParserRuleContext_1.ParserRuleContext {\r\n    conditionalExpression() {\r\n        return this.tryGetRuleContext(0, ConditionalExpressionContext);\r\n    }\r\n    elementValueArrayInitializer() {\r\n        return this.tryGetRuleContext(0, ElementValueArrayInitializerContext);\r\n    }\r\n    annotation() {\r\n        return this.tryGetRuleContext(0, AnnotationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_elementValue;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitElementValue) {\r\n            return visitor.visitElementValue(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ElementValueContext = ElementValueContext;\r\nclass ElementValueArrayInitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    elementValueList() {\r\n        return this.tryGetRuleContext(0, ElementValueListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_elementValueArrayInitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitElementValueArrayInitializer) {\r\n            return visitor.visitElementValueArrayInitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;\r\nclass ElementValueListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    elementValue(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ElementValueContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ElementValueContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_elementValueList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitElementValueList) {\r\n            return visitor.visitElementValueList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ElementValueListContext = ElementValueListContext;\r\nclass MarkerAnnotationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeName() {\r\n        return this.getRuleContext(0, TypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_markerAnnotation;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMarkerAnnotation) {\r\n            return visitor.visitMarkerAnnotation(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MarkerAnnotationContext = MarkerAnnotationContext;\r\nclass SingleElementAnnotationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeName() {\r\n        return this.getRuleContext(0, TypeNameContext);\r\n    }\r\n    elementValue() {\r\n        return this.getRuleContext(0, ElementValueContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_singleElementAnnotation;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSingleElementAnnotation) {\r\n            return visitor.visitSingleElementAnnotation(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SingleElementAnnotationContext = SingleElementAnnotationContext;\r\nclass ArrayInitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    variableInitializerList() {\r\n        return this.tryGetRuleContext(0, VariableInitializerListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_arrayInitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitArrayInitializer) {\r\n            return visitor.visitArrayInitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ArrayInitializerContext = ArrayInitializerContext;\r\nclass VariableInitializerListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    variableInitializer(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableInitializerContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableInitializerContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_variableInitializerList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariableInitializerList) {\r\n            return visitor.visitVariableInitializerList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariableInitializerListContext = VariableInitializerListContext;\r\nclass BlockContext extends ParserRuleContext_1.ParserRuleContext {\r\n    blockStatements() {\r\n        return this.tryGetRuleContext(0, BlockStatementsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_block;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBlock) {\r\n            return visitor.visitBlock(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BlockContext = BlockContext;\r\nclass BlockStatementsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    blockStatement(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(BlockStatementContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, BlockStatementContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_blockStatements;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBlockStatements) {\r\n            return visitor.visitBlockStatements(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BlockStatementsContext = BlockStatementsContext;\r\nclass BlockStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    localVariableDeclarationStatement() {\r\n        return this.tryGetRuleContext(0, LocalVariableDeclarationStatementContext);\r\n    }\r\n    classDeclaration() {\r\n        return this.tryGetRuleContext(0, ClassDeclarationContext);\r\n    }\r\n    statement() {\r\n        return this.tryGetRuleContext(0, StatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_blockStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBlockStatement) {\r\n            return visitor.visitBlockStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BlockStatementContext = BlockStatementContext;\r\nclass LocalVariableDeclarationStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    localVariableDeclaration() {\r\n        return this.getRuleContext(0, LocalVariableDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_localVariableDeclarationStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLocalVariableDeclarationStatement) {\r\n            return visitor.visitLocalVariableDeclarationStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;\r\nclass LocalVariableDeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    variableDeclaratorList() {\r\n        return this.getRuleContext(0, VariableDeclaratorListContext);\r\n    }\r\n    variableModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_localVariableDeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLocalVariableDeclaration) {\r\n            return visitor.visitLocalVariableDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LocalVariableDeclarationContext = LocalVariableDeclarationContext;\r\nclass StatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementWithoutTrailingSubstatement() {\r\n        return this.tryGetRuleContext(0, StatementWithoutTrailingSubstatementContext);\r\n    }\r\n    labeledStatement() {\r\n        return this.tryGetRuleContext(0, LabeledStatementContext);\r\n    }\r\n    ifThenStatement() {\r\n        return this.tryGetRuleContext(0, IfThenStatementContext);\r\n    }\r\n    ifThenElseStatement() {\r\n        return this.tryGetRuleContext(0, IfThenElseStatementContext);\r\n    }\r\n    whileStatement() {\r\n        return this.tryGetRuleContext(0, WhileStatementContext);\r\n    }\r\n    forStatement() {\r\n        return this.tryGetRuleContext(0, ForStatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_statement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatement) {\r\n            return visitor.visitStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementContext = StatementContext;\r\nclass StatementNoShortIfContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementWithoutTrailingSubstatement() {\r\n        return this.tryGetRuleContext(0, StatementWithoutTrailingSubstatementContext);\r\n    }\r\n    labeledStatementNoShortIf() {\r\n        return this.tryGetRuleContext(0, LabeledStatementNoShortIfContext);\r\n    }\r\n    ifThenElseStatementNoShortIf() {\r\n        return this.tryGetRuleContext(0, IfThenElseStatementNoShortIfContext);\r\n    }\r\n    whileStatementNoShortIf() {\r\n        return this.tryGetRuleContext(0, WhileStatementNoShortIfContext);\r\n    }\r\n    forStatementNoShortIf() {\r\n        return this.tryGetRuleContext(0, ForStatementNoShortIfContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_statementNoShortIf;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatementNoShortIf) {\r\n            return visitor.visitStatementNoShortIf(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementNoShortIfContext = StatementNoShortIfContext;\r\nclass StatementWithoutTrailingSubstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    block() {\r\n        return this.tryGetRuleContext(0, BlockContext);\r\n    }\r\n    emptyStatement() {\r\n        return this.tryGetRuleContext(0, EmptyStatementContext);\r\n    }\r\n    expressionStatement() {\r\n        return this.tryGetRuleContext(0, ExpressionStatementContext);\r\n    }\r\n    assertStatement() {\r\n        return this.tryGetRuleContext(0, AssertStatementContext);\r\n    }\r\n    switchStatement() {\r\n        return this.tryGetRuleContext(0, SwitchStatementContext);\r\n    }\r\n    doStatement() {\r\n        return this.tryGetRuleContext(0, DoStatementContext);\r\n    }\r\n    breakStatement() {\r\n        return this.tryGetRuleContext(0, BreakStatementContext);\r\n    }\r\n    continueStatement() {\r\n        return this.tryGetRuleContext(0, ContinueStatementContext);\r\n    }\r\n    returnStatement() {\r\n        return this.tryGetRuleContext(0, ReturnStatementContext);\r\n    }\r\n    synchronizedStatement() {\r\n        return this.tryGetRuleContext(0, SynchronizedStatementContext);\r\n    }\r\n    throwStatement() {\r\n        return this.tryGetRuleContext(0, ThrowStatementContext);\r\n    }\r\n    tryStatement() {\r\n        return this.tryGetRuleContext(0, TryStatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_statementWithoutTrailingSubstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatementWithoutTrailingSubstatement) {\r\n            return visitor.visitStatementWithoutTrailingSubstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext;\r\nclass EmptyStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_emptyStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEmptyStatement) {\r\n            return visitor.visitEmptyStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EmptyStatementContext = EmptyStatementContext;\r\nclass LabeledStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_labeledStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLabeledStatement) {\r\n            return visitor.visitLabeledStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LabeledStatementContext = LabeledStatementContext;\r\nclass LabeledStatementNoShortIfContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    statementNoShortIf() {\r\n        return this.getRuleContext(0, StatementNoShortIfContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_labeledStatementNoShortIf;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLabeledStatementNoShortIf) {\r\n            return visitor.visitLabeledStatementNoShortIf(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LabeledStatementNoShortIfContext = LabeledStatementNoShortIfContext;\r\nclass ExpressionStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementExpression() {\r\n        return this.getRuleContext(0, StatementExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_expressionStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExpressionStatement) {\r\n            return visitor.visitExpressionStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExpressionStatementContext = ExpressionStatementContext;\r\nclass StatementExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    assignment() {\r\n        return this.tryGetRuleContext(0, AssignmentContext);\r\n    }\r\n    preIncrementExpression() {\r\n        return this.tryGetRuleContext(0, PreIncrementExpressionContext);\r\n    }\r\n    preDecrementExpression() {\r\n        return this.tryGetRuleContext(0, PreDecrementExpressionContext);\r\n    }\r\n    postIncrementExpression() {\r\n        return this.tryGetRuleContext(0, PostIncrementExpressionContext);\r\n    }\r\n    postDecrementExpression() {\r\n        return this.tryGetRuleContext(0, PostDecrementExpressionContext);\r\n    }\r\n    methodInvocation() {\r\n        return this.tryGetRuleContext(0, MethodInvocationContext);\r\n    }\r\n    classInstanceCreationExpression() {\r\n        return this.tryGetRuleContext(0, ClassInstanceCreationExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_statementExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatementExpression) {\r\n            return visitor.visitStatementExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementExpressionContext = StatementExpressionContext;\r\nclass IfThenStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_ifThenStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIfThenStatement) {\r\n            return visitor.visitIfThenStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IfThenStatementContext = IfThenStatementContext;\r\nclass IfThenElseStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    statementNoShortIf() {\r\n        return this.getRuleContext(0, StatementNoShortIfContext);\r\n    }\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_ifThenElseStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIfThenElseStatement) {\r\n            return visitor.visitIfThenElseStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IfThenElseStatementContext = IfThenElseStatementContext;\r\nclass IfThenElseStatementNoShortIfContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    statementNoShortIf(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(StatementNoShortIfContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, StatementNoShortIfContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_ifThenElseStatementNoShortIf;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIfThenElseStatementNoShortIf) {\r\n            return visitor.visitIfThenElseStatementNoShortIf(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IfThenElseStatementNoShortIfContext = IfThenElseStatementNoShortIfContext;\r\nclass AssertStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ExpressionContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ExpressionContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_assertStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAssertStatement) {\r\n            return visitor.visitAssertStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AssertStatementContext = AssertStatementContext;\r\nclass SwitchStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    switchBlock() {\r\n        return this.getRuleContext(0, SwitchBlockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_switchStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSwitchStatement) {\r\n            return visitor.visitSwitchStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SwitchStatementContext = SwitchStatementContext;\r\nclass SwitchBlockContext extends ParserRuleContext_1.ParserRuleContext {\r\n    switchBlockStatementGroup(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(SwitchBlockStatementGroupContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, SwitchBlockStatementGroupContext);\r\n        }\r\n    }\r\n    switchLabel(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(SwitchLabelContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, SwitchLabelContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_switchBlock;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSwitchBlock) {\r\n            return visitor.visitSwitchBlock(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SwitchBlockContext = SwitchBlockContext;\r\nclass SwitchBlockStatementGroupContext extends ParserRuleContext_1.ParserRuleContext {\r\n    switchLabels() {\r\n        return this.getRuleContext(0, SwitchLabelsContext);\r\n    }\r\n    blockStatements() {\r\n        return this.getRuleContext(0, BlockStatementsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_switchBlockStatementGroup;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSwitchBlockStatementGroup) {\r\n            return visitor.visitSwitchBlockStatementGroup(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext;\r\nclass SwitchLabelsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    switchLabel(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(SwitchLabelContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, SwitchLabelContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_switchLabels;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSwitchLabels) {\r\n            return visitor.visitSwitchLabels(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SwitchLabelsContext = SwitchLabelsContext;\r\nclass SwitchLabelContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constantExpression() {\r\n        return this.tryGetRuleContext(0, ConstantExpressionContext);\r\n    }\r\n    enumConstantName() {\r\n        return this.tryGetRuleContext(0, EnumConstantNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_switchLabel;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSwitchLabel) {\r\n            return visitor.visitSwitchLabel(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SwitchLabelContext = SwitchLabelContext;\r\nclass EnumConstantNameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enumConstantName;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumConstantName) {\r\n            return visitor.visitEnumConstantName(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumConstantNameContext = EnumConstantNameContext;\r\nclass WhileStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_whileStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitWhileStatement) {\r\n            return visitor.visitWhileStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.WhileStatementContext = WhileStatementContext;\r\nclass WhileStatementNoShortIfContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    statementNoShortIf() {\r\n        return this.getRuleContext(0, StatementNoShortIfContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_whileStatementNoShortIf;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitWhileStatementNoShortIf) {\r\n            return visitor.visitWhileStatementNoShortIf(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.WhileStatementNoShortIfContext = WhileStatementNoShortIfContext;\r\nclass DoStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_doStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDoStatement) {\r\n            return visitor.visitDoStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DoStatementContext = DoStatementContext;\r\nclass ForStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    basicForStatement() {\r\n        return this.tryGetRuleContext(0, BasicForStatementContext);\r\n    }\r\n    enhancedForStatement() {\r\n        return this.tryGetRuleContext(0, EnhancedForStatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_forStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitForStatement) {\r\n            return visitor.visitForStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ForStatementContext = ForStatementContext;\r\nclass ForStatementNoShortIfContext extends ParserRuleContext_1.ParserRuleContext {\r\n    basicForStatementNoShortIf() {\r\n        return this.tryGetRuleContext(0, BasicForStatementNoShortIfContext);\r\n    }\r\n    enhancedForStatementNoShortIf() {\r\n        return this.tryGetRuleContext(0, EnhancedForStatementNoShortIfContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_forStatementNoShortIf;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitForStatementNoShortIf) {\r\n            return visitor.visitForStatementNoShortIf(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ForStatementNoShortIfContext = ForStatementNoShortIfContext;\r\nclass BasicForStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    forInit() {\r\n        return this.tryGetRuleContext(0, ForInitContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    forUpdate() {\r\n        return this.tryGetRuleContext(0, ForUpdateContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_basicForStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBasicForStatement) {\r\n            return visitor.visitBasicForStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BasicForStatementContext = BasicForStatementContext;\r\nclass BasicForStatementNoShortIfContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementNoShortIf() {\r\n        return this.getRuleContext(0, StatementNoShortIfContext);\r\n    }\r\n    forInit() {\r\n        return this.tryGetRuleContext(0, ForInitContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    forUpdate() {\r\n        return this.tryGetRuleContext(0, ForUpdateContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_basicForStatementNoShortIf;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBasicForStatementNoShortIf) {\r\n            return visitor.visitBasicForStatementNoShortIf(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BasicForStatementNoShortIfContext = BasicForStatementNoShortIfContext;\r\nclass ForInitContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementExpressionList() {\r\n        return this.tryGetRuleContext(0, StatementExpressionListContext);\r\n    }\r\n    localVariableDeclaration() {\r\n        return this.tryGetRuleContext(0, LocalVariableDeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_forInit;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitForInit) {\r\n            return visitor.visitForInit(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ForInitContext = ForInitContext;\r\nclass ForUpdateContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementExpressionList() {\r\n        return this.getRuleContext(0, StatementExpressionListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_forUpdate;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitForUpdate) {\r\n            return visitor.visitForUpdate(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ForUpdateContext = ForUpdateContext;\r\nclass StatementExpressionListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementExpression(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(StatementExpressionContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, StatementExpressionContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_statementExpressionList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatementExpressionList) {\r\n            return visitor.visitStatementExpressionList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementExpressionListContext = StatementExpressionListContext;\r\nclass EnhancedForStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    variableDeclaratorId() {\r\n        return this.getRuleContext(0, VariableDeclaratorIdContext);\r\n    }\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    variableModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enhancedForStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnhancedForStatement) {\r\n            return visitor.visitEnhancedForStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnhancedForStatementContext = EnhancedForStatementContext;\r\nclass EnhancedForStatementNoShortIfContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    variableDeclaratorId() {\r\n        return this.getRuleContext(0, VariableDeclaratorIdContext);\r\n    }\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    statementNoShortIf() {\r\n        return this.getRuleContext(0, StatementNoShortIfContext);\r\n    }\r\n    variableModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_enhancedForStatementNoShortIf;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnhancedForStatementNoShortIf) {\r\n            return visitor.visitEnhancedForStatementNoShortIf(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnhancedForStatementNoShortIfContext = EnhancedForStatementNoShortIfContext;\r\nclass BreakStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.tryGetToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_breakStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBreakStatement) {\r\n            return visitor.visitBreakStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BreakStatementContext = BreakStatementContext;\r\nclass ContinueStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.tryGetToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_continueStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitContinueStatement) {\r\n            return visitor.visitContinueStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ContinueStatementContext = ContinueStatementContext;\r\nclass ReturnStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_returnStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitReturnStatement) {\r\n            return visitor.visitReturnStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ReturnStatementContext = ReturnStatementContext;\r\nclass ThrowStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_throwStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitThrowStatement) {\r\n            return visitor.visitThrowStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ThrowStatementContext = ThrowStatementContext;\r\nclass SynchronizedStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    block() {\r\n        return this.getRuleContext(0, BlockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_synchronizedStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSynchronizedStatement) {\r\n            return visitor.visitSynchronizedStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SynchronizedStatementContext = SynchronizedStatementContext;\r\nclass TryStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    block() {\r\n        return this.tryGetRuleContext(0, BlockContext);\r\n    }\r\n    catches() {\r\n        return this.tryGetRuleContext(0, CatchesContext);\r\n    }\r\n    finally_() {\r\n        return this.tryGetRuleContext(0, Finally_Context);\r\n    }\r\n    tryWithResourcesStatement() {\r\n        return this.tryGetRuleContext(0, TryWithResourcesStatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_tryStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTryStatement) {\r\n            return visitor.visitTryStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TryStatementContext = TryStatementContext;\r\nclass CatchesContext extends ParserRuleContext_1.ParserRuleContext {\r\n    catchClause(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(CatchClauseContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, CatchClauseContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_catches;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCatches) {\r\n            return visitor.visitCatches(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CatchesContext = CatchesContext;\r\nclass CatchClauseContext extends ParserRuleContext_1.ParserRuleContext {\r\n    catchFormalParameter() {\r\n        return this.getRuleContext(0, CatchFormalParameterContext);\r\n    }\r\n    block() {\r\n        return this.getRuleContext(0, BlockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_catchClause;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCatchClause) {\r\n            return visitor.visitCatchClause(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CatchClauseContext = CatchClauseContext;\r\nclass CatchFormalParameterContext extends ParserRuleContext_1.ParserRuleContext {\r\n    catchType() {\r\n        return this.getRuleContext(0, CatchTypeContext);\r\n    }\r\n    variableDeclaratorId() {\r\n        return this.getRuleContext(0, VariableDeclaratorIdContext);\r\n    }\r\n    variableModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_catchFormalParameter;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCatchFormalParameter) {\r\n            return visitor.visitCatchFormalParameter(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CatchFormalParameterContext = CatchFormalParameterContext;\r\nclass CatchTypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannClassType() {\r\n        return this.getRuleContext(0, UnannClassTypeContext);\r\n    }\r\n    classType(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ClassTypeContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ClassTypeContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_catchType;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCatchType) {\r\n            return visitor.visitCatchType(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CatchTypeContext = CatchTypeContext;\r\nclass Finally_Context extends ParserRuleContext_1.ParserRuleContext {\r\n    block() {\r\n        return this.getRuleContext(0, BlockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_finally_;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFinally_) {\r\n            return visitor.visitFinally_(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.Finally_Context = Finally_Context;\r\nclass TryWithResourcesStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    resourceSpecification() {\r\n        return this.getRuleContext(0, ResourceSpecificationContext);\r\n    }\r\n    block() {\r\n        return this.getRuleContext(0, BlockContext);\r\n    }\r\n    catches() {\r\n        return this.tryGetRuleContext(0, CatchesContext);\r\n    }\r\n    finally_() {\r\n        return this.tryGetRuleContext(0, Finally_Context);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_tryWithResourcesStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTryWithResourcesStatement) {\r\n            return visitor.visitTryWithResourcesStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TryWithResourcesStatementContext = TryWithResourcesStatementContext;\r\nclass ResourceSpecificationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    resourceList() {\r\n        return this.getRuleContext(0, ResourceListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_resourceSpecification;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitResourceSpecification) {\r\n            return visitor.visitResourceSpecification(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ResourceSpecificationContext = ResourceSpecificationContext;\r\nclass ResourceListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    resource(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ResourceContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ResourceContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_resourceList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitResourceList) {\r\n            return visitor.visitResourceList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ResourceListContext = ResourceListContext;\r\nclass ResourceContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unannType() {\r\n        return this.getRuleContext(0, UnannTypeContext);\r\n    }\r\n    variableDeclaratorId() {\r\n        return this.getRuleContext(0, VariableDeclaratorIdContext);\r\n    }\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    variableModifier(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableModifierContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableModifierContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_resource;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitResource) {\r\n            return visitor.visitResource(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ResourceContext = ResourceContext;\r\nclass PrimaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primaryNoNewArray_lfno_primary() {\r\n        return this.tryGetRuleContext(0, PrimaryNoNewArray_lfno_primaryContext);\r\n    }\r\n    arrayCreationExpression() {\r\n        return this.tryGetRuleContext(0, ArrayCreationExpressionContext);\r\n    }\r\n    primaryNoNewArray_lf_primary(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PrimaryNoNewArray_lf_primaryContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PrimaryNoNewArray_lf_primaryContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimary) {\r\n            return visitor.visitPrimary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryContext = PrimaryContext;\r\nclass PrimaryNoNewArrayContext extends ParserRuleContext_1.ParserRuleContext {\r\n    literal() {\r\n        return this.tryGetRuleContext(0, LiteralContext);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    classInstanceCreationExpression() {\r\n        return this.tryGetRuleContext(0, ClassInstanceCreationExpressionContext);\r\n    }\r\n    fieldAccess() {\r\n        return this.tryGetRuleContext(0, FieldAccessContext);\r\n    }\r\n    arrayAccess() {\r\n        return this.tryGetRuleContext(0, ArrayAccessContext);\r\n    }\r\n    methodInvocation() {\r\n        return this.tryGetRuleContext(0, MethodInvocationContext);\r\n    }\r\n    methodReference() {\r\n        return this.tryGetRuleContext(0, MethodReferenceContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray) {\r\n            return visitor.visitPrimaryNoNewArray(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArrayContext = PrimaryNoNewArrayContext;\r\nclass PrimaryNoNewArray_lf_arrayAccessContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray_lf_arrayAccess) {\r\n            return visitor.visitPrimaryNoNewArray_lf_arrayAccess(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArray_lf_arrayAccessContext = PrimaryNoNewArray_lf_arrayAccessContext;\r\nclass PrimaryNoNewArray_lfno_arrayAccessContext extends ParserRuleContext_1.ParserRuleContext {\r\n    literal() {\r\n        return this.tryGetRuleContext(0, LiteralContext);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    classInstanceCreationExpression() {\r\n        return this.tryGetRuleContext(0, ClassInstanceCreationExpressionContext);\r\n    }\r\n    fieldAccess() {\r\n        return this.tryGetRuleContext(0, FieldAccessContext);\r\n    }\r\n    methodInvocation() {\r\n        return this.tryGetRuleContext(0, MethodInvocationContext);\r\n    }\r\n    methodReference() {\r\n        return this.tryGetRuleContext(0, MethodReferenceContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray_lfno_arrayAccess) {\r\n            return visitor.visitPrimaryNoNewArray_lfno_arrayAccess(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArray_lfno_arrayAccessContext = PrimaryNoNewArray_lfno_arrayAccessContext;\r\nclass PrimaryNoNewArray_lf_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classInstanceCreationExpression_lf_primary() {\r\n        return this.tryGetRuleContext(0, ClassInstanceCreationExpression_lf_primaryContext);\r\n    }\r\n    fieldAccess_lf_primary() {\r\n        return this.tryGetRuleContext(0, FieldAccess_lf_primaryContext);\r\n    }\r\n    arrayAccess_lf_primary() {\r\n        return this.tryGetRuleContext(0, ArrayAccess_lf_primaryContext);\r\n    }\r\n    methodInvocation_lf_primary() {\r\n        return this.tryGetRuleContext(0, MethodInvocation_lf_primaryContext);\r\n    }\r\n    methodReference_lf_primary() {\r\n        return this.tryGetRuleContext(0, MethodReference_lf_primaryContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray_lf_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray_lf_primary) {\r\n            return visitor.visitPrimaryNoNewArray_lf_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArray_lf_primaryContext = PrimaryNoNewArray_lf_primaryContext;\r\nclass PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary) {\r\n            return visitor.visitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext;\r\nclass PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classInstanceCreationExpression_lf_primary() {\r\n        return this.tryGetRuleContext(0, ClassInstanceCreationExpression_lf_primaryContext);\r\n    }\r\n    fieldAccess_lf_primary() {\r\n        return this.tryGetRuleContext(0, FieldAccess_lf_primaryContext);\r\n    }\r\n    methodInvocation_lf_primary() {\r\n        return this.tryGetRuleContext(0, MethodInvocation_lf_primaryContext);\r\n    }\r\n    methodReference_lf_primary() {\r\n        return this.tryGetRuleContext(0, MethodReference_lf_primaryContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary) {\r\n            return visitor.visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext;\r\nclass PrimaryNoNewArray_lfno_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    literal() {\r\n        return this.tryGetRuleContext(0, LiteralContext);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    unannPrimitiveType() {\r\n        return this.tryGetRuleContext(0, UnannPrimitiveTypeContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    classInstanceCreationExpression_lfno_primary() {\r\n        return this.tryGetRuleContext(0, ClassInstanceCreationExpression_lfno_primaryContext);\r\n    }\r\n    fieldAccess_lfno_primary() {\r\n        return this.tryGetRuleContext(0, FieldAccess_lfno_primaryContext);\r\n    }\r\n    arrayAccess_lfno_primary() {\r\n        return this.tryGetRuleContext(0, ArrayAccess_lfno_primaryContext);\r\n    }\r\n    methodInvocation_lfno_primary() {\r\n        return this.tryGetRuleContext(0, MethodInvocation_lfno_primaryContext);\r\n    }\r\n    methodReference_lfno_primary() {\r\n        return this.tryGetRuleContext(0, MethodReference_lfno_primaryContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray_lfno_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray_lfno_primary) {\r\n            return visitor.visitPrimaryNoNewArray_lfno_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArray_lfno_primaryContext = PrimaryNoNewArray_lfno_primaryContext;\r\nclass PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary) {\r\n            return visitor.visitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext;\r\nclass PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    literal() {\r\n        return this.tryGetRuleContext(0, LiteralContext);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    unannPrimitiveType() {\r\n        return this.tryGetRuleContext(0, UnannPrimitiveTypeContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    classInstanceCreationExpression_lfno_primary() {\r\n        return this.tryGetRuleContext(0, ClassInstanceCreationExpression_lfno_primaryContext);\r\n    }\r\n    fieldAccess_lfno_primary() {\r\n        return this.tryGetRuleContext(0, FieldAccess_lfno_primaryContext);\r\n    }\r\n    methodInvocation_lfno_primary() {\r\n        return this.tryGetRuleContext(0, MethodInvocation_lfno_primaryContext);\r\n    }\r\n    methodReference_lfno_primary() {\r\n        return this.tryGetRuleContext(0, MethodReference_lfno_primaryContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary) {\r\n            return visitor.visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext;\r\nclass ClassInstanceCreationExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.Identifier);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.Identifier, i);\r\n        }\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    typeArgumentsOrDiamond() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsOrDiamondContext);\r\n    }\r\n    argumentList() {\r\n        return this.tryGetRuleContext(0, ArgumentListContext);\r\n    }\r\n    classBody() {\r\n        return this.tryGetRuleContext(0, ClassBodyContext);\r\n    }\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    primary() {\r\n        return this.tryGetRuleContext(0, PrimaryContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classInstanceCreationExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassInstanceCreationExpression) {\r\n            return visitor.visitClassInstanceCreationExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext;\r\nclass ClassInstanceCreationExpression_lf_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    typeArgumentsOrDiamond() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsOrDiamondContext);\r\n    }\r\n    argumentList() {\r\n        return this.tryGetRuleContext(0, ArgumentListContext);\r\n    }\r\n    classBody() {\r\n        return this.tryGetRuleContext(0, ClassBodyContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classInstanceCreationExpression_lf_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassInstanceCreationExpression_lf_primary) {\r\n            return visitor.visitClassInstanceCreationExpression_lf_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassInstanceCreationExpression_lf_primaryContext = ClassInstanceCreationExpression_lf_primaryContext;\r\nclass ClassInstanceCreationExpression_lfno_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.Identifier);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.Identifier, i);\r\n        }\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    typeArgumentsOrDiamond() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsOrDiamondContext);\r\n    }\r\n    argumentList() {\r\n        return this.tryGetRuleContext(0, ArgumentListContext);\r\n    }\r\n    classBody() {\r\n        return this.tryGetRuleContext(0, ClassBodyContext);\r\n    }\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_classInstanceCreationExpression_lfno_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassInstanceCreationExpression_lfno_primary) {\r\n            return visitor.visitClassInstanceCreationExpression_lfno_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassInstanceCreationExpression_lfno_primaryContext = ClassInstanceCreationExpression_lfno_primaryContext;\r\nclass TypeArgumentsOrDiamondContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_typeArgumentsOrDiamond;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeArgumentsOrDiamond) {\r\n            return visitor.visitTypeArgumentsOrDiamond(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;\r\nclass FieldAccessContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primary() {\r\n        return this.tryGetRuleContext(0, PrimaryContext);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_fieldAccess;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFieldAccess) {\r\n            return visitor.visitFieldAccess(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FieldAccessContext = FieldAccessContext;\r\nclass FieldAccess_lf_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_fieldAccess_lf_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFieldAccess_lf_primary) {\r\n            return visitor.visitFieldAccess_lf_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FieldAccess_lf_primaryContext = FieldAccess_lf_primaryContext;\r\nclass FieldAccess_lfno_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_fieldAccess_lfno_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFieldAccess_lfno_primary) {\r\n            return visitor.visitFieldAccess_lfno_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FieldAccess_lfno_primaryContext = FieldAccess_lfno_primaryContext;\r\nclass ArrayAccessContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    LBRACK(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.LBRACK);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.LBRACK, i);\r\n        }\r\n    }\r\n    expression(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ExpressionContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ExpressionContext);\r\n        }\r\n    }\r\n    RBRACK(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.RBRACK);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.RBRACK, i);\r\n        }\r\n    }\r\n    primaryNoNewArray_lfno_arrayAccess() {\r\n        return this.tryGetRuleContext(0, PrimaryNoNewArray_lfno_arrayAccessContext);\r\n    }\r\n    primaryNoNewArray_lf_arrayAccess(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PrimaryNoNewArray_lf_arrayAccessContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PrimaryNoNewArray_lf_arrayAccessContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_arrayAccess;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitArrayAccess) {\r\n            return visitor.visitArrayAccess(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ArrayAccessContext = ArrayAccessContext;\r\nclass ArrayAccess_lf_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {\r\n        return this.tryGetRuleContext(0, PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext);\r\n    }\r\n    LBRACK(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.LBRACK);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.LBRACK, i);\r\n        }\r\n    }\r\n    expression(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ExpressionContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ExpressionContext);\r\n        }\r\n    }\r\n    RBRACK(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.RBRACK);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.RBRACK, i);\r\n        }\r\n    }\r\n    primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_arrayAccess_lf_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitArrayAccess_lf_primary) {\r\n            return visitor.visitArrayAccess_lf_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ArrayAccess_lf_primaryContext = ArrayAccess_lf_primaryContext;\r\nclass ArrayAccess_lfno_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    LBRACK(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.LBRACK);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.LBRACK, i);\r\n        }\r\n    }\r\n    expression(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ExpressionContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ExpressionContext);\r\n        }\r\n    }\r\n    RBRACK(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.RBRACK);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.RBRACK, i);\r\n        }\r\n    }\r\n    primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {\r\n        return this.tryGetRuleContext(0, PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext);\r\n    }\r\n    primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_arrayAccess_lfno_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitArrayAccess_lfno_primary) {\r\n            return visitor.visitArrayAccess_lfno_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ArrayAccess_lfno_primaryContext = ArrayAccess_lfno_primaryContext;\r\nclass MethodInvocationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    ident() {\r\n        return this.tryGetRuleContext(0, IdentContext);\r\n    }\r\n    argumentList() {\r\n        return this.tryGetRuleContext(0, ArgumentListContext);\r\n    }\r\n    receivers() {\r\n        return this.tryGetRuleContext(0, ReceiversContext);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    primary() {\r\n        return this.tryGetRuleContext(0, PrimaryContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodInvocation;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodInvocation) {\r\n            return visitor.visitMethodInvocation(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodInvocationContext = MethodInvocationContext;\r\nclass ReceiversContext extends ParserRuleContext_1.ParserRuleContext {\r\n    receiver() {\r\n        return this.getRuleContext(0, ReceiverContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_receivers;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitReceivers) {\r\n            return visitor.visitReceivers(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ReceiversContext = ReceiversContext;\r\nclass ReceiverContext extends ParserRuleContext_1.ParserRuleContext {\r\n    ident(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(IdentContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, IdentContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_receiver;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitReceiver) {\r\n            return visitor.visitReceiver(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ReceiverContext = ReceiverContext;\r\nclass IdentContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_ident;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIdent) {\r\n            return visitor.visitIdent(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IdentContext = IdentContext;\r\nclass MethodInvocation_lf_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    argumentList() {\r\n        return this.tryGetRuleContext(0, ArgumentListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodInvocation_lf_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodInvocation_lf_primary) {\r\n            return visitor.visitMethodInvocation_lf_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodInvocation_lf_primaryContext = MethodInvocation_lf_primaryContext;\r\nclass MethodInvocation_lfno_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    methodName() {\r\n        return this.tryGetRuleContext(0, MethodNameContext);\r\n    }\r\n    argumentList() {\r\n        return this.tryGetRuleContext(0, ArgumentListContext);\r\n    }\r\n    typeNameIdent() {\r\n        return this.tryGetRuleContext(0, TypeNameIdentContext);\r\n    }\r\n    ident() {\r\n        return this.tryGetRuleContext(0, IdentContext);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodInvocation_lfno_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodInvocation_lfno_primary) {\r\n            return visitor.visitMethodInvocation_lfno_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodInvocation_lfno_primaryContext = MethodInvocation_lfno_primaryContext;\r\nclass ArgumentListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(ExpressionContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, ExpressionContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_argumentList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitArgumentList) {\r\n            return visitor.visitArgumentList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ArgumentListContext = ArgumentListContext;\r\nclass MethodReferenceContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    referenceType() {\r\n        return this.tryGetRuleContext(0, ReferenceTypeContext);\r\n    }\r\n    primary() {\r\n        return this.tryGetRuleContext(0, PrimaryContext);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    classType() {\r\n        return this.tryGetRuleContext(0, ClassTypeContext);\r\n    }\r\n    arrayType() {\r\n        return this.tryGetRuleContext(0, ArrayTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodReference;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodReference) {\r\n            return visitor.visitMethodReference(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodReferenceContext = MethodReferenceContext;\r\nclass MethodReference_lf_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodReference_lf_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodReference_lf_primary) {\r\n            return visitor.visitMethodReference_lf_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodReference_lf_primaryContext = MethodReference_lf_primaryContext;\r\nclass MethodReference_lfno_primaryContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(Java8Parser.Identifier, 0);\r\n    }\r\n    typeArguments() {\r\n        return this.tryGetRuleContext(0, TypeArgumentsContext);\r\n    }\r\n    referenceType() {\r\n        return this.tryGetRuleContext(0, ReferenceTypeContext);\r\n    }\r\n    typeName() {\r\n        return this.tryGetRuleContext(0, TypeNameContext);\r\n    }\r\n    classType() {\r\n        return this.tryGetRuleContext(0, ClassTypeContext);\r\n    }\r\n    arrayType() {\r\n        return this.tryGetRuleContext(0, ArrayTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_methodReference_lfno_primary;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMethodReference_lfno_primary) {\r\n            return visitor.visitMethodReference_lfno_primary(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MethodReference_lfno_primaryContext = MethodReference_lfno_primaryContext;\r\nclass ArrayCreationExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primitiveType() {\r\n        return this.tryGetRuleContext(0, PrimitiveTypeContext);\r\n    }\r\n    dimExprs() {\r\n        return this.tryGetRuleContext(0, DimExprsContext);\r\n    }\r\n    dims() {\r\n        return this.tryGetRuleContext(0, DimsContext);\r\n    }\r\n    classOrInterfaceType() {\r\n        return this.tryGetRuleContext(0, ClassOrInterfaceTypeContext);\r\n    }\r\n    arrayInitializer() {\r\n        return this.tryGetRuleContext(0, ArrayInitializerContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_arrayCreationExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitArrayCreationExpression) {\r\n            return visitor.visitArrayCreationExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ArrayCreationExpressionContext = ArrayCreationExpressionContext;\r\nclass DimExprsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    dimExpr(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(DimExprContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, DimExprContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_dimExprs;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDimExprs) {\r\n            return visitor.visitDimExprs(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DimExprsContext = DimExprsContext;\r\nclass DimExprContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    annotation(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AnnotationContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AnnotationContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_dimExpr;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDimExpr) {\r\n            return visitor.visitDimExpr(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DimExprContext = DimExprContext;\r\nclass ConstantExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_constantExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstantExpression) {\r\n            return visitor.visitConstantExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstantExpressionContext = ConstantExpressionContext;\r\nclass ExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    lambdaExpression() {\r\n        return this.tryGetRuleContext(0, LambdaExpressionContext);\r\n    }\r\n    assignmentExpression() {\r\n        return this.tryGetRuleContext(0, AssignmentExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_expression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExpression) {\r\n            return visitor.visitExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExpressionContext = ExpressionContext;\r\nclass LambdaExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    lambdaParameters() {\r\n        return this.getRuleContext(0, LambdaParametersContext);\r\n    }\r\n    lambdaBody() {\r\n        return this.getRuleContext(0, LambdaBodyContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_lambdaExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLambdaExpression) {\r\n            return visitor.visitLambdaExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LambdaExpressionContext = LambdaExpressionContext;\r\nclass LambdaParametersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.tryGetToken(Java8Parser.Identifier, 0);\r\n    }\r\n    formalParameterList() {\r\n        return this.tryGetRuleContext(0, FormalParameterListContext);\r\n    }\r\n    inferredFormalParameterList() {\r\n        return this.tryGetRuleContext(0, InferredFormalParameterListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_lambdaParameters;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLambdaParameters) {\r\n            return visitor.visitLambdaParameters(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LambdaParametersContext = LambdaParametersContext;\r\nclass InferredFormalParameterListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.Identifier);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.Identifier, i);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_inferredFormalParameterList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInferredFormalParameterList) {\r\n            return visitor.visitInferredFormalParameterList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InferredFormalParameterListContext = InferredFormalParameterListContext;\r\nclass LambdaBodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    block() {\r\n        return this.tryGetRuleContext(0, BlockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_lambdaBody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLambdaBody) {\r\n            return visitor.visitLambdaBody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LambdaBodyContext = LambdaBodyContext;\r\nclass AssignmentExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    conditionalExpression() {\r\n        return this.tryGetRuleContext(0, ConditionalExpressionContext);\r\n    }\r\n    assignment() {\r\n        return this.tryGetRuleContext(0, AssignmentContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_assignmentExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAssignmentExpression) {\r\n            return visitor.visitAssignmentExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AssignmentExpressionContext = AssignmentExpressionContext;\r\nclass AssignmentContext extends ParserRuleContext_1.ParserRuleContext {\r\n    leftHandSide() {\r\n        return this.getRuleContext(0, LeftHandSideContext);\r\n    }\r\n    assignmentOperator() {\r\n        return this.getRuleContext(0, AssignmentOperatorContext);\r\n    }\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_assignment;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAssignment) {\r\n            return visitor.visitAssignment(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AssignmentContext = AssignmentContext;\r\nclass LeftHandSideContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    fieldAccess() {\r\n        return this.tryGetRuleContext(0, FieldAccessContext);\r\n    }\r\n    arrayAccess() {\r\n        return this.tryGetRuleContext(0, ArrayAccessContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_leftHandSide;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLeftHandSide) {\r\n            return visitor.visitLeftHandSide(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LeftHandSideContext = LeftHandSideContext;\r\nclass AssignmentOperatorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_assignmentOperator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAssignmentOperator) {\r\n            return visitor.visitAssignmentOperator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AssignmentOperatorContext = AssignmentOperatorContext;\r\nclass ConditionalExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    conditionalOrExpression() {\r\n        return this.getRuleContext(0, ConditionalOrExpressionContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    conditionalExpression() {\r\n        return this.tryGetRuleContext(0, ConditionalExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_conditionalExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConditionalExpression) {\r\n            return visitor.visitConditionalExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConditionalExpressionContext = ConditionalExpressionContext;\r\nclass OrContext extends ParserRuleContext_1.ParserRuleContext {\r\n    OR() {\r\n        return this.getToken(Java8Parser.OR, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_or;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitOr) {\r\n            return visitor.visitOr(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.OrContext = OrContext;\r\nclass ConditionalOrExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    conditionalAndExpression() {\r\n        return this.getRuleContext(0, ConditionalAndExpressionContext);\r\n    }\r\n    conditionalOrExpression() {\r\n        return this.tryGetRuleContext(0, ConditionalOrExpressionContext);\r\n    }\r\n    or() {\r\n        return this.tryGetRuleContext(0, OrContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_conditionalOrExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConditionalOrExpression) {\r\n            return visitor.visitConditionalOrExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConditionalOrExpressionContext = ConditionalOrExpressionContext;\r\nclass AndContext extends ParserRuleContext_1.ParserRuleContext {\r\n    AND() {\r\n        return this.getToken(Java8Parser.AND, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_and;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAnd) {\r\n            return visitor.visitAnd(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AndContext = AndContext;\r\nclass ConditionalAndExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    inclusiveOrExpression() {\r\n        return this.getRuleContext(0, InclusiveOrExpressionContext);\r\n    }\r\n    conditionalAndExpression() {\r\n        return this.tryGetRuleContext(0, ConditionalAndExpressionContext);\r\n    }\r\n    and() {\r\n        return this.tryGetRuleContext(0, AndContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_conditionalAndExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConditionalAndExpression) {\r\n            return visitor.visitConditionalAndExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConditionalAndExpressionContext = ConditionalAndExpressionContext;\r\nclass BitorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    BITOR() {\r\n        return this.getToken(Java8Parser.BITOR, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_bitor;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBitor) {\r\n            return visitor.visitBitor(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BitorContext = BitorContext;\r\nclass InclusiveOrExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    exclusiveOrExpression() {\r\n        return this.getRuleContext(0, ExclusiveOrExpressionContext);\r\n    }\r\n    inclusiveOrExpression() {\r\n        return this.tryGetRuleContext(0, InclusiveOrExpressionContext);\r\n    }\r\n    bitor() {\r\n        return this.tryGetRuleContext(0, BitorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_inclusiveOrExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInclusiveOrExpression) {\r\n            return visitor.visitInclusiveOrExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InclusiveOrExpressionContext = InclusiveOrExpressionContext;\r\nclass CaretContext extends ParserRuleContext_1.ParserRuleContext {\r\n    CARET() {\r\n        return this.getToken(Java8Parser.CARET, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_caret;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCaret) {\r\n            return visitor.visitCaret(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CaretContext = CaretContext;\r\nclass ExclusiveOrExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    andExpression() {\r\n        return this.getRuleContext(0, AndExpressionContext);\r\n    }\r\n    exclusiveOrExpression() {\r\n        return this.tryGetRuleContext(0, ExclusiveOrExpressionContext);\r\n    }\r\n    caret() {\r\n        return this.tryGetRuleContext(0, CaretContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_exclusiveOrExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExclusiveOrExpression) {\r\n            return visitor.visitExclusiveOrExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext;\r\nclass BitandContext extends ParserRuleContext_1.ParserRuleContext {\r\n    BITAND() {\r\n        return this.getToken(Java8Parser.BITAND, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_bitand;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBitand) {\r\n            return visitor.visitBitand(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BitandContext = BitandContext;\r\nclass AndExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    equalityExpression() {\r\n        return this.getRuleContext(0, EqualityExpressionContext);\r\n    }\r\n    andExpression() {\r\n        return this.tryGetRuleContext(0, AndExpressionContext);\r\n    }\r\n    bitand() {\r\n        return this.tryGetRuleContext(0, BitandContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_andExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAndExpression) {\r\n            return visitor.visitAndExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AndExpressionContext = AndExpressionContext;\r\nclass EqualContext extends ParserRuleContext_1.ParserRuleContext {\r\n    EQUAL() {\r\n        return this.getToken(Java8Parser.EQUAL, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_equal;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEqual) {\r\n            return visitor.visitEqual(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EqualContext = EqualContext;\r\nclass NotequalContext extends ParserRuleContext_1.ParserRuleContext {\r\n    NOTEQUAL() {\r\n        return this.getToken(Java8Parser.NOTEQUAL, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_notequal;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNotequal) {\r\n            return visitor.visitNotequal(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NotequalContext = NotequalContext;\r\nclass EqualityExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    relationalExpression() {\r\n        return this.getRuleContext(0, RelationalExpressionContext);\r\n    }\r\n    equalityExpression() {\r\n        return this.tryGetRuleContext(0, EqualityExpressionContext);\r\n    }\r\n    equal() {\r\n        return this.tryGetRuleContext(0, EqualContext);\r\n    }\r\n    notequal() {\r\n        return this.tryGetRuleContext(0, NotequalContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_equalityExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEqualityExpression) {\r\n            return visitor.visitEqualityExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EqualityExpressionContext = EqualityExpressionContext;\r\nclass LtContext extends ParserRuleContext_1.ParserRuleContext {\r\n    LT() {\r\n        return this.getToken(Java8Parser.LT, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_lt;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLt) {\r\n            return visitor.visitLt(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LtContext = LtContext;\r\nclass GtContext extends ParserRuleContext_1.ParserRuleContext {\r\n    GT() {\r\n        return this.getToken(Java8Parser.GT, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_gt;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitGt) {\r\n            return visitor.visitGt(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.GtContext = GtContext;\r\nclass LeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    LE() {\r\n        return this.getToken(Java8Parser.LE, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_le;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLe) {\r\n            return visitor.visitLe(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LeContext = LeContext;\r\nclass GeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    GE() {\r\n        return this.getToken(Java8Parser.GE, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_ge;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitGe) {\r\n            return visitor.visitGe(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.GeContext = GeContext;\r\nclass InstanceofContext extends ParserRuleContext_1.ParserRuleContext {\r\n    INSTANCEOF() {\r\n        return this.getToken(Java8Parser.INSTANCEOF, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_instanceof;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInstanceof) {\r\n            return visitor.visitInstanceof(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InstanceofContext = InstanceofContext;\r\nclass RelationalExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    shiftExpression() {\r\n        return this.tryGetRuleContext(0, ShiftExpressionContext);\r\n    }\r\n    relationalExpression() {\r\n        return this.tryGetRuleContext(0, RelationalExpressionContext);\r\n    }\r\n    lt() {\r\n        return this.tryGetRuleContext(0, LtContext);\r\n    }\r\n    gt() {\r\n        return this.tryGetRuleContext(0, GtContext);\r\n    }\r\n    le() {\r\n        return this.tryGetRuleContext(0, LeContext);\r\n    }\r\n    ge() {\r\n        return this.tryGetRuleContext(0, GeContext);\r\n    }\r\n    instanceof() {\r\n        return this.tryGetRuleContext(0, InstanceofContext);\r\n    }\r\n    referenceType() {\r\n        return this.tryGetRuleContext(0, ReferenceTypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_relationalExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitRelationalExpression) {\r\n            return visitor.visitRelationalExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.RelationalExpressionContext = RelationalExpressionContext;\r\nclass LtltContext extends ParserRuleContext_1.ParserRuleContext {\r\n    LT(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.LT);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.LT, i);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_ltlt;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLtlt) {\r\n            return visitor.visitLtlt(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LtltContext = LtltContext;\r\nclass GtgtContext extends ParserRuleContext_1.ParserRuleContext {\r\n    GT(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.GT);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.GT, i);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_gtgt;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitGtgt) {\r\n            return visitor.visitGtgt(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.GtgtContext = GtgtContext;\r\nclass GtgtgtContext extends ParserRuleContext_1.ParserRuleContext {\r\n    GT(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(Java8Parser.GT);\r\n        }\r\n        else {\r\n            return this.getToken(Java8Parser.GT, i);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_gtgtgt;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitGtgtgt) {\r\n            return visitor.visitGtgtgt(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.GtgtgtContext = GtgtgtContext;\r\nclass ShiftExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    additiveExpression() {\r\n        return this.getRuleContext(0, AdditiveExpressionContext);\r\n    }\r\n    shiftExpression() {\r\n        return this.tryGetRuleContext(0, ShiftExpressionContext);\r\n    }\r\n    ltlt() {\r\n        return this.tryGetRuleContext(0, LtltContext);\r\n    }\r\n    gtgt() {\r\n        return this.tryGetRuleContext(0, GtgtContext);\r\n    }\r\n    gtgtgt() {\r\n        return this.tryGetRuleContext(0, GtgtgtContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_shiftExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitShiftExpression) {\r\n            return visitor.visitShiftExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ShiftExpressionContext = ShiftExpressionContext;\r\nclass AdditiveExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    multiplicativeExpression() {\r\n        return this.getRuleContext(0, MultiplicativeExpressionContext);\r\n    }\r\n    additiveExpression() {\r\n        return this.tryGetRuleContext(0, AdditiveExpressionContext);\r\n    }\r\n    add() {\r\n        return this.tryGetRuleContext(0, AddContext);\r\n    }\r\n    sub() {\r\n        return this.tryGetRuleContext(0, SubContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_additiveExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAdditiveExpression) {\r\n            return visitor.visitAdditiveExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AdditiveExpressionContext = AdditiveExpressionContext;\r\nclass MulContext extends ParserRuleContext_1.ParserRuleContext {\r\n    MUL() {\r\n        return this.getToken(Java8Parser.MUL, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_mul;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMul) {\r\n            return visitor.visitMul(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MulContext = MulContext;\r\nclass DivContext extends ParserRuleContext_1.ParserRuleContext {\r\n    DIV() {\r\n        return this.getToken(Java8Parser.DIV, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_div;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDiv) {\r\n            return visitor.visitDiv(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DivContext = DivContext;\r\nclass ModContext extends ParserRuleContext_1.ParserRuleContext {\r\n    MOD() {\r\n        return this.getToken(Java8Parser.MOD, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_mod;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMod) {\r\n            return visitor.visitMod(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ModContext = ModContext;\r\nclass MultiplicativeExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unaryExpression() {\r\n        return this.getRuleContext(0, UnaryExpressionContext);\r\n    }\r\n    multiplicativeExpression() {\r\n        return this.tryGetRuleContext(0, MultiplicativeExpressionContext);\r\n    }\r\n    mul() {\r\n        return this.tryGetRuleContext(0, MulContext);\r\n    }\r\n    div() {\r\n        return this.tryGetRuleContext(0, DivContext);\r\n    }\r\n    mod() {\r\n        return this.tryGetRuleContext(0, ModContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_multiplicativeExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMultiplicativeExpression) {\r\n            return visitor.visitMultiplicativeExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MultiplicativeExpressionContext = MultiplicativeExpressionContext;\r\nclass AddContext extends ParserRuleContext_1.ParserRuleContext {\r\n    ADD() {\r\n        return this.getToken(Java8Parser.ADD, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_add;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAdd) {\r\n            return visitor.visitAdd(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AddContext = AddContext;\r\nclass SubContext extends ParserRuleContext_1.ParserRuleContext {\r\n    SUB() {\r\n        return this.getToken(Java8Parser.SUB, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_sub;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSub) {\r\n            return visitor.visitSub(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SubContext = SubContext;\r\nclass UnaryExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    preIncrementExpression() {\r\n        return this.tryGetRuleContext(0, PreIncrementExpressionContext);\r\n    }\r\n    preDecrementExpression() {\r\n        return this.tryGetRuleContext(0, PreDecrementExpressionContext);\r\n    }\r\n    add() {\r\n        return this.tryGetRuleContext(0, AddContext);\r\n    }\r\n    unaryExpression() {\r\n        return this.tryGetRuleContext(0, UnaryExpressionContext);\r\n    }\r\n    sub() {\r\n        return this.tryGetRuleContext(0, SubContext);\r\n    }\r\n    unaryExpressionNotPlusMinus() {\r\n        return this.tryGetRuleContext(0, UnaryExpressionNotPlusMinusContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unaryExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnaryExpression) {\r\n            return visitor.visitUnaryExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnaryExpressionContext = UnaryExpressionContext;\r\nclass IncContext extends ParserRuleContext_1.ParserRuleContext {\r\n    INC() {\r\n        return this.getToken(Java8Parser.INC, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_inc;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInc) {\r\n            return visitor.visitInc(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IncContext = IncContext;\r\nclass PreIncrementExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    inc() {\r\n        return this.getRuleContext(0, IncContext);\r\n    }\r\n    unaryExpression() {\r\n        return this.getRuleContext(0, UnaryExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_preIncrementExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPreIncrementExpression) {\r\n            return visitor.visitPreIncrementExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PreIncrementExpressionContext = PreIncrementExpressionContext;\r\nclass DecContext extends ParserRuleContext_1.ParserRuleContext {\r\n    DEC() {\r\n        return this.getToken(Java8Parser.DEC, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_dec;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDec) {\r\n            return visitor.visitDec(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DecContext = DecContext;\r\nclass PreDecrementExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    dec() {\r\n        return this.getRuleContext(0, DecContext);\r\n    }\r\n    unaryExpression() {\r\n        return this.getRuleContext(0, UnaryExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_preDecrementExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPreDecrementExpression) {\r\n            return visitor.visitPreDecrementExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PreDecrementExpressionContext = PreDecrementExpressionContext;\r\nclass TildeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    TILDE() {\r\n        return this.getToken(Java8Parser.TILDE, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_tilde;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTilde) {\r\n            return visitor.visitTilde(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TildeContext = TildeContext;\r\nclass BangContext extends ParserRuleContext_1.ParserRuleContext {\r\n    BANG() {\r\n        return this.getToken(Java8Parser.BANG, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_bang;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBang) {\r\n            return visitor.visitBang(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BangContext = BangContext;\r\nclass UnaryExpressionNotPlusMinusContext extends ParserRuleContext_1.ParserRuleContext {\r\n    postfixExpression() {\r\n        return this.tryGetRuleContext(0, PostfixExpressionContext);\r\n    }\r\n    tilde() {\r\n        return this.tryGetRuleContext(0, TildeContext);\r\n    }\r\n    unaryExpression() {\r\n        return this.tryGetRuleContext(0, UnaryExpressionContext);\r\n    }\r\n    bang() {\r\n        return this.tryGetRuleContext(0, BangContext);\r\n    }\r\n    castExpression() {\r\n        return this.tryGetRuleContext(0, CastExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_unaryExpressionNotPlusMinus;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnaryExpressionNotPlusMinus) {\r\n            return visitor.visitUnaryExpressionNotPlusMinus(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext;\r\nclass PostfixExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primary() {\r\n        return this.tryGetRuleContext(0, PrimaryContext);\r\n    }\r\n    expressionName() {\r\n        return this.tryGetRuleContext(0, ExpressionNameContext);\r\n    }\r\n    postIncrementExpression_lf_postfixExpression(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PostIncrementExpression_lf_postfixExpressionContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PostIncrementExpression_lf_postfixExpressionContext);\r\n        }\r\n    }\r\n    postDecrementExpression_lf_postfixExpression(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PostDecrementExpression_lf_postfixExpressionContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PostDecrementExpression_lf_postfixExpressionContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_postfixExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPostfixExpression) {\r\n            return visitor.visitPostfixExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PostfixExpressionContext = PostfixExpressionContext;\r\nclass PostIncrementExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    postfixExpression() {\r\n        return this.getRuleContext(0, PostfixExpressionContext);\r\n    }\r\n    inc() {\r\n        return this.getRuleContext(0, IncContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_postIncrementExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPostIncrementExpression) {\r\n            return visitor.visitPostIncrementExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PostIncrementExpressionContext = PostIncrementExpressionContext;\r\nclass PostIncrementExpression_lf_postfixExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_postIncrementExpression_lf_postfixExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPostIncrementExpression_lf_postfixExpression) {\r\n            return visitor.visitPostIncrementExpression_lf_postfixExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PostIncrementExpression_lf_postfixExpressionContext = PostIncrementExpression_lf_postfixExpressionContext;\r\nclass PostDecrementExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    postfixExpression() {\r\n        return this.getRuleContext(0, PostfixExpressionContext);\r\n    }\r\n    dec() {\r\n        return this.getRuleContext(0, DecContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_postDecrementExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPostDecrementExpression) {\r\n            return visitor.visitPostDecrementExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PostDecrementExpressionContext = PostDecrementExpressionContext;\r\nclass PostDecrementExpression_lf_postfixExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_postDecrementExpression_lf_postfixExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPostDecrementExpression_lf_postfixExpression) {\r\n            return visitor.visitPostDecrementExpression_lf_postfixExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PostDecrementExpression_lf_postfixExpressionContext = PostDecrementExpression_lf_postfixExpressionContext;\r\nclass CastExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primitiveType() {\r\n        return this.tryGetRuleContext(0, PrimitiveTypeContext);\r\n    }\r\n    unaryExpression() {\r\n        return this.tryGetRuleContext(0, UnaryExpressionContext);\r\n    }\r\n    referenceType() {\r\n        return this.tryGetRuleContext(0, ReferenceTypeContext);\r\n    }\r\n    unaryExpressionNotPlusMinus() {\r\n        return this.tryGetRuleContext(0, UnaryExpressionNotPlusMinusContext);\r\n    }\r\n    additionalBound(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(AdditionalBoundContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, AdditionalBoundContext);\r\n        }\r\n    }\r\n    lambdaExpression() {\r\n        return this.tryGetRuleContext(0, LambdaExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return Java8Parser.RULE_castExpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCastExpression) {\r\n            return visitor.visitCastExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CastExpressionContext = CastExpressionContext;\r\n//# sourceMappingURL=Java8Parser.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/Java8/Java8Parser.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/node/UniNew.js":
/*!*****************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/node/UniNew.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UniNew = void 0;\r\nconst UniExpr_1 = __webpack_require__(/*! ./UniExpr */ \"./node_modules/unicoen.ts/dist/node/UniExpr.js\");\r\nclass UniNew extends UniExpr_1.UniExpr {\r\n    constructor(type, args) {\r\n        super();\r\n        if (type === undefined && args === undefined) {\r\n            this.type = null;\r\n            this.args = [];\r\n        }\r\n        else if (type === undefined || args === undefined) {\r\n            throw new Error('invalid arguments');\r\n        }\r\n        else {\r\n            this.type = type;\r\n            this.args = args;\r\n        }\r\n        this.fields.set('type', String);\r\n        this.fields.set('args', UniExpr_1.UniExpr);\r\n    }\r\n    toString() {\r\n        return 'New(' + this.type + ')';\r\n    }\r\n    equals(obj) {\r\n        if (obj == null || !(obj instanceof UniNew))\r\n            return false;\r\n        const that = obj;\r\n        return super.equals(that)\r\n            && (this.type == null ? that.type == null : this.type === that.type)\r\n            && (this.args == null ? that.args == null : this.args.equals(that.args));\r\n    }\r\n    merge(that) {\r\n        super.merge(that);\r\n        if (that.type != null) {\r\n            this.type = that.type;\r\n        }\r\n        if (that.args != null) {\r\n            if (this.args == null) {\r\n                this.args = that.args;\r\n            }\r\n            else {\r\n                this.args.push(...that.args);\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.UniNew = UniNew;\r\n//# sourceMappingURL=UniNew.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/node/UniNew.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/node/UniNewArray.js":
/*!**********************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/node/UniNewArray.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UniNewArray = void 0;\r\nconst UniExpr_1 = __webpack_require__(/*! ./UniExpr */ \"./node_modules/unicoen.ts/dist/node/UniExpr.js\");\r\nconst UniArray_1 = __webpack_require__(/*! ./UniArray */ \"./node_modules/unicoen.ts/dist/node/UniArray.js\");\r\nclass UniNewArray extends UniExpr_1.UniExpr {\r\n    constructor(type, elementsNum, value) {\r\n        super();\r\n        if (type === undefined && elementsNum === undefined && value === undefined) {\r\n            this.type = null;\r\n            this.elementsNum = [];\r\n            this.value = null;\r\n        }\r\n        else if (type === undefined || elementsNum === undefined || value === undefined) {\r\n            throw new Error('invalid arguments');\r\n        }\r\n        else {\r\n            this.type = type;\r\n            this.elementsNum = elementsNum;\r\n            this.value = value;\r\n        }\r\n        this.fields.set('type', String);\r\n        this.fields.set('elementsNum', UniExpr_1.UniExpr);\r\n        this.fields.set('value', UniArray_1.UniArray);\r\n    }\r\n    toString() {\r\n        return 'NewArray(' + this.type + ')';\r\n    }\r\n    equals(obj) {\r\n        if (obj == null || !(obj instanceof UniNewArray))\r\n            return false;\r\n        const that = obj;\r\n        return super.equals(that)\r\n            && (this.type == null ? that.type == null : this.type === that.type)\r\n            && (this.elementsNum == null ? that.elementsNum == null : this.elementsNum.equals(that.elementsNum))\r\n            && (this.value == null ? that.value == null : this.value.equals(that.value));\r\n    }\r\n    merge(that) {\r\n        super.merge(that);\r\n        if (that.type != null) {\r\n            this.type = that.type;\r\n        }\r\n        if (that.elementsNum != null) {\r\n            if (this.elementsNum == null) {\r\n                this.elementsNum = that.elementsNum;\r\n            }\r\n            else {\r\n                this.elementsNum.push(...that.elementsNum);\r\n            }\r\n        }\r\n        if (that.value != null) {\r\n            this.value = that.value;\r\n        }\r\n    }\r\n}\r\nexports.UniNewArray = UniNewArray;\r\n//# sourceMappingURL=UniNewArray.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/node/UniNewArray.js?");

/***/ })

}]);