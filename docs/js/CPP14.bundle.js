(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["CPP14"],{

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "./node_modules/scanf/index.js":
/*!*************************************!*\
  !*** ./node_modules/scanf/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/scanf */ \"./node_modules/scanf/lib/scanf.js\");\n\n\n//# sourceURL=webpack:///./node_modules/scanf/index.js?");

/***/ }),

/***/ "./node_modules/scanf/lib/gets.js":
/*!****************************************!*\
  !*** ./node_modules/scanf/lib/gets.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer, process) {/*\n * http://stackoverflow.com/questions/3430939/node-js-readsync-from-stdin\n * @mklement0\n */\nvar fs = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\");\n\nvar BUFSIZE = 256;\nvar buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);\nvar bytesRead;\n\nmodule.exports = function() {\n  var fd =\n    'win32' === process.platform\n      ? process.stdin.fd\n      : fs.openSync('/dev/stdin', 'rs');\n  bytesRead = 0;\n\n  try {\n    bytesRead = fs.readSync(fd, buf, 0, BUFSIZE);\n  } catch (e) {\n    if (e.code === 'EAGAIN') {\n      // 'resource temporarily unavailable'\n      // Happens on OS X 10.8.3 (not Windows 7!), if there's no\n      // stdin input - typically when invoking a script without any\n      // input (for interactive stdin input).\n      // If you were to just continue, you'd create a tight loop.\n      console.error('ERROR: interactive stdin input not supported.');\n      process.exit(1);\n    } else if (e.code === 'EOF') {\n      // Happens on Windows 7, but not OS X 10.8.3:\n      // simply signals the end of *piped* stdin input.\n      return '';\n    }\n    throw e; // unexpected exception\n  }\n\n  if (bytesRead === 0) {\n    // No more stdin input available.\n    // OS X 10.8.3: regardless of input method, this is how the end\n    //   of input is signaled.\n    // Windows 7: this is how the end of input is signaled for\n    //   *interactive* stdin input.\n    return '';\n  }\n  // Process the chunk read.\n\n  var content = buf.toString(undefined, 0, bytesRead - 1);\n\n  return content;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/scanf/lib/gets.js?");

/***/ }),

/***/ "./node_modules/scanf/lib/scanf.js":
/*!*****************************************!*\
  !*** ./node_modules/scanf/lib/scanf.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var utils = __webpack_require__(/*! ./utils */ \"./node_modules/scanf/lib/utils.js\");\nvar gets = __webpack_require__(/*! ./gets */ \"./node_modules/scanf/lib/gets.js\");\n\nvar input = '';\nvar stdin_flag = true;\n\nexports.throw = true;\n\nvar scanf = (module.exports = function(format) {\n  var re = new RegExp('[^%]*%[0-9]*[A-Za-z][^%]*', 'g');\n  var selector = format.match(re);\n\n  if (selector === null) {\n    throw new Error('Unable to parse scanf selector.');\n  }\n\n  var result,\n    len = selector.length;\n  var json_flag = false,\n    count = 0,\n    keys = Array.prototype.slice.call(arguments, 1);\n\n  if (!this.sscanf) {\n    // clear sscanf cache\n    if (!stdin_flag) input = '';\n    stdin_flag = true;\n  }\n\n  if (keys.length > 0) {\n    result = {};\n    json_flag = true;\n  } else if (len > 1) {\n    result = [];\n  } else {\n    return dealType(selector[0]);\n  }\n\n  selector.forEach(function(val) {\n    if (json_flag) {\n      result[keys.shift() || count++] = dealType(val);\n    } else {\n      result.push(dealType(val));\n    }\n  });\n\n  return result;\n});\n\nmodule.exports.sscanf = function(str, format) {\n  if (typeof str !== 'string' || !str.length) {\n    return null;\n  }\n\n  // clear scanf cache\n  if (stdin_flag) input = '';\n\n  input = str;\n  stdin_flag = false;\n\n  return scanf.apply(\n    { sscanf: true },\n    Array.prototype.slice.call(arguments, 1)\n  );\n};\n\nvar getInput = function(pre, next, match, type) {\n  var result;\n  if (!input.length || input === '\\r') {\n    if (stdin_flag) {\n      input = gets();\n    } else {\n      return null;\n    }\n  }\n\n  // match format\n  var replace = '(' + match + ')';\n  var tmp = input;\n\n  // while scan string, replace before and after\n  if (type === 'STR' && next.trim().length > 0) {\n    var before_macth = utils.regslashes(pre);\n    var after_match = utils.regslashes(next) + '[\\\\w\\\\W]*';\n    if (before_macth.length) {\n      tmp = tmp.replace(new RegExp(before_macth), '');\n    }\n    tmp = tmp.replace(new RegExp(after_match), '');\n  } else {\n    replace = utils.regslashes(pre) + replace;\n  }\n\n  var m = tmp.match(new RegExp(replace));\n\n  if (!m) {\n    // todo strip match\n    return null;\n  }\n  result = m[1];\n\n  // strip match content\n  input = input\n    .substr(input.indexOf(result))\n    .replace(result, '')\n    .replace(next, '');\n\n  if (type === 'HEXFLOAT') {\n    return m;\n  }\n  return result;\n};\n\nvar getInteger = function(pre, next) {\n  var text = getInput(pre, next, '[-]?[A-Za-z0-9]+');\n  if (!text) {\n    return null;\n  }\n  if (text.length > 2) {\n    if (text[0] === '0') {\n      if (text[1].toLowerCase() === 'x') {\n        return utils.hex2int(text);\n      }\n      // parse Integer (%d %ld %u %lu %llu) should be precise for octal\n      if (text[1].toLowerCase() === 'o') {\n        return utils.octal2int(text);\n      }\n    }\n  }\n  return parseInt(text);\n};\n\nvar getFloat = function(pre, next) {\n  var text = getInput(pre, next, '[-]?[0-9]+[.]?[0-9]*');\n  return parseFloat(text);\n};\n\nvar getHexFloat = function(pre, next) {\n  var hfParams = getInput(\n    pre,\n    next,\n    '^([+-]?)0x([0-9a-f]*)(.[0-9a-f]*)?(p[+-]?[0-9a-f]+)?',\n    'HEXFLOAT'\n  );\n  var sign = hfParams[2];\n  var sint = hfParams[3];\n  var spoint = hfParams[4];\n  var sexp = hfParams[5] || 'p0';\n  // We glue the integer and point parts together when parsing\n  var integer = parseInt(\n    sign + sint + (spoint !== undefined ? spoint.slice(1) : ''),\n    16\n  );\n  // The actual exponent is the specified exponent minus the de..heximal points we shifted away\n  var exponent =\n    parseInt(sexp.slice(1), 16) -\n    4 * (spoint !== undefined ? spoint.length - 1 : 0);\n  return integer * Math.pow(2, exponent);\n};\n\nvar getHex = function(pre, next) {\n  var text = getInput(pre, next, '[A-Za-z0-9]+');\n  return utils.hex2int(text);\n};\n\nvar getOctal = function(pre, next) {\n  var text = getInput(pre, next, '[A-Za-z0-9]+');\n  return utils.octal2int(text);\n};\n\nvar getString = function(pre, next) {\n  var text = getInput(\n    pre,\n    next,\n    // Match repeat string\n    '(' +\n    '[\\\\w\\\\]=-]' +\n    '|' +\n    '\\\\S+[^\\\\ ]' + // Match string witch \\SPC like 'Alan\\ Bob'\n      ')' +\n      // Match after\n      '+(\\\\\\\\[\\\\w\\\\ ][\\\\w\\\\:]*)*',\n    'STR'\n  );\n  if (/\\\\/.test(text)) text = utils.stripslashes(text);\n  return text;\n};\n\nvar getLine = function(pre, next) {\n  var text = getInput(pre, next, '[^\\n\\r]*');\n  if (/\\\\/.test(text)) text = utils.stripslashes(text);\n  return text;\n};\n\nvar dealType = function(format) {\n  var ret;\n  var res = format.match(/%(0[1-9]+)?[A-Za-z]+/);\n  var res2 = format.match(/[^%]*/);\n  if (!res) {\n    // DID NOT throw error here to stay compatible with old version\n    console.warn('Invalid scanf selector: [%s]', format);\n    return null;\n  }\n\n  var type = res[0].replace(res[1], '');\n  var pre = !!res2 ? res2[0] : null;\n  var next = format.substr(format.indexOf(type) + type.length);\n\n  switch (type) {\n    case '%d':\n    case '%ld':\n    case '%llu':\n    case '%lu':\n    case '%u':\n      ret = getInteger(pre, next);\n      break;\n    case '%c': // TODO getChar\n    case '%s':\n      ret = getString(pre, next);\n      break;\n    case '%S':\n      ret = getLine(pre, next);\n      break;\n    case '%X':\n    case '%x':\n      ret = getHex(pre, next);\n      break;\n    case '%O':\n    case '%o':\n      ret = getOctal(pre, next);\n      break;\n    case '%a':\n      ret = getHexFloat(pre, next);\n      break;\n    case '%f':\n      ret = getFloat(pre, next);\n      break;\n\n    default:\n      throw new Error('Unknown type \"' + type + '\"');\n  }\n  return ret;\n};\n\n\n//# sourceURL=webpack:///./node_modules/scanf/lib/scanf.js?");

/***/ }),

/***/ "./node_modules/scanf/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/scanf/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var THROW = __webpack_require__(/*! ./scanf */ \"./node_modules/scanf/lib/scanf.js\").throw;\n\nvar ASCII = {\n  a: 'a'.charCodeAt(),\n  f: 'f'.charCodeAt(),\n  A: 'A'.charCodeAt(),\n  F: 'F'.charCodeAt(),\n  0: '0'.charCodeAt(),\n  7: '7'.charCodeAt(),\n  9: '9'.charCodeAt()\n};\n\nexports.hex2int = function(str) {\n  str = str.replace(/^[0Oo][Xx]/, '');\n  var ret = 0,\n    digit = 0;\n\n  for (var i = str.length - 1; i >= 0; i--) {\n    var num = intAtHex(str[i], digit++);\n    if (num !== null) {\n      ret += num;\n    } else {\n      if (THROW) {\n        throw new Error('Invalid hex ' + str);\n      }\n      return null;\n    }\n  }\n\n  return ret;\n};\n\nvar intAtHex = function(c, digit) {\n  var ret = null;\n  var ascii = c.charCodeAt();\n\n  if (ASCII.a <= ascii && ascii <= ASCII.f) {\n    ret = ascii - ASCII.a + 10;\n  } else if (ASCII.A <= ascii && ascii <= ASCII.F) {\n    ret = ascii - ASCII.A + 10;\n  } else if (ASCII[0] <= ascii && ascii <= ASCII[9]) {\n    ret = ascii - ASCII[0];\n  } else {\n    if (THROW) {\n      throw new Error('Invalid ascii [' + c + ']');\n    }\n    return null;\n  }\n\n  while (digit--) {\n    ret *= 16;\n  }\n  return ret;\n};\n\nexports.octal2int = function(str) {\n  str = str.replace(/^0[Oo]?/, '');\n  var ret = 0,\n    digit = 0;\n\n  for (var i = str.length - 1; i >= 0; i--) {\n    var num = intAtOctal(str[i], digit++);\n    if (num !== null) {\n      ret += num;\n    } else {\n      if (THROW) {\n        throw new Error('Invalid octal ' + str);\n      }\n      return null;\n    }\n  }\n\n  return ret;\n};\n\nvar intAtOctal = function(c, digit) {\n  var num = null;\n  var ascii = c.charCodeAt();\n\n  if (ascii >= ASCII[0] && ascii <= ASCII[7]) {\n    num = ascii - ASCII[0];\n  } else {\n    if (THROW) {\n      throw new Error('Invalid char to Octal [' + c + ']');\n    }\n    return null;\n  }\n\n  while (digit--) {\n    num *= 8;\n  }\n  return num;\n};\n\nexports.regslashes = function(pre) {\n  return pre\n    .replace(/\\[/g, '\\\\[')\n    .replace(/\\]/g, '\\\\]')\n    .replace(/\\(/g, '\\\\(')\n    .replace(/\\)/g, '\\\\)')\n    .replace(/\\|/g, '\\\\|');\n};\n\nexports.stripslashes = function(str) {\n  return str.replace(/\\\\([\\sA-Za-z\\\\]|[0-7]{1,3})/g, function(str, c) {\n    switch (c) {\n      case '\\\\':\n        return '\\\\';\n      case '0':\n        return '\\u0000';\n      default:\n        if (/^\\w$/.test(c)) {\n          return getSpecialChar(c);\n        } else if (/^\\s$/.test(c)) {\n          return c;\n        } else if (/([0-7]{1,3})/.test(c)) {\n          return getASCIIChar(c);\n        }\n        return str;\n    }\n  });\n};\n\nvar getASCIIChar = function(str) {\n  var num = exports.octal2int(str);\n  return String.fromCharCode(num);\n};\n\nvar getSpecialChar = function(letter) {\n  switch (letter.toLowerCase()) {\n    case 'b':\n      return '\\b';\n    case 'f':\n      return '\\f';\n    case 'n':\n      return '\\n';\n    case 'r':\n      return '\\r';\n    case 't':\n      return '\\t';\n    case 'v':\n      return '\\v';\n    default:\n      return letter;\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/scanf/lib/utils.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Engine.js":
/*!***********************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Engine.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CPP14Engine = void 0;\r\nconst agh = __webpack_require__(/*! agh.sprintf */ \"./node_modules/agh.sprintf/agh.sprintf.js\");\r\nconst scanf_1 = __webpack_require__(/*! scanf */ \"./node_modules/scanf/index.js\");\r\nconst UniBinOp_1 = __webpack_require__(/*! ../../node/UniBinOp */ \"./node_modules/unicoen.ts/dist/node/UniBinOp.js\");\r\nconst UniExpr_1 = __webpack_require__(/*! ../../node/UniExpr */ \"./node_modules/unicoen.ts/dist/node/UniExpr.js\");\r\nconst UniIdent_1 = __webpack_require__(/*! ../../node/UniIdent */ \"./node_modules/unicoen.ts/dist/node/UniIdent.js\");\r\nconst UniMethodCall_1 = __webpack_require__(/*! ../../node/UniMethodCall */ \"./node_modules/unicoen.ts/dist/node/UniMethodCall.js\");\r\nconst UniStringLiteral_1 = __webpack_require__(/*! ../../node/UniStringLiteral */ \"./node_modules/unicoen.ts/dist/node/UniStringLiteral.js\");\r\nconst UniUnaryOp_1 = __webpack_require__(/*! ../../node/UniUnaryOp */ \"./node_modules/unicoen.ts/dist/node/UniUnaryOp.js\");\r\nconst Engine_1 = __webpack_require__(/*! ../Engine/Engine */ \"./node_modules/unicoen.ts/dist/interpreter/Engine/Engine.js\");\r\nconst File_1 = __webpack_require__(/*! ../Engine/File */ \"./node_modules/unicoen.ts/dist/interpreter/Engine/File.js\");\r\nconst Scope_1 = __webpack_require__(/*! ../Engine/Scope */ \"./node_modules/unicoen.ts/dist/interpreter/Engine/Scope.js\");\r\nconst Variable_1 = __webpack_require__(/*! ../Engine/Variable */ \"./node_modules/unicoen.ts/dist/interpreter/Engine/Variable.js\");\r\nconst Int_1 = __webpack_require__(/*! ./Int */ \"./node_modules/unicoen.ts/dist/interpreter/CPP14/Int.js\");\r\nclass CPP14Engine extends Engine_1.Engine {\r\n    // Byte[]\r\n    static strToBytes(str) {\r\n        const length = str.length;\r\n        const bytes = [];\r\n        for (let i = 0; i < length; ++i) {\r\n            const code = str.charCodeAt(i);\r\n            bytes.push(code);\r\n        }\r\n        bytes.push(0);\r\n        return bytes;\r\n    }\r\n    static getCharArrAsByte(objectOnMemory, beginArg) {\r\n        let begin = beginArg;\r\n        const bytes = [];\r\n        const obj = objectOnMemory.get(begin);\r\n        if (typeof obj === 'string') {\r\n            return CPP14Engine.strToBytes(obj);\r\n        }\r\n        for (let v = obj; objectOnMemory.containsKey(begin); ++begin) {\r\n            const o = objectOnMemory.get(begin);\r\n            if (typeof obj === 'number' || obj instanceof Int_1.Int) {\r\n                v = o;\r\n                if (v === 0) {\r\n                    break;\r\n                }\r\n                bytes.push(v.valueOf());\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        bytes.push(0);\r\n        return bytes;\r\n    }\r\n    static charArrToStr(objectOnMemory, beginArg) {\r\n        const bytes = CPP14Engine.getCharArrAsByte(objectOnMemory, beginArg);\r\n        return Engine_1.Engine.bytesToStr(bytes);\r\n    }\r\n    // '\\''n'を'\\n'にする\r\n    static escapeText(str) {\r\n        return str\r\n            .replace(/\\\\a/g, String.fromCharCode(7))\r\n            .replace(/\\\\b/g, '\\b')\r\n            .replace(/\\\\f/g, '\\f')\r\n            .replace(/\\\\n/g, '\\n')\r\n            .replace(/\\\\r/g, '\\r')\r\n            .replace(/\\\\t/g, '\\t')\r\n            .replace(/\\\\v/g, '\\v')\r\n            .replace(/\\\\'/g, \"'\")\r\n            .replace(/\\\\\"/g, '\"')\r\n            .replace(/\\\\\\?/g, '?')\r\n            .replace(/\\\\\\d{1,3}/g, (match) => String.fromCharCode(parseInt(match.substr(1), 8)))\r\n            .replace(/\\\\x[A-Fa-f0-9]{1,2}/g, (match) => String.fromCharCode(parseInt(match.substr(2), 16)))\r\n            .replace(/\\\\\\\\/g, '\\\\')\r\n            .replace(/\\\\/g, '/');\r\n    }\r\n    constructor() {\r\n        super();\r\n        Scope_1.Scope.structInfoSize = CPP14Engine.structInfoSize;\r\n        Scope_1.Scope.sizeof = CPP14Engine.sizeof;\r\n        Variable_1.Variable.sizeof = CPP14Engine.sizeof;\r\n    }\r\n    loadLibarary(global) {\r\n        this.includeStdio(global);\r\n        this.includeStdlib(global);\r\n        this.includeMath(global);\r\n        this.includeString(global);\r\n        global.setTop('sizeof', (arg) => {\r\n            if (typeof arg === 'string') {\r\n                return CPP14Engine.sizeof(arg);\r\n            }\r\n            else if (Array.isArray(arg)) {\r\n                return CPP14Engine.sizeof(Engine_1.Engine.bytesToStr(arg));\r\n            }\r\n            throw new Error('Unsupported type of argument.');\r\n        }, 'FUNCTION');\r\n        global.setSystemVariable('SYSTEM', 'NULL', 0);\r\n    }\r\n    includeStdio(global) {\r\n        global.setTop('printf', \r\n        // tslint:disable-next-line:only-arrow-functions\r\n        function () {\r\n            // アロー関数にするとargumentsがincludeStdioのargument(すなわちglobal:Scope)になってしまう。\r\n            if (arguments.length < 1) {\r\n                return 0;\r\n            }\r\n            const args = [];\r\n            for (const argument of arguments) {\r\n                args.push(argument);\r\n            }\r\n            let text = Engine_1.Engine.bytesToStr(args[0]);\r\n            text = CPP14Engine.escapeText(text);\r\n            for (let i = 1; i < args.length; ++i) {\r\n                if (global.typeOnMemory.containsKey(args[i])) {\r\n                    const type = global.typeOnMemory.get(args[i]);\r\n                    if (type.includes('char')) {\r\n                        args[i] = CPP14Engine.charArrToStr(global.objectOnMemory, args[i]);\r\n                    }\r\n                }\r\n            }\r\n            args[0] = text;\r\n            const output = CPP14Engine.escapeText(agh.sprintf(...args));\r\n            this.stdout(output);\r\n            const byteCount = (str) => encodeURIComponent(str).replace(/%../g, 'x').length;\r\n            const count = byteCount(output);\r\n            return count;\r\n        }, 'FUNCTION');\r\n        global.setTop('scanf', function* () {\r\n            const isStdinEmpty = this.getStdin() === '';\r\n            if (isStdinEmpty) {\r\n                this.setIsWaitingForStdin(true); // yield and set stdin\r\n            }\r\n            ////////////////////////////////////////////\r\n            const args = yield; // get args from next(args) from execUniMethodCall\r\n            ////////////////////////////////////////////\r\n            const stdin = this.getStdin();\r\n            this.clearStdin();\r\n            if (isStdinEmpty) {\r\n                this.stdout(stdin + '\\n');\r\n            }\r\n            let input = stdin.trim();\r\n            const spacePos = input.search(/\\s/);\r\n            if (0 <= spacePos) {\r\n                this.stdin(input.substr(spacePos + 1));\r\n                input = input.substring(0, spacePos);\r\n            }\r\n            if (isStdinEmpty) {\r\n                this.setIsWaitingForStdin(false);\r\n            }\r\n            if (!Array.isArray(args) || args.length === 0) {\r\n                return 0;\r\n            }\r\n            const format = Engine_1.Engine.bytesToStr(args[0]);\r\n            args.shift();\r\n            const values = scanf_1.sscanf(input, format);\r\n            const setValue = (addr, valueStr) => {\r\n                const type = this.currentScope.getType(addr);\r\n                if (type === 'double' || type === 'float') {\r\n                    const value = Number.parseFloat(valueStr);\r\n                    this.currentScope.set(addr, value);\r\n                }\r\n                else if (type === 'char') {\r\n                    if (1 < valueStr.length) {\r\n                        try {\r\n                            const bytes = CPP14Engine.strToBytes(valueStr);\r\n                            for (let k = 0; k < bytes.length; ++k) {\r\n                                this.currentScope.set(addr + k, bytes[k]);\r\n                            }\r\n                        }\r\n                        catch (e) {\r\n                            // TODO 自動生成された catch ブロック\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                    else {\r\n                        const value = CPP14Engine.strToBytes(valueStr)[0];\r\n                        this.currentScope.set(addr, value);\r\n                    }\r\n                }\r\n                else {\r\n                    const value = Number.parseInt(valueStr, 10);\r\n                    this.currentScope.set(addr, value);\r\n                }\r\n            };\r\n            if (Array.isArray(values)) {\r\n                const length = Math.min(args.length, values.length);\r\n                for (let i = 0; i < length; ++i) {\r\n                    const addr = args[i];\r\n                    setValue(addr, values[i]);\r\n                }\r\n                return length;\r\n            }\r\n            else {\r\n                const addr = args[0];\r\n                setValue(addr, '' + values);\r\n                return 1;\r\n            }\r\n        }, 'FUNCTION');\r\n        global.setTop('gets', function* () {\r\n            const isStdinEmpty = this.getStdin() === '';\r\n            if (isStdinEmpty) {\r\n                this.setIsWaitingForStdin(true); // yield and set stdin\r\n            }\r\n            ////////////////////////////////////////////\r\n            const args = yield; // get args from next(args) from execUniMethodCall\r\n            ////////////////////////////////////////////\r\n            let input = this.getStdin();\r\n            this.clearStdin();\r\n            if (isStdinEmpty) {\r\n                this.stdout(input + '\\n');\r\n            }\r\n            const spacePos = input.indexOf('\\n');\r\n            if (0 <= spacePos) {\r\n                this.stdin(input.substr(spacePos + 1));\r\n                input = input.substring(0, spacePos);\r\n            }\r\n            if (isStdinEmpty) {\r\n                this.setIsWaitingForStdin(false);\r\n            }\r\n            if (!Array.isArray(args) || args.length === 0) {\r\n                return 0;\r\n            }\r\n            const addr = args[0];\r\n            try {\r\n                const bytes = CPP14Engine.strToBytes('' + input);\r\n                for (let k = 0; k < bytes.length; ++k) {\r\n                    this.currentScope.set(addr + k, bytes[k]);\r\n                }\r\n            }\r\n            catch (e) {\r\n                // TODO 自動生成された catch ブロック\r\n                e.printStackTrace();\r\n            }\r\n        }, 'FUNCTION');\r\n        global.setTop('getchar', function* () {\r\n            ////////////////////////////////////////////\r\n            const isStdinEmpty = this.getStdin() === '';\r\n            if (isStdinEmpty) {\r\n                this.setIsWaitingForStdin(true); // yield and set stdin\r\n                yield; // get args from next(args) from execUniMethodCall\r\n            }\r\n            ////////////////////////////////////////////\r\n            const input = this.getStdin();\r\n            this.clearStdin();\r\n            this.stdin(input.substr(1));\r\n            if (isStdinEmpty) {\r\n                this.stdin('\\n');\r\n                this.stdout(input + '\\n');\r\n            }\r\n            this.setIsWaitingForStdin(false);\r\n            const ch = input.charCodeAt(0);\r\n            return ch;\r\n        }, 'FUNCTION');\r\n        global.setTop('fopen', \r\n        // tslint:disable-next-line:only-arrow-functions\r\n        function () {\r\n            // アロー関数にするとargumentsがincludeStdioのargument(すなわちglobal:Scope)になってしまう。\r\n            if (arguments.length < 1) {\r\n                return 0;\r\n            }\r\n            const args = [];\r\n            for (const argument of arguments) {\r\n                args.push(argument);\r\n            }\r\n            const filename = Engine_1.Engine.bytesToStr(args[0]);\r\n            const mode = Engine_1.Engine.bytesToStr(args[1]);\r\n            let ret = 0;\r\n            try {\r\n                switch (mode) {\r\n                    // テキスト\r\n                    case 'r': {\r\n                        const buf = File_1.File.getFileFromFileList(filename);\r\n                        const file = new File_1.File(filename, buf, mode);\r\n                        ret = global.setCode(file, 'FILE');\r\n                        break;\r\n                    }\r\n                    case 'w': {\r\n                        const buf = new ArrayBuffer(1024);\r\n                        File_1.File.addFileToFileList(filename, buf);\r\n                        const file = new File_1.File(filename, buf, 'w');\r\n                        ret = global.setCode(file, 'FILE');\r\n                        break;\r\n                    }\r\n                    case 'a':\r\n                        break;\r\n                    case 'rb':\r\n                        break;\r\n                    case 'r+':\r\n                        break;\r\n                    case 'w+':\r\n                        break;\r\n                    case 'a+':\r\n                        break;\r\n                    // バイナリ\r\n                    case 'wb':\r\n                        break;\r\n                    case 'ab':\r\n                        break;\r\n                    case 'r+b':\r\n                    case 'rb+':\r\n                        break;\r\n                    case 'w+b':\r\n                    case 'wb+':\r\n                        break;\r\n                    case 'a+b':\r\n                    case 'ab+':\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            catch (e) {\r\n                // TODO 自動生成された catch ブロック\r\n                // e.printStackTrace();\r\n            }\r\n            return ret;\r\n        }, 'FUNCTION');\r\n        global.setTop('fgetc', (arg) => {\r\n            let ch = -1;\r\n            const addr = arg;\r\n            const fp = global.getValue(addr);\r\n            ch = fp.fgetc();\r\n            return ch;\r\n        }, 'FUNCTION');\r\n        global.setTop('fgets', (s, n, stream) => {\r\n            const ch = -1;\r\n            const fp = global.getValue(stream);\r\n            const buf = fp.fgets(n);\r\n            if (buf === null) {\r\n                return 0;\r\n            }\r\n            const addr = s;\r\n            for (let i = 0; i < buf.length; ++i) {\r\n                global.set(addr + i, buf[i]);\r\n                if (buf[i] === 0) {\r\n                    break;\r\n                }\r\n            }\r\n            return s;\r\n        }, 'FUNCTION');\r\n        global.setTop('fputc', (c, stream) => {\r\n            let ch = -1;\r\n            const addr = stream;\r\n            const fp = global.getValue(addr);\r\n            ch = fp.fputc(c);\r\n            return ch;\r\n        }, 'FUNCTION');\r\n        global.setTop('fputs', (s, stream) => {\r\n            const addr = stream;\r\n            let bytes = null;\r\n            if (Array.isArray(s)) {\r\n                bytes = s;\r\n            }\r\n            else if (typeof s === 'number') {\r\n                bytes = CPP14Engine.getCharArrAsByte(global.objectOnMemory, s.valueOf());\r\n            }\r\n            else if (typeof s === 'string') {\r\n                bytes = CPP14Engine.strToBytes(s);\r\n            }\r\n            const fp = global.getValue(addr.valueOf());\r\n            let ret = -1;\r\n            for (const byte of bytes) {\r\n                ret = fp.fputc(byte);\r\n            }\r\n            return 1;\r\n        }, 'FUNCTION');\r\n        global.setTop('fflush', (stream) => {\r\n            const addr = stream;\r\n            const fp = global.getValue(addr);\r\n            fp.flush();\r\n            return 0;\r\n        }, 'FUNCTION');\r\n        global.setTop('fclose', (stream) => {\r\n            const addr = stream;\r\n            const fp = global.getValue(addr);\r\n            fp.fclose();\r\n            return 0;\r\n        }, 'FUNCTION');\r\n    }\r\n    includeStdlib(global) {\r\n        global.setTop('malloc', (x) => {\r\n            let type = Engine_1.Engine.lastSizeOf;\r\n            if (type.includes('*')) {\r\n                type = type.replace('*', '');\r\n            }\r\n            const heapAddress = global.address.heapAddress;\r\n            if (global.isStructType(type)) {\r\n                // 構造体\r\n                const rawType = global.getTypedef(type);\r\n                global.setHeap(heapAddress + Engine_1.Engine.structInfoSize, type);\r\n                // [offset, type]のタプル\r\n                const offsets = global.get(rawType);\r\n                for (const [fieldName, valueofOffset] of offsets) {\r\n                    const fieldType = valueofOffset[1];\r\n                    global.setHeap(this.rand(CPP14Engine.sizeof(fieldType) * 8), fieldType);\r\n                }\r\n                global.setMallocSize(heapAddress, x + Engine_1.Engine.structInfoSize);\r\n                return heapAddress;\r\n            }\r\n            const num = x / CPP14Engine.sizeof(type);\r\n            if (10000000 <= num) {\r\n                return 0;\r\n            }\r\n            const typeBit = CPP14Engine.sizeof(type) * 8;\r\n            for (let i = 0; i < num; ++i) {\r\n                global.setHeap(this.rand(typeBit), type);\r\n            }\r\n            global.setMallocSize(heapAddress, num * CPP14Engine.sizeof(type));\r\n            return heapAddress;\r\n        }, 'FUNCTION');\r\n        global.setTop('free', (x) => {\r\n            const address = x;\r\n            const size = global.getMallocSize(address);\r\n            return global.removeOnMemory(address, size);\r\n        }, 'FUNCTION');\r\n        global.setTop('rand', (x) => {\r\n            return Math.round(Math.random() * Math.pow(0, Math.pow(2, 32)));\r\n        }, 'FUNCTION');\r\n        global.setTop('abs', (x) => {\r\n            return Math.abs(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('exit', (status) => {\r\n            throw new Engine_1.Exit(status);\r\n        }, 'FUNCTION');\r\n        global.setTop('atoi', (str) => {\r\n            const bytes = Array.isArray(str)\r\n                ? str\r\n                : CPP14Engine.getCharArrAsByte(global.objectOnMemory, str);\r\n            let buf = '';\r\n            for (const byte of bytes) {\r\n                if ('0'.charCodeAt(0) <= byte && byte <= '9'.charCodeAt(0)) {\r\n                    buf += String.fromCharCode(byte);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            if (buf === '') {\r\n                return 0;\r\n            }\r\n            return Number(buf);\r\n        }, 'FUNCTION');\r\n    }\r\n    includeMath(global) {\r\n        global.setTop('acos', (x) => {\r\n            return Math.acos(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('asin', (x) => {\r\n            return Math.asin(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('atan', (x) => {\r\n            return Math.atan(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('cos', (x) => {\r\n            return Math.cos(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('sin', (x) => {\r\n            return Math.sin(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('tan', (x) => {\r\n            return Math.tan(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('cosh', (x) => {\r\n            return Math.cosh(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('sinh', (x) => {\r\n            return Math.sinh(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('tanh', (x) => {\r\n            return Math.tanh(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('exp', (x) => {\r\n            return Math.exp(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('exp2', (x) => {\r\n            return Math.pow(2.0, x);\r\n        }, 'FUNCTION');\r\n        global.setTop('expm1', (x) => {\r\n            return Math.expm1(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('log', (x) => {\r\n            return Math.log(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('log10', (x) => {\r\n            return Math.log10(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('log1p', (x) => {\r\n            return Math.log1p(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('cbrt', (x) => {\r\n            return Math.cbrt(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('fabs', (x) => {\r\n            return Math.abs(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('hypot', (x, y) => {\r\n            return Math.hypot(x, y);\r\n        }, 'FUNCTION');\r\n        global.setTop('pow', (x, y) => {\r\n            return Math.pow(x, y);\r\n        }, 'FUNCTION');\r\n        global.setTop('sqrt', (x) => {\r\n            return Math.sqrt(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('ceil', (x) => {\r\n            return Math.ceil(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('floor', (x) => {\r\n            return Math.floor(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('rint', (x) => {\r\n            throw new Error('Sorry! rint is not supported.');\r\n        }, 'FUNCTION');\r\n        global.setTop('round', (x) => {\r\n            return Math.round(x);\r\n        }, 'FUNCTION');\r\n        global.setTop('fdim', (x, y) => {\r\n            const a = Math.abs(x);\r\n            const b = Math.abs(y);\r\n            return Math.abs(Math.max(a, b) - Math.min(a, b));\r\n        }, 'FUNCTION');\r\n        global.setTop('fmax', (x, y) => {\r\n            return Math.max(x, y);\r\n        }, 'FUNCTION');\r\n        global.setTop('fmin', (x, y) => {\r\n            return Math.min(x, y);\r\n        }, 'FUNCTION');\r\n        global.setTop('fmod', (x, y) => {\r\n            const div = x / y;\r\n            const n = 0 < div ? Math.floor(div) : Math.ceil(div);\r\n            return x - y * n;\r\n        }, 'FUNCTION');\r\n    }\r\n    includeString(global) {\r\n        global.setTop('strlen', (str) => {\r\n            const ret = CPP14Engine.charArrToStr(global.objectOnMemory, str);\r\n            let len = 0;\r\n            for (let i = 0; i < ret.length; ++i, ++len) {\r\n                const code = ret.charCodeAt(i);\r\n                if (127 < code) {\r\n                    ++len;\r\n                }\r\n            }\r\n            return len;\r\n        }, 'FUNCTION');\r\n        global.setTop('strcpy', (dst, src) => {\r\n            const bytes = CPP14Engine.getCharArrAsByte(global.objectOnMemory, src);\r\n            for (let k = 0; k < bytes.length; ++k) {\r\n                this.currentScope.set(dst + k, bytes[k]);\r\n            }\r\n            return dst;\r\n        }, 'FUNCTION');\r\n        global.setTop('strcat', (dst, src) => {\r\n            const strBytes = CPP14Engine.getCharArrAsByte(global.objectOnMemory, src);\r\n            const dstBytes = CPP14Engine.getCharArrAsByte(global.objectOnMemory, dst);\r\n            const end = dstBytes.indexOf(0);\r\n            for (let k = 0; k < strBytes.length; ++k) {\r\n                this.currentScope.set(dst + end + k, strBytes[k]);\r\n            }\r\n            return dst;\r\n        }, 'FUNCTION');\r\n        global.setTop('strcmp', (s1, s2) => {\r\n            // \"aiueo\" \"aiueo\" => 0\r\n            // \"aiue\" \"aiueo\" => -1\r\n            // \"aiue\" \"aiu\" => 1\r\n            const str1 = CPP14Engine.getCharArrAsByte(global.objectOnMemory, s1);\r\n            const str2 = CPP14Engine.getCharArrAsByte(global.objectOnMemory, s2);\r\n            const len = Math.min(str1.length, str2.length);\r\n            for (let i = 0; i < len; ++i) {\r\n                if (str1[i] > str2[i]) {\r\n                    return 1;\r\n                }\r\n                else if (str1[i] < str2[i]) {\r\n                    return -1;\r\n                }\r\n            }\r\n            return 0;\r\n        }, 'FUNCTION');\r\n    }\r\n    *execUnaryOp(uniOp, scope) {\r\n        if (uniOp.operator === '++' || uniOp.operator === '--') {\r\n            uniOp.operator = uniOp.operator + '_';\r\n        }\r\n        switch (uniOp.operator) {\r\n            case '&': {\r\n                const adr = yield* this.getAddress(uniOp.expr, scope);\r\n                return adr;\r\n            }\r\n            case '*': {\r\n                const v = scope.getValue((yield* this.execExpr(uniOp.expr, scope)));\r\n                return v;\r\n            }\r\n            case 'sizeof': {\r\n                const l = [];\r\n                const expr = uniOp.expr;\r\n                if (expr instanceof UniIdent_1.UniIdent) {\r\n                    l.push(new UniStringLiteral_1.UniStringLiteral(expr.name));\r\n                }\r\n                else if (expr instanceof UniUnaryOp_1.UniUnaryOp &&\r\n                    expr.operator === '*' &&\r\n                    expr.expr instanceof UniIdent_1.UniIdent) {\r\n                    let type = this.getType(expr.expr, scope);\r\n                    type = scope.getTypedef(type);\r\n                    while (type.endsWith('*')) {\r\n                        type = type.substring(0, type.length - 1);\r\n                    }\r\n                    Engine_1.Engine.lastSizeOf = type;\r\n                    let typeSize = 1;\r\n                    if (scope.isStructType(type)) {\r\n                        const offsets = scope.get(type);\r\n                        for (const value of offsets.values()) {\r\n                            typeSize += value[2];\r\n                        }\r\n                    }\r\n                    return typeSize;\r\n                }\r\n                else {\r\n                    l.push(expr);\r\n                }\r\n                const umc = new UniMethodCall_1.UniMethodCall(null, new UniIdent_1.UniIdent('sizeof'), l);\r\n                const v = yield* this.execExpr(umc, scope);\r\n                return v;\r\n            }\r\n            case '-': {\r\n                const value = yield* this.execExpr(uniOp.expr, scope);\r\n                if (value instanceof Int_1.Int) {\r\n                    return new Int_1.Int(-value);\r\n                }\r\n                if (value === 'number') {\r\n                    return -value;\r\n                }\r\n            }\r\n            case '_++':\r\n            case '++_':\r\n            case '_--':\r\n            case '--_':\r\n                if (uniOp.expr instanceof UniIdent_1.UniIdent) {\r\n                    const ident = uniOp.expr;\r\n                    let num = yield* this.execExpr(uniOp.expr, scope);\r\n                    const address = yield* this.getAddress(ident, scope);\r\n                    switch (uniOp.operator) {\r\n                        case '_++':\r\n                            if (num instanceof Int_1.Int) {\r\n                                this.execAssign(address, new Int_1.Int(num.valueOf() + 1), scope);\r\n                            }\r\n                            else {\r\n                                this.execAssign(address, num + 1, scope);\r\n                            }\r\n                            yield num;\r\n                            return num;\r\n                        case '++_':\r\n                            if (num instanceof Int_1.Int) {\r\n                                num = new Int_1.Int(num.valueOf() + 1);\r\n                            }\r\n                            else {\r\n                                ++num;\r\n                            }\r\n                            yield num;\r\n                            return this.execAssign(address, num, scope);\r\n                        case '_--':\r\n                            if (num instanceof Int_1.Int) {\r\n                                this.execAssign(address, new Int_1.Int(num.valueOf() - 1), scope);\r\n                            }\r\n                            else {\r\n                                this.execAssign(address, num - 1, scope);\r\n                            }\r\n                            yield num;\r\n                            return num;\r\n                        case '--_':\r\n                            if (num instanceof Int_1.Int) {\r\n                                num = new Int_1.Int(num.valueOf() - 1);\r\n                            }\r\n                            else {\r\n                                --num;\r\n                            }\r\n                            yield num;\r\n                            return this.execAssign(address, num, scope);\r\n                    }\r\n                }\r\n        }\r\n        return yield* super.execUnaryOp(uniOp, scope);\r\n    }\r\n    *execVariableDec(decVar, scope) {\r\n        let value = null;\r\n        Engine_1.Engine.lastSizeOf = decVar.type;\r\n        for (const def of decVar.variables) {\r\n            value = null; // 2これがないと個目以降に残ってしまう。\r\n            while (def.name.startsWith('*')) {\r\n                def.name = def.name.substring(1);\r\n                decVar.type += '*';\r\n            }\r\n            while (def.name.startsWith('&')) {\r\n                def.name = def.name.substring(1);\r\n                decVar.type += '&';\r\n            }\r\n            // 初期化されている場合\r\n            if (def.value != null) {\r\n                value = yield* this.execExpr(def.value, scope);\r\n                value = this._execCast(decVar.type, value);\r\n                if (decVar.type.endsWith('*') && !Array.isArray(value)) {\r\n                    if (value instanceof String) {\r\n                        value = scope.setStatic(value, 'char[]');\r\n                    }\r\n                    else {\r\n                        const address = value;\r\n                        if (scope.isMallocArea(address)) {\r\n                            const size = scope.getMallocSize(address);\r\n                            // tslint:disable-next-line:no-shadowed-variable\r\n                            const type = decVar.type.substring(0, decVar.type.length - 1);\r\n                            const typeSize = CPP14Engine.sizeof(type);\r\n                            for (let i = 0; i < size; i += typeSize) {\r\n                                scope.typeOnMemory.set(address + i, type);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // 配列の場合\r\n            if (def.typeSuffix != null && def.typeSuffix !== '') {\r\n                const sizes = scope.getArrayDims(def.typeSuffix);\r\n                if (0 < sizes.length) {\r\n                    if (value === null) {\r\n                        // 初期化リストがない場合\r\n                        const sum = sizes.reduce((pre, cur) => pre * cur, 1);\r\n                        value = new Array(sum).fill(0).map(() => this._execCast(decVar.type, this.randInt32()));\r\n                        for (const size of sizes.reverse()) {\r\n                            value = value.divide(size);\r\n                        }\r\n                    }\r\n                    else {\r\n                        const make2array = (valueLocal, sizesLocal) => {\r\n                            const value1 = [];\r\n                            const length = sizesLocal[1];\r\n                            let offset = 0;\r\n                            const makeArray = () => {\r\n                                if (Array.isArray(valueLocal[offset])) {\r\n                                    const value2 = valueLocal[offset++];\r\n                                    for (let k = value2.length; k < length; ++k) {\r\n                                        value2.push(new Int_1.Int(0));\r\n                                    }\r\n                                    return value2;\r\n                                }\r\n                                else {\r\n                                    const value2 = [];\r\n                                    for (let k = 0; k < length; ++k) {\r\n                                        const v = valueLocal[offset];\r\n                                        if (Array.isArray(v) && 2 <= v.length) {\r\n                                            for (; k < length; ++k) {\r\n                                                value2.push(new Int_1.Int(0));\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            value2.push(v);\r\n                                            ++offset;\r\n                                        }\r\n                                    }\r\n                                    return value2.map((v) => (Array.isArray(v) && v.length === 1 ? v[0] : v));\r\n                                }\r\n                            };\r\n                            if (!isNaN(sizesLocal[0])) {\r\n                                // 要素数が指定されている場合\r\n                                for (let i = 0; i < sizesLocal[0]; ++i) {\r\n                                    value1.push(makeArray());\r\n                                }\r\n                            }\r\n                            else {\r\n                                // 1つ目の要素数が省略されている場合\r\n                                while (offset < valueLocal.length) {\r\n                                    value1.push(makeArray());\r\n                                }\r\n                            }\r\n                            return value1;\r\n                        };\r\n                        const makeNarray = (n, valueLocal, sizesLocal) => {\r\n                            const value1 = [];\r\n                            if (!isNaN(sizesLocal[0])) {\r\n                                // 要素数が指定されている場合\r\n                                for (let i = 0; i < sizesLocal[0]; ++i) {\r\n                                    let value2 = null;\r\n                                    if (n === 3) {\r\n                                        value2 = make2array(valueLocal[i], sizesLocal.slice(1));\r\n                                    }\r\n                                    else {\r\n                                        value2 = makeNarray(n - 1, valueLocal[i], sizesLocal.slice(1));\r\n                                    }\r\n                                    value1.push(value2);\r\n                                }\r\n                            }\r\n                            else {\r\n                                // 1つ目の要素数が省略されている場合\r\n                                for (const v of valueLocal) {\r\n                                    value1.push(makeNarray(n - 1, v, sizesLocal.slice(1)));\r\n                                }\r\n                            }\r\n                            return value1;\r\n                        };\r\n                        if (sizes.length === 1) {\r\n                            if (!isNaN(sizes[0])) {\r\n                                // 要素数が指定されている場合\r\n                                for (let i = value.length; i < sizes[0]; ++i) {\r\n                                    value.push(new Int_1.Int(0));\r\n                                }\r\n                            }\r\n                            // 要素数が省略されている場合はvalueをそのまま使う\r\n                        }\r\n                        else if (sizes.length === 2) {\r\n                            value = make2array(value, sizes);\r\n                        }\r\n                        else if (3 <= sizes.length) {\r\n                            value = makeNarray(sizes.length, value, sizes);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!scope.isStructType(decVar.type) && value === null) {\r\n                value = this.randInt32();\r\n            }\r\n            if (decVar.modifiers.includes('typedef')) {\r\n                scope.setTypedef(decVar.type, def.name);\r\n            }\r\n            else {\r\n                scope.setTop(def.name, value, decVar.type);\r\n            }\r\n        }\r\n        Engine_1.Engine.lastSizeOf = '';\r\n        return value;\r\n    }\r\n    *execBinOp(arg, scope, left, right) {\r\n        if (arg instanceof UniBinOp_1.UniBinOp && left === undefined && right === undefined) {\r\n            const binOp = arg;\r\n            return yield* this.execBinOp(binOp.operator, scope, binOp.left, binOp.right);\r\n        }\r\n        else if (typeof arg === 'string' && left instanceof UniExpr_1.UniExpr) {\r\n            let op = arg;\r\n            if (op === '++' || op === '--') {\r\n                op = '_' + op;\r\n                return yield* this.execUnaryOp(new UniUnaryOp_1.UniUnaryOp(op, left), scope);\r\n            }\r\n            if (right instanceof UniExpr_1.UniExpr) {\r\n                switch (op) {\r\n                    case '->': {\r\n                        return yield* super.execBinOp('.', scope, new UniUnaryOp_1.UniUnaryOp('*', left), right);\r\n                    }\r\n                }\r\n                return yield* super.execBinOp(op, scope, left, right);\r\n            }\r\n        }\r\n    }\r\n    execBinOpImple(op, rawl, rawr) {\r\n        if (op === ',') {\r\n            return rawl;\r\n        }\r\n        const l = rawl.valueOf();\r\n        const r = rawr.valueOf();\r\n        let ret = super.execBinOpImple(op, l, r);\r\n        switch (op) {\r\n            case '+':\r\n            case '-':\r\n            case '*':\r\n            case '/':\r\n                if (rawl instanceof Int_1.Int && rawr instanceof Int_1.Int) {\r\n                    ret = new Int_1.Int(ret);\r\n                }\r\n        }\r\n        return ret;\r\n    }\r\n    *execCast(expr, scope) {\r\n        const value = yield* this.execExpr(expr.value, scope);\r\n        return this._execCast(expr.type, value);\r\n    }\r\n    // tslint:disable-next-line:function-name\r\n    _execCast(type, value) {\r\n        // protected Object _execCast(String type, Object value){\r\n        if (value == null || Array.isArray(value)) {\r\n            return value;\r\n        }\r\n        if (type === 'int') {\r\n            return new Int_1.Int(value);\r\n        }\r\n        else if (type === 'double') {\r\n            return value;\r\n        }\r\n        else if (type === 'long') {\r\n            return value;\r\n        }\r\n        else if (type === 'char') {\r\n            return value;\r\n            // if (value instanceof Integer) {\r\n            //   return (byte)((int)value);\r\n            // }\r\n            // else if(value instanceof Character) {\r\n            //   return (byte)((char)value);\r\n            // }\r\n            // else if(value instanceof Long ) {\r\n            //   return (byte)((long)value);\r\n            // }\r\n            // else if(value instanceof Character ) {\r\n            //   return (byte)((char)value);\r\n            // }\r\n        }\r\n        return value;\r\n    }\r\n    execCharLiteral(expr, scope) {\r\n        const value = CPP14Engine.escapeText(expr.value);\r\n        const code = value.charCodeAt(0);\r\n        return code;\r\n    }\r\n    execStringLiteral(expr, scope) {\r\n        const value = CPP14Engine.escapeText(expr.value);\r\n        const list = [];\r\n        for (let i = 0; i < value.length; ++i) {\r\n            const byte = value.charCodeAt(i);\r\n            list.push(byte);\r\n        }\r\n        list.push(0);\r\n        return list;\r\n    }\r\n    execIntLiteral(expr, scope) {\r\n        return new Int_1.Int(expr.value);\r\n    }\r\n}\r\nexports.CPP14Engine = CPP14Engine;\r\n//# sourceMappingURL=CPP14Engine.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Engine.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Interpreter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Interpreter.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CPP14Interpreter = void 0;\r\nconst Interpreter_1 = __webpack_require__(/*! ../Interpreter */ \"./node_modules/unicoen.ts/dist/interpreter/Interpreter.js\");\r\nconst CPP14Engine_1 = __webpack_require__(/*! ./CPP14Engine */ \"./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Engine.js\");\r\nconst CPP14Mapper_1 = __webpack_require__(/*! ./CPP14Mapper */ \"./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Mapper.js\");\r\nclass CPP14Interpreter extends Interpreter_1.Interpreter {\r\n    constructor() {\r\n        super(new CPP14Engine_1.CPP14Engine(), new CPP14Mapper_1.CPP14Mapper());\r\n    }\r\n    preProcess(text) {\r\n        const replaceMap = new Map();\r\n        for (let pos = text.indexOf('#define'); 0 <= pos; pos = text.indexOf('#define', pos)) {\r\n            const lineEnd = text.indexOf('\\n', pos);\r\n            const defineText = text.substring(pos, lineEnd);\r\n            const defineTokens = defineText.split(/\\s+/);\r\n            if (defineTokens.length < 3) {\r\n                continue;\r\n            }\r\n            replaceMap.set(defineTokens[1], defineTokens.slice(2).join(' '));\r\n            pos = lineEnd;\r\n        }\r\n        for (const [key, value] of replaceMap) {\r\n            text = text.split(key).join(value);\r\n        }\r\n        return text;\r\n    }\r\n}\r\nexports.CPP14Interpreter = CPP14Interpreter;\r\n//# sourceMappingURL=CPP14Interpreter.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Interpreter.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Lexer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Lexer.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CPP14Lexer = void 0;\r\nconst ATNDeserializer_1 = __webpack_require__(/*! antlr4ts/atn/ATNDeserializer */ \"./node_modules/antlr4ts/atn/ATNDeserializer.js\");\r\nconst Lexer_1 = __webpack_require__(/*! antlr4ts/Lexer */ \"./node_modules/antlr4ts/Lexer.js\");\r\nconst LexerATNSimulator_1 = __webpack_require__(/*! antlr4ts/atn/LexerATNSimulator */ \"./node_modules/antlr4ts/atn/LexerATNSimulator.js\");\r\nconst VocabularyImpl_1 = __webpack_require__(/*! antlr4ts/VocabularyImpl */ \"./node_modules/antlr4ts/VocabularyImpl.js\");\r\nconst Utils = __webpack_require__(/*! antlr4ts/misc/Utils */ \"./node_modules/antlr4ts/misc/Utils.js\");\r\nclass CPP14Lexer extends Lexer_1.Lexer {\r\n    // tslint:enable:no-trailing-whitespace\r\n    constructor(input) {\r\n        super(input);\r\n        this._interp = new LexerATNSimulator_1.LexerATNSimulator(CPP14Lexer._ATN, this);\r\n    }\r\n    // @Override\r\n    // @NotNull\r\n    get vocabulary() {\r\n        return CPP14Lexer.VOCABULARY;\r\n    }\r\n    // @Override\r\n    get grammarFileName() {\r\n        return 'CPP14.g4';\r\n    }\r\n    // @Override\r\n    get ruleNames() {\r\n        return CPP14Lexer.ruleNames;\r\n    }\r\n    // @Override\r\n    get serializedATN() {\r\n        return CPP14Lexer._serializedATN;\r\n    }\r\n    // @Override\r\n    get modeNames() {\r\n        return CPP14Lexer.modeNames;\r\n    }\r\n    static get _ATN() {\r\n        if (!CPP14Lexer.__ATN) {\r\n            CPP14Lexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(CPP14Lexer._serializedATN));\r\n        }\r\n        return CPP14Lexer.__ATN;\r\n    }\r\n}\r\nexports.CPP14Lexer = CPP14Lexer;\r\nCPP14Lexer.Directive = 1;\r\nCPP14Lexer.Alignas = 2;\r\nCPP14Lexer.Alignof = 3;\r\nCPP14Lexer.Asm = 4;\r\nCPP14Lexer.Auto = 5;\r\nCPP14Lexer.Bool = 6;\r\nCPP14Lexer.Break = 7;\r\nCPP14Lexer.Case = 8;\r\nCPP14Lexer.Catch = 9;\r\nCPP14Lexer.Char = 10;\r\nCPP14Lexer.Char16 = 11;\r\nCPP14Lexer.Char32 = 12;\r\nCPP14Lexer.Class = 13;\r\nCPP14Lexer.Const = 14;\r\nCPP14Lexer.Constexpr = 15;\r\nCPP14Lexer.Const_cast = 16;\r\nCPP14Lexer.Continue = 17;\r\nCPP14Lexer.Decltype = 18;\r\nCPP14Lexer.Default = 19;\r\nCPP14Lexer.Delete = 20;\r\nCPP14Lexer.Do = 21;\r\nCPP14Lexer.Double = 22;\r\nCPP14Lexer.File = 23;\r\nCPP14Lexer.Dynamic_cast = 24;\r\nCPP14Lexer.Else = 25;\r\nCPP14Lexer.Enum = 26;\r\nCPP14Lexer.Explicit = 27;\r\nCPP14Lexer.Export = 28;\r\nCPP14Lexer.Extern = 29;\r\nCPP14Lexer.False = 30;\r\nCPP14Lexer.Final = 31;\r\nCPP14Lexer.Float = 32;\r\nCPP14Lexer.For = 33;\r\nCPP14Lexer.Friend = 34;\r\nCPP14Lexer.Goto = 35;\r\nCPP14Lexer.If = 36;\r\nCPP14Lexer.Inline = 37;\r\nCPP14Lexer.Int = 38;\r\nCPP14Lexer.Long = 39;\r\nCPP14Lexer.Mutable = 40;\r\nCPP14Lexer.Namespace = 41;\r\nCPP14Lexer.New = 42;\r\nCPP14Lexer.Noexcept = 43;\r\nCPP14Lexer.Nullptr = 44;\r\nCPP14Lexer.Operator = 45;\r\nCPP14Lexer.Override = 46;\r\nCPP14Lexer.Private = 47;\r\nCPP14Lexer.Protected = 48;\r\nCPP14Lexer.Public = 49;\r\nCPP14Lexer.Register = 50;\r\nCPP14Lexer.Reinterpret_cast = 51;\r\nCPP14Lexer.Return = 52;\r\nCPP14Lexer.Short = 53;\r\nCPP14Lexer.Signed = 54;\r\nCPP14Lexer.Sizeof = 55;\r\nCPP14Lexer.Static = 56;\r\nCPP14Lexer.Static_assert = 57;\r\nCPP14Lexer.Static_cast = 58;\r\nCPP14Lexer.Struct = 59;\r\nCPP14Lexer.Switch = 60;\r\nCPP14Lexer.Template = 61;\r\nCPP14Lexer.This = 62;\r\nCPP14Lexer.Thread_local = 63;\r\nCPP14Lexer.Throw = 64;\r\nCPP14Lexer.True = 65;\r\nCPP14Lexer.Try = 66;\r\nCPP14Lexer.Typedef = 67;\r\nCPP14Lexer.Typeid = 68;\r\nCPP14Lexer.Typename = 69;\r\nCPP14Lexer.Union = 70;\r\nCPP14Lexer.Unsigned = 71;\r\nCPP14Lexer.Using = 72;\r\nCPP14Lexer.Virtual = 73;\r\nCPP14Lexer.Void = 74;\r\nCPP14Lexer.Volatile = 75;\r\nCPP14Lexer.Wchar = 76;\r\nCPP14Lexer.While = 77;\r\nCPP14Lexer.LeftParen = 78;\r\nCPP14Lexer.RightParen = 79;\r\nCPP14Lexer.LeftBracket = 80;\r\nCPP14Lexer.RightBracket = 81;\r\nCPP14Lexer.LeftBrace = 82;\r\nCPP14Lexer.RightBrace = 83;\r\nCPP14Lexer.Plus = 84;\r\nCPP14Lexer.Minus = 85;\r\nCPP14Lexer.Star = 86;\r\nCPP14Lexer.Div = 87;\r\nCPP14Lexer.Mod = 88;\r\nCPP14Lexer.Caret = 89;\r\nCPP14Lexer.And = 90;\r\nCPP14Lexer.Or = 91;\r\nCPP14Lexer.Tilde = 92;\r\nCPP14Lexer.Not = 93;\r\nCPP14Lexer.Assign = 94;\r\nCPP14Lexer.Less = 95;\r\nCPP14Lexer.Greater = 96;\r\nCPP14Lexer.PlusAssign = 97;\r\nCPP14Lexer.MinusAssign = 98;\r\nCPP14Lexer.StarAssign = 99;\r\nCPP14Lexer.DivAssign = 100;\r\nCPP14Lexer.ModAssign = 101;\r\nCPP14Lexer.XorAssign = 102;\r\nCPP14Lexer.AndAssign = 103;\r\nCPP14Lexer.OrAssign = 104;\r\nCPP14Lexer.LeftShift = 105;\r\nCPP14Lexer.LeftShiftAssign = 106;\r\nCPP14Lexer.Equal = 107;\r\nCPP14Lexer.NotEqual = 108;\r\nCPP14Lexer.LessEqual = 109;\r\nCPP14Lexer.GreaterEqual = 110;\r\nCPP14Lexer.AndAnd = 111;\r\nCPP14Lexer.OrOr = 112;\r\nCPP14Lexer.PlusPlus = 113;\r\nCPP14Lexer.MinusMinus = 114;\r\nCPP14Lexer.Comma = 115;\r\nCPP14Lexer.ArrowStar = 116;\r\nCPP14Lexer.Arrow = 117;\r\nCPP14Lexer.Question = 118;\r\nCPP14Lexer.Colon = 119;\r\nCPP14Lexer.Doublecolon = 120;\r\nCPP14Lexer.Semi = 121;\r\nCPP14Lexer.Dot = 122;\r\nCPP14Lexer.DotStar = 123;\r\nCPP14Lexer.Ellipsis = 124;\r\nCPP14Lexer.Identifier = 125;\r\nCPP14Lexer.Integerliteral = 126;\r\nCPP14Lexer.Decimalliteral = 127;\r\nCPP14Lexer.Octalliteral = 128;\r\nCPP14Lexer.Hexadecimalliteral = 129;\r\nCPP14Lexer.Binaryliteral = 130;\r\nCPP14Lexer.Integersuffix = 131;\r\nCPP14Lexer.Characterliteral = 132;\r\nCPP14Lexer.Floatingliteral = 133;\r\nCPP14Lexer.Stringliteral = 134;\r\nCPP14Lexer.Booleanliteral = 135;\r\nCPP14Lexer.Userdefinedintegerliteral = 136;\r\nCPP14Lexer.Userdefinedfloatingliteral = 137;\r\nCPP14Lexer.Userdefinedstringliteral = 138;\r\nCPP14Lexer.Userdefinedcharacterliteral = 139;\r\nCPP14Lexer.Whitespace = 140;\r\nCPP14Lexer.Newline = 141;\r\nCPP14Lexer.BlockComment = 142;\r\nCPP14Lexer.LineComment = 143;\r\n// tslint:disable:no-trailing-whitespace\r\nCPP14Lexer.modeNames = ['DEFAULT_MODE'];\r\nCPP14Lexer.ruleNames = [\r\n    'Directive',\r\n    'Alignas',\r\n    'Alignof',\r\n    'Asm',\r\n    'Auto',\r\n    'Bool',\r\n    'Break',\r\n    'Case',\r\n    'Catch',\r\n    'Char',\r\n    'Char16',\r\n    'Char32',\r\n    'Class',\r\n    'Const',\r\n    'Constexpr',\r\n    'Const_cast',\r\n    'Continue',\r\n    'Decltype',\r\n    'Default',\r\n    'Delete',\r\n    'Do',\r\n    'Double',\r\n    'File',\r\n    'Dynamic_cast',\r\n    'Else',\r\n    'Enum',\r\n    'Explicit',\r\n    'Export',\r\n    'Extern',\r\n    'False',\r\n    'Final',\r\n    'Float',\r\n    'For',\r\n    'Friend',\r\n    'Goto',\r\n    'If',\r\n    'Inline',\r\n    'Int',\r\n    'Long',\r\n    'Mutable',\r\n    'Namespace',\r\n    'New',\r\n    'Noexcept',\r\n    'Nullptr',\r\n    'Operator',\r\n    'Override',\r\n    'Private',\r\n    'Protected',\r\n    'Public',\r\n    'Register',\r\n    'Reinterpret_cast',\r\n    'Return',\r\n    'Short',\r\n    'Signed',\r\n    'Sizeof',\r\n    'Static',\r\n    'Static_assert',\r\n    'Static_cast',\r\n    'Struct',\r\n    'Switch',\r\n    'Template',\r\n    'This',\r\n    'Thread_local',\r\n    'Throw',\r\n    'True',\r\n    'Try',\r\n    'Typedef',\r\n    'Typeid',\r\n    'Typename',\r\n    'Union',\r\n    'Unsigned',\r\n    'Using',\r\n    'Virtual',\r\n    'Void',\r\n    'Volatile',\r\n    'Wchar',\r\n    'While',\r\n    'LeftParen',\r\n    'RightParen',\r\n    'LeftBracket',\r\n    'RightBracket',\r\n    'LeftBrace',\r\n    'RightBrace',\r\n    'Plus',\r\n    'Minus',\r\n    'Star',\r\n    'Div',\r\n    'Mod',\r\n    'Caret',\r\n    'And',\r\n    'Or',\r\n    'Tilde',\r\n    'Not',\r\n    'Assign',\r\n    'Less',\r\n    'Greater',\r\n    'PlusAssign',\r\n    'MinusAssign',\r\n    'StarAssign',\r\n    'DivAssign',\r\n    'ModAssign',\r\n    'XorAssign',\r\n    'AndAssign',\r\n    'OrAssign',\r\n    'LeftShift',\r\n    'LeftShiftAssign',\r\n    'Equal',\r\n    'NotEqual',\r\n    'LessEqual',\r\n    'GreaterEqual',\r\n    'AndAnd',\r\n    'OrOr',\r\n    'PlusPlus',\r\n    'MinusMinus',\r\n    'Comma',\r\n    'ArrowStar',\r\n    'Arrow',\r\n    'Question',\r\n    'Colon',\r\n    'Doublecolon',\r\n    'Semi',\r\n    'Dot',\r\n    'DotStar',\r\n    'Ellipsis',\r\n    'Hexquad',\r\n    'Universalcharactername',\r\n    'Identifier',\r\n    'Identifiernondigit',\r\n    'NONDIGIT',\r\n    'DIGIT',\r\n    'Integerliteral',\r\n    'Decimalliteral',\r\n    'Octalliteral',\r\n    'Hexadecimalliteral',\r\n    'Binaryliteral',\r\n    'NONZERODIGIT',\r\n    'OCTALDIGIT',\r\n    'HEXADECIMALDIGIT',\r\n    'BINARYDIGIT',\r\n    'Integersuffix',\r\n    'Unsignedsuffix',\r\n    'Longsuffix',\r\n    'Longlongsuffix',\r\n    'Characterliteral',\r\n    'Cchar',\r\n    'Escapesequence',\r\n    'Simpleescapesequence',\r\n    'Octalescapesequence',\r\n    'Hexadecimalescapesequence',\r\n    'Floatingliteral',\r\n    'Fractionalconstant',\r\n    'Exponentpart',\r\n    'SIGN',\r\n    'Digitsequence',\r\n    'Floatingsuffix',\r\n    'Stringliteral',\r\n    'Encodingprefix',\r\n    'Schar',\r\n    'Rawstring',\r\n    'Booleanliteral',\r\n    'Userdefinedintegerliteral',\r\n    'Userdefinedfloatingliteral',\r\n    'Userdefinedstringliteral',\r\n    'Userdefinedcharacterliteral',\r\n    'Udsuffix',\r\n    'Whitespace',\r\n    'Newline',\r\n    'BlockComment',\r\n    'LineComment',\r\n];\r\nCPP14Lexer._LITERAL_NAMES = [\r\n    undefined,\r\n    undefined,\r\n    \"'alignas'\",\r\n    \"'alignof'\",\r\n    \"'asm'\",\r\n    \"'auto'\",\r\n    \"'bool'\",\r\n    \"'break'\",\r\n    \"'case'\",\r\n    \"'catch'\",\r\n    \"'char'\",\r\n    \"'char16_t'\",\r\n    \"'char32_t'\",\r\n    \"'class'\",\r\n    \"'const'\",\r\n    \"'constexpr'\",\r\n    \"'const_cast'\",\r\n    \"'continue'\",\r\n    \"'decltype'\",\r\n    \"'default'\",\r\n    \"'delete'\",\r\n    \"'do'\",\r\n    \"'double'\",\r\n    \"'FILE'\",\r\n    \"'dynamic_cast'\",\r\n    \"'else'\",\r\n    \"'enum'\",\r\n    \"'explicit'\",\r\n    \"'export'\",\r\n    \"'extern'\",\r\n    \"'false'\",\r\n    \"'final'\",\r\n    \"'float'\",\r\n    \"'for'\",\r\n    \"'friend'\",\r\n    \"'goto'\",\r\n    \"'if'\",\r\n    \"'inline'\",\r\n    \"'int'\",\r\n    \"'long'\",\r\n    \"'mutable'\",\r\n    \"'namespace'\",\r\n    \"'new'\",\r\n    \"'noexcept'\",\r\n    \"'nullptr'\",\r\n    \"'operator'\",\r\n    \"'override'\",\r\n    \"'private'\",\r\n    \"'protected'\",\r\n    \"'public'\",\r\n    \"'register'\",\r\n    \"'reinterpret_cast'\",\r\n    \"'return'\",\r\n    \"'short'\",\r\n    \"'signed'\",\r\n    \"'sizeof'\",\r\n    \"'static'\",\r\n    \"'static_assert'\",\r\n    \"'static_cast'\",\r\n    \"'struct'\",\r\n    \"'switch'\",\r\n    \"'template'\",\r\n    \"'this'\",\r\n    \"'thread_local'\",\r\n    \"'throw'\",\r\n    \"'true'\",\r\n    \"'try'\",\r\n    \"'typedef'\",\r\n    \"'typeid'\",\r\n    \"'typename'\",\r\n    \"'union'\",\r\n    \"'unsigned'\",\r\n    \"'using'\",\r\n    \"'virtual'\",\r\n    \"'void'\",\r\n    \"'volatile'\",\r\n    \"'wchar_t'\",\r\n    \"'while'\",\r\n    \"'('\",\r\n    \"')'\",\r\n    \"'['\",\r\n    \"']'\",\r\n    \"'{'\",\r\n    \"'}'\",\r\n    \"'+'\",\r\n    \"'-'\",\r\n    \"'*'\",\r\n    \"'/'\",\r\n    \"'%'\",\r\n    \"'^'\",\r\n    \"'&'\",\r\n    \"'|'\",\r\n    \"'~'\",\r\n    \"'!'\",\r\n    \"'='\",\r\n    \"'<'\",\r\n    \"'>'\",\r\n    \"'+='\",\r\n    \"'-='\",\r\n    \"'*='\",\r\n    \"'/='\",\r\n    \"'%='\",\r\n    \"'^='\",\r\n    \"'&='\",\r\n    \"'|='\",\r\n    \"'<<'\",\r\n    \"'<<='\",\r\n    \"'=='\",\r\n    \"'!='\",\r\n    \"'<='\",\r\n    \"'>='\",\r\n    \"'&&'\",\r\n    \"'||'\",\r\n    \"'++'\",\r\n    \"'--'\",\r\n    \"','\",\r\n    \"'->*'\",\r\n    \"'->'\",\r\n    \"'?'\",\r\n    \"':'\",\r\n    \"'::'\",\r\n    \"';'\",\r\n    \"'.'\",\r\n    \"'.*'\",\r\n    \"'...'\",\r\n];\r\nCPP14Lexer._SYMBOLIC_NAMES = [\r\n    undefined,\r\n    'Directive',\r\n    'Alignas',\r\n    'Alignof',\r\n    'Asm',\r\n    'Auto',\r\n    'Bool',\r\n    'Break',\r\n    'Case',\r\n    'Catch',\r\n    'Char',\r\n    'Char16',\r\n    'Char32',\r\n    'Class',\r\n    'Const',\r\n    'Constexpr',\r\n    'Const_cast',\r\n    'Continue',\r\n    'Decltype',\r\n    'Default',\r\n    'Delete',\r\n    'Do',\r\n    'Double',\r\n    'File',\r\n    'Dynamic_cast',\r\n    'Else',\r\n    'Enum',\r\n    'Explicit',\r\n    'Export',\r\n    'Extern',\r\n    'False',\r\n    'Final',\r\n    'Float',\r\n    'For',\r\n    'Friend',\r\n    'Goto',\r\n    'If',\r\n    'Inline',\r\n    'Int',\r\n    'Long',\r\n    'Mutable',\r\n    'Namespace',\r\n    'New',\r\n    'Noexcept',\r\n    'Nullptr',\r\n    'Operator',\r\n    'Override',\r\n    'Private',\r\n    'Protected',\r\n    'Public',\r\n    'Register',\r\n    'Reinterpret_cast',\r\n    'Return',\r\n    'Short',\r\n    'Signed',\r\n    'Sizeof',\r\n    'Static',\r\n    'Static_assert',\r\n    'Static_cast',\r\n    'Struct',\r\n    'Switch',\r\n    'Template',\r\n    'This',\r\n    'Thread_local',\r\n    'Throw',\r\n    'True',\r\n    'Try',\r\n    'Typedef',\r\n    'Typeid',\r\n    'Typename',\r\n    'Union',\r\n    'Unsigned',\r\n    'Using',\r\n    'Virtual',\r\n    'Void',\r\n    'Volatile',\r\n    'Wchar',\r\n    'While',\r\n    'LeftParen',\r\n    'RightParen',\r\n    'LeftBracket',\r\n    'RightBracket',\r\n    'LeftBrace',\r\n    'RightBrace',\r\n    'Plus',\r\n    'Minus',\r\n    'Star',\r\n    'Div',\r\n    'Mod',\r\n    'Caret',\r\n    'And',\r\n    'Or',\r\n    'Tilde',\r\n    'Not',\r\n    'Assign',\r\n    'Less',\r\n    'Greater',\r\n    'PlusAssign',\r\n    'MinusAssign',\r\n    'StarAssign',\r\n    'DivAssign',\r\n    'ModAssign',\r\n    'XorAssign',\r\n    'AndAssign',\r\n    'OrAssign',\r\n    'LeftShift',\r\n    'LeftShiftAssign',\r\n    'Equal',\r\n    'NotEqual',\r\n    'LessEqual',\r\n    'GreaterEqual',\r\n    'AndAnd',\r\n    'OrOr',\r\n    'PlusPlus',\r\n    'MinusMinus',\r\n    'Comma',\r\n    'ArrowStar',\r\n    'Arrow',\r\n    'Question',\r\n    'Colon',\r\n    'Doublecolon',\r\n    'Semi',\r\n    'Dot',\r\n    'DotStar',\r\n    'Ellipsis',\r\n    'Identifier',\r\n    'Integerliteral',\r\n    'Decimalliteral',\r\n    'Octalliteral',\r\n    'Hexadecimalliteral',\r\n    'Binaryliteral',\r\n    'Integersuffix',\r\n    'Characterliteral',\r\n    'Floatingliteral',\r\n    'Stringliteral',\r\n    'Booleanliteral',\r\n    'Userdefinedintegerliteral',\r\n    'Userdefinedfloatingliteral',\r\n    'Userdefinedstringliteral',\r\n    'Userdefinedcharacterliteral',\r\n    'Whitespace',\r\n    'Newline',\r\n    'BlockComment',\r\n    'LineComment',\r\n];\r\nCPP14Lexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(CPP14Lexer._LITERAL_NAMES, CPP14Lexer._SYMBOLIC_NAMES, []);\r\nCPP14Lexer._serializedATNSegments = 3;\r\nCPP14Lexer._serializedATNSegment0 = '\\x03\\uAF6F\\u8320\\u479D\\uB75C\\u4880\\u1605\\u191C\\uAB37\\x02\\x91\\u059C\\b\\x01' +\r\n    '\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06' +\r\n    '\\x04\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r' +\r\n    '\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t' +\r\n    '\\x12\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t' +\r\n    '\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x04\\x1C\\t' +\r\n    '\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\"\\t' +\r\n    \"\\\"\\x04#\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04\" +\r\n    '+\\t+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x041\\t1\\x042\\t2\\x043\\t3\\x04' +\r\n    '4\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x048\\t8\\x049\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04' +\r\n    '=\\t=\\x04>\\t>\\x04?\\t?\\x04@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04' +\r\n    'F\\tF\\x04G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04M\\tM\\x04N\\tN\\x04' +\r\n    'O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04T\\tT\\x04U\\tU\\x04V\\tV\\x04W\\tW\\x04' +\r\n    'X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04[\\t[\\x04\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t' +\r\n    '`\\x04a\\ta\\x04b\\tb\\x04c\\tc\\x04d\\td\\x04e\\te\\x04f\\tf\\x04g\\tg\\x04h\\th\\x04' +\r\n    'i\\ti\\x04j\\tj\\x04k\\tk\\x04l\\tl\\x04m\\tm\\x04n\\tn\\x04o\\to\\x04p\\tp\\x04q\\tq\\x04' +\r\n    'r\\tr\\x04s\\ts\\x04t\\tt\\x04u\\tu\\x04v\\tv\\x04w\\tw\\x04x\\tx\\x04y\\ty\\x04z\\tz\\x04' +\r\n    '{\\t{\\x04|\\t|\\x04}\\t}\\x04~\\t~\\x04\\x7F\\t\\x7F\\x04\\x80\\t\\x80\\x04\\x81\\t\\x81' +\r\n    '\\x04\\x82\\t\\x82\\x04\\x83\\t\\x83\\x04\\x84\\t\\x84\\x04\\x85\\t\\x85\\x04\\x86\\t\\x86' +\r\n    '\\x04\\x87\\t\\x87\\x04\\x88\\t\\x88\\x04\\x89\\t\\x89\\x04\\x8A\\t\\x8A\\x04\\x8B\\t\\x8B' +\r\n    '\\x04\\x8C\\t\\x8C\\x04\\x8D\\t\\x8D\\x04\\x8E\\t\\x8E\\x04\\x8F\\t\\x8F\\x04\\x90\\t\\x90' +\r\n    '\\x04\\x91\\t\\x91\\x04\\x92\\t\\x92\\x04\\x93\\t\\x93\\x04\\x94\\t\\x94\\x04\\x95\\t\\x95' +\r\n    '\\x04\\x96\\t\\x96\\x04\\x97\\t\\x97\\x04\\x98\\t\\x98\\x04\\x99\\t\\x99\\x04\\x9A\\t\\x9A' +\r\n    '\\x04\\x9B\\t\\x9B\\x04\\x9C\\t\\x9C\\x04\\x9D\\t\\x9D\\x04\\x9E\\t\\x9E\\x04\\x9F\\t\\x9F' +\r\n    '\\x04\\xA0\\t\\xA0\\x04\\xA1\\t\\xA1\\x04\\xA2\\t\\xA2\\x04\\xA3\\t\\xA3\\x04\\xA4\\t\\xA4' +\r\n    '\\x04\\xA5\\t\\xA5\\x04\\xA6\\t\\xA6\\x04\\xA7\\t\\xA7\\x04\\xA8\\t\\xA8\\x04\\xA9\\t\\xA9' +\r\n    '\\x04\\xAA\\t\\xAA\\x03\\x02\\x03\\x02\\x07\\x02\\u0158\\n\\x02\\f\\x02\\x0E\\x02\\u015B' +\r\n    '\\v\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03' +\r\n    '\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04' +\r\n    '\\x03\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06' +\r\n    '\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03' +\r\n    '\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03' +\r\n    '\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03' +\r\n    '\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03' +\r\n    '\\r\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03' +\r\n    '\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03' +\r\n    '\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03' +\r\n    '\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x12\\x03\\x12\\x03' +\r\n    '\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03' +\r\n    '\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03' +\r\n    '\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x15\\x03\\x15\\x03\\x15\\x03' +\r\n    '\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03' +\r\n    '\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03' +\r\n    '\\x18\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03' +\r\n    '\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03' +\r\n    '\\x1A\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03' +\r\n    '\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03' +\r\n    '\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03' +\r\n    '\\x1E\\x03\\x1E\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03 \\x03' +\r\n    ' \\x03 \\x03 \\x03 \\x03 \\x03!\\x03!\\x03!\\x03!\\x03!\\x03!\\x03\"\\x03\"\\x03\"' +\r\n    '\\x03\"\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03$\\x03$\\x03$\\x03$\\x03$\\x03' +\r\n    \"%\\x03%\\x03%\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03'\\x03'\\x03'\\x03'\" +\r\n    '\\x03(\\x03(\\x03(\\x03(\\x03(\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03' +\r\n    '*\\x03*\\x03*\\x03*\\x03*\\x03*\\x03*\\x03*\\x03*\\x03*\\x03+\\x03+\\x03+\\x03+\\x03' +\r\n    ',\\x03,\\x03,\\x03,\\x03,\\x03,\\x03,\\x03,\\x03,\\x03-\\x03-\\x03-\\x03-\\x03-\\x03' +\r\n    '-\\x03-\\x03-\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03/\\x03/\\x03' +\r\n    '/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x030\\x030\\x030\\x030\\x030\\x030\\x030\\x03' +\r\n    '0\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x032\\x032\\x032\\x03' +\r\n    '2\\x032\\x032\\x032\\x033\\x033\\x033\\x033\\x033\\x033\\x033\\x033\\x033\\x034\\x03' +\r\n    '4\\x034\\x034\\x034\\x034\\x034\\x034\\x034\\x034\\x034\\x034\\x034\\x034\\x034\\x03' +\r\n    '4\\x034\\x035\\x035\\x035\\x035\\x035\\x035\\x035\\x036\\x036\\x036\\x036\\x036\\x03' +\r\n    '6\\x037\\x037\\x037\\x037\\x037\\x037\\x037\\x038\\x038\\x038\\x038\\x038\\x038\\x03' +\r\n    '8\\x039\\x039\\x039\\x039\\x039\\x039\\x039\\x03:\\x03:\\x03:\\x03:\\x03:\\x03:\\x03' +\r\n    ':\\x03:\\x03:\\x03:\\x03:\\x03:\\x03:\\x03:\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03' +\r\n    ';\\x03;\\x03;\\x03;\\x03;\\x03;\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03=\\x03' +\r\n    '=\\x03=\\x03=\\x03=\\x03=\\x03=\\x03>\\x03>\\x03>\\x03>\\x03>\\x03>\\x03>\\x03>\\x03' +\r\n    '>\\x03?\\x03?\\x03?\\x03?\\x03?\\x03@\\x03@\\x03@\\x03@\\x03@\\x03@\\x03@\\x03@\\x03' +\r\n    '@\\x03@\\x03@\\x03@\\x03@\\x03A\\x03A\\x03A\\x03A\\x03A\\x03A\\x03B\\x03B\\x03B\\x03' +\r\n    'B\\x03B\\x03C\\x03C\\x03C\\x03C\\x03D\\x03D\\x03D\\x03D\\x03D\\x03D\\x03D\\x03D\\x03' +\r\n    'E\\x03E\\x03E\\x03E\\x03E\\x03E\\x03E\\x03F\\x03F\\x03F\\x03F\\x03F\\x03F\\x03F\\x03' +\r\n    'F\\x03F\\x03G\\x03G\\x03G\\x03G\\x03G\\x03G\\x03H\\x03H\\x03H\\x03H\\x03H\\x03H\\x03' +\r\n    'H\\x03H\\x03H\\x03I\\x03I\\x03I\\x03I\\x03I\\x03I\\x03J\\x03J\\x03J\\x03J\\x03J\\x03' +\r\n    'J\\x03J\\x03J\\x03K\\x03K\\x03K\\x03K\\x03K\\x03L\\x03L\\x03L\\x03L\\x03L\\x03L\\x03' +\r\n    'L\\x03L\\x03L\\x03M\\x03M\\x03M\\x03M\\x03M\\x03M\\x03M\\x03M\\x03N\\x03N\\x03N\\x03' +\r\n    'N\\x03N\\x03N\\x03O\\x03O\\x03P\\x03P\\x03Q\\x03Q\\x03R\\x03R\\x03S\\x03S\\x03T\\x03' +\r\n    'T\\x03U\\x03U\\x03V\\x03V\\x03W\\x03W\\x03X\\x03X\\x03Y\\x03Y\\x03Z\\x03Z\\x03[\\x03' +\r\n    '[\\x03\\\\\\x03\\\\\\x03]\\x03]\\x03^\\x03^\\x03_\\x03_\\x03`\\x03`\\x03a\\x03a\\x03b\\x03' +\r\n    'b\\x03b\\x03c\\x03c\\x03c\\x03d\\x03d\\x03d\\x03e\\x03e\\x03e\\x03f\\x03f\\x03f\\x03' +\r\n    'g\\x03g\\x03g\\x03h\\x03h\\x03h\\x03i\\x03i\\x03i\\x03j\\x03j\\x03j\\x03k\\x03k\\x03' +\r\n    'k\\x03k\\x03l\\x03l\\x03l\\x03m\\x03m\\x03m\\x03n\\x03n\\x03n\\x03o\\x03o\\x03o\\x03' +\r\n    'p\\x03p\\x03p\\x03q\\x03q\\x03q\\x03r\\x03r\\x03r\\x03s\\x03s\\x03s\\x03t\\x03t\\x03' +\r\n    'u\\x03u\\x03u\\x03u\\x03v\\x03v\\x03v\\x03w\\x03w\\x03x\\x03x\\x03y\\x03y\\x03y\\x03' +\r\n    'z\\x03z\\x03{\\x03{\\x03|\\x03|\\x03|\\x03}\\x03}\\x03}\\x03}\\x03~\\x03~\\x03~\\x03' +\r\n    '~\\x03~\\x03\\x7F\\x03\\x7F\\x03\\x7F\\x03\\x7F\\x03\\x7F\\x03\\x7F\\x03\\x7F\\x03\\x7F' +\r\n    '\\x03\\x7F\\x03\\x7F\\x05\\x7F\\u0411\\n\\x7F\\x03\\x80\\x03\\x80\\x03\\x80\\x07\\x80\\u0416' +\r\n    '\\n\\x80\\f\\x80\\x0E\\x80\\u0419\\v\\x80\\x03\\x81\\x03\\x81\\x05\\x81\\u041D\\n\\x81\\x03' +\r\n    '\\x82\\x03\\x82\\x03\\x83\\x03\\x83\\x03\\x84\\x03\\x84\\x05\\x84\\u0425\\n\\x84\\x03\\x84' +\r\n    '\\x03\\x84\\x05\\x84\\u0429\\n\\x84\\x03\\x84\\x03\\x84\\x05\\x84\\u042D\\n\\x84\\x03\\x84' +\r\n    '\\x03\\x84\\x05\\x84\\u0431\\n\\x84\\x05\\x84\\u0433\\n\\x84\\x03\\x85\\x03\\x85\\x05\\x85' +\r\n    '\\u0437\\n\\x85\\x03\\x85\\x07\\x85\\u043A\\n\\x85\\f\\x85\\x0E\\x85\\u043D\\v\\x85\\x03' +\r\n    '\\x86\\x03\\x86\\x05\\x86\\u0441\\n\\x86\\x03\\x86\\x07\\x86\\u0444\\n\\x86\\f\\x86\\x0E' +\r\n    '\\x86\\u0447\\v\\x86\\x03\\x87\\x03\\x87\\x03\\x87\\x03\\x87\\x05\\x87\\u044D\\n\\x87\\x03' +\r\n    '\\x87\\x03\\x87\\x05\\x87\\u0451\\n\\x87\\x03\\x87\\x07\\x87\\u0454\\n\\x87\\f\\x87\\x0E' +\r\n    '\\x87\\u0457\\v\\x87\\x03\\x88\\x03\\x88\\x03\\x88\\x03\\x88\\x05\\x88\\u045D\\n\\x88\\x03' +\r\n    '\\x88\\x03\\x88\\x05\\x88\\u0461\\n\\x88\\x03\\x88\\x07\\x88\\u0464\\n\\x88\\f\\x88\\x0E' +\r\n    '\\x88\\u0467\\v\\x88\\x03\\x89\\x03\\x89\\x03\\x8A\\x03\\x8A\\x03\\x8B\\x03\\x8B\\x03\\x8C' +\r\n    '\\x03\\x8C\\x03\\x8D\\x03\\x8D\\x05\\x8D\\u0473\\n\\x8D\\x03\\x8D\\x03\\x8D\\x05\\x8D\\u0477' +\r\n    '\\n\\x8D\\x03\\x8D\\x03\\x8D\\x05\\x8D\\u047B\\n\\x8D\\x03\\x8D\\x03\\x8D\\x05\\x8D\\u047F' +\r\n    '\\n\\x8D\\x05\\x8D\\u0481\\n\\x8D\\x03\\x8E\\x03\\x8E\\x03\\x8F\\x03\\x8F\\x03\\x90\\x03' +\r\n    '\\x90\\x03\\x90\\x03\\x90\\x05\\x90\\u048B\\n\\x90\\x03\\x91\\x03\\x91\\x06\\x91\\u048F' +\r\n    '\\n\\x91\\r\\x91\\x0E\\x91\\u0490\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x06' +\r\n    '\\x91\\u0498\\n\\x91\\r\\x91\\x0E\\x91\\u0499\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03' +\r\n    '\\x91\\x06\\x91\\u04A1\\n\\x91\\r\\x91\\x0E\\x91\\u04A2\\x03\\x91\\x03\\x91\\x03\\x91\\x03' +\r\n    '\\x91\\x03\\x91\\x06\\x91\\u04AA\\n\\x91\\r\\x91\\x0E\\x91\\u04AB\\x03\\x91\\x03\\x91\\x05' +\r\n    '\\x91\\u04B0\\n\\x91\\x03\\x92\\x03\\x92\\x03\\x92\\x05\\x92\\u04B5\\n\\x92\\x03\\x93\\x03' +\r\n    '\\x93\\x03\\x93\\x05\\x93\\u04BA\\n\\x93\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94' +\r\n    '\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94' +\r\n    '\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x05\\x94' +\r\n    '\\u04D2\\n\\x94\\x03\\x95\\x03\\x95\\x03\\x95\\x03\\x95\\x03\\x95\\x03\\x95\\x03\\x95\\x03' +\r\n    '\\x95\\x03\\x95\\x03\\x95\\x03\\x95\\x05\\x95\\u04DF\\n\\x95\\x03\\x96\\x03\\x96\\x03\\x96' +\r\n    '\\x03\\x96\\x06\\x96\\u04E5\\n\\x96\\r\\x96\\x0E\\x96\\u04E6\\x03\\x97\\x03\\x97\\x05\\x97' +\r\n    '\\u04EB\\n\\x97\\x03\\x97\\x05\\x97\\u04EE\\n\\x97\\x03\\x97\\x03\\x97\\x03\\x97\\x05\\x97' +\r\n    '\\u04F3\\n\\x97\\x05\\x97\\u04F5\\n\\x97\\x03\\x98\\x05\\x98\\u04F8\\n\\x98\\x03\\x98\\x03' +\r\n    '\\x98\\x03\\x98\\x03\\x98\\x03\\x98\\x05\\x98\\u04FF\\n\\x98\\x03\\x99\\x03\\x99\\x05\\x99' +\r\n    '\\u0503\\n\\x99\\x03\\x99\\x03\\x99\\x03\\x99\\x05\\x99\\u0508\\n\\x99\\x03\\x99\\x05\\x99' +\r\n    '\\u050B\\n\\x99\\x03\\x9A\\x03\\x9A\\x03\\x9B\\x03\\x9B\\x05\\x9B\\u0511\\n\\x9B\\x03\\x9B' +\r\n    '\\x07\\x9B\\u0514\\n\\x9B\\f\\x9B\\x0E\\x9B\\u0517\\v\\x9B\\x03\\x9C\\x03\\x9C\\x03\\x9D' +\r\n    '\\x05\\x9D\\u051C\\n\\x9D\\x03\\x9D\\x03\\x9D\\x07\\x9D\\u0520\\n\\x9D\\f\\x9D\\x0E\\x9D' +\r\n    '\\u0523\\v\\x9D\\x03\\x9D\\x03\\x9D\\x05\\x9D\\u0527\\n\\x9D\\x03\\x9D\\x03\\x9D\\x05\\x9D' +\r\n    '\\u052B\\n\\x9D\\x03\\x9E\\x03\\x9E\\x03\\x9E\\x05\\x9E\\u0530\\n\\x9E\\x03\\x9F\\x03\\x9F' +\r\n    '\\x03\\x9F\\x05\\x9F\\u0535\\n\\x9F\\x03\\xA0\\x03\\xA0\\x07\\xA0\\u0539\\n\\xA0\\f\\xA0' +\r\n    '\\x0E\\xA0\\u053C\\v\\xA0\\x03\\xA0\\x03\\xA0\\x07\\xA0\\u0540\\n\\xA0\\f\\xA0\\x0E\\xA0' +\r\n    '\\u0543\\v\\xA0\\x03\\xA0\\x03\\xA0\\x07\\xA0\\u0547\\n\\xA0\\f\\xA0\\x0E\\xA0\\u054A\\v' +\r\n    '\\xA0\\x03\\xA0\\x03\\xA0\\x03\\xA1\\x03\\xA1\\x05\\xA1\\u0550\\n\\xA1\\x03\\xA2\\x03\\xA2' +\r\n    '\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2' +\r\n    '\\x03\\xA2\\x05\\xA2\\u055E\\n\\xA2\\x03\\xA3\\x03\\xA3\\x05\\xA3\\u0562\\n\\xA3\\x03\\xA3' +\r\n    '\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x05\\xA3\\u056A\\n\\xA3\\x03\\xA4\\x03' +\r\n    '\\xA4\\x03\\xA4\\x03\\xA5\\x03\\xA5\\x03\\xA5\\x03\\xA6\\x03\\xA6\\x03\\xA7\\x06\\xA7\\u0575' +\r\n    '\\n\\xA7\\r\\xA7\\x0E\\xA7\\u0576\\x03\\xA7\\x03\\xA7\\x03\\xA8\\x03\\xA8\\x05\\xA8\\u057D' +\r\n    '\\n\\xA8\\x03\\xA8\\x05\\xA8\\u0580\\n\\xA8\\x03\\xA8\\x03\\xA8\\x03\\xA9\\x03\\xA9\\x03' +\r\n    '\\xA9\\x03\\xA9\\x07\\xA9\\u0588\\n\\xA9\\f\\xA9\\x0E\\xA9\\u058B\\v\\xA9\\x03\\xA9\\x03' +\r\n    '\\xA9\\x03\\xA9\\x03\\xA9\\x03\\xA9\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x07\\xAA\\u0596' +\r\n    '\\n\\xAA\\f\\xAA\\x0E\\xAA\\u0599\\v\\xAA\\x03\\xAA\\x03\\xAA\\x06\\u053A\\u0541\\u0548' +\r\n    '\\u0589\\x02\\x02\\xAB\\x03\\x02\\x03\\x05\\x02\\x04\\x07\\x02\\x05\\t\\x02\\x06\\v\\x02' +\r\n    '\\x07\\r\\x02\\b\\x0F\\x02\\t\\x11\\x02\\n\\x13\\x02\\v\\x15\\x02\\f\\x17\\x02\\r\\x19\\x02' +\r\n    \"\\x0E\\x1B\\x02\\x0F\\x1D\\x02\\x10\\x1F\\x02\\x11!\\x02\\x12#\\x02\\x13%\\x02\\x14'\" +\r\n    '\\x02\\x15)\\x02\\x16+\\x02\\x17-\\x02\\x18/\\x02\\x191\\x02\\x1A3\\x02\\x1B5\\x02\\x1C' +\r\n    '7\\x02\\x1D9\\x02\\x1E;\\x02\\x1F=\\x02 ?\\x02!A\\x02\"C\\x02#E\\x02$G\\x02%I\\x02' +\r\n    \"&K\\x02'M\\x02(O\\x02)Q\\x02*S\\x02+U\\x02,W\\x02-Y\\x02.[\\x02/]\\x020_\\x021a\" +\r\n    '\\x022c\\x023e\\x024g\\x025i\\x026k\\x027m\\x028o\\x029q\\x02:s\\x02;u\\x02<w\\x02' +\r\n    '=y\\x02>{\\x02?}\\x02@\\x7F\\x02A\\x81\\x02B\\x83\\x02C\\x85\\x02D\\x87\\x02E\\x89\\x02' +\r\n    'F\\x8B\\x02G\\x8D\\x02H\\x8F\\x02I\\x91\\x02J\\x93\\x02K\\x95\\x02L\\x97\\x02M\\x99\\x02' +\r\n    'N\\x9B\\x02O\\x9D\\x02P\\x9F\\x02Q\\xA1\\x02R\\xA3\\x02S\\xA5\\x02T\\xA7\\x02U\\xA9\\x02' +\r\n    'V\\xAB\\x02W\\xAD\\x02X\\xAF\\x02Y\\xB1\\x02Z\\xB3\\x02[\\xB5\\x02\\\\\\xB7\\x02]\\xB9' +\r\n    '\\x02^\\xBB\\x02_\\xBD\\x02`\\xBF\\x02a\\xC1\\x02b\\xC3\\x02c\\xC5\\x02d\\xC7\\x02e\\xC9' +\r\n    '\\x02f\\xCB\\x02g\\xCD\\x02h\\xCF\\x02i\\xD1\\x02j\\xD3\\x02k\\xD5\\x02l\\xD7\\x02m\\xD9' +\r\n    '\\x02n\\xDB\\x02o\\xDD\\x02p\\xDF\\x02q\\xE1\\x02r\\xE3\\x02s\\xE5\\x02t\\xE7\\x02u\\xE9' +\r\n    '\\x02v\\xEB\\x02w\\xED\\x02x\\xEF\\x02y\\xF1\\x02z\\xF3\\x02{\\xF5\\x02|\\xF7\\x02}\\xF9' +\r\n    '\\x02~\\xFB\\x02\\x02\\xFD\\x02\\x02\\xFF\\x02\\x7F\\u0101\\x02\\x02\\u0103\\x02\\x02' +\r\n    '\\u0105\\x02\\x02\\u0107\\x02\\x80\\u0109\\x02\\x81\\u010B\\x02\\x82\\u010D\\x02\\x83' +\r\n    '\\u010F\\x02\\x84\\u0111\\x02\\x02\\u0113\\x02\\x02\\u0115\\x02\\x02\\u0117\\x02\\x02' +\r\n    '\\u0119\\x02\\x85\\u011B\\x02\\x02\\u011D\\x02\\x02\\u011F\\x02\\x02\\u0121\\x02\\x86' +\r\n    '\\u0123\\x02\\x02\\u0125\\x02\\x02\\u0127\\x02\\x02\\u0129\\x02\\x02\\u012B\\x02\\x02' +\r\n    '\\u012D\\x02\\x87\\u012F\\x02\\x02\\u0131\\x02\\x02\\u0133\\x02\\x02\\u0135\\x02\\x02' +\r\n    '\\u0137\\x02\\x02\\u0139\\x02\\x88\\u013B\\x02\\x02\\u013D\\x02\\x02\\u013F\\x02\\x02' +\r\n    '\\u0141\\x02\\x89\\u0143\\x02\\x8A\\u0145\\x02\\x8B\\u0147\\x02\\x8C\\u0149\\x02\\x8D' +\r\n    '\\u014B\\x02\\x02\\u014D\\x02\\x8E\\u014F\\x02\\x8F\\u0151\\x02\\x90\\u0153\\x02\\x91' +\r\n    '\\x03\\x02\\x11\\x04\\x02\\f\\f\\x0F\\x0F\\x05\\x02C\\\\aac|\\x03\\x022;\\x03\\x023;\\x03' +\r\n    '\\x0229\\x05\\x022;CHch\\x03\\x0223\\x04\\x02WWww\\x04\\x02NNnn\\x06\\x02\\f\\f\\x0F' +\r\n    '\\x0F))^^\\x04\\x02--//\\x06\\x02HHNNhhnn\\x05\\x02NNWWww\\x06\\x02\\f\\f\\x0F\\x0F' +\r\n    '$$^^\\x04\\x02\\v\\v\"\"\\u05D7\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02' +\r\n    '\\x02\\x02\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02' +\r\n    '\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02' +\r\n    '\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02' +\r\n    '\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02' +\r\n    '\\x02\\x1F\\x03\\x02\\x02\\x02\\x02!\\x03\\x02\\x02\\x02\\x02#\\x03\\x02\\x02\\x02\\x02' +\r\n    \"%\\x03\\x02\\x02\\x02\\x02'\\x03\\x02\\x02\\x02\\x02)\\x03\\x02\\x02\\x02\\x02+\\x03\" +\r\n    '\\x02\\x02\\x02\\x02-\\x03\\x02\\x02\\x02\\x02/\\x03\\x02\\x02\\x02\\x021\\x03\\x02\\x02' +\r\n    '\\x02\\x023\\x03\\x02\\x02\\x02\\x025\\x03\\x02\\x02\\x02\\x027\\x03\\x02\\x02\\x02\\x02' +\r\n    '9\\x03\\x02\\x02\\x02\\x02;\\x03\\x02\\x02\\x02\\x02=\\x03\\x02\\x02\\x02\\x02?\\x03\\x02' +\r\n    '\\x02\\x02\\x02A\\x03\\x02\\x02\\x02\\x02C\\x03\\x02\\x02\\x02\\x02E\\x03\\x02\\x02\\x02' +\r\n    '\\x02G\\x03\\x02\\x02\\x02\\x02I\\x03\\x02\\x02\\x02\\x02K\\x03\\x02\\x02\\x02\\x02M\\x03' +\r\n    '\\x02\\x02\\x02\\x02O\\x03\\x02\\x02\\x02\\x02Q\\x03\\x02\\x02\\x02\\x02S\\x03\\x02\\x02' +\r\n    '\\x02\\x02U\\x03\\x02\\x02\\x02\\x02W\\x03\\x02\\x02\\x02\\x02Y\\x03\\x02\\x02\\x02\\x02' +\r\n    '[\\x03\\x02\\x02\\x02\\x02]\\x03\\x02\\x02\\x02\\x02_\\x03\\x02\\x02\\x02\\x02a\\x03\\x02' +\r\n    '\\x02\\x02\\x02c\\x03\\x02\\x02\\x02\\x02e\\x03\\x02\\x02\\x02\\x02g\\x03\\x02\\x02\\x02' +\r\n    '\\x02i\\x03\\x02\\x02\\x02\\x02k\\x03\\x02\\x02\\x02\\x02m\\x03\\x02\\x02\\x02\\x02o\\x03' +\r\n    '\\x02\\x02\\x02\\x02q\\x03\\x02\\x02\\x02\\x02s\\x03\\x02\\x02\\x02\\x02u\\x03\\x02\\x02' +\r\n    '\\x02\\x02w\\x03\\x02\\x02\\x02\\x02y\\x03\\x02\\x02\\x02\\x02{\\x03\\x02\\x02\\x02\\x02' +\r\n    '}\\x03\\x02\\x02\\x02\\x02\\x7F\\x03\\x02\\x02\\x02\\x02\\x81\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\x83\\x03\\x02\\x02\\x02\\x02\\x85\\x03\\x02\\x02\\x02\\x02\\x87\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\x89\\x03\\x02\\x02\\x02\\x02\\x8B\\x03\\x02\\x02\\x02\\x02\\x8D\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\x8F\\x03\\x02\\x02\\x02\\x02\\x91\\x03\\x02\\x02\\x02\\x02\\x93\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\x95\\x03\\x02\\x02\\x02\\x02\\x97\\x03\\x02\\x02\\x02\\x02\\x99\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\x9B\\x03\\x02\\x02\\x02\\x02\\x9D\\x03\\x02\\x02\\x02\\x02\\x9F\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xA1\\x03\\x02\\x02\\x02\\x02\\xA3\\x03\\x02\\x02\\x02\\x02\\xA5\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xA7\\x03\\x02\\x02\\x02\\x02\\xA9\\x03\\x02\\x02\\x02\\x02\\xAB\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xAD\\x03\\x02\\x02\\x02\\x02\\xAF\\x03\\x02\\x02\\x02\\x02\\xB1\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xB3\\x03\\x02\\x02\\x02\\x02\\xB5\\x03\\x02\\x02\\x02\\x02\\xB7\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xB9\\x03\\x02\\x02\\x02\\x02\\xBB\\x03\\x02\\x02\\x02\\x02\\xBD\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xBF\\x03\\x02\\x02\\x02\\x02\\xC1\\x03\\x02\\x02\\x02\\x02\\xC3\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xC5\\x03\\x02\\x02\\x02\\x02\\xC7\\x03\\x02\\x02\\x02\\x02\\xC9\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xCB\\x03\\x02\\x02\\x02\\x02\\xCD\\x03\\x02\\x02\\x02\\x02\\xCF\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xD1\\x03\\x02\\x02\\x02\\x02\\xD3\\x03\\x02\\x02\\x02\\x02\\xD5\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xD7\\x03\\x02\\x02\\x02\\x02\\xD9\\x03\\x02\\x02\\x02\\x02\\xDB\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xDD\\x03\\x02\\x02\\x02\\x02\\xDF\\x03\\x02\\x02\\x02\\x02\\xE1\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xE3\\x03\\x02\\x02\\x02\\x02\\xE5\\x03\\x02\\x02\\x02\\x02\\xE7\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xE9\\x03\\x02\\x02\\x02\\x02\\xEB\\x03\\x02\\x02\\x02\\x02\\xED\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xEF\\x03\\x02\\x02\\x02\\x02\\xF1\\x03\\x02\\x02\\x02\\x02\\xF3\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xF5\\x03\\x02\\x02\\x02\\x02\\xF7\\x03\\x02\\x02\\x02\\x02\\xF9\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\xFF\\x03\\x02\\x02\\x02\\x02\\u0107\\x03\\x02\\x02\\x02\\x02\\u0109\\x03\\x02\\x02\\x02' +\r\n    '\\x02\\u010B\\x03\\x02\\x02\\x02\\x02\\u010D\\x03\\x02\\x02\\x02\\x02\\u010F\\x03\\x02' +\r\n    '\\x02\\x02\\x02\\u0119\\x03\\x02\\x02\\x02\\x02\\u0121\\x03\\x02\\x02\\x02\\x02\\u012D' +\r\n    '\\x03\\x02\\x02\\x02\\x02\\u0139\\x03\\x02\\x02\\x02\\x02\\u0141\\x03\\x02\\x02\\x02\\x02' +\r\n    '\\u0143\\x03\\x02\\x02\\x02\\x02\\u0145\\x03\\x02\\x02\\x02\\x02\\u0147\\x03\\x02\\x02' +\r\n    '\\x02\\x02\\u0149\\x03\\x02\\x02\\x02\\x02\\u014D\\x03\\x02\\x02\\x02\\x02\\u014F\\x03' +\r\n    '\\x02\\x02\\x02\\x02\\u0151\\x03\\x02\\x02\\x02\\x02\\u0153\\x03\\x02\\x02\\x02\\x03\\u0155' +\r\n    '\\x03\\x02\\x02\\x02\\x05\\u015E\\x03\\x02\\x02\\x02\\x07\\u0166\\x03\\x02\\x02\\x02\\t' +\r\n    '\\u016E\\x03\\x02\\x02\\x02\\v\\u0172\\x03\\x02\\x02\\x02\\r\\u0177\\x03\\x02\\x02\\x02' +\r\n    '\\x0F\\u017C\\x03\\x02\\x02\\x02\\x11\\u0182\\x03\\x02\\x02\\x02\\x13\\u0187\\x03\\x02' +\r\n    '\\x02\\x02\\x15\\u018D\\x03\\x02\\x02\\x02\\x17\\u0192\\x03\\x02\\x02\\x02\\x19\\u019B' +\r\n    '\\x03\\x02\\x02\\x02\\x1B\\u01A4\\x03\\x02\\x02\\x02\\x1D\\u01AA\\x03\\x02\\x02\\x02\\x1F' +\r\n    '\\u01B0\\x03\\x02\\x02\\x02!\\u01BA\\x03\\x02\\x02\\x02#\\u01C5\\x03\\x02\\x02\\x02%' +\r\n    \"\\u01CE\\x03\\x02\\x02\\x02'\\u01D7\\x03\\x02\\x02\\x02)\\u01DF\\x03\\x02\\x02\\x02\" +\r\n    '+\\u01E6\\x03\\x02\\x02\\x02-\\u01E9\\x03\\x02\\x02\\x02/\\u01F0\\x03\\x02\\x02\\x02' +\r\n    '1\\u01F5\\x03\\x02\\x02\\x023\\u0202\\x03\\x02\\x02\\x025\\u0207\\x03\\x02\\x02\\x02' +\r\n    '7\\u020C\\x03\\x02\\x02\\x029\\u0215\\x03\\x02\\x02\\x02;\\u021C\\x03\\x02\\x02\\x02' +\r\n    '=\\u0223\\x03\\x02\\x02\\x02?\\u0229\\x03\\x02\\x02\\x02A\\u022F\\x03\\x02\\x02\\x02' +\r\n    'C\\u0235\\x03\\x02\\x02\\x02E\\u0239\\x03\\x02\\x02\\x02G\\u0240\\x03\\x02\\x02\\x02' +\r\n    'I\\u0245\\x03\\x02\\x02\\x02K\\u0248\\x03\\x02\\x02\\x02M\\u024F\\x03\\x02\\x02\\x02' +\r\n    'O\\u0253\\x03\\x02\\x02\\x02Q\\u0258\\x03\\x02\\x02\\x02S\\u0260\\x03\\x02\\x02\\x02' +\r\n    'U\\u026A\\x03\\x02\\x02\\x02W\\u026E\\x03\\x02\\x02\\x02Y\\u0277\\x03\\x02\\x02\\x02' +\r\n    '[\\u027F\\x03\\x02\\x02\\x02]\\u0288\\x03\\x02\\x02\\x02_\\u0291\\x03\\x02\\x02\\x02' +\r\n    'a\\u0299\\x03\\x02\\x02\\x02c\\u02A3\\x03\\x02\\x02\\x02e\\u02AA\\x03\\x02\\x02\\x02' +\r\n    'g\\u02B3\\x03\\x02\\x02\\x02i\\u02C4\\x03\\x02\\x02\\x02k\\u02CB\\x03\\x02\\x02\\x02' +\r\n    'm\\u02D1\\x03\\x02\\x02\\x02o\\u02D8\\x03\\x02\\x02\\x02q\\u02DF\\x03\\x02\\x02\\x02' +\r\n    's\\u02E6\\x03\\x02\\x02\\x02u\\u02F4\\x03\\x02\\x02\\x02w\\u0300\\x03\\x02\\x02\\x02' +\r\n    'y\\u0307\\x03\\x02\\x02\\x02{\\u030E\\x03\\x02\\x02\\x02}\\u0317\\x03\\x02\\x02\\x02' +\r\n    '\\x7F\\u031C\\x03\\x02\\x02\\x02\\x81\\u0329\\x03\\x02\\x02\\x02\\x83\\u032F\\x03\\x02' +\r\n    '\\x02\\x02\\x85\\u0334\\x03\\x02\\x02\\x02\\x87\\u0338\\x03\\x02\\x02\\x02\\x89\\u0340' +\r\n    '\\x03\\x02\\x02\\x02\\x8B\\u0347\\x03\\x02\\x02\\x02\\x8D\\u0350\\x03\\x02\\x02\\x02\\x8F' +\r\n    '\\u0356\\x03\\x02\\x02\\x02\\x91\\u035F\\x03\\x02\\x02\\x02\\x93\\u0365\\x03\\x02\\x02' +\r\n    '\\x02\\x95\\u036D\\x03\\x02\\x02\\x02\\x97\\u0372\\x03\\x02\\x02\\x02\\x99\\u037B\\x03' +\r\n    '\\x02\\x02\\x02\\x9B\\u0383\\x03\\x02\\x02\\x02\\x9D\\u0389\\x03\\x02\\x02\\x02\\x9F\\u038B' +\r\n    '\\x03\\x02\\x02\\x02\\xA1\\u038D\\x03\\x02\\x02\\x02\\xA3\\u038F\\x03\\x02\\x02\\x02\\xA5' +\r\n    '\\u0391\\x03\\x02\\x02\\x02\\xA7\\u0393\\x03\\x02\\x02\\x02\\xA9\\u0395\\x03\\x02\\x02' +\r\n    '\\x02\\xAB\\u0397\\x03\\x02\\x02\\x02\\xAD\\u0399\\x03\\x02\\x02\\x02\\xAF\\u039B\\x03' +\r\n    '\\x02\\x02\\x02\\xB1\\u039D\\x03\\x02\\x02\\x02\\xB3\\u039F\\x03\\x02\\x02\\x02\\xB5\\u03A1' +\r\n    '\\x03\\x02\\x02\\x02\\xB7\\u03A3\\x03\\x02\\x02\\x02\\xB9\\u03A5\\x03\\x02\\x02\\x02\\xBB' +\r\n    '\\u03A7\\x03\\x02\\x02\\x02\\xBD\\u03A9';\r\nCPP14Lexer._serializedATNSegment1 = '\\x03\\x02\\x02\\x02\\xBF\\u03AB\\x03\\x02\\x02\\x02\\xC1\\u03AD\\x03\\x02\\x02\\x02\\xC3' +\r\n    '\\u03AF\\x03\\x02\\x02\\x02\\xC5\\u03B2\\x03\\x02\\x02\\x02\\xC7\\u03B5\\x03\\x02\\x02' +\r\n    '\\x02\\xC9\\u03B8\\x03\\x02\\x02\\x02\\xCB\\u03BB\\x03\\x02\\x02\\x02\\xCD\\u03BE\\x03' +\r\n    '\\x02\\x02\\x02\\xCF\\u03C1\\x03\\x02\\x02\\x02\\xD1\\u03C4\\x03\\x02\\x02\\x02\\xD3\\u03C7' +\r\n    '\\x03\\x02\\x02\\x02\\xD5\\u03CA\\x03\\x02\\x02\\x02\\xD7\\u03CE\\x03\\x02\\x02\\x02\\xD9' +\r\n    '\\u03D1\\x03\\x02\\x02\\x02\\xDB\\u03D4\\x03\\x02\\x02\\x02\\xDD\\u03D7\\x03\\x02\\x02' +\r\n    '\\x02\\xDF\\u03DA\\x03\\x02\\x02\\x02\\xE1\\u03DD\\x03\\x02\\x02\\x02\\xE3\\u03E0\\x03' +\r\n    '\\x02\\x02\\x02\\xE5\\u03E3\\x03\\x02\\x02\\x02\\xE7\\u03E6\\x03\\x02\\x02\\x02\\xE9\\u03E8' +\r\n    '\\x03\\x02\\x02\\x02\\xEB\\u03EC\\x03\\x02\\x02\\x02\\xED\\u03EF\\x03\\x02\\x02\\x02\\xEF' +\r\n    '\\u03F1\\x03\\x02\\x02\\x02\\xF1\\u03F3\\x03\\x02\\x02\\x02\\xF3\\u03F6\\x03\\x02\\x02' +\r\n    '\\x02\\xF5\\u03F8\\x03\\x02\\x02\\x02\\xF7\\u03FA\\x03\\x02\\x02\\x02\\xF9\\u03FD\\x03' +\r\n    '\\x02\\x02\\x02\\xFB\\u0401\\x03\\x02\\x02\\x02\\xFD\\u0410\\x03\\x02\\x02\\x02\\xFF\\u0412' +\r\n    '\\x03\\x02\\x02\\x02\\u0101\\u041C\\x03\\x02\\x02\\x02\\u0103\\u041E\\x03\\x02\\x02\\x02' +\r\n    '\\u0105\\u0420\\x03\\x02\\x02\\x02\\u0107\\u0432\\x03\\x02\\x02\\x02\\u0109\\u0434\\x03' +\r\n    '\\x02\\x02\\x02\\u010B\\u043E\\x03\\x02\\x02\\x02\\u010D\\u044C\\x03\\x02\\x02\\x02\\u010F' +\r\n    '\\u045C\\x03\\x02\\x02\\x02\\u0111\\u0468\\x03\\x02\\x02\\x02\\u0113\\u046A\\x03\\x02' +\r\n    '\\x02\\x02\\u0115\\u046C\\x03\\x02\\x02\\x02\\u0117\\u046E\\x03\\x02\\x02\\x02\\u0119' +\r\n    '\\u0480\\x03\\x02\\x02\\x02\\u011B\\u0482\\x03\\x02\\x02\\x02\\u011D\\u0484\\x03\\x02' +\r\n    '\\x02\\x02\\u011F\\u048A\\x03\\x02\\x02\\x02\\u0121\\u04AF\\x03\\x02\\x02\\x02\\u0123' +\r\n    '\\u04B4\\x03\\x02\\x02\\x02\\u0125\\u04B9\\x03\\x02\\x02\\x02\\u0127\\u04D1\\x03\\x02' +\r\n    '\\x02\\x02\\u0129\\u04DE\\x03\\x02\\x02\\x02\\u012B\\u04E0\\x03\\x02\\x02\\x02\\u012D' +\r\n    '\\u04F4\\x03\\x02\\x02\\x02\\u012F\\u04FE\\x03\\x02\\x02\\x02\\u0131\\u050A\\x03\\x02' +\r\n    '\\x02\\x02\\u0133\\u050C\\x03\\x02\\x02\\x02\\u0135\\u050E\\x03\\x02\\x02\\x02\\u0137' +\r\n    '\\u0518\\x03\\x02\\x02\\x02\\u0139\\u052A\\x03\\x02\\x02\\x02\\u013B\\u052F\\x03\\x02' +\r\n    '\\x02\\x02\\u013D\\u0534\\x03\\x02\\x02\\x02\\u013F\\u0536\\x03\\x02\\x02\\x02\\u0141' +\r\n    '\\u054F\\x03\\x02\\x02\\x02\\u0143\\u055D\\x03\\x02\\x02\\x02\\u0145\\u0569\\x03\\x02' +\r\n    '\\x02\\x02\\u0147\\u056B\\x03\\x02\\x02\\x02\\u0149\\u056E\\x03\\x02\\x02\\x02\\u014B' +\r\n    '\\u0571\\x03\\x02\\x02\\x02\\u014D\\u0574\\x03\\x02\\x02\\x02\\u014F\\u057F\\x03\\x02' +\r\n    '\\x02\\x02\\u0151\\u0583\\x03\\x02\\x02\\x02\\u0153\\u0591\\x03\\x02\\x02\\x02\\u0155' +\r\n    '\\u0159\\x07%\\x02\\x02\\u0156\\u0158\\n\\x02\\x02\\x02\\u0157\\u0156\\x03\\x02\\x02' +\r\n    '\\x02\\u0158\\u015B\\x03\\x02\\x02\\x02\\u0159\\u0157\\x03\\x02\\x02\\x02\\u0159\\u015A' +\r\n    '\\x03\\x02\\x02\\x02\\u015A\\u015C\\x03\\x02\\x02\\x02\\u015B\\u0159\\x03\\x02\\x02\\x02' +\r\n    '\\u015C\\u015D\\b\\x02\\x02\\x02\\u015D\\x04\\x03\\x02\\x02\\x02\\u015E\\u015F\\x07c' +\r\n    '\\x02\\x02\\u015F\\u0160\\x07n\\x02\\x02\\u0160\\u0161\\x07k\\x02\\x02\\u0161\\u0162' +\r\n    '\\x07i\\x02\\x02\\u0162\\u0163\\x07p\\x02\\x02\\u0163\\u0164\\x07c\\x02\\x02\\u0164' +\r\n    '\\u0165\\x07u\\x02\\x02\\u0165\\x06\\x03\\x02\\x02\\x02\\u0166\\u0167\\x07c\\x02\\x02' +\r\n    '\\u0167\\u0168\\x07n\\x02\\x02\\u0168\\u0169\\x07k\\x02\\x02\\u0169\\u016A\\x07i\\x02' +\r\n    '\\x02\\u016A\\u016B\\x07p\\x02\\x02\\u016B\\u016C\\x07q\\x02\\x02\\u016C\\u016D\\x07' +\r\n    'h\\x02\\x02\\u016D\\b\\x03\\x02\\x02\\x02\\u016E\\u016F\\x07c\\x02\\x02\\u016F\\u0170' +\r\n    '\\x07u\\x02\\x02\\u0170\\u0171\\x07o\\x02\\x02\\u0171\\n\\x03\\x02\\x02\\x02\\u0172\\u0173' +\r\n    '\\x07c\\x02\\x02\\u0173\\u0174\\x07w\\x02\\x02\\u0174\\u0175\\x07v\\x02\\x02\\u0175' +\r\n    '\\u0176\\x07q\\x02\\x02\\u0176\\f\\x03\\x02\\x02\\x02\\u0177\\u0178\\x07d\\x02\\x02\\u0178' +\r\n    '\\u0179\\x07q\\x02\\x02\\u0179\\u017A\\x07q\\x02\\x02\\u017A\\u017B\\x07n\\x02\\x02' +\r\n    '\\u017B\\x0E\\x03\\x02\\x02\\x02\\u017C\\u017D\\x07d\\x02\\x02\\u017D\\u017E\\x07t\\x02' +\r\n    '\\x02\\u017E\\u017F\\x07g\\x02\\x02\\u017F\\u0180\\x07c\\x02\\x02\\u0180\\u0181\\x07' +\r\n    'm\\x02\\x02\\u0181\\x10\\x03\\x02\\x02\\x02\\u0182\\u0183\\x07e\\x02\\x02\\u0183\\u0184' +\r\n    '\\x07c\\x02\\x02\\u0184\\u0185\\x07u\\x02\\x02\\u0185\\u0186\\x07g\\x02\\x02\\u0186' +\r\n    '\\x12\\x03\\x02\\x02\\x02\\u0187\\u0188\\x07e\\x02\\x02\\u0188\\u0189\\x07c\\x02\\x02' +\r\n    '\\u0189\\u018A\\x07v\\x02\\x02\\u018A\\u018B\\x07e\\x02\\x02\\u018B\\u018C\\x07j\\x02' +\r\n    '\\x02\\u018C\\x14\\x03\\x02\\x02\\x02\\u018D\\u018E\\x07e\\x02\\x02\\u018E\\u018F\\x07' +\r\n    'j\\x02\\x02\\u018F\\u0190\\x07c\\x02\\x02\\u0190\\u0191\\x07t\\x02\\x02\\u0191\\x16' +\r\n    '\\x03\\x02\\x02\\x02\\u0192\\u0193\\x07e\\x02\\x02\\u0193\\u0194\\x07j\\x02\\x02\\u0194' +\r\n    '\\u0195\\x07c\\x02\\x02\\u0195\\u0196\\x07t\\x02\\x02\\u0196\\u0197\\x073\\x02\\x02' +\r\n    '\\u0197\\u0198\\x078\\x02\\x02\\u0198\\u0199\\x07a\\x02\\x02\\u0199\\u019A\\x07v\\x02' +\r\n    '\\x02\\u019A\\x18\\x03\\x02\\x02\\x02\\u019B\\u019C\\x07e\\x02\\x02\\u019C\\u019D\\x07' +\r\n    'j\\x02\\x02\\u019D\\u019E\\x07c\\x02\\x02\\u019E\\u019F\\x07t\\x02\\x02\\u019F\\u01A0' +\r\n    '\\x075\\x02\\x02\\u01A0\\u01A1\\x074\\x02\\x02\\u01A1\\u01A2\\x07a\\x02\\x02\\u01A2' +\r\n    '\\u01A3\\x07v\\x02\\x02\\u01A3\\x1A\\x03\\x02\\x02\\x02\\u01A4\\u01A5\\x07e\\x02\\x02' +\r\n    '\\u01A5\\u01A6\\x07n\\x02\\x02\\u01A6\\u01A7\\x07c\\x02\\x02\\u01A7\\u01A8\\x07u\\x02' +\r\n    '\\x02\\u01A8\\u01A9\\x07u\\x02\\x02\\u01A9\\x1C\\x03\\x02\\x02\\x02\\u01AA\\u01AB\\x07' +\r\n    'e\\x02\\x02\\u01AB\\u01AC\\x07q\\x02\\x02\\u01AC\\u01AD\\x07p\\x02\\x02\\u01AD\\u01AE' +\r\n    '\\x07u\\x02\\x02\\u01AE\\u01AF\\x07v\\x02\\x02\\u01AF\\x1E\\x03\\x02\\x02\\x02\\u01B0' +\r\n    '\\u01B1\\x07e\\x02\\x02\\u01B1\\u01B2\\x07q\\x02\\x02\\u01B2\\u01B3\\x07p\\x02\\x02' +\r\n    '\\u01B3\\u01B4\\x07u\\x02\\x02\\u01B4\\u01B5\\x07v\\x02\\x02\\u01B5\\u01B6\\x07g\\x02' +\r\n    '\\x02\\u01B6\\u01B7\\x07z\\x02\\x02\\u01B7\\u01B8\\x07r\\x02\\x02\\u01B8\\u01B9\\x07' +\r\n    't\\x02\\x02\\u01B9 \\x03\\x02\\x02\\x02\\u01BA\\u01BB\\x07e\\x02\\x02\\u01BB\\u01BC' +\r\n    '\\x07q\\x02\\x02\\u01BC\\u01BD\\x07p\\x02\\x02\\u01BD\\u01BE\\x07u\\x02\\x02\\u01BE' +\r\n    '\\u01BF\\x07v\\x02\\x02\\u01BF\\u01C0\\x07a\\x02\\x02\\u01C0\\u01C1\\x07e\\x02\\x02' +\r\n    '\\u01C1\\u01C2\\x07c\\x02\\x02\\u01C2\\u01C3\\x07u\\x02\\x02\\u01C3\\u01C4\\x07v\\x02' +\r\n    '\\x02\\u01C4\"\\x03\\x02\\x02\\x02\\u01C5\\u01C6\\x07e\\x02\\x02\\u01C6\\u01C7\\x07' +\r\n    'q\\x02\\x02\\u01C7\\u01C8\\x07p\\x02\\x02\\u01C8\\u01C9\\x07v\\x02\\x02\\u01C9\\u01CA' +\r\n    '\\x07k\\x02\\x02\\u01CA\\u01CB\\x07p\\x02\\x02\\u01CB\\u01CC\\x07w\\x02\\x02\\u01CC' +\r\n    '\\u01CD\\x07g\\x02\\x02\\u01CD$\\x03\\x02\\x02\\x02\\u01CE\\u01CF\\x07f\\x02\\x02\\u01CF' +\r\n    '\\u01D0\\x07g\\x02\\x02\\u01D0\\u01D1\\x07e\\x02\\x02\\u01D1\\u01D2\\x07n\\x02\\x02' +\r\n    '\\u01D2\\u01D3\\x07v\\x02\\x02\\u01D3\\u01D4\\x07{\\x02\\x02\\u01D4\\u01D5\\x07r\\x02' +\r\n    '\\x02\\u01D5\\u01D6\\x07g\\x02\\x02\\u01D6&\\x03\\x02\\x02\\x02\\u01D7\\u01D8\\x07f' +\r\n    '\\x02\\x02\\u01D8\\u01D9\\x07g\\x02\\x02\\u01D9\\u01DA\\x07h\\x02\\x02\\u01DA\\u01DB' +\r\n    '\\x07c\\x02\\x02\\u01DB\\u01DC\\x07w\\x02\\x02\\u01DC\\u01DD\\x07n\\x02\\x02\\u01DD' +\r\n    '\\u01DE\\x07v\\x02\\x02\\u01DE(\\x03\\x02\\x02\\x02\\u01DF\\u01E0\\x07f\\x02\\x02\\u01E0' +\r\n    '\\u01E1\\x07g\\x02\\x02\\u01E1\\u01E2\\x07n\\x02\\x02\\u01E2\\u01E3\\x07g\\x02\\x02' +\r\n    '\\u01E3\\u01E4\\x07v\\x02\\x02\\u01E4\\u01E5\\x07g\\x02\\x02\\u01E5*\\x03\\x02\\x02' +\r\n    '\\x02\\u01E6\\u01E7\\x07f\\x02\\x02\\u01E7\\u01E8\\x07q\\x02\\x02\\u01E8,\\x03\\x02' +\r\n    '\\x02\\x02\\u01E9\\u01EA\\x07f\\x02\\x02\\u01EA\\u01EB\\x07q\\x02\\x02\\u01EB\\u01EC' +\r\n    '\\x07w\\x02\\x02\\u01EC\\u01ED\\x07d\\x02\\x02\\u01ED\\u01EE\\x07n\\x02\\x02\\u01EE' +\r\n    '\\u01EF\\x07g\\x02\\x02\\u01EF.\\x03\\x02\\x02\\x02\\u01F0\\u01F1\\x07H\\x02\\x02\\u01F1' +\r\n    '\\u01F2\\x07K\\x02\\x02\\u01F2\\u01F3\\x07N\\x02\\x02\\u01F3\\u01F4\\x07G\\x02\\x02' +\r\n    '\\u01F40\\x03\\x02\\x02\\x02\\u01F5\\u01F6\\x07f\\x02\\x02\\u01F6\\u01F7\\x07{\\x02' +\r\n    '\\x02\\u01F7\\u01F8\\x07p\\x02\\x02\\u01F8\\u01F9\\x07c\\x02\\x02\\u01F9\\u01FA\\x07' +\r\n    'o\\x02\\x02\\u01FA\\u01FB\\x07k\\x02\\x02\\u01FB\\u01FC\\x07e\\x02\\x02\\u01FC\\u01FD' +\r\n    '\\x07a\\x02\\x02\\u01FD\\u01FE\\x07e\\x02\\x02\\u01FE\\u01FF\\x07c\\x02\\x02\\u01FF' +\r\n    '\\u0200\\x07u\\x02\\x02\\u0200\\u0201\\x07v\\x02\\x02\\u02012\\x03\\x02\\x02\\x02\\u0202' +\r\n    '\\u0203\\x07g\\x02\\x02\\u0203\\u0204\\x07n\\x02\\x02\\u0204\\u0205\\x07u\\x02\\x02' +\r\n    '\\u0205\\u0206\\x07g\\x02\\x02\\u02064\\x03\\x02\\x02\\x02\\u0207\\u0208\\x07g\\x02' +\r\n    '\\x02\\u0208\\u0209\\x07p\\x02\\x02\\u0209\\u020A\\x07w\\x02\\x02\\u020A\\u020B\\x07' +\r\n    'o\\x02\\x02\\u020B6\\x03\\x02\\x02\\x02\\u020C\\u020D\\x07g\\x02\\x02\\u020D\\u020E' +\r\n    '\\x07z\\x02\\x02\\u020E\\u020F\\x07r\\x02\\x02\\u020F\\u0210\\x07n\\x02\\x02\\u0210' +\r\n    '\\u0211\\x07k\\x02\\x02\\u0211\\u0212\\x07e\\x02\\x02\\u0212\\u0213\\x07k\\x02\\x02' +\r\n    '\\u0213\\u0214\\x07v\\x02\\x02\\u02148\\x03\\x02\\x02\\x02\\u0215\\u0216\\x07g\\x02' +\r\n    '\\x02\\u0216\\u0217\\x07z\\x02\\x02\\u0217\\u0218\\x07r\\x02\\x02\\u0218\\u0219\\x07' +\r\n    'q\\x02\\x02\\u0219\\u021A\\x07t\\x02\\x02\\u021A\\u021B\\x07v\\x02\\x02\\u021B:\\x03' +\r\n    '\\x02\\x02\\x02\\u021C\\u021D\\x07g\\x02\\x02\\u021D\\u021E\\x07z\\x02\\x02\\u021E\\u021F' +\r\n    '\\x07v\\x02\\x02\\u021F\\u0220\\x07g\\x02\\x02\\u0220\\u0221\\x07t\\x02\\x02\\u0221' +\r\n    '\\u0222\\x07p\\x02\\x02\\u0222<\\x03\\x02\\x02\\x02\\u0223\\u0224\\x07h\\x02\\x02\\u0224' +\r\n    '\\u0225\\x07c\\x02\\x02\\u0225\\u0226\\x07n\\x02\\x02\\u0226\\u0227\\x07u\\x02\\x02' +\r\n    '\\u0227\\u0228\\x07g\\x02\\x02\\u0228>\\x03\\x02\\x02\\x02\\u0229\\u022A\\x07h\\x02' +\r\n    '\\x02\\u022A\\u022B\\x07k\\x02\\x02\\u022B\\u022C\\x07p\\x02\\x02\\u022C\\u022D\\x07' +\r\n    'c\\x02\\x02\\u022D\\u022E\\x07n\\x02\\x02\\u022E@\\x03\\x02\\x02\\x02\\u022F\\u0230' +\r\n    '\\x07h\\x02\\x02\\u0230\\u0231\\x07n\\x02\\x02\\u0231\\u0232\\x07q\\x02\\x02\\u0232' +\r\n    '\\u0233\\x07c\\x02\\x02\\u0233\\u0234\\x07v\\x02\\x02\\u0234B\\x03\\x02\\x02\\x02\\u0235' +\r\n    '\\u0236\\x07h\\x02\\x02\\u0236\\u0237\\x07q\\x02\\x02\\u0237\\u0238\\x07t\\x02\\x02' +\r\n    '\\u0238D\\x03\\x02\\x02\\x02\\u0239\\u023A\\x07h\\x02\\x02\\u023A\\u023B\\x07t\\x02' +\r\n    '\\x02\\u023B\\u023C\\x07k\\x02\\x02\\u023C\\u023D\\x07g\\x02\\x02\\u023D\\u023E\\x07' +\r\n    'p\\x02\\x02\\u023E\\u023F\\x07f\\x02\\x02\\u023FF\\x03\\x02\\x02\\x02\\u0240\\u0241' +\r\n    '\\x07i\\x02\\x02\\u0241\\u0242\\x07q\\x02\\x02\\u0242\\u0243\\x07v\\x02\\x02\\u0243' +\r\n    '\\u0244\\x07q\\x02\\x02\\u0244H\\x03\\x02\\x02\\x02\\u0245\\u0246\\x07k\\x02\\x02\\u0246' +\r\n    '\\u0247\\x07h\\x02\\x02\\u0247J\\x03\\x02\\x02\\x02\\u0248\\u0249\\x07k\\x02\\x02\\u0249' +\r\n    '\\u024A\\x07p\\x02\\x02\\u024A\\u024B\\x07n\\x02\\x02\\u024B\\u024C\\x07k\\x02\\x02' +\r\n    '\\u024C\\u024D\\x07p\\x02\\x02\\u024D\\u024E\\x07g\\x02\\x02\\u024EL\\x03\\x02\\x02' +\r\n    '\\x02\\u024F\\u0250\\x07k\\x02\\x02\\u0250\\u0251\\x07p\\x02\\x02\\u0251\\u0252\\x07' +\r\n    'v\\x02\\x02\\u0252N\\x03\\x02\\x02\\x02\\u0253\\u0254\\x07n\\x02\\x02\\u0254\\u0255' +\r\n    '\\x07q\\x02\\x02\\u0255\\u0256\\x07p\\x02\\x02\\u0256\\u0257\\x07i\\x02\\x02\\u0257' +\r\n    'P\\x03\\x02\\x02\\x02\\u0258\\u0259\\x07o\\x02\\x02\\u0259\\u025A\\x07w\\x02\\x02\\u025A' +\r\n    '\\u025B\\x07v\\x02\\x02\\u025B\\u025C\\x07c\\x02\\x02\\u025C\\u025D\\x07d\\x02\\x02' +\r\n    '\\u025D\\u025E\\x07n\\x02\\x02\\u025E\\u025F\\x07g\\x02\\x02\\u025FR\\x03\\x02\\x02' +\r\n    '\\x02\\u0260\\u0261\\x07p\\x02\\x02\\u0261\\u0262\\x07c\\x02\\x02\\u0262\\u0263\\x07' +\r\n    'o\\x02\\x02\\u0263\\u0264\\x07g\\x02\\x02\\u0264\\u0265\\x07u\\x02\\x02\\u0265\\u0266' +\r\n    '\\x07r\\x02\\x02\\u0266\\u0267\\x07c\\x02\\x02\\u0267\\u0268\\x07e\\x02\\x02\\u0268' +\r\n    '\\u0269\\x07g\\x02\\x02\\u0269T\\x03\\x02\\x02\\x02\\u026A\\u026B\\x07p\\x02\\x02\\u026B' +\r\n    '\\u026C\\x07g\\x02\\x02\\u026C\\u026D\\x07y\\x02\\x02\\u026DV\\x03\\x02\\x02\\x02\\u026E' +\r\n    '\\u026F\\x07p\\x02\\x02\\u026F\\u0270\\x07q\\x02\\x02\\u0270\\u0271\\x07g\\x02\\x02' +\r\n    '\\u0271\\u0272\\x07z\\x02\\x02\\u0272\\u0273\\x07e\\x02\\x02\\u0273\\u0274\\x07g\\x02' +\r\n    '\\x02\\u0274\\u0275\\x07r\\x02\\x02\\u0275\\u0276\\x07v\\x02\\x02\\u0276X\\x03\\x02' +\r\n    '\\x02\\x02\\u0277\\u0278\\x07p\\x02\\x02\\u0278\\u0279\\x07w\\x02\\x02\\u0279\\u027A' +\r\n    '\\x07n\\x02\\x02\\u027A\\u027B\\x07n\\x02\\x02\\u027B\\u027C\\x07r\\x02\\x02\\u027C' +\r\n    '\\u027D\\x07v\\x02\\x02\\u027D\\u027E\\x07t\\x02\\x02\\u027EZ\\x03\\x02\\x02\\x02\\u027F' +\r\n    '\\u0280\\x07q\\x02\\x02\\u0280\\u0281\\x07r\\x02\\x02\\u0281\\u0282\\x07g\\x02\\x02' +\r\n    '\\u0282\\u0283\\x07t\\x02\\x02\\u0283\\u0284\\x07c\\x02\\x02\\u0284\\u0285\\x07v\\x02' +\r\n    '\\x02\\u0285\\u0286\\x07q\\x02\\x02\\u0286\\u0287\\x07t\\x02\\x02\\u0287\\\\\\x03\\x02' +\r\n    '\\x02\\x02\\u0288\\u0289\\x07q\\x02\\x02\\u0289\\u028A\\x07x\\x02\\x02\\u028A\\u028B' +\r\n    '\\x07g\\x02\\x02\\u028B\\u028C\\x07t\\x02\\x02\\u028C\\u028D\\x07t\\x02\\x02\\u028D' +\r\n    '\\u028E\\x07k\\x02\\x02\\u028E\\u028F\\x07f\\x02\\x02\\u028F\\u0290\\x07g\\x02\\x02' +\r\n    '\\u0290^\\x03\\x02\\x02\\x02\\u0291\\u0292\\x07r\\x02\\x02\\u0292\\u0293\\x07t\\x02' +\r\n    '\\x02\\u0293\\u0294\\x07k\\x02\\x02\\u0294\\u0295\\x07x\\x02\\x02\\u0295\\u0296\\x07' +\r\n    'c\\x02\\x02\\u0296\\u0297\\x07v\\x02\\x02\\u0297\\u0298\\x07g\\x02\\x02\\u0298`\\x03' +\r\n    '\\x02\\x02\\x02\\u0299\\u029A\\x07r\\x02\\x02\\u029A\\u029B\\x07t\\x02\\x02\\u029B\\u029C' +\r\n    '\\x07q\\x02\\x02\\u029C\\u029D\\x07v\\x02\\x02\\u029D\\u029E\\x07g\\x02\\x02\\u029E' +\r\n    '\\u029F\\x07e\\x02\\x02\\u029F\\u02A0\\x07v\\x02\\x02\\u02A0\\u02A1\\x07g\\x02\\x02' +\r\n    '\\u02A1\\u02A2\\x07f\\x02\\x02\\u02A2b\\x03\\x02\\x02\\x02\\u02A3\\u02A4\\x07r\\x02' +\r\n    '\\x02\\u02A4\\u02A5\\x07w\\x02\\x02\\u02A5\\u02A6\\x07d\\x02\\x02\\u02A6\\u02A7\\x07' +\r\n    'n\\x02\\x02\\u02A7\\u02A8\\x07k\\x02\\x02\\u02A8\\u02A9\\x07e\\x02\\x02\\u02A9d\\x03' +\r\n    '\\x02\\x02\\x02\\u02AA\\u02AB\\x07t\\x02\\x02\\u02AB\\u02AC\\x07g\\x02\\x02\\u02AC\\u02AD' +\r\n    '\\x07i\\x02\\x02\\u02AD\\u02AE\\x07k\\x02\\x02\\u02AE\\u02AF\\x07u\\x02\\x02\\u02AF' +\r\n    '\\u02B0\\x07v\\x02\\x02\\u02B0\\u02B1\\x07g\\x02\\x02\\u02B1\\u02B2\\x07t\\x02\\x02' +\r\n    '\\u02B2f\\x03\\x02\\x02\\x02\\u02B3\\u02B4\\x07t\\x02\\x02\\u02B4\\u02B5\\x07g\\x02' +\r\n    '\\x02\\u02B5\\u02B6\\x07k\\x02\\x02\\u02B6\\u02B7\\x07p\\x02\\x02\\u02B7\\u02B8\\x07' +\r\n    'v\\x02\\x02\\u02B8\\u02B9\\x07g\\x02\\x02\\u02B9\\u02BA\\x07t\\x02\\x02\\u02BA\\u02BB' +\r\n    '\\x07r\\x02\\x02\\u02BB\\u02BC\\x07t\\x02\\x02\\u02BC\\u02BD\\x07g\\x02\\x02\\u02BD' +\r\n    '\\u02BE\\x07v\\x02\\x02\\u02BE\\u02BF\\x07a\\x02\\x02\\u02BF\\u02C0\\x07e\\x02\\x02' +\r\n    '\\u02C0\\u02C1\\x07c\\x02\\x02\\u02C1\\u02C2\\x07u\\x02\\x02\\u02C2\\u02C3\\x07v\\x02' +\r\n    '\\x02\\u02C3h\\x03\\x02\\x02\\x02\\u02C4\\u02C5\\x07t\\x02\\x02\\u02C5\\u02C6\\x07g' +\r\n    '\\x02\\x02\\u02C6\\u02C7\\x07v\\x02\\x02\\u02C7\\u02C8\\x07w\\x02\\x02\\u02C8\\u02C9' +\r\n    '\\x07t\\x02\\x02\\u02C9\\u02CA\\x07p\\x02\\x02\\u02CAj\\x03\\x02\\x02\\x02\\u02CB\\u02CC' +\r\n    '\\x07u\\x02\\x02\\u02CC\\u02CD\\x07j\\x02\\x02\\u02CD\\u02CE\\x07q\\x02\\x02\\u02CE' +\r\n    '\\u02CF\\x07t\\x02\\x02\\u02CF\\u02D0\\x07v\\x02\\x02\\u02D0l\\x03\\x02\\x02\\x02\\u02D1' +\r\n    '\\u02D2\\x07u\\x02\\x02\\u02D2\\u02D3\\x07k\\x02\\x02\\u02D3\\u02D4\\x07i\\x02\\x02' +\r\n    '\\u02D4\\u02D5\\x07p\\x02\\x02\\u02D5\\u02D6\\x07g\\x02\\x02\\u02D6\\u02D7\\x07f\\x02' +\r\n    '\\x02\\u02D7n\\x03\\x02\\x02\\x02\\u02D8\\u02D9\\x07u\\x02\\x02\\u02D9\\u02DA\\x07k' +\r\n    '\\x02\\x02\\u02DA\\u02DB\\x07|\\x02\\x02\\u02DB\\u02DC\\x07g\\x02\\x02\\u02DC\\u02DD' +\r\n    '\\x07q\\x02\\x02\\u02DD\\u02DE\\x07h\\x02\\x02\\u02DEp\\x03\\x02\\x02\\x02\\u02DF\\u02E0' +\r\n    '\\x07u\\x02\\x02\\u02E0\\u02E1\\x07v\\x02\\x02\\u02E1\\u02E2\\x07c\\x02\\x02\\u02E2' +\r\n    '\\u02E3\\x07v\\x02\\x02\\u02E3\\u02E4\\x07k\\x02\\x02\\u02E4\\u02E5\\x07e\\x02\\x02' +\r\n    '\\u02E5r\\x03\\x02\\x02\\x02\\u02E6\\u02E7\\x07u\\x02\\x02\\u02E7\\u02E8\\x07v\\x02' +\r\n    '\\x02\\u02E8\\u02E9\\x07c\\x02\\x02\\u02E9\\u02EA\\x07v\\x02\\x02\\u02EA\\u02EB\\x07' +\r\n    'k\\x02\\x02\\u02EB\\u02EC\\x07e\\x02\\x02\\u02EC\\u02ED\\x07a\\x02\\x02\\u02ED\\u02EE' +\r\n    '\\x07c\\x02\\x02\\u02EE\\u02EF\\x07u\\x02\\x02\\u02EF\\u02F0\\x07u\\x02\\x02\\u02F0' +\r\n    '\\u02F1\\x07g\\x02\\x02\\u02F1\\u02F2\\x07t\\x02\\x02\\u02F2\\u02F3\\x07v\\x02\\x02' +\r\n    '\\u02F3t\\x03\\x02\\x02\\x02\\u02F4\\u02F5\\x07u\\x02\\x02\\u02F5\\u02F6\\x07v\\x02' +\r\n    '\\x02\\u02F6\\u02F7\\x07c\\x02\\x02\\u02F7\\u02F8\\x07v\\x02\\x02\\u02F8\\u02F9\\x07' +\r\n    'k\\x02\\x02\\u02F9\\u02FA\\x07e\\x02\\x02\\u02FA\\u02FB\\x07a\\x02\\x02\\u02FB\\u02FC' +\r\n    '\\x07e\\x02\\x02\\u02FC\\u02FD\\x07c\\x02\\x02\\u02FD\\u02FE\\x07u\\x02\\x02\\u02FE' +\r\n    '\\u02FF\\x07v\\x02\\x02\\u02FFv\\x03\\x02\\x02\\x02\\u0300\\u0301\\x07u\\x02\\x02\\u0301' +\r\n    '\\u0302\\x07v\\x02\\x02\\u0302\\u0303\\x07t\\x02\\x02\\u0303\\u0304\\x07w\\x02\\x02' +\r\n    '\\u0304\\u0305\\x07e\\x02\\x02\\u0305\\u0306\\x07v\\x02\\x02\\u0306x\\x03\\x02\\x02' +\r\n    '\\x02\\u0307\\u0308\\x07u\\x02\\x02\\u0308\\u0309\\x07y\\x02\\x02\\u0309\\u030A\\x07' +\r\n    'k\\x02\\x02\\u030A\\u030B\\x07v\\x02\\x02\\u030B\\u030C\\x07e\\x02\\x02\\u030C\\u030D' +\r\n    '\\x07j\\x02\\x02\\u030Dz\\x03\\x02\\x02\\x02\\u030E\\u030F\\x07v\\x02\\x02\\u030F\\u0310' +\r\n    '\\x07g\\x02\\x02\\u0310\\u0311\\x07o\\x02\\x02\\u0311\\u0312\\x07r\\x02\\x02\\u0312' +\r\n    '\\u0313\\x07n\\x02\\x02\\u0313\\u0314\\x07c\\x02\\x02\\u0314\\u0315\\x07v\\x02\\x02' +\r\n    '\\u0315\\u0316\\x07g\\x02\\x02\\u0316|\\x03\\x02\\x02\\x02\\u0317\\u0318\\x07v\\x02' +\r\n    '\\x02\\u0318\\u0319\\x07j\\x02\\x02\\u0319\\u031A\\x07k\\x02\\x02\\u031A\\u031B\\x07' +\r\n    'u\\x02\\x02\\u031B~\\x03\\x02\\x02\\x02\\u031C\\u031D\\x07v\\x02\\x02\\u031D\\u031E' +\r\n    '\\x07j\\x02\\x02\\u031E\\u031F\\x07t\\x02\\x02\\u031F\\u0320\\x07g\\x02\\x02\\u0320' +\r\n    '\\u0321\\x07c\\x02\\x02\\u0321\\u0322\\x07f\\x02\\x02\\u0322\\u0323\\x07a\\x02\\x02' +\r\n    '\\u0323\\u0324\\x07n\\x02\\x02\\u0324\\u0325\\x07q\\x02\\x02\\u0325\\u0326\\x07e\\x02' +\r\n    '\\x02\\u0326\\u0327\\x07c\\x02\\x02\\u0327\\u0328\\x07n\\x02\\x02\\u0328\\x80\\x03\\x02' +\r\n    '\\x02\\x02\\u0329\\u032A\\x07v\\x02\\x02\\u032A\\u032B\\x07j\\x02\\x02\\u032B\\u032C' +\r\n    '\\x07t\\x02\\x02\\u032C\\u032D\\x07q\\x02\\x02\\u032D\\u032E\\x07y\\x02\\x02\\u032E' +\r\n    '\\x82\\x03\\x02\\x02\\x02\\u032F\\u0330\\x07v\\x02\\x02\\u0330\\u0331\\x07t\\x02\\x02' +\r\n    '\\u0331\\u0332\\x07w\\x02\\x02\\u0332\\u0333\\x07g\\x02\\x02\\u0333\\x84\\x03\\x02\\x02' +\r\n    '\\x02\\u0334\\u0335\\x07v\\x02\\x02\\u0335\\u0336\\x07t\\x02\\x02\\u0336\\u0337\\x07' +\r\n    '{\\x02\\x02\\u0337\\x86\\x03\\x02\\x02\\x02\\u0338\\u0339\\x07v\\x02\\x02\\u0339\\u033A' +\r\n    '\\x07{\\x02\\x02\\u033A\\u033B\\x07r\\x02\\x02\\u033B\\u033C\\x07g\\x02\\x02\\u033C' +\r\n    '\\u033D\\x07f\\x02\\x02\\u033D\\u033E\\x07g\\x02\\x02\\u033E\\u033F\\x07h\\x02\\x02' +\r\n    '\\u033F\\x88\\x03\\x02\\x02\\x02\\u0340\\u0341\\x07v\\x02\\x02\\u0341\\u0342\\x07{\\x02' +\r\n    '\\x02\\u0342\\u0343\\x07r\\x02\\x02\\u0343\\u0344\\x07g\\x02\\x02\\u0344\\u0345\\x07' +\r\n    'k\\x02\\x02\\u0345\\u0346\\x07f\\x02\\x02\\u0346\\x8A\\x03\\x02\\x02\\x02\\u0347\\u0348' +\r\n    '\\x07v\\x02\\x02\\u0348\\u0349\\x07{\\x02\\x02\\u0349\\u034A\\x07r\\x02\\x02\\u034A' +\r\n    '\\u034B\\x07g\\x02\\x02\\u034B\\u034C\\x07p\\x02\\x02\\u034C\\u034D\\x07c\\x02\\x02' +\r\n    '\\u034D\\u034E\\x07o\\x02\\x02\\u034E\\u034F\\x07g\\x02\\x02\\u034F\\x8C\\x03\\x02\\x02' +\r\n    '\\x02\\u0350\\u0351\\x07w\\x02\\x02\\u0351\\u0352\\x07p\\x02\\x02\\u0352\\u0353\\x07' +\r\n    'k\\x02\\x02\\u0353\\u0354\\x07q\\x02\\x02\\u0354\\u0355\\x07p\\x02\\x02\\u0355\\x8E' +\r\n    '\\x03\\x02\\x02\\x02\\u0356\\u0357\\x07w\\x02\\x02\\u0357\\u0358\\x07p\\x02\\x02\\u0358' +\r\n    '\\u0359\\x07u\\x02\\x02\\u0359\\u035A\\x07k\\x02\\x02\\u035A\\u035B\\x07i\\x02\\x02' +\r\n    '\\u035B\\u035C\\x07p\\x02\\x02\\u035C\\u035D\\x07g\\x02\\x02\\u035D\\u035E\\x07f\\x02' +\r\n    '\\x02\\u035E\\x90\\x03\\x02\\x02\\x02\\u035F\\u0360\\x07w\\x02\\x02\\u0360\\u0361\\x07' +\r\n    'u\\x02\\x02\\u0361\\u0362\\x07k\\x02\\x02\\u0362\\u0363\\x07p\\x02\\x02\\u0363\\u0364' +\r\n    '\\x07i\\x02\\x02\\u0364\\x92\\x03\\x02\\x02\\x02\\u0365\\u0366\\x07x\\x02\\x02\\u0366' +\r\n    '\\u0367\\x07k\\x02\\x02\\u0367\\u0368\\x07t\\x02\\x02\\u0368\\u0369\\x07v\\x02\\x02' +\r\n    '\\u0369\\u036A\\x07w\\x02\\x02\\u036A\\u036B\\x07c\\x02\\x02\\u036B\\u036C\\x07n\\x02' +\r\n    '\\x02\\u036C\\x94\\x03\\x02\\x02\\x02\\u036D\\u036E\\x07x\\x02\\x02\\u036E\\u036F\\x07' +\r\n    'q\\x02\\x02\\u036F\\u0370\\x07k\\x02\\x02\\u0370\\u0371\\x07f\\x02\\x02\\u0371\\x96' +\r\n    '\\x03\\x02\\x02\\x02\\u0372\\u0373\\x07x\\x02\\x02\\u0373\\u0374\\x07q\\x02\\x02\\u0374' +\r\n    '\\u0375\\x07n\\x02\\x02\\u0375\\u0376\\x07c\\x02\\x02\\u0376\\u0377\\x07v\\x02\\x02' +\r\n    '\\u0377\\u0378\\x07k\\x02\\x02\\u0378\\u0379\\x07n\\x02\\x02\\u0379\\u037A\\x07g\\x02' +\r\n    '\\x02\\u037A\\x98\\x03\\x02\\x02\\x02\\u037B\\u037C\\x07y\\x02\\x02\\u037C\\u037D\\x07' +\r\n    'e\\x02\\x02\\u037D\\u037E\\x07j\\x02\\x02\\u037E\\u037F\\x07c\\x02\\x02\\u037F\\u0380' +\r\n    '\\x07t\\x02\\x02\\u0380\\u0381\\x07a\\x02\\x02\\u0381\\u0382\\x07v\\x02\\x02\\u0382' +\r\n    '\\x9A\\x03\\x02\\x02\\x02\\u0383\\u0384\\x07y\\x02\\x02\\u0384\\u0385\\x07j\\x02\\x02' +\r\n    '\\u0385\\u0386\\x07k\\x02\\x02\\u0386\\u0387\\x07n\\x02\\x02\\u0387\\u0388\\x07g\\x02' +\r\n    '\\x02\\u0388\\x9C\\x03\\x02\\x02\\x02\\u0389\\u038A\\x07*\\x02\\x02\\u038A\\x9E\\x03' +\r\n    '\\x02\\x02\\x02\\u038B\\u038C\\x07+\\x02\\x02\\u038C\\xA0\\x03\\x02\\x02\\x02\\u038D' +\r\n    '\\u038E\\x07]\\x02\\x02\\u038E\\xA2\\x03\\x02\\x02\\x02\\u038F\\u0390\\x07_\\x02\\x02' +\r\n    '\\u0390\\xA4\\x03\\x02\\x02\\x02\\u0391\\u0392\\x07}\\x02\\x02\\u0392\\xA6\\x03\\x02' +\r\n    '\\x02\\x02\\u0393\\u0394\\x07\\x7F\\x02\\x02\\u0394\\xA8\\x03\\x02\\x02\\x02\\u0395\\u0396' +\r\n    '\\x07-\\x02\\x02\\u0396\\xAA\\x03\\x02\\x02\\x02\\u0397\\u0398\\x07/\\x02\\x02\\u0398' +\r\n    '\\xAC\\x03\\x02\\x02\\x02\\u0399\\u039A\\x07,\\x02\\x02\\u039A\\xAE\\x03\\x02\\x02\\x02' +\r\n    \"\\u039B\\u039C\\x071\\x02\\x02\\u039C\\xB0\\x03\\x02\\x02\\x02\\u039D\\u039E\\x07'\" +\r\n    '\\x02\\x02\\u039E\\xB2\\x03\\x02\\x02\\x02\\u039F\\u03A0\\x07`\\x02\\x02\\u03A0\\xB4' +\r\n    '\\x03\\x02\\x02\\x02\\u03A1\\u03A2\\x07(\\x02\\x02\\u03A2\\xB6\\x03\\x02\\x02\\x02\\u03A3' +\r\n    '\\u03A4\\x07~\\x02\\x02\\u03A4\\xB8\\x03\\x02\\x02\\x02\\u03A5\\u03A6\\x07\\x80\\x02' +\r\n    '\\x02\\u03A6\\xBA\\x03\\x02\\x02\\x02\\u03A7\\u03A8\\x07#\\x02\\x02\\u03A8\\xBC\\x03' +\r\n    '\\x02\\x02\\x02\\u03A9\\u03AA\\x07?\\x02\\x02\\u03AA\\xBE\\x03\\x02\\x02\\x02\\u03AB' +\r\n    '\\u03AC\\x07>\\x02\\x02\\u03AC\\xC0\\x03\\x02\\x02\\x02\\u03AD\\u03AE\\x07@\\x02\\x02' +\r\n    '\\u03AE\\xC2\\x03\\x02\\x02\\x02\\u03AF\\u03B0\\x07-\\x02\\x02\\u03B0\\u03B1\\x07?\\x02' +\r\n    '\\x02\\u03B1\\xC4\\x03\\x02\\x02\\x02\\u03B2\\u03B3\\x07/\\x02\\x02\\u03B3\\u03B4\\x07' +\r\n    '?\\x02\\x02\\u03B4\\xC6\\x03\\x02\\x02\\x02\\u03B5\\u03B6\\x07,\\x02\\x02\\u03B6\\u03B7' +\r\n    '\\x07?\\x02\\x02\\u03B7\\xC8\\x03\\x02\\x02\\x02\\u03B8\\u03B9\\x071\\x02\\x02\\u03B9' +\r\n    \"\\u03BA\\x07?\\x02\\x02\\u03BA\\xCA\\x03\\x02\\x02\\x02\\u03BB\\u03BC\\x07'\\x02\\x02\" +\r\n    '\\u03BC\\u03BD\\x07?\\x02\\x02\\u03BD\\xCC\\x03\\x02\\x02\\x02\\u03BE\\u03BF\\x07`\\x02' +\r\n    '\\x02\\u03BF\\u03C0\\x07?\\x02\\x02\\u03C0\\xCE\\x03\\x02\\x02\\x02\\u03C1\\u03C2\\x07' +\r\n    '(\\x02\\x02\\u03C2\\u03C3\\x07?\\x02\\x02\\u03C3\\xD0\\x03\\x02\\x02\\x02\\u03C4\\u03C5' +\r\n    '\\x07~\\x02\\x02\\u03C5\\u03C6\\x07?\\x02\\x02\\u03C6\\xD2\\x03\\x02\\x02\\x02\\u03C7' +\r\n    '\\u03C8\\x07>\\x02\\x02\\u03C8\\u03C9\\x07>\\x02\\x02\\u03C9\\xD4\\x03\\x02\\x02\\x02' +\r\n    '\\u03CA\\u03CB\\x07>\\x02\\x02\\u03CB\\u03CC\\x07>\\x02\\x02\\u03CC\\u03CD\\x07?\\x02' +\r\n    '\\x02\\u03CD\\xD6\\x03\\x02\\x02\\x02\\u03CE\\u03CF\\x07?\\x02\\x02\\u03CF\\u03D0\\x07' +\r\n    '?\\x02\\x02\\u03D0\\xD8\\x03\\x02\\x02\\x02\\u03D1\\u03D2\\x07#\\x02\\x02\\u03D2\\u03D3' +\r\n    '\\x07?\\x02\\x02\\u03D3\\xDA\\x03\\x02\\x02\\x02\\u03D4\\u03D5\\x07>\\x02\\x02\\u03D5' +\r\n    '\\u03D6\\x07?\\x02\\x02\\u03D6\\xDC\\x03\\x02\\x02\\x02\\u03D7\\u03D8\\x07@\\x02\\x02' +\r\n    '\\u03D8\\u03D9\\x07?\\x02\\x02\\u03D9\\xDE\\x03\\x02\\x02\\x02\\u03DA\\u03DB\\x07(\\x02' +\r\n    '\\x02\\u03DB\\u03DC\\x07(\\x02\\x02\\u03DC\\xE0\\x03\\x02\\x02\\x02\\u03DD\\u03DE\\x07' +\r\n    '~\\x02\\x02\\u03DE\\u03DF\\x07~\\x02\\x02\\u03DF\\xE2\\x03\\x02\\x02\\x02\\u03E0\\u03E1' +\r\n    '\\x07-\\x02\\x02\\u03E1\\u03E2\\x07-\\x02\\x02\\u03E2\\xE4\\x03\\x02\\x02\\x02\\u03E3' +\r\n    '\\u03E4\\x07/\\x02\\x02\\u03E4\\u03E5\\x07/\\x02\\x02\\u03E5\\xE6\\x03\\x02\\x02\\x02' +\r\n    '\\u03E6\\u03E7\\x07.\\x02\\x02\\u03E7\\xE8\\x03\\x02\\x02\\x02\\u03E8\\u03E9\\x07/\\x02' +\r\n    '\\x02\\u03E9\\u03EA\\x07@\\x02\\x02\\u03EA\\u03EB\\x07,\\x02\\x02\\u03EB\\xEA\\x03\\x02' +\r\n    '\\x02\\x02\\u03EC\\u03ED\\x07/\\x02\\x02\\u03ED\\u03EE\\x07@\\x02\\x02\\u03EE\\xEC\\x03' +\r\n    '\\x02\\x02\\x02\\u03EF\\u03F0\\x07A\\x02\\x02\\u03F0\\xEE\\x03\\x02\\x02\\x02\\u03F1' +\r\n    '\\u03F2\\x07<\\x02\\x02\\u03F2\\xF0\\x03\\x02\\x02\\x02\\u03F3\\u03F4\\x07<\\x02\\x02' +\r\n    '\\u03F4\\u03F5\\x07<\\x02\\x02\\u03F5\\xF2\\x03\\x02\\x02\\x02\\u03F6\\u03F7\\x07=\\x02' +\r\n    '\\x02\\u03F7\\xF4\\x03\\x02\\x02\\x02\\u03F8\\u03F9\\x070\\x02\\x02\\u03F9\\xF6\\x03' +\r\n    '\\x02\\x02\\x02\\u03FA\\u03FB\\x070\\x02\\x02\\u03FB\\u03FC\\x07,\\x02\\x02\\u03FC\\xF8' +\r\n    '\\x03\\x02\\x02\\x02\\u03FD\\u03FE\\x070\\x02\\x02\\u03FE\\u03FF\\x070\\x02\\x02\\u03FF' +\r\n    '\\u0400\\x070\\x02\\x02\\u0400\\xFA\\x03\\x02\\x02\\x02\\u0401\\u0402\\x05\\u0115\\x8B' +\r\n    '\\x02\\u0402\\u0403\\x05\\u0115\\x8B\\x02\\u0403\\u0404\\x05\\u0115\\x8B\\x02\\u0404' +\r\n    '\\u0405\\x05\\u0115\\x8B\\x02\\u0405\\xFC\\x03\\x02\\x02\\x02\\u0406\\u0407\\x07^\\x02' +\r\n    '\\x02\\u0407\\u0408\\x07w\\x02\\x02\\u0408\\u0409\\x03\\x02\\x02\\x02\\u0409\\u0411' +\r\n    '\\x05\\xFB~\\x02\\u040A\\u040B\\x07^\\x02\\x02\\u040B\\u040C\\x07W\\x02\\x02\\u040C' +\r\n    '\\u040D\\x03\\x02\\x02\\x02\\u040D\\u040E\\x05\\xFB~\\x02\\u040E\\u040F\\x05\\xFB~\\x02' +\r\n    '\\u040F\\u0411\\x03\\x02\\x02\\x02\\u0410\\u0406\\x03\\x02\\x02\\x02\\u0410\\u040A\\x03' +\r\n    '\\x02\\x02\\x02\\u0411\\xFE\\x03\\x02\\x02\\x02\\u0412\\u0417\\x05\\u0101\\x81\\x02\\u0413' +\r\n    '\\u0416\\x05\\u0101\\x81\\x02\\u0414\\u0416\\x05\\u0105\\x83\\x02\\u0415\\u0413\\x03' +\r\n    '\\x02\\x02\\x02\\u0415\\u0414\\x03\\x02\\x02\\x02\\u0416\\u0419\\x03\\x02\\x02\\x02\\u0417' +\r\n    '\\u0415\\x03\\x02\\x02\\x02\\u0417\\u0418\\x03\\x02\\x02\\x02\\u0418\\u0100\\x03\\x02' +\r\n    '\\x02\\x02\\u0419\\u0417\\x03\\x02\\x02\\x02\\u041A\\u041D\\x05\\u0103\\x82\\x02\\u041B' +\r\n    '\\u041D\\x05\\xFD\\x7F\\x02\\u041C\\u041A\\x03\\x02\\x02\\x02\\u041C\\u041B\\x03\\x02' +\r\n    '\\x02\\x02\\u041D\\u0102\\x03\\x02\\x02\\x02\\u041E\\u041F\\t\\x03\\x02\\x02\\u041F\\u0104' +\r\n    '\\x03\\x02\\x02\\x02\\u0420\\u0421\\t\\x04\\x02\\x02\\u0421\\u0106\\x03\\x02\\x02\\x02' +\r\n    '\\u0422\\u0424\\x05\\u0109\\x85\\x02\\u0423\\u0425\\x05\\u0119\\x8D\\x02\\u0424\\u0423' +\r\n    '\\x03\\x02\\x02\\x02\\u0424\\u0425\\x03\\x02\\x02\\x02\\u0425\\u0433\\x03\\x02\\x02\\x02' +\r\n    '\\u0426\\u0428\\x05\\u010B\\x86\\x02\\u0427\\u0429\\x05\\u0119\\x8D\\x02\\u0428\\u0427' +\r\n    '\\x03\\x02\\x02\\x02\\u0428\\u0429\\x03\\x02\\x02\\x02\\u0429\\u0433\\x03\\x02\\x02\\x02' +\r\n    '\\u042A\\u042C\\x05\\u010D\\x87\\x02\\u042B\\u042D\\x05\\u0119\\x8D\\x02\\u042C\\u042B' +\r\n    '\\x03\\x02\\x02\\x02\\u042C\\u042D\\x03\\x02\\x02\\x02\\u042D\\u0433\\x03\\x02\\x02\\x02' +\r\n    '\\u042E\\u0430\\x05\\u010F\\x88\\x02\\u042F\\u0431\\x05\\u0119\\x8D\\x02\\u0430\\u042F' +\r\n    '\\x03\\x02\\x02\\x02\\u0430\\u0431\\x03\\x02\\x02\\x02\\u0431\\u0433\\x03\\x02\\x02\\x02' +\r\n    '\\u0432\\u0422\\x03\\x02\\x02\\x02\\u0432\\u0426\\x03\\x02\\x02\\x02\\u0432\\u042A\\x03' +\r\n    '\\x02\\x02\\x02\\u0432\\u042E\\x03\\x02\\x02\\x02\\u0433\\u0108\\x03\\x02\\x02\\x02\\u0434' +\r\n    '\\u043B\\x05\\u0111\\x89\\x02\\u0435\\u0437\\x07)\\x02\\x02\\u0436\\u0435\\x03\\x02' +\r\n    '\\x02\\x02\\u0436\\u0437\\x03\\x02\\x02\\x02\\u0437\\u0438\\x03\\x02\\x02\\x02\\u0438' +\r\n    '\\u043A\\x05\\u0105\\x83\\x02\\u0439\\u0436\\x03\\x02\\x02\\x02\\u043A\\u043D\\x03\\x02' +\r\n    '\\x02\\x02\\u043B\\u0439\\x03\\x02\\x02\\x02\\u043B\\u043C\\x03\\x02\\x02\\x02\\u043C' +\r\n    '\\u010A\\x03\\x02';\r\nCPP14Lexer._serializedATNSegment2 = '\\x02\\x02\\u043D\\u043B\\x03\\x02\\x02\\x02\\u043E\\u0445\\x072\\x02\\x02\\u043F\\u0441' +\r\n    '\\x07)\\x02\\x02\\u0440\\u043F\\x03\\x02\\x02\\x02\\u0440\\u0441\\x03\\x02\\x02\\x02' +\r\n    '\\u0441\\u0442\\x03\\x02\\x02\\x02\\u0442\\u0444\\x05\\u0113\\x8A\\x02\\u0443\\u0440' +\r\n    '\\x03\\x02\\x02\\x02\\u0444\\u0447\\x03\\x02\\x02\\x02\\u0445\\u0443\\x03\\x02\\x02\\x02' +\r\n    '\\u0445\\u0446\\x03\\x02\\x02\\x02\\u0446\\u010C\\x03\\x02\\x02\\x02\\u0447\\u0445\\x03' +\r\n    '\\x02\\x02\\x02\\u0448\\u0449\\x072\\x02\\x02\\u0449\\u044D\\x07z\\x02\\x02\\u044A\\u044B' +\r\n    '\\x072\\x02\\x02\\u044B\\u044D\\x07Z\\x02\\x02\\u044C\\u0448\\x03\\x02\\x02\\x02\\u044C' +\r\n    '\\u044A\\x03\\x02\\x02\\x02\\u044D\\u044E\\x03\\x02\\x02\\x02\\u044E\\u0455\\x05\\u0115' +\r\n    '\\x8B\\x02\\u044F\\u0451\\x07)\\x02\\x02\\u0450\\u044F\\x03\\x02\\x02\\x02\\u0450\\u0451' +\r\n    '\\x03\\x02\\x02\\x02\\u0451\\u0452\\x03\\x02\\x02\\x02\\u0452\\u0454\\x05\\u0115\\x8B' +\r\n    '\\x02\\u0453\\u0450\\x03\\x02\\x02\\x02\\u0454\\u0457\\x03\\x02\\x02\\x02\\u0455\\u0453' +\r\n    '\\x03\\x02\\x02\\x02\\u0455\\u0456\\x03\\x02\\x02\\x02\\u0456\\u010E\\x03\\x02\\x02\\x02' +\r\n    '\\u0457\\u0455\\x03\\x02\\x02\\x02\\u0458\\u0459\\x072\\x02\\x02\\u0459\\u045D\\x07' +\r\n    'd\\x02\\x02\\u045A\\u045B\\x072\\x02\\x02\\u045B\\u045D\\x07D\\x02\\x02\\u045C\\u0458' +\r\n    '\\x03\\x02\\x02\\x02\\u045C\\u045A\\x03\\x02\\x02\\x02\\u045D\\u045E\\x03\\x02\\x02\\x02' +\r\n    '\\u045E\\u0465\\x05\\u0117\\x8C\\x02\\u045F\\u0461\\x07)\\x02\\x02\\u0460\\u045F\\x03' +\r\n    '\\x02\\x02\\x02\\u0460\\u0461\\x03\\x02\\x02\\x02\\u0461\\u0462\\x03\\x02\\x02\\x02\\u0462' +\r\n    '\\u0464\\x05\\u0117\\x8C\\x02\\u0463\\u0460\\x03\\x02\\x02\\x02\\u0464\\u0467\\x03\\x02' +\r\n    '\\x02\\x02\\u0465\\u0463\\x03\\x02\\x02\\x02\\u0465\\u0466\\x03\\x02\\x02\\x02\\u0466' +\r\n    '\\u0110\\x03\\x02\\x02\\x02\\u0467\\u0465\\x03\\x02\\x02\\x02\\u0468\\u0469\\t\\x05\\x02' +\r\n    '\\x02\\u0469\\u0112\\x03\\x02\\x02\\x02\\u046A\\u046B\\t\\x06\\x02\\x02\\u046B\\u0114' +\r\n    '\\x03\\x02\\x02\\x02\\u046C\\u046D\\t\\x07\\x02\\x02\\u046D\\u0116\\x03\\x02\\x02\\x02' +\r\n    '\\u046E\\u046F\\t\\b\\x02\\x02\\u046F\\u0118\\x03\\x02\\x02\\x02\\u0470\\u0472\\x05\\u011B' +\r\n    '\\x8E\\x02\\u0471\\u0473\\x05\\u011D\\x8F\\x02\\u0472\\u0471\\x03\\x02\\x02\\x02\\u0472' +\r\n    '\\u0473\\x03\\x02\\x02\\x02\\u0473\\u0481\\x03\\x02\\x02\\x02\\u0474\\u0476\\x05\\u011B' +\r\n    '\\x8E\\x02\\u0475\\u0477\\x05\\u011F\\x90\\x02\\u0476\\u0475\\x03\\x02\\x02\\x02\\u0476' +\r\n    '\\u0477\\x03\\x02\\x02\\x02\\u0477\\u0481\\x03\\x02\\x02\\x02\\u0478\\u047A\\x05\\u011D' +\r\n    '\\x8F\\x02\\u0479\\u047B\\x05\\u011B\\x8E\\x02\\u047A\\u0479\\x03\\x02\\x02\\x02\\u047A' +\r\n    '\\u047B\\x03\\x02\\x02\\x02\\u047B\\u0481\\x03\\x02\\x02\\x02\\u047C\\u047E\\x05\\u011F' +\r\n    '\\x90\\x02\\u047D\\u047F\\x05\\u011B\\x8E\\x02\\u047E\\u047D\\x03\\x02\\x02\\x02\\u047E' +\r\n    '\\u047F\\x03\\x02\\x02\\x02\\u047F\\u0481\\x03\\x02\\x02\\x02\\u0480\\u0470\\x03\\x02' +\r\n    '\\x02\\x02\\u0480\\u0474\\x03\\x02\\x02\\x02\\u0480\\u0478\\x03\\x02\\x02\\x02\\u0480' +\r\n    '\\u047C\\x03\\x02\\x02\\x02\\u0481\\u011A\\x03\\x02\\x02\\x02\\u0482\\u0483\\t\\t\\x02' +\r\n    '\\x02\\u0483\\u011C\\x03\\x02\\x02\\x02\\u0484\\u0485\\t\\n\\x02\\x02\\u0485\\u011E\\x03' +\r\n    '\\x02\\x02\\x02\\u0486\\u0487\\x07n\\x02\\x02\\u0487\\u048B\\x07n\\x02\\x02\\u0488\\u0489' +\r\n    '\\x07N\\x02\\x02\\u0489\\u048B\\x07N\\x02\\x02\\u048A\\u0486\\x03\\x02\\x02\\x02\\u048A' +\r\n    '\\u0488\\x03\\x02\\x02\\x02\\u048B\\u0120\\x03\\x02\\x02\\x02\\u048C\\u048E\\x07)\\x02' +\r\n    '\\x02\\u048D\\u048F\\x05\\u0123\\x92\\x02\\u048E\\u048D\\x03\\x02\\x02\\x02\\u048F\\u0490' +\r\n    '\\x03\\x02\\x02\\x02\\u0490\\u048E\\x03\\x02\\x02\\x02\\u0490\\u0491\\x03\\x02\\x02\\x02' +\r\n    '\\u0491\\u0492\\x03\\x02\\x02\\x02\\u0492\\u0493\\x07)\\x02\\x02\\u0493\\u04B0\\x03' +\r\n    '\\x02\\x02\\x02\\u0494\\u0495\\x07w\\x02\\x02\\u0495\\u0497\\x07)\\x02\\x02\\u0496\\u0498' +\r\n    '\\x05\\u0123\\x92\\x02\\u0497\\u0496\\x03\\x02\\x02\\x02\\u0498\\u0499\\x03\\x02\\x02' +\r\n    '\\x02\\u0499\\u0497\\x03\\x02\\x02\\x02\\u0499\\u049A\\x03\\x02\\x02\\x02\\u049A\\u049B' +\r\n    '\\x03\\x02\\x02\\x02\\u049B\\u049C\\x07)\\x02\\x02\\u049C\\u04B0\\x03\\x02\\x02\\x02' +\r\n    '\\u049D\\u049E\\x07W\\x02\\x02\\u049E\\u04A0\\x07)\\x02\\x02\\u049F\\u04A1\\x05\\u0123' +\r\n    '\\x92\\x02\\u04A0\\u049F\\x03\\x02\\x02\\x02\\u04A1\\u04A2\\x03\\x02\\x02\\x02\\u04A2' +\r\n    '\\u04A0\\x03\\x02\\x02\\x02\\u04A2\\u04A3\\x03\\x02\\x02\\x02\\u04A3\\u04A4\\x03\\x02' +\r\n    '\\x02\\x02\\u04A4\\u04A5\\x07)\\x02\\x02\\u04A5\\u04B0\\x03\\x02\\x02\\x02\\u04A6\\u04A7' +\r\n    '\\x07N\\x02\\x02\\u04A7\\u04A9\\x07)\\x02\\x02\\u04A8\\u04AA\\x05\\u0123\\x92\\x02\\u04A9' +\r\n    '\\u04A8\\x03\\x02\\x02\\x02\\u04AA\\u04AB\\x03\\x02\\x02\\x02\\u04AB\\u04A9\\x03\\x02' +\r\n    '\\x02\\x02\\u04AB\\u04AC\\x03\\x02\\x02\\x02\\u04AC\\u04AD\\x03\\x02\\x02\\x02\\u04AD' +\r\n    '\\u04AE\\x07)\\x02\\x02\\u04AE\\u04B0\\x03\\x02\\x02\\x02\\u04AF\\u048C\\x03\\x02\\x02' +\r\n    '\\x02\\u04AF\\u0494\\x03\\x02\\x02\\x02\\u04AF\\u049D\\x03\\x02\\x02\\x02\\u04AF\\u04A6' +\r\n    '\\x03\\x02\\x02\\x02\\u04B0\\u0122\\x03\\x02\\x02\\x02\\u04B1\\u04B5\\n\\v\\x02\\x02\\u04B2' +\r\n    '\\u04B5\\x05\\u0125\\x93\\x02\\u04B3\\u04B5\\x05\\xFD\\x7F\\x02\\u04B4\\u04B1\\x03\\x02' +\r\n    '\\x02\\x02\\u04B4\\u04B2\\x03\\x02\\x02\\x02\\u04B4\\u04B3\\x03\\x02\\x02\\x02\\u04B5' +\r\n    '\\u0124\\x03\\x02\\x02\\x02\\u04B6\\u04BA\\x05\\u0127\\x94\\x02\\u04B7\\u04BA\\x05\\u0129' +\r\n    '\\x95\\x02\\u04B8\\u04BA\\x05\\u012B\\x96\\x02\\u04B9\\u04B6\\x03\\x02\\x02\\x02\\u04B9' +\r\n    '\\u04B7\\x03\\x02\\x02\\x02\\u04B9\\u04B8\\x03\\x02\\x02\\x02\\u04BA\\u0126\\x03\\x02' +\r\n    '\\x02\\x02\\u04BB\\u04BC\\x07^\\x02\\x02\\u04BC\\u04D2\\x07)\\x02\\x02\\u04BD\\u04BE' +\r\n    '\\x07^\\x02\\x02\\u04BE\\u04D2\\x07$\\x02\\x02\\u04BF\\u04C0\\x07^\\x02\\x02\\u04C0' +\r\n    '\\u04D2\\x07A\\x02\\x02\\u04C1\\u04C2\\x07^\\x02\\x02\\u04C2\\u04D2\\x07^\\x02\\x02' +\r\n    '\\u04C3\\u04C4\\x07^\\x02\\x02\\u04C4\\u04D2\\x07c\\x02\\x02\\u04C5\\u04C6\\x07^\\x02' +\r\n    '\\x02\\u04C6\\u04D2\\x07d\\x02\\x02\\u04C7\\u04C8\\x07^\\x02\\x02\\u04C8\\u04D2\\x07' +\r\n    'h\\x02\\x02\\u04C9\\u04CA\\x07^\\x02\\x02\\u04CA\\u04D2\\x07p\\x02\\x02\\u04CB\\u04CC' +\r\n    '\\x07^\\x02\\x02\\u04CC\\u04D2\\x07t\\x02\\x02\\u04CD\\u04CE\\x07^\\x02\\x02\\u04CE' +\r\n    '\\u04D2\\x07v\\x02\\x02\\u04CF\\u04D0\\x07^\\x02\\x02\\u04D0\\u04D2\\x07x\\x02\\x02' +\r\n    '\\u04D1\\u04BB\\x03\\x02\\x02\\x02\\u04D1\\u04BD\\x03\\x02\\x02\\x02\\u04D1\\u04BF\\x03' +\r\n    '\\x02\\x02\\x02\\u04D1\\u04C1\\x03\\x02\\x02\\x02\\u04D1\\u04C3\\x03\\x02\\x02\\x02\\u04D1' +\r\n    '\\u04C5\\x03\\x02\\x02\\x02\\u04D1\\u04C7\\x03\\x02\\x02\\x02\\u04D1\\u04C9\\x03\\x02' +\r\n    '\\x02\\x02\\u04D1\\u04CB\\x03\\x02\\x02\\x02\\u04D1\\u04CD\\x03\\x02\\x02\\x02\\u04D1' +\r\n    '\\u04CF\\x03\\x02\\x02\\x02\\u04D2\\u0128\\x03\\x02\\x02\\x02\\u04D3\\u04D4\\x07^\\x02' +\r\n    '\\x02\\u04D4\\u04DF\\x05\\u0113\\x8A\\x02\\u04D5\\u04D6\\x07^\\x02\\x02\\u04D6\\u04D7' +\r\n    '\\x05\\u0113\\x8A\\x02\\u04D7\\u04D8\\x05\\u0113\\x8A\\x02\\u04D8\\u04DF\\x03\\x02\\x02' +\r\n    '\\x02\\u04D9\\u04DA\\x07^\\x02\\x02\\u04DA\\u04DB\\x05\\u0113\\x8A\\x02\\u04DB\\u04DC' +\r\n    '\\x05\\u0113\\x8A\\x02\\u04DC\\u04DD\\x05\\u0113\\x8A\\x02\\u04DD\\u04DF\\x03\\x02\\x02' +\r\n    '\\x02\\u04DE\\u04D3\\x03\\x02\\x02\\x02\\u04DE\\u04D5\\x03\\x02\\x02\\x02\\u04DE\\u04D9' +\r\n    '\\x03\\x02\\x02\\x02\\u04DF\\u012A\\x03\\x02\\x02\\x02\\u04E0\\u04E1\\x07^\\x02\\x02' +\r\n    '\\u04E1\\u04E2\\x07z\\x02\\x02\\u04E2\\u04E4\\x03\\x02\\x02\\x02\\u04E3\\u04E5\\x05' +\r\n    '\\u0115\\x8B\\x02\\u04E4\\u04E3\\x03\\x02\\x02\\x02\\u04E5\\u04E6\\x03\\x02\\x02\\x02' +\r\n    '\\u04E6\\u04E4\\x03\\x02\\x02\\x02\\u04E6\\u04E7\\x03\\x02\\x02\\x02\\u04E7\\u012C\\x03' +\r\n    '\\x02\\x02\\x02\\u04E8\\u04EA\\x05\\u012F\\x98\\x02\\u04E9\\u04EB\\x05\\u0131\\x99\\x02' +\r\n    '\\u04EA\\u04E9\\x03\\x02\\x02\\x02\\u04EA\\u04EB\\x03\\x02\\x02\\x02\\u04EB\\u04ED\\x03' +\r\n    '\\x02\\x02\\x02\\u04EC\\u04EE\\x05\\u0137\\x9C\\x02\\u04ED\\u04EC\\x03\\x02\\x02\\x02' +\r\n    '\\u04ED\\u04EE\\x03\\x02\\x02\\x02\\u04EE\\u04F5\\x03\\x02\\x02\\x02\\u04EF\\u04F0\\x05' +\r\n    '\\u0135\\x9B\\x02\\u04F0\\u04F2\\x05\\u0131\\x99\\x02\\u04F1\\u04F3\\x05\\u0137\\x9C' +\r\n    '\\x02\\u04F2\\u04F1\\x03\\x02\\x02\\x02\\u04F2\\u04F3\\x03\\x02\\x02\\x02\\u04F3\\u04F5' +\r\n    '\\x03\\x02\\x02\\x02\\u04F4\\u04E8\\x03\\x02\\x02\\x02\\u04F4\\u04EF\\x03\\x02\\x02\\x02' +\r\n    '\\u04F5\\u012E\\x03\\x02\\x02\\x02\\u04F6\\u04F8\\x05\\u0135\\x9B\\x02\\u04F7\\u04F6' +\r\n    '\\x03\\x02\\x02\\x02\\u04F7\\u04F8\\x03\\x02\\x02\\x02\\u04F8\\u04F9\\x03\\x02\\x02\\x02' +\r\n    '\\u04F9\\u04FA\\x070\\x02\\x02\\u04FA\\u04FF\\x05\\u0135\\x9B\\x02\\u04FB\\u04FC\\x05' +\r\n    '\\u0135\\x9B\\x02\\u04FC\\u04FD\\x070\\x02\\x02\\u04FD\\u04FF\\x03\\x02\\x02\\x02\\u04FE' +\r\n    '\\u04F7\\x03\\x02\\x02\\x02\\u04FE\\u04FB\\x03\\x02\\x02\\x02\\u04FF\\u0130\\x03\\x02' +\r\n    '\\x02\\x02\\u0500\\u0502\\x07g\\x02\\x02\\u0501\\u0503\\x05\\u0133\\x9A\\x02\\u0502' +\r\n    '\\u0501\\x03\\x02\\x02\\x02\\u0502\\u0503\\x03\\x02\\x02\\x02\\u0503\\u0504\\x03\\x02' +\r\n    '\\x02\\x02\\u0504\\u050B\\x05\\u0135\\x9B\\x02\\u0505\\u0507\\x07G\\x02\\x02\\u0506' +\r\n    '\\u0508\\x05\\u0133\\x9A\\x02\\u0507\\u0506\\x03\\x02\\x02\\x02\\u0507\\u0508\\x03\\x02' +\r\n    '\\x02\\x02\\u0508\\u0509\\x03\\x02\\x02\\x02\\u0509\\u050B\\x05\\u0135\\x9B\\x02\\u050A' +\r\n    '\\u0500\\x03\\x02\\x02\\x02\\u050A\\u0505\\x03\\x02\\x02\\x02\\u050B\\u0132\\x03\\x02' +\r\n    '\\x02\\x02\\u050C\\u050D\\t\\f\\x02\\x02\\u050D\\u0134\\x03\\x02\\x02\\x02\\u050E\\u0515' +\r\n    '\\x05\\u0105\\x83\\x02\\u050F\\u0511\\x07)\\x02\\x02\\u0510\\u050F\\x03\\x02\\x02\\x02' +\r\n    '\\u0510\\u0511\\x03\\x02\\x02\\x02\\u0511\\u0512\\x03\\x02\\x02\\x02\\u0512\\u0514\\x05' +\r\n    '\\u0105\\x83\\x02\\u0513\\u0510\\x03\\x02\\x02\\x02\\u0514\\u0517\\x03\\x02\\x02\\x02' +\r\n    '\\u0515\\u0513\\x03\\x02\\x02\\x02\\u0515\\u0516\\x03\\x02\\x02\\x02\\u0516\\u0136\\x03' +\r\n    '\\x02\\x02\\x02\\u0517\\u0515\\x03\\x02\\x02\\x02\\u0518\\u0519\\t\\r\\x02\\x02\\u0519' +\r\n    '\\u0138\\x03\\x02\\x02\\x02\\u051A\\u051C\\x05\\u013B\\x9E\\x02\\u051B\\u051A\\x03\\x02' +\r\n    '\\x02\\x02\\u051B\\u051C\\x03\\x02\\x02\\x02\\u051C\\u051D\\x03\\x02\\x02\\x02\\u051D' +\r\n    '\\u0521\\x07$\\x02\\x02\\u051E\\u0520\\x05\\u013D\\x9F\\x02\\u051F\\u051E\\x03\\x02' +\r\n    '\\x02\\x02\\u0520\\u0523\\x03\\x02\\x02\\x02\\u0521\\u051F\\x03\\x02\\x02\\x02\\u0521' +\r\n    '\\u0522\\x03\\x02\\x02\\x02\\u0522\\u0524\\x03\\x02\\x02\\x02\\u0523\\u0521\\x03\\x02' +\r\n    '\\x02\\x02\\u0524\\u052B\\x07$\\x02\\x02\\u0525\\u0527\\x05\\u013B\\x9E\\x02\\u0526' +\r\n    '\\u0525\\x03\\x02\\x02\\x02\\u0526\\u0527\\x03\\x02\\x02\\x02\\u0527\\u0528\\x03\\x02' +\r\n    '\\x02\\x02\\u0528\\u0529\\x07T\\x02\\x02\\u0529\\u052B\\x05\\u013F\\xA0\\x02\\u052A' +\r\n    '\\u051B\\x03\\x02\\x02\\x02\\u052A\\u0526\\x03\\x02\\x02\\x02\\u052B\\u013A\\x03\\x02' +\r\n    '\\x02\\x02\\u052C\\u052D\\x07w\\x02\\x02\\u052D\\u0530\\x07:\\x02\\x02\\u052E\\u0530' +\r\n    '\\t\\x0E\\x02\\x02\\u052F\\u052C\\x03\\x02\\x02\\x02\\u052F\\u052E\\x03\\x02\\x02\\x02' +\r\n    '\\u0530\\u013C\\x03\\x02\\x02\\x02\\u0531\\u0535\\n\\x0F\\x02\\x02\\u0532\\u0535\\x05' +\r\n    '\\u0125\\x93\\x02\\u0533\\u0535\\x05\\xFD\\x7F\\x02\\u0534\\u0531\\x03\\x02\\x02\\x02' +\r\n    '\\u0534\\u0532\\x03\\x02\\x02\\x02\\u0534\\u0533\\x03\\x02\\x02\\x02\\u0535\\u013E\\x03' +\r\n    '\\x02\\x02\\x02\\u0536\\u053A\\x07$\\x02\\x02\\u0537\\u0539\\v\\x02\\x02\\x02\\u0538' +\r\n    '\\u0537\\x03\\x02\\x02\\x02\\u0539\\u053C\\x03\\x02\\x02\\x02\\u053A\\u053B\\x03\\x02' +\r\n    '\\x02\\x02\\u053A\\u0538\\x03\\x02\\x02\\x02\\u053B\\u053D\\x03\\x02\\x02\\x02\\u053C' +\r\n    '\\u053A\\x03\\x02\\x02\\x02\\u053D\\u0541\\x07*\\x02\\x02\\u053E\\u0540\\v\\x02\\x02' +\r\n    '\\x02\\u053F\\u053E\\x03\\x02\\x02\\x02\\u0540\\u0543\\x03\\x02\\x02\\x02\\u0541\\u0542' +\r\n    '\\x03\\x02\\x02\\x02\\u0541\\u053F\\x03\\x02\\x02\\x02\\u0542\\u0544\\x03\\x02\\x02\\x02' +\r\n    '\\u0543\\u0541\\x03\\x02\\x02\\x02\\u0544\\u0548\\x07+\\x02\\x02\\u0545\\u0547\\v\\x02' +\r\n    '\\x02\\x02\\u0546\\u0545\\x03\\x02\\x02\\x02\\u0547\\u054A\\x03\\x02\\x02\\x02\\u0548' +\r\n    '\\u0549\\x03\\x02\\x02\\x02\\u0548\\u0546\\x03\\x02\\x02\\x02\\u0549\\u054B\\x03\\x02' +\r\n    '\\x02\\x02\\u054A\\u0548\\x03\\x02\\x02\\x02\\u054B\\u054C\\x07$\\x02\\x02\\u054C\\u0140' +\r\n    '\\x03\\x02\\x02\\x02\\u054D\\u0550\\x05=\\x1F\\x02\\u054E\\u0550\\x05\\x83B\\x02\\u054F' +\r\n    '\\u054D\\x03\\x02\\x02\\x02\\u054F\\u054E\\x03\\x02\\x02\\x02\\u0550\\u0142\\x03\\x02' +\r\n    '\\x02\\x02\\u0551\\u0552\\x05\\u0109\\x85\\x02\\u0552\\u0553\\x05\\u014B\\xA6\\x02\\u0553' +\r\n    '\\u055E\\x03\\x02\\x02\\x02\\u0554\\u0555\\x05\\u010B\\x86\\x02\\u0555\\u0556\\x05\\u014B' +\r\n    '\\xA6\\x02\\u0556\\u055E\\x03\\x02\\x02\\x02\\u0557\\u0558\\x05\\u010D\\x87\\x02\\u0558' +\r\n    '\\u0559\\x05\\u014B\\xA6\\x02\\u0559\\u055E\\x03\\x02\\x02\\x02\\u055A\\u055B\\x05\\u010F' +\r\n    '\\x88\\x02\\u055B\\u055C\\x05\\u014B\\xA6\\x02\\u055C\\u055E\\x03\\x02\\x02\\x02\\u055D' +\r\n    '\\u0551\\x03\\x02\\x02\\x02\\u055D\\u0554\\x03\\x02\\x02\\x02\\u055D\\u0557\\x03\\x02' +\r\n    '\\x02\\x02\\u055D\\u055A\\x03\\x02\\x02\\x02\\u055E\\u0144\\x03\\x02\\x02\\x02\\u055F' +\r\n    '\\u0561\\x05\\u012F\\x98\\x02\\u0560\\u0562\\x05\\u0131\\x99\\x02\\u0561\\u0560\\x03' +\r\n    '\\x02\\x02\\x02\\u0561\\u0562\\x03\\x02\\x02\\x02\\u0562\\u0563\\x03\\x02\\x02\\x02\\u0563' +\r\n    '\\u0564\\x05\\u014B\\xA6\\x02\\u0564\\u056A\\x03\\x02\\x02\\x02\\u0565\\u0566\\x05\\u0135' +\r\n    '\\x9B\\x02\\u0566\\u0567\\x05\\u0131\\x99\\x02\\u0567\\u0568\\x05\\u014B\\xA6\\x02\\u0568' +\r\n    '\\u056A\\x03\\x02\\x02\\x02\\u0569\\u055F\\x03\\x02\\x02\\x02\\u0569\\u0565\\x03\\x02' +\r\n    '\\x02\\x02\\u056A\\u0146\\x03\\x02\\x02\\x02\\u056B\\u056C\\x05\\u0139\\x9D\\x02\\u056C' +\r\n    '\\u056D\\x05\\u014B\\xA6\\x02\\u056D\\u0148\\x03\\x02\\x02\\x02\\u056E\\u056F\\x05\\u0121' +\r\n    '\\x91\\x02\\u056F\\u0570\\x05\\u014B\\xA6\\x02\\u0570\\u014A\\x03\\x02\\x02\\x02\\u0571' +\r\n    '\\u0572\\x05\\xFF\\x80\\x02\\u0572\\u014C\\x03\\x02\\x02\\x02\\u0573\\u0575\\t\\x10\\x02' +\r\n    '\\x02\\u0574\\u0573\\x03\\x02\\x02\\x02\\u0575\\u0576\\x03\\x02\\x02\\x02\\u0576\\u0574' +\r\n    '\\x03\\x02\\x02\\x02\\u0576\\u0577\\x03\\x02\\x02\\x02\\u0577\\u0578\\x03\\x02\\x02\\x02' +\r\n    '\\u0578\\u0579\\b\\xA7\\x02\\x02\\u0579\\u014E\\x03\\x02\\x02\\x02\\u057A\\u057C\\x07' +\r\n    '\\x0F\\x02\\x02\\u057B\\u057D\\x07\\f\\x02\\x02\\u057C\\u057B\\x03\\x02\\x02\\x02\\u057C' +\r\n    '\\u057D\\x03\\x02\\x02\\x02\\u057D\\u0580\\x03\\x02\\x02\\x02\\u057E\\u0580\\x07\\f\\x02' +\r\n    '\\x02\\u057F\\u057A\\x03\\x02\\x02\\x02\\u057F\\u057E\\x03\\x02\\x02\\x02\\u0580\\u0581' +\r\n    '\\x03\\x02\\x02\\x02\\u0581\\u0582\\b\\xA8\\x02\\x02\\u0582\\u0150\\x03\\x02\\x02\\x02' +\r\n    '\\u0583\\u0584\\x071\\x02\\x02\\u0584\\u0585\\x07,\\x02\\x02\\u0585\\u0589\\x03\\x02' +\r\n    '\\x02\\x02\\u0586\\u0588\\v\\x02\\x02\\x02\\u0587\\u0586\\x03\\x02\\x02\\x02\\u0588\\u058B' +\r\n    '\\x03\\x02\\x02\\x02\\u0589\\u058A\\x03\\x02\\x02\\x02\\u0589\\u0587\\x03\\x02\\x02\\x02' +\r\n    '\\u058A\\u058C\\x03\\x02\\x02\\x02\\u058B\\u0589\\x03\\x02\\x02\\x02\\u058C\\u058D\\x07' +\r\n    ',\\x02\\x02\\u058D\\u058E\\x071\\x02\\x02\\u058E\\u058F\\x03\\x02\\x02\\x02\\u058F\\u0590' +\r\n    '\\b\\xA9\\x02\\x02\\u0590\\u0152\\x03\\x02\\x02\\x02\\u0591\\u0592\\x071\\x02\\x02\\u0592' +\r\n    '\\u0593\\x071\\x02\\x02\\u0593\\u0597\\x03\\x02\\x02\\x02\\u0594\\u0596\\n\\x02\\x02' +\r\n    '\\x02\\u0595\\u0594\\x03\\x02\\x02\\x02\\u0596\\u0599\\x03\\x02\\x02\\x02\\u0597\\u0595' +\r\n    '\\x03\\x02\\x02\\x02\\u0597\\u0598\\x03\\x02\\x02\\x02\\u0598\\u059A\\x03\\x02\\x02\\x02' +\r\n    '\\u0599\\u0597\\x03\\x02\\x02\\x02\\u059A\\u059B\\b\\xAA\\x02\\x02\\u059B\\u0154\\x03' +\r\n    '\\x02\\x02\\x02D\\x02\\u0159\\u0410\\u0415\\u0417\\u041C\\u0424\\u0428\\u042C\\u0430' +\r\n    '\\u0432\\u0436\\u043B\\u0440\\u0445\\u044C\\u0450\\u0455\\u045C\\u0460\\u0465\\u0472' +\r\n    '\\u0476\\u047A\\u047E\\u0480\\u048A\\u0490\\u0499\\u04A2\\u04AB\\u04AF\\u04B4\\u04B9' +\r\n    '\\u04D1\\u04DE\\u04E6\\u04EA\\u04ED\\u04F2\\u04F4\\u04F7\\u04FE\\u0502\\u0507\\u050A' +\r\n    '\\u0510\\u0515\\u051B\\u0521\\u0526\\u052A\\u052F\\u0534\\u053A\\u0541\\u0548\\u054F' +\r\n    '\\u055D\\u0561\\u0569\\u0576\\u057C\\u057F\\u0589\\u0597\\x03\\b\\x02\\x02';\r\nCPP14Lexer._serializedATN = Utils.join([\r\n    CPP14Lexer._serializedATNSegment0,\r\n    CPP14Lexer._serializedATNSegment1,\r\n    CPP14Lexer._serializedATNSegment2,\r\n], '');\r\n//# sourceMappingURL=CPP14Lexer.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Lexer.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Mapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Mapper.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CPP14Mapper = void 0;\r\n// tslint:disable\r\nconst antlr4ts_1 = __webpack_require__(/*! antlr4ts */ \"./node_modules/antlr4ts/index.js\");\r\nconst TerminalNode_1 = __webpack_require__(/*! antlr4ts/tree/TerminalNode */ \"./node_modules/antlr4ts/tree/TerminalNode.js\");\r\nconst CPP14Lexer_1 = __webpack_require__(/*! ./CPP14Lexer */ \"./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Lexer.js\");\r\nconst CPP14Parser_1 = __webpack_require__(/*! ./CPP14Parser */ \"./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Parser.js\");\r\nconst UniParam_1 = __webpack_require__(/*! ../../node/UniParam */ \"./node_modules/unicoen.ts/dist/node/UniParam.js\");\r\nconst UniEnhancedFor_1 = __webpack_require__(/*! ../../node/UniEnhancedFor */ \"./node_modules/unicoen.ts/dist/node/UniEnhancedFor.js\");\r\nconst UniExpr_1 = __webpack_require__(/*! ../../node/UniExpr */ \"./node_modules/unicoen.ts/dist/node/UniExpr.js\");\r\nconst UniArray_1 = __webpack_require__(/*! ../../node/UniArray */ \"./node_modules/unicoen.ts/dist/node/UniArray.js\");\r\nconst UniBinOp_1 = __webpack_require__(/*! ../../node/UniBinOp */ \"./node_modules/unicoen.ts/dist/node/UniBinOp.js\");\r\nconst UniBlock_1 = __webpack_require__(/*! ../../node/UniBlock */ \"./node_modules/unicoen.ts/dist/node/UniBlock.js\");\r\nconst UniBoolLiteral_1 = __webpack_require__(/*! ../../node/UniBoolLiteral */ \"./node_modules/unicoen.ts/dist/node/UniBoolLiteral.js\");\r\nconst UniBreak_1 = __webpack_require__(/*! ../../node/UniBreak */ \"./node_modules/unicoen.ts/dist/node/UniBreak.js\");\r\nconst UniCharacterLiteral_1 = __webpack_require__(/*! ../../node/UniCharacterLiteral */ \"./node_modules/unicoen.ts/dist/node/UniCharacterLiteral.js\");\r\nconst UniCast_1 = __webpack_require__(/*! ../../node/UniCast */ \"./node_modules/unicoen.ts/dist/node/UniCast.js\");\r\nconst UniContinue_1 = __webpack_require__(/*! ../../node/UniContinue */ \"./node_modules/unicoen.ts/dist/node/UniContinue.js\");\r\nconst UniClassDec_1 = __webpack_require__(/*! ../../node/UniClassDec */ \"./node_modules/unicoen.ts/dist/node/UniClassDec.js\");\r\nconst UniDoubleLiteral_1 = __webpack_require__(/*! ../../node/UniDoubleLiteral */ \"./node_modules/unicoen.ts/dist/node/UniDoubleLiteral.js\");\r\nconst UniDoWhile_1 = __webpack_require__(/*! ../../node/UniDoWhile */ \"./node_modules/unicoen.ts/dist/node/UniDoWhile.js\");\r\nconst UniEmptyStatement_1 = __webpack_require__(/*! ../../node/UniEmptyStatement */ \"./node_modules/unicoen.ts/dist/node/UniEmptyStatement.js\");\r\nconst UniFunctionDec_1 = __webpack_require__(/*! ../../node/UniFunctionDec */ \"./node_modules/unicoen.ts/dist/node/UniFunctionDec.js\");\r\nconst UniFor_1 = __webpack_require__(/*! ../../node/UniFor */ \"./node_modules/unicoen.ts/dist/node/UniFor.js\");\r\nconst UniIdent_1 = __webpack_require__(/*! ../../node/UniIdent */ \"./node_modules/unicoen.ts/dist/node/UniIdent.js\");\r\nconst UniIf_1 = __webpack_require__(/*! ../../node/UniIf */ \"./node_modules/unicoen.ts/dist/node/UniIf.js\");\r\nconst UniIntLiteral_1 = __webpack_require__(/*! ../../node/UniIntLiteral */ \"./node_modules/unicoen.ts/dist/node/UniIntLiteral.js\");\r\nconst UniMethodCall_1 = __webpack_require__(/*! ../../node/UniMethodCall */ \"./node_modules/unicoen.ts/dist/node/UniMethodCall.js\");\r\nconst UniWhile_1 = __webpack_require__(/*! ../../node/UniWhile */ \"./node_modules/unicoen.ts/dist/node/UniWhile.js\");\r\nconst UniUnaryOp_1 = __webpack_require__(/*! ../../node/UniUnaryOp */ \"./node_modules/unicoen.ts/dist/node/UniUnaryOp.js\");\r\nconst UniTernaryOp_1 = __webpack_require__(/*! ../../node/UniTernaryOp */ \"./node_modules/unicoen.ts/dist/node/UniTernaryOp.js\");\r\nconst UniStatement_1 = __webpack_require__(/*! ../../node/UniStatement */ \"./node_modules/unicoen.ts/dist/node/UniStatement.js\");\r\nconst UniStringLiteral_1 = __webpack_require__(/*! ../../node/UniStringLiteral */ \"./node_modules/unicoen.ts/dist/node/UniStringLiteral.js\");\r\nconst UniReturn_1 = __webpack_require__(/*! ../../node/UniReturn */ \"./node_modules/unicoen.ts/dist/node/UniReturn.js\");\r\nconst UniVariableDec_1 = __webpack_require__(/*! ../../node/UniVariableDec */ \"./node_modules/unicoen.ts/dist/node/UniVariableDec.js\");\r\nconst UniVariableDef_1 = __webpack_require__(/*! ../../node/UniVariableDef */ \"./node_modules/unicoen.ts/dist/node/UniVariableDef.js\");\r\nconst UniSwitchUnit_1 = __webpack_require__(/*! ../../node/UniSwitchUnit */ \"./node_modules/unicoen.ts/dist/node/UniSwitchUnit.js\");\r\nconst UniSwitch_1 = __webpack_require__(/*! ../../node/UniSwitch */ \"./node_modules/unicoen.ts/dist/node/UniSwitch.js\");\r\nconst SyntaxErrorListener_1 = __webpack_require__(/*! ../mapper/SyntaxErrorListener */ \"./node_modules/unicoen.ts/dist/interpreter/mapper/SyntaxErrorListener.js\");\r\nconst Mapper_1 = __webpack_require__(/*! ../mapper/Mapper */ \"./node_modules/unicoen.ts/dist/interpreter/mapper/Mapper.js\");\r\n__webpack_require__(/*! ../../node_helper/Extension */ \"./node_modules/unicoen.ts/dist/node_helper/Extension.js\");\r\nclass CPP14Mapper extends Mapper_1.Mapper {\r\n    preProcess(text) {\r\n        return text;\r\n    }\r\n    parseToANTLRTree(code) {\r\n        const preProcessedCode = this.preProcess(code);\r\n        const chars = new antlr4ts_1.ANTLRInputStream(preProcessedCode);\r\n        const lexer = new CPP14Lexer_1.CPP14Lexer(chars);\r\n        const tokens = new antlr4ts_1.CommonTokenStream(lexer);\r\n        const parser = new CPP14Parser_1.CPP14Parser(tokens);\r\n        parser.addErrorListener(new SyntaxErrorListener_1.SyntaxErrorListener());\r\n        const tree = parser.translationunit();\r\n        this.parser = parser;\r\n        return tree;\r\n    }\r\n    visitTranslationunit(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const body = [];\r\n        map.set('body', body);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 476:\r\n                        {\r\n                            body.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBlock_1.UniBlock);\r\n        return node;\r\n    }\r\n    visitPrimaryexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 479:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 482:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 485:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);\r\n        return node;\r\n    }\r\n    visitIdentexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 493:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 494:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIdent_1.UniIdent);\r\n        return node;\r\n    }\r\n    visitIdexpressionlapper(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 612:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIdent_1.UniIdent);\r\n        return node;\r\n    }\r\n    visitFunctioncallexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const args = [];\r\n        map.set('args', args);\r\n        const methodName = [];\r\n        map.set('methodName', methodName);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 614:\r\n                        {\r\n                            methodName.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 616:\r\n                        {\r\n                            args.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniMethodCall_1.UniMethodCall);\r\n        return node;\r\n    }\r\n    visitPostfixexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 622:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 623:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 36:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 690:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 703:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 709:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 712:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 715:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.LeftBracket:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.RightBracket:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Dot:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Arrow:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.PlusPlus:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.MinusMinus:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitExpressionlist(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const items = [];\r\n        map.set('items', items);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 725:\r\n                        {\r\n                            items.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniArray_1.UniArray);\r\n        return node;\r\n    }\r\n    visitBinaryexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 751:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 752:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 753:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 754:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitUnaryexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const expr = [];\r\n        map.set('expr', expr);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 758:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 760:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 761:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 762:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 765:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 768:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 773:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 783:\r\n                        {\r\n                            expr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 786:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.PlusPlus:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.MinusMinus:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Sizeof:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Identifier:\r\n                        {\r\n                            expr.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Alignof:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniUnaryOp_1.UniUnaryOp);\r\n        return node;\r\n    }\r\n    visitTypeidlapper(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 789:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIdent_1.UniIdent);\r\n        return node;\r\n    }\r\n    visitCastexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const type = [];\r\n        map.set('type', type);\r\n        const value = [];\r\n        map.set('value', value);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 880:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 882:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 884:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.RightParen:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniCast_1.UniCast);\r\n        return node;\r\n    }\r\n    visitPmexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 889:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 68:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 893:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 896:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.DotStar:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.ArrowStar:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitMultiplicativeexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 903:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 70:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 907:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 910:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 913:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Star:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Div:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Mod:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitAdditiveexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 920:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 72:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 924:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 927:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Plus:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Minus:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitShiftexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 934:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 74:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 938:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 940:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 941:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.LeftShift:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitRelationalexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 949:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 76:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 953:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 956:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 959:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 962:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Less:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Greater:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.LessEqual:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.GreaterEqual:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitEqualityexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 969:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 78:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 973:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 976:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Equal:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.NotEqual:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitAndexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 983:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 80:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 987:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.And:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitExclusiveorexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 994:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 82:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 998:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Caret:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitInclusiveorexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1005:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 84:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1009:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Or:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitLogicalandexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1016:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 86:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1020:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.AndAnd:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitLogicalorexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1027:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 88:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1031:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.OrOr:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitConditionalexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const trueExpr = [];\r\n        map.set('trueExpr', trueExpr);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const falseExpr = [];\r\n        map.set('falseExpr', falseExpr);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1037:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1038:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1040:\r\n                        {\r\n                            trueExpr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1042:\r\n                        {\r\n                            falseExpr.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniTernaryOp_1.UniTernaryOp);\r\n        return node;\r\n    }\r\n    visitAssignmentexpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1046:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1047:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1048:\r\n                        {\r\n                            operator.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1049:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitExpression(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const left = [];\r\n        map.set('left', left);\r\n        const right = [];\r\n        map.set('right', right);\r\n        const operator = [];\r\n        map.set('operator', operator);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1068:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 96:\r\n                        {\r\n                            left.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1072:\r\n                        {\r\n                            right.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Comma:\r\n                        {\r\n                            operator.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniBinOp_1.UniBinOp);\r\n        return node;\r\n    }\r\n    visitSwitchunitstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const label = [];\r\n        map.set('label', label);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1150:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1155:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Case:\r\n                        {\r\n                            label.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Default:\r\n                        {\r\n                            label.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniSwitchUnit_1.UniSwitchUnit);\r\n        return node;\r\n    }\r\n    visitStatementWithoutLabeldstatementseq(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1157:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1158:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniExpr_1.UniExpr);\r\n        return node;\r\n    }\r\n    visitExpressionstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const endWith = [];\r\n        map.set('endWith', endWith);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1164:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Semi:\r\n                        {\r\n                            endWith.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniEmptyStatement_1.UniEmptyStatement);\r\n        return node;\r\n    }\r\n    visitCompoundstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const body = [];\r\n        map.set('body', body);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1170:\r\n                        {\r\n                            body.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBlock_1.UniBlock);\r\n        return node;\r\n    }\r\n    visitStatementseq(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1175:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1176:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniExpr_1.UniExpr);\r\n        return node;\r\n    }\r\n    visitSelectionstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const trueStatement = [];\r\n        map.set('trueStatement', trueStatement);\r\n        const falseStatement = [];\r\n        map.set('falseStatement', falseStatement);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1184:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1186:\r\n                        {\r\n                            trueStatement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1190:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1192:\r\n                        {\r\n                            trueStatement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1194:\r\n                        {\r\n                            falseStatement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniIf_1.UniIf);\r\n        return node;\r\n    }\r\n    visitSwitchstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const cases = [];\r\n        map.set('cases', cases);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1200:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1203:\r\n                        {\r\n                            cases.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniSwitch_1.UniSwitch);\r\n        return node;\r\n    }\r\n    visitSwitchunitseq(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1206:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1207:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniStatement_1.UniStatement);\r\n        return node;\r\n    }\r\n    visitWhilestatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1233:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1235:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniWhile_1.UniWhile);\r\n        return node;\r\n    }\r\n    visitDowhilestatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1238:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1241:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniDoWhile_1.UniDoWhile);\r\n        return node;\r\n    }\r\n    visitIterationstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const init = [];\r\n        map.set('init', init);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const step = [];\r\n        map.set('step', step);\r\n        const cond = [];\r\n        map.set('cond', cond);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1247:\r\n                        {\r\n                            init.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1248:\r\n                        {\r\n                            cond.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1252:\r\n                        {\r\n                            step.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1256:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniFor_1.UniFor);\r\n        return node;\r\n    }\r\n    visitEnhancedForStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const container = [];\r\n        map.set('container', container);\r\n        const statement = [];\r\n        map.set('statement', statement);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1260:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1262:\r\n                        {\r\n                            container.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1264:\r\n                        {\r\n                            statement.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniEnhancedFor_1.UniEnhancedFor);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniEnhancedFor_1.UniEnhancedFor));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniEnhancedFor_1.UniEnhancedFor();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniEnhancedFor_1.UniEnhancedFor));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitBreakStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniBreak_1.UniBreak);\r\n        return node;\r\n    }\r\n    visitContinueStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniContinue_1.UniContinue);\r\n        return node;\r\n    }\r\n    visitReturnStatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const value = [];\r\n        map.set('value', value);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1292:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1297:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniReturn_1.UniReturn);\r\n        return node;\r\n    }\r\n    visitDeclarationseq(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1307:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 148:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1310:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniExpr_1.UniExpr);\r\n        return node;\r\n    }\r\n    visitMyclassbody(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1316:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitMyclassspecifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const members = [];\r\n        map.set('members', members);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1319:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1321:\r\n                        {\r\n                            members.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniClassDec_1.UniClassDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitMyclassspecifierstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        return node;\r\n    }\r\n    visitMyclasshead(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const className = [];\r\n        map.set('className', className);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1334:\r\n                        {\r\n                            className.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        return node;\r\n    }\r\n    visitVariabledeclarationstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1386:\r\n                            {\r\n                                ret.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitVariabledeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const variables = [];\r\n        map.set('variables', variables);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1392:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1395:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1396:\r\n                        {\r\n                            variables.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1399:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1400:\r\n                        {\r\n                            variables.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitStructspecifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const members = [];\r\n        map.set('members', members);\r\n        const className = [];\r\n        map.set('className', className);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1405:\r\n                        {\r\n                            className.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1407:\r\n                        {\r\n                            members.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        return node;\r\n    }\r\n    visitVariableDeclaratorList(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 1410:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 1412:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDef_1.UniVariableDef);\r\n        return node;\r\n    }\r\n    visitVariableDeclarator(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const typeSuffix = [];\r\n        map.set('typeSuffix', typeSuffix);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const value = [];\r\n        map.set('value', value);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1418:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1424:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1436:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.LeftBracket:\r\n                        {\r\n                            typeSuffix.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.Integerliteral:\r\n                        {\r\n                            typeSuffix.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    case CPP14Parser_1.CPP14Parser.RightBracket:\r\n                        {\r\n                            typeSuffix.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniVariableDef_1.UniVariableDef);\r\n        return node;\r\n    }\r\n    visitDims(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitFunctiondeclarationstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1445:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1448:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniFunctionDec_1.UniFunctionDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitEmptydeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const endWith = [];\r\n        map.set('endWith', endWith);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Semi:\r\n                        {\r\n                            endWith.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniEmptyStatement_1.UniEmptyStatement);\r\n        return node;\r\n    }\r\n    visitSimpletypespecifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitElaboratedtypespecifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Identifier:\r\n                        {\r\n                            ret.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        return map;\r\n    }\r\n    visitInitdeclaratorlist(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 1901:\r\n                        {\r\n                            add.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 1903:\r\n                        {\r\n                            add.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n    visitDeclaratorid(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitParameterdeclarationclause(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2091:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2097:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniParam_1.UniParam);\r\n        return node;\r\n    }\r\n    visitParameterdeclarationlist(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2104:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 326:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2108:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniParam_1.UniParam);\r\n        return node;\r\n    }\r\n    visitParameterdeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const variables = [];\r\n        map.set('variables', variables);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2117:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2120:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2121:\r\n                        {\r\n                            variables.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniParam_1.UniParam);\r\n        return node;\r\n    }\r\n    visitFunctiondefinition(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const block = [];\r\n        map.set('block', block);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2127:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2130:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2134:\r\n                        {\r\n                            block.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniFunctionDec_1.UniFunctionDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitFunctionheader(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const returnType = [];\r\n        map.set('returnType', returnType);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2136:\r\n                        {\r\n                            returnType.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2139:\r\n                        {\r\n                            returnType.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2145:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniFunctionDec_1.UniFunctionDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniFunctionDec_1.UniFunctionDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitFunctiondeclarator(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const params = [];\r\n        map.set('params', params);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2147:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2149:\r\n                        {\r\n                            params.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniFunctionDec_1.UniFunctionDec);\r\n        return node;\r\n    }\r\n    visitFunctionbody(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2155:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniBlock_1.UniBlock);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniBlock_1.UniBlock));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniBlock_1.UniBlock();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniBlock_1.UniBlock));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitInitializerlist(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2181:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2183:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniExpr_1.UniExpr);\r\n        return node;\r\n    }\r\n    visitBracedinitlist(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const items = [];\r\n        map.set('items', items);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2190:\r\n                        {\r\n                            items.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniArray_1.UniArray);\r\n        return node;\r\n    }\r\n    visitMyclassname(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, String);\r\n        return node;\r\n    }\r\n    visitClassspecifier(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const members = [];\r\n        map.set('members', members);\r\n        const merge = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2204:\r\n                        {\r\n                            merge.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2205:\r\n                        {\r\n                            members.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        let node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        if (typeof node === 'object' && 'merge' in node) {\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        else {\r\n            node = new UniClassDec_1.UniClassDec();\r\n            merge.forEach((it) => {\r\n                node.merge(this.castTo(it, UniClassDec_1.UniClassDec));\r\n            });\r\n        }\r\n        return node;\r\n    }\r\n    visitClassbody(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2208:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitClasshead(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const className = [];\r\n        map.set('className', className);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2220:\r\n                        {\r\n                            className.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniClassDec_1.UniClassDec);\r\n        return node;\r\n    }\r\n    visitMemberspecification(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2245:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2246:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2249:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2251:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitMembervariabledeclarationstatement(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const ret = [];\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2265:\r\n                        {\r\n                            ret.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (!ret.isEmpty()) {\r\n            return ret;\r\n        }\r\n        const node = this.castTo(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitMembervariabledeclaration(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const variables = [];\r\n        map.set('variables', variables);\r\n        const modifiers = [];\r\n        map.set('modifiers', modifiers);\r\n        const type = [];\r\n        map.set('type', type);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2271:\r\n                        {\r\n                            modifiers.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2274:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2275:\r\n                        {\r\n                            type.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2281:\r\n                        {\r\n                            variables.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniVariableDec_1.UniVariableDec);\r\n        return node;\r\n    }\r\n    visitMemberdeclaratorlist(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const add = [];\r\n        map.set('add', add);\r\n        const n = ctx.childCount;\r\n        if (0 < n) {\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof antlr4ts_1.RuleContext) {\r\n                    switch (it.invokingState) {\r\n                        case 2285:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 370:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        case 2289:\r\n                            {\r\n                                const results = this.flatten(this.visit(it));\r\n                                if (Array.isArray(results)) {\r\n                                    for (const result of results)\r\n                                        add.push(result);\r\n                                }\r\n                                else\r\n                                    add.push(results);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    switch (it.symbol.type) {\r\n                        default:\r\n                            {\r\n                                none.push(this.visit(it));\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const node = this.castToList(map, UniVariableDef_1.UniVariableDef);\r\n        return node;\r\n    }\r\n    visitMemberdeclarator(ctx) {\r\n        const map = new Map();\r\n        const none = [];\r\n        map.set('none', none);\r\n        const typeSuffix = [];\r\n        map.set('typeSuffix', typeSuffix);\r\n        const name = [];\r\n        map.set('name', name);\r\n        const value = [];\r\n        map.set('value', value);\r\n        const n = ctx.childCount;\r\n        for (let i = 0; i < n; ++i) {\r\n            const it = ctx.getChild(i);\r\n            if (it instanceof antlr4ts_1.RuleContext) {\r\n                switch (it.invokingState) {\r\n                    case 2295:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2296:\r\n                        {\r\n                            typeSuffix.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2302:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2304:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2307:\r\n                        {\r\n                            name.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2308:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    case 2318:\r\n                        {\r\n                            value.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            else if (it instanceof TerminalNode_1.TerminalNode) {\r\n                switch (it.symbol.type) {\r\n                    case CPP14Parser_1.CPP14Parser.Identifier:\r\n                        {\r\n                            name.push(this.flatten(this.visit(it)));\r\n                        }\r\n                        break;\r\n                    default:\r\n                        {\r\n                            none.push(this.visit(it));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        const node = this.castTo(map, UniVariableDef_1.UniVariableDef);\r\n        return node;\r\n    }\r\n    visitIntegerliteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Integerliteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniIntLiteral_1.UniIntLiteral(Number(text));\r\n    }\r\n    visitCharacterliteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Characterliteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniCharacterLiteral_1.UniCharacterLiteral(text.substring(1, text.length - 1));\r\n    }\r\n    visitFloatingliteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Floatingliteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniDoubleLiteral_1.UniDoubleLiteral(Number(text));\r\n    }\r\n    visitStringliteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Stringliteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniStringLiteral_1.UniStringLiteral(text.substring(1, text.length - 1));\r\n    }\r\n    visitBooleanliteral(ctx) {\r\n        const findFirst = (ctx) => {\r\n            const n = ctx.childCount;\r\n            for (let i = 0; i < n; ++i) {\r\n                const it = ctx.getChild(i);\r\n                if (it instanceof TerminalNode_1.TerminalNode) {\r\n                    if (it.symbol.type == CPP14Parser_1.CPP14Parser.Booleanliteral) {\r\n                        return it;\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        };\r\n        const text = this.visit(findFirst(ctx));\r\n        return new UniBoolLiteral_1.UniBoolLiteral(Boolean(text));\r\n    }\r\n}\r\nexports.CPP14Mapper = CPP14Mapper;\r\n//# sourceMappingURL=CPP14Mapper.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Mapper.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Parser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Parser.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ExpressionContext = exports.AssignmentoperatorContext = exports.AssignmentexpressionContext = exports.ConditionalexpressionContext = exports.LogicalorexpressionContext = exports.LogicalandexpressionContext = exports.InclusiveorexpressionContext = exports.ExclusiveorexpressionContext = exports.AndexpressionContext = exports.EqualityexpressionContext = exports.RelationalexpressionContext = exports.ShiftexpressionContext = exports.AdditiveexpressionContext = exports.MultiplicativeexpressionContext = exports.PmexpressionContext = exports.CastexpressionContext = exports.NoexceptexpressionContext = exports.DeleteexpressionContext = exports.NewinitializerContext = exports.NoptrnewdeclaratorContext = exports.NewdeclaratorContext = exports.NewtypeidContext = exports.NewplacementContext = exports.NewexpressionContext = exports.UnaryoperatorContext = exports.TypeidlapperContext = exports.UnaryexpressionContext = exports.BinaryexpressionContext = exports.PseudodestructornameContext = exports.ExpressionlistContext = exports.PostfixexpressionContext = exports.FunctioncallexpressionContext = exports.IdexpressionlapperContext = exports.LambdadeclaratorContext = exports.InitcaptureContext = exports.SimplecaptureContext = exports.CaptureContext = exports.CapturelistContext = exports.CapturedefaultContext = exports.LambdacaptureContext = exports.LambdaintroducerContext = exports.LambdaexpressionContext = exports.NestednamespecifierContext = exports.QualifiedidContext = exports.UnqualifiedidContext = exports.IdentexpressionContext = exports.IdexpressionContext = exports.PrimaryexpressionContext = exports.TranslationunitContext = exports.CPP14Parser = void 0;\r\nexports.StorageclassspecifierContext = exports.DeclspecifierseqwithouttypeContext = exports.DeclspecifierwithouttypeContext = exports.DeclspecifierseqContext = exports.DeclspecifierContext = exports.AttributedeclarationContext = exports.EmptydeclarationContext = exports.Static_assertdeclarationContext = exports.SimpledeclarationContext = exports.FunctiondeclarationstatementContext = exports.DimsContext = exports.VariableDeclaratorContext = exports.VariableDeclaratorListContext = exports.StructspecifierContext = exports.VariabledeclarationContext = exports.VariabledeclarationstatementContext = exports.AliasdeclarationContext = exports.BlockdeclarationContext = exports.BlockdeclarationwithoutsimpledeclarationContext = exports.DeclarationContext = exports.MyclassheadContext = exports.MyclassspecifierstatementContext = exports.MyclassspecifierContext = exports.MyclassbodyContext = exports.DeclarationseqContext = exports.DeclarationstatementContext = exports.ReturnStatementContext = exports.ContinueStatementContext = exports.BreakStatementContext = exports.JumpstatementContext = exports.ForrangeinitializerContext = exports.ForrangedeclarationContext = exports.ForinitstatementContext = exports.EnhancedForStatementContext = exports.IterationstatementContext = exports.DowhilestatementContext = exports.WhilestatementContext = exports.ConditionContext = exports.SwitchunitseqContext = exports.SwitchstatementContext = exports.SelectionstatementContext = exports.StatementseqContext = exports.CompoundstatementContext = exports.ExpressionstatementContext = exports.StatementWithoutLabeldstatementseqContext = exports.SwitchunitstatementContext = exports.LabeledstatementContext = exports.StatementWithoutLabeldstatementContext = exports.StatementContext = exports.ConstantexpressionContext = void 0;\r\nexports.NoptrdeclaratorContext = exports.PtrdeclaratorContext = exports.DeclaratorContext = exports.InitdeclaratorContext = exports.InitdeclaratorlistContext = exports.BalancedtokenContext = exports.BalancedtokenseqContext = exports.AttributeargumentclauseContext = exports.AttributenamespaceContext = exports.AttributescopedtokenContext = exports.AttributetokenContext = exports.AttributeContext = exports.AttributelistContext = exports.AlignmentspecifierContext = exports.AttributespecifierContext = exports.AttributespecifierseqContext = exports.LinkagespecificationContext = exports.AsmdefinitionContext = exports.UsingdirectiveContext = exports.UsingdeclarationContext = exports.QualifiednamespacespecifierContext = exports.NamespacealiasdefinitionContext = exports.NamespacealiasContext = exports.NamespacebodyContext = exports.UnnamednamespacedefinitionContext = exports.ExtensionnamespacedefinitionContext = exports.OriginalnamespacedefinitionContext = exports.NamednamespacedefinitionContext = exports.NamespacedefinitionContext = exports.OriginalnamespacenameContext = exports.NamespacenameContext = exports.EnumeratorContext = exports.EnumeratordefinitionContext = exports.EnumeratorlistContext = exports.EnumbaseContext = exports.EnumkeyContext = exports.OpaqueenumdeclarationContext = exports.EnumheadContext = exports.EnumspecifierContext = exports.EnumnameContext = exports.ElaboratedtypespecifierContext = exports.DecltypespecifierContext = exports.TypenameContext = exports.SimpletypespecifierContext = exports.TrailingtypespecifierseqContext = exports.TypespecifierseqContext = exports.TrailingtypespecifierContext = exports.TypespecifierContext = exports.TypedefnameContext = exports.FunctionspecifierContext = void 0;\r\nexports.ConversiondeclaratorContext = exports.ConversiontypeidContext = exports.ConversionfunctionidContext = exports.AccessspecifierContext = exports.BasetypespecifierContext = exports.ClassordecltypeContext = exports.BasespecifierContext = exports.BasespecifierlistContext = exports.BaseclauseContext = exports.PurespecifierContext = exports.VirtspecifierContext = exports.VirtspecifierseqContext = exports.MemberdeclaratorContext = exports.MemberdeclaratorlistContext = exports.MembervariabledeclarationContext = exports.MembervariabledeclarationstatementContext = exports.MemberdeclarationContext = exports.MemberspecificationContext = exports.ClasskeyContext = exports.ClassvirtspecifierContext = exports.ClassheadnameContext = exports.ClassheadContext = exports.ClassbodyContext = exports.ClassspecifierContext = exports.MyclassnameContext = exports.BracedinitlistContext = exports.InitializerlistContext = exports.InitializerclauseContext = exports.BraceorequalinitializerContext = exports.InitializerContext = exports.FunctionbodyContext = exports.FunctiondeclaratorContext = exports.FunctionheaderContext = exports.FunctiondefinitionContext = exports.ParameterdeclarationContext = exports.ParameterdeclarationlistContext = exports.ParameterdeclarationclauseContext = exports.NoptrabstractpackdeclaratorContext = exports.AbstractpackdeclaratorContext = exports.NoptrabstractdeclaratorContext = exports.PtrabstractdeclaratorContext = exports.AbstractdeclaratorContext = exports.TypeidContext = exports.DeclaratoridContext = exports.RefqualifierContext = exports.CvqualifierContext = exports.CvqualifierseqContext = exports.PtroperatorContext = exports.TrailingreturntypeContext = exports.ParametersandqualifiersContext = void 0;\r\nexports.UserdefinedliteralContext = exports.PointerliteralContext = exports.BooleanliteralContext = exports.StringliteralContext = exports.FloatingliteralContext = exports.CharacterliteralContext = exports.IntegerliteralContext = exports.LiteralContext = exports.OperatorContext = exports.RightShiftAssignContext = exports.RightShiftContext = exports.NoexceptspecificationContext = exports.TypeidlistContext = exports.DynamicexceptionspecificationContext = exports.ExceptionspecificationContext = exports.ThrowexpressionContext = exports.ExceptiondeclarationContext = exports.HandlerContext = exports.HandlerseqContext = exports.FunctiontryblockContext = exports.TryblockContext = exports.ExplicitspecializationContext = exports.ExplicitinstantiationContext = exports.TypenamespecifierContext = exports.TemplateargumentContext = exports.TemplateargumentlistContext = exports.TemplatenameContext = exports.TemplateidContext = exports.SimpletemplateidContext = exports.TypeparameterContext = exports.TemplateparameterContext = exports.TemplateparameterlistContext = exports.TemplatedeclarationContext = exports.LiteraloperatoridContext = exports.OperatorfunctionidContext = exports.MeminitializeridContext = exports.MeminitializerContext = exports.MeminitializerlistContext = exports.CtorinitializerContext = void 0;\r\n// Generated from C:\\develop\\UniMapperGeneratorForTS\\net.unicoen\\..\\UniMapperGenerator\\src-gen\\CPP14.g4 by ANTLR 4.6-SNAPSHOT\r\n// @ts-nocheck\r\nconst ATN_1 = __webpack_require__(/*! antlr4ts/atn/ATN */ \"./node_modules/antlr4ts/atn/ATN.js\");\r\nconst ATNDeserializer_1 = __webpack_require__(/*! antlr4ts/atn/ATNDeserializer */ \"./node_modules/antlr4ts/atn/ATNDeserializer.js\");\r\nconst FailedPredicateException_1 = __webpack_require__(/*! antlr4ts/FailedPredicateException */ \"./node_modules/antlr4ts/FailedPredicateException.js\");\r\nconst NoViableAltException_1 = __webpack_require__(/*! antlr4ts/NoViableAltException */ \"./node_modules/antlr4ts/NoViableAltException.js\");\r\nconst Parser_1 = __webpack_require__(/*! antlr4ts/Parser */ \"./node_modules/antlr4ts/Parser.js\");\r\nconst ParserRuleContext_1 = __webpack_require__(/*! antlr4ts/ParserRuleContext */ \"./node_modules/antlr4ts/ParserRuleContext.js\");\r\nconst ParserATNSimulator_1 = __webpack_require__(/*! antlr4ts/atn/ParserATNSimulator */ \"./node_modules/antlr4ts/atn/ParserATNSimulator.js\");\r\nconst RecognitionException_1 = __webpack_require__(/*! antlr4ts/RecognitionException */ \"./node_modules/antlr4ts/RecognitionException.js\");\r\nconst Token_1 = __webpack_require__(/*! antlr4ts/Token */ \"./node_modules/antlr4ts/Token.js\");\r\nconst VocabularyImpl_1 = __webpack_require__(/*! antlr4ts/VocabularyImpl */ \"./node_modules/antlr4ts/VocabularyImpl.js\");\r\nconst Utils = __webpack_require__(/*! antlr4ts/misc/Utils */ \"./node_modules/antlr4ts/misc/Utils.js\");\r\nclass CPP14Parser extends Parser_1.Parser {\r\n    constructor(input) {\r\n        super(input);\r\n        this._interp = new ParserATNSimulator_1.ParserATNSimulator(CPP14Parser._ATN, this);\r\n    }\r\n    // @Override\r\n    // @NotNull\r\n    get vocabulary() {\r\n        return CPP14Parser.VOCABULARY;\r\n    }\r\n    // tslint:enable:no-trailing-whitespace\r\n    // @Override\r\n    get grammarFileName() {\r\n        return 'CPP14.g4';\r\n    }\r\n    // @Override\r\n    get ruleNames() {\r\n        return CPP14Parser.ruleNames;\r\n    }\r\n    // @Override\r\n    get serializedATN() {\r\n        return CPP14Parser._serializedATN;\r\n    }\r\n    // @RuleVersion(0)\r\n    translationunit() {\r\n        let _localctx = new TranslationunitContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 0, CPP14Parser.RULE_translationunit);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 477;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignas) |\r\n                            (1 << CPP14Parser.Asm) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Constexpr) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Enum) |\r\n                            (1 << CPP14Parser.Explicit) |\r\n                            (1 << CPP14Parser.Extern))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Friend - 32)) |\r\n                                (1 << (CPP14Parser.Inline - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.Mutable - 32)) |\r\n                                (1 << (CPP14Parser.Namespace - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Register - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Static - 32)) |\r\n                                (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)) |\r\n                                (1 << (CPP14Parser.Template - 32)) |\r\n                                (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 67) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 67)) &\r\n                            ((1 << (CPP14Parser.Typedef - 67)) |\r\n                                (1 << (CPP14Parser.Typename - 67)) |\r\n                                (1 << (CPP14Parser.Union - 67)) |\r\n                                (1 << (CPP14Parser.Unsigned - 67)) |\r\n                                (1 << (CPP14Parser.Using - 67)) |\r\n                                (1 << (CPP14Parser.Virtual - 67)) |\r\n                                (1 << (CPP14Parser.Void - 67)) |\r\n                                (1 << (CPP14Parser.Volatile - 67)) |\r\n                                (1 << (CPP14Parser.Wchar - 67)) |\r\n                                (1 << (CPP14Parser.LeftParen - 67)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 67)) |\r\n                                (1 << (CPP14Parser.Star - 67)) |\r\n                                (1 << (CPP14Parser.And - 67)) |\r\n                                (1 << (CPP14Parser.Tilde - 67)))) !==\r\n                            0) ||\r\n                    (((_la - 111) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 111)) &\r\n                            ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                (1 << (CPP14Parser.Semi - 111)) |\r\n                                (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 476;\r\n                        this.declarationseq(0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    primaryexpression() {\r\n        let _localctx = new PrimaryexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 2, CPP14Parser.RULE_primaryexpression);\r\n        try {\r\n            this.state = 487;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Nullptr:\r\n                case CPP14Parser.Integerliteral:\r\n                case CPP14Parser.Characterliteral:\r\n                case CPP14Parser.Floatingliteral:\r\n                case CPP14Parser.Stringliteral:\r\n                case CPP14Parser.Booleanliteral:\r\n                case CPP14Parser.Userdefinedintegerliteral:\r\n                case CPP14Parser.Userdefinedfloatingliteral:\r\n                case CPP14Parser.Userdefinedstringliteral:\r\n                case CPP14Parser.Userdefinedcharacterliteral:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 479;\r\n                        this.literal();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.This:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 480;\r\n                        this.match(CPP14Parser.This);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftParen:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 481;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 482;\r\n                        this.expression(0);\r\n                        this.state = 483;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Operator:\r\n                case CPP14Parser.Tilde:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 485;\r\n                        this.identexpression();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftBracket:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 486;\r\n                        this.lambdaexpression();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    idexpression() {\r\n        let _localctx = new IdexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 4, CPP14Parser.RULE_idexpression);\r\n        try {\r\n            this.state = 491;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 489;\r\n                        this.unqualifiedid();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 490;\r\n                        this.qualifiedid();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    identexpression() {\r\n        let _localctx = new IdentexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 6, CPP14Parser.RULE_identexpression);\r\n        try {\r\n            this.state = 495;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 493;\r\n                        this.unqualifiedid();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 494;\r\n                        this.qualifiedid();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unqualifiedid() {\r\n        let _localctx = new UnqualifiedidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 8, CPP14Parser.RULE_unqualifiedid);\r\n        try {\r\n            this.state = 506;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 4, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 497;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 498;\r\n                        this.operatorfunctionid();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 499;\r\n                        this.conversionfunctionid();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 500;\r\n                        this.literaloperatorid();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 501;\r\n                        this.match(CPP14Parser.Tilde);\r\n                        this.state = 502;\r\n                        this.myclassname();\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 503;\r\n                        this.match(CPP14Parser.Tilde);\r\n                        this.state = 504;\r\n                        this.decltypespecifier();\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 505;\r\n                        this.templateid();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    qualifiedid() {\r\n        let _localctx = new QualifiedidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 10, CPP14Parser.RULE_qualifiedid);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 508;\r\n                this.nestednamespecifier(0);\r\n                this.state = 510;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Template) {\r\n                    {\r\n                        this.state = 509;\r\n                        this.match(CPP14Parser.Template);\r\n                    }\r\n                }\r\n                this.state = 512;\r\n                this.unqualifiedid();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    nestednamespecifier(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new NestednamespecifierContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 12;\r\n        this.enterRecursionRule(_localctx, 12, CPP14Parser.RULE_nestednamespecifier, _p);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 525;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 6, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 515;\r\n                            this.match(CPP14Parser.Doublecolon);\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 516;\r\n                            this.typename();\r\n                            this.state = 517;\r\n                            this.match(CPP14Parser.Doublecolon);\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        {\r\n                            this.state = 519;\r\n                            this.namespacename();\r\n                            this.state = 520;\r\n                            this.match(CPP14Parser.Doublecolon);\r\n                        }\r\n                        break;\r\n                    case 4:\r\n                        {\r\n                            this.state = 522;\r\n                            this.decltypespecifier();\r\n                            this.state = 523;\r\n                            this.match(CPP14Parser.Doublecolon);\r\n                        }\r\n                        break;\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 539;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 9, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 537;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 8, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new NestednamespecifierContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_nestednamespecifier);\r\n                                        this.state = 527;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 528;\r\n                                        this.match(CPP14Parser.Identifier);\r\n                                        this.state = 529;\r\n                                        this.match(CPP14Parser.Doublecolon);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new NestednamespecifierContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_nestednamespecifier);\r\n                                        this.state = 530;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 532;\r\n                                        this._errHandler.sync(this);\r\n                                        _la = this._input.LA(1);\r\n                                        if (_la === CPP14Parser.Template) {\r\n                                            {\r\n                                                this.state = 531;\r\n                                                this.match(CPP14Parser.Template);\r\n                                            }\r\n                                        }\r\n                                        this.state = 534;\r\n                                        this.simpletemplateid();\r\n                                        this.state = 535;\r\n                                        this.match(CPP14Parser.Doublecolon);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 541;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 9, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lambdaexpression() {\r\n        let _localctx = new LambdaexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 14, CPP14Parser.RULE_lambdaexpression);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 542;\r\n                this.lambdaintroducer();\r\n                this.state = 544;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.LeftParen) {\r\n                    {\r\n                        this.state = 543;\r\n                        this.lambdadeclarator();\r\n                    }\r\n                }\r\n                this.state = 546;\r\n                this.compoundstatement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lambdaintroducer() {\r\n        let _localctx = new LambdaintroducerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 16, CPP14Parser.RULE_lambdaintroducer);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 548;\r\n                this.match(CPP14Parser.LeftBracket);\r\n                this.state = 550;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.This ||\r\n                    _la === CPP14Parser.And ||\r\n                    _la === CPP14Parser.Assign ||\r\n                    _la === CPP14Parser.Identifier) {\r\n                    {\r\n                        this.state = 549;\r\n                        this.lambdacapture();\r\n                    }\r\n                }\r\n                this.state = 552;\r\n                this.match(CPP14Parser.RightBracket);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lambdacapture() {\r\n        let _localctx = new LambdacaptureContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 18, CPP14Parser.RULE_lambdacapture);\r\n        try {\r\n            this.state = 560;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 12, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 554;\r\n                        this.capturedefault();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 555;\r\n                        this.capturelist(0);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 556;\r\n                        this.capturedefault();\r\n                        this.state = 557;\r\n                        this.match(CPP14Parser.Comma);\r\n                        this.state = 558;\r\n                        this.capturelist(0);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    capturedefault() {\r\n        let _localctx = new CapturedefaultContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 20, CPP14Parser.RULE_capturedefault);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 562;\r\n                _la = this._input.LA(1);\r\n                if (!(_la === CPP14Parser.And || _la === CPP14Parser.Assign)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    capturelist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new CapturelistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 22;\r\n        this.enterRecursionRule(_localctx, 22, CPP14Parser.RULE_capturelist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 565;\r\n                    this.capture();\r\n                    this.state = 567;\r\n                    this._errHandler.sync(this);\r\n                    switch (this.interpreter.adaptivePredict(this._input, 13, this._ctx)) {\r\n                        case 1:\r\n                            {\r\n                                this.state = 566;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 577;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new CapturelistContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_capturelist);\r\n                                this.state = 569;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 570;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 571;\r\n                                this.capture();\r\n                                this.state = 573;\r\n                                this._errHandler.sync(this);\r\n                                switch (this.interpreter.adaptivePredict(this._input, 14, this._ctx)) {\r\n                                    case 1:\r\n                                        {\r\n                                            this.state = 572;\r\n                                            this.match(CPP14Parser.Ellipsis);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 579;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 15, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    capture() {\r\n        let _localctx = new CaptureContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 24, CPP14Parser.RULE_capture);\r\n        try {\r\n            this.state = 582;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 16, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 580;\r\n                        this.simplecapture();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 581;\r\n                        this.initcapture();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    simplecapture() {\r\n        let _localctx = new SimplecaptureContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 26, CPP14Parser.RULE_simplecapture);\r\n        try {\r\n            this.state = 588;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 584;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.And:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 585;\r\n                        this.match(CPP14Parser.And);\r\n                        this.state = 586;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.This:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 587;\r\n                        this.match(CPP14Parser.This);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    initcapture() {\r\n        let _localctx = new InitcaptureContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 28, CPP14Parser.RULE_initcapture);\r\n        try {\r\n            this.state = 595;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 590;\r\n                        this.match(CPP14Parser.Identifier);\r\n                        this.state = 591;\r\n                        this.initializer();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.And:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 592;\r\n                        this.match(CPP14Parser.And);\r\n                        this.state = 593;\r\n                        this.match(CPP14Parser.Identifier);\r\n                        this.state = 594;\r\n                        this.initializer();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    lambdadeclarator() {\r\n        let _localctx = new LambdadeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 30, CPP14Parser.RULE_lambdadeclarator);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 597;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 598;\r\n                this.parameterdeclarationclause();\r\n                this.state = 599;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 601;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Mutable) {\r\n                    {\r\n                        this.state = 600;\r\n                        this.match(CPP14Parser.Mutable);\r\n                    }\r\n                }\r\n                this.state = 604;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Noexcept || _la === CPP14Parser.Throw) {\r\n                    {\r\n                        this.state = 603;\r\n                        this.exceptionspecification();\r\n                    }\r\n                }\r\n                this.state = 607;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 606;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 610;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Arrow) {\r\n                    {\r\n                        this.state = 609;\r\n                        this.trailingreturntype();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    idexpressionlapper() {\r\n        let _localctx = new IdexpressionlapperContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 32, CPP14Parser.RULE_idexpressionlapper);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 612;\r\n                this.idexpression();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    functioncallexpression() {\r\n        let _localctx = new FunctioncallexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 34, CPP14Parser.RULE_functioncallexpression);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 614;\r\n                this.primaryexpression();\r\n                this.state = 615;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 617;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignof) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Const_cast) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Delete) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Dynamic_cast))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.New - 32)) |\r\n                                (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                (1 << (CPP14Parser.This - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 64) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 64)) &\r\n                            ((1 << (CPP14Parser.Throw - 64)) |\r\n                                (1 << (CPP14Parser.Typeid - 64)) |\r\n                                (1 << (CPP14Parser.Typename - 64)) |\r\n                                (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                (1 << (CPP14Parser.Void - 64)) |\r\n                                (1 << (CPP14Parser.Wchar - 64)) |\r\n                                (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                (1 << (CPP14Parser.LeftBrace - 64)) |\r\n                                (1 << (CPP14Parser.Plus - 64)) |\r\n                                (1 << (CPP14Parser.Minus - 64)) |\r\n                                (1 << (CPP14Parser.Star - 64)) |\r\n                                (1 << (CPP14Parser.And - 64)) |\r\n                                (1 << (CPP14Parser.Or - 64)) |\r\n                                (1 << (CPP14Parser.Tilde - 64)) |\r\n                                (1 << (CPP14Parser.Not - 64)))) !==\r\n                            0) ||\r\n                    (((_la - 113) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 113)) &\r\n                            ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                (1 << (CPP14Parser.Identifier - 113)) |\r\n                                (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 616;\r\n                        this.initializerlist();\r\n                    }\r\n                }\r\n                this.state = 619;\r\n                this.match(CPP14Parser.RightParen);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    postfixexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new PostfixexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 36;\r\n        this.enterRecursionRule(_localctx, 36, CPP14Parser.RULE_postfixexpression, _p);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 686;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 26, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 622;\r\n                            this.primaryexpression();\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 623;\r\n                            this.functioncallexpression();\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        {\r\n                            this.state = 624;\r\n                            this.simpletypespecifier();\r\n                            this.state = 625;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 627;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                            if (((_la & ~0x1f) === 0 &&\r\n                                ((1 << _la) &\r\n                                    ((1 << CPP14Parser.Alignof) |\r\n                                        (1 << CPP14Parser.Auto) |\r\n                                        (1 << CPP14Parser.Bool) |\r\n                                        (1 << CPP14Parser.Char) |\r\n                                        (1 << CPP14Parser.Char16) |\r\n                                        (1 << CPP14Parser.Char32) |\r\n                                        (1 << CPP14Parser.Const_cast) |\r\n                                        (1 << CPP14Parser.Decltype) |\r\n                                        (1 << CPP14Parser.Delete) |\r\n                                        (1 << CPP14Parser.Double) |\r\n                                        (1 << CPP14Parser.File) |\r\n                                        (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                    0) ||\r\n                                (((_la - 32) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 32)) &\r\n                                        ((1 << (CPP14Parser.Float - 32)) |\r\n                                            (1 << (CPP14Parser.Int - 32)) |\r\n                                            (1 << (CPP14Parser.Long - 32)) |\r\n                                            (1 << (CPP14Parser.New - 32)) |\r\n                                            (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                            (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                            (1 << (CPP14Parser.Operator - 32)) |\r\n                                            (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                            (1 << (CPP14Parser.Short - 32)) |\r\n                                            (1 << (CPP14Parser.Signed - 32)) |\r\n                                            (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                            (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                            (1 << (CPP14Parser.This - 32)))) !==\r\n                                        0) ||\r\n                                (((_la - 64) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 64)) &\r\n                                        ((1 << (CPP14Parser.Throw - 64)) |\r\n                                            (1 << (CPP14Parser.Typeid - 64)) |\r\n                                            (1 << (CPP14Parser.Typename - 64)) |\r\n                                            (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                            (1 << (CPP14Parser.Void - 64)) |\r\n                                            (1 << (CPP14Parser.Wchar - 64)) |\r\n                                            (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                            (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                            (1 << (CPP14Parser.LeftBrace - 64)) |\r\n                                            (1 << (CPP14Parser.Plus - 64)) |\r\n                                            (1 << (CPP14Parser.Minus - 64)) |\r\n                                            (1 << (CPP14Parser.Star - 64)) |\r\n                                            (1 << (CPP14Parser.And - 64)) |\r\n                                            (1 << (CPP14Parser.Or - 64)) |\r\n                                            (1 << (CPP14Parser.Tilde - 64)) |\r\n                                            (1 << (CPP14Parser.Not - 64)))) !==\r\n                                        0) ||\r\n                                (((_la - 113) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 113)) &\r\n                                        ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                            (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                            (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                            (1 << (CPP14Parser.Identifier - 113)) |\r\n                                            (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                        0)) {\r\n                                {\r\n                                    this.state = 626;\r\n                                    this.expressionlist();\r\n                                }\r\n                            }\r\n                            this.state = 629;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                    case 4:\r\n                        {\r\n                            this.state = 631;\r\n                            this.typenamespecifier();\r\n                            this.state = 632;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 634;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                            if (((_la & ~0x1f) === 0 &&\r\n                                ((1 << _la) &\r\n                                    ((1 << CPP14Parser.Alignof) |\r\n                                        (1 << CPP14Parser.Auto) |\r\n                                        (1 << CPP14Parser.Bool) |\r\n                                        (1 << CPP14Parser.Char) |\r\n                                        (1 << CPP14Parser.Char16) |\r\n                                        (1 << CPP14Parser.Char32) |\r\n                                        (1 << CPP14Parser.Const_cast) |\r\n                                        (1 << CPP14Parser.Decltype) |\r\n                                        (1 << CPP14Parser.Delete) |\r\n                                        (1 << CPP14Parser.Double) |\r\n                                        (1 << CPP14Parser.File) |\r\n                                        (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                    0) ||\r\n                                (((_la - 32) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 32)) &\r\n                                        ((1 << (CPP14Parser.Float - 32)) |\r\n                                            (1 << (CPP14Parser.Int - 32)) |\r\n                                            (1 << (CPP14Parser.Long - 32)) |\r\n                                            (1 << (CPP14Parser.New - 32)) |\r\n                                            (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                            (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                            (1 << (CPP14Parser.Operator - 32)) |\r\n                                            (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                            (1 << (CPP14Parser.Short - 32)) |\r\n                                            (1 << (CPP14Parser.Signed - 32)) |\r\n                                            (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                            (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                            (1 << (CPP14Parser.This - 32)))) !==\r\n                                        0) ||\r\n                                (((_la - 64) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 64)) &\r\n                                        ((1 << (CPP14Parser.Throw - 64)) |\r\n                                            (1 << (CPP14Parser.Typeid - 64)) |\r\n                                            (1 << (CPP14Parser.Typename - 64)) |\r\n                                            (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                            (1 << (CPP14Parser.Void - 64)) |\r\n                                            (1 << (CPP14Parser.Wchar - 64)) |\r\n                                            (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                            (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                            (1 << (CPP14Parser.LeftBrace - 64)) |\r\n                                            (1 << (CPP14Parser.Plus - 64)) |\r\n                                            (1 << (CPP14Parser.Minus - 64)) |\r\n                                            (1 << (CPP14Parser.Star - 64)) |\r\n                                            (1 << (CPP14Parser.And - 64)) |\r\n                                            (1 << (CPP14Parser.Or - 64)) |\r\n                                            (1 << (CPP14Parser.Tilde - 64)) |\r\n                                            (1 << (CPP14Parser.Not - 64)))) !==\r\n                                        0) ||\r\n                                (((_la - 113) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 113)) &\r\n                                        ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                            (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                            (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                            (1 << (CPP14Parser.Identifier - 113)) |\r\n                                            (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                        0)) {\r\n                                {\r\n                                    this.state = 633;\r\n                                    this.expressionlist();\r\n                                }\r\n                            }\r\n                            this.state = 636;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                    case 5:\r\n                        {\r\n                            this.state = 638;\r\n                            this.simpletypespecifier();\r\n                            this.state = 639;\r\n                            this.bracedinitlist();\r\n                        }\r\n                        break;\r\n                    case 6:\r\n                        {\r\n                            this.state = 641;\r\n                            this.typenamespecifier();\r\n                            this.state = 642;\r\n                            this.bracedinitlist();\r\n                        }\r\n                        break;\r\n                    case 7:\r\n                        {\r\n                            this.state = 644;\r\n                            this.match(CPP14Parser.Dynamic_cast);\r\n                            this.state = 645;\r\n                            this.match(CPP14Parser.Less);\r\n                            this.state = 646;\r\n                            this.typeid();\r\n                            this.state = 647;\r\n                            this.match(CPP14Parser.Greater);\r\n                            this.state = 648;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 649;\r\n                            this.expression(0);\r\n                            this.state = 650;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                    case 8:\r\n                        {\r\n                            this.state = 652;\r\n                            this.match(CPP14Parser.Static_cast);\r\n                            this.state = 653;\r\n                            this.match(CPP14Parser.Less);\r\n                            this.state = 654;\r\n                            this.typeid();\r\n                            this.state = 655;\r\n                            this.match(CPP14Parser.Greater);\r\n                            this.state = 656;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 657;\r\n                            this.expression(0);\r\n                            this.state = 658;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                    case 9:\r\n                        {\r\n                            this.state = 660;\r\n                            this.match(CPP14Parser.Reinterpret_cast);\r\n                            this.state = 661;\r\n                            this.match(CPP14Parser.Less);\r\n                            this.state = 662;\r\n                            this.typeid();\r\n                            this.state = 663;\r\n                            this.match(CPP14Parser.Greater);\r\n                            this.state = 664;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 665;\r\n                            this.expression(0);\r\n                            this.state = 666;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                    case 10:\r\n                        {\r\n                            this.state = 668;\r\n                            this.match(CPP14Parser.Const_cast);\r\n                            this.state = 669;\r\n                            this.match(CPP14Parser.Less);\r\n                            this.state = 670;\r\n                            this.typeid();\r\n                            this.state = 671;\r\n                            this.match(CPP14Parser.Greater);\r\n                            this.state = 672;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 673;\r\n                            this.expression(0);\r\n                            this.state = 674;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                    case 11:\r\n                        {\r\n                            this.state = 676;\r\n                            this.match(CPP14Parser.Typeid);\r\n                            this.state = 677;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 678;\r\n                            this.expression(0);\r\n                            this.state = 679;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                    case 12:\r\n                        {\r\n                            this.state = 681;\r\n                            this.match(CPP14Parser.Typeid);\r\n                            this.state = 682;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 683;\r\n                            this.typeid();\r\n                            this.state = 684;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 722;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 720;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 29, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new PostfixexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_postfixexpression);\r\n                                        this.state = 688;\r\n                                        if (!this.precpred(this._ctx, 18)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 18)');\r\n                                        }\r\n                                        this.state = 689;\r\n                                        this.match(CPP14Parser.LeftBracket);\r\n                                        this.state = 690;\r\n                                        this.assignmentexpression();\r\n                                        this.state = 691;\r\n                                        this.match(CPP14Parser.RightBracket);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new PostfixexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_postfixexpression);\r\n                                        this.state = 693;\r\n                                        if (!this.precpred(this._ctx, 17)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 17)');\r\n                                        }\r\n                                        this.state = 694;\r\n                                        this.match(CPP14Parser.LeftBracket);\r\n                                        this.state = 695;\r\n                                        this.bracedinitlist();\r\n                                        this.state = 696;\r\n                                        this.match(CPP14Parser.RightBracket);\r\n                                    }\r\n                                    break;\r\n                                case 3:\r\n                                    {\r\n                                        _localctx = new PostfixexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_postfixexpression);\r\n                                        this.state = 698;\r\n                                        if (!this.precpred(this._ctx, 12)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 12)');\r\n                                        }\r\n                                        this.state = 699;\r\n                                        this.match(CPP14Parser.Dot);\r\n                                        this.state = 701;\r\n                                        this._errHandler.sync(this);\r\n                                        _la = this._input.LA(1);\r\n                                        if (_la === CPP14Parser.Template) {\r\n                                            {\r\n                                                this.state = 700;\r\n                                                this.match(CPP14Parser.Template);\r\n                                            }\r\n                                        }\r\n                                        this.state = 703;\r\n                                        this.idexpressionlapper();\r\n                                    }\r\n                                    break;\r\n                                case 4:\r\n                                    {\r\n                                        _localctx = new PostfixexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_postfixexpression);\r\n                                        this.state = 704;\r\n                                        if (!this.precpred(this._ctx, 11)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 11)');\r\n                                        }\r\n                                        this.state = 705;\r\n                                        this.match(CPP14Parser.Arrow);\r\n                                        this.state = 707;\r\n                                        this._errHandler.sync(this);\r\n                                        _la = this._input.LA(1);\r\n                                        if (_la === CPP14Parser.Template) {\r\n                                            {\r\n                                                this.state = 706;\r\n                                                this.match(CPP14Parser.Template);\r\n                                            }\r\n                                        }\r\n                                        this.state = 709;\r\n                                        this.idexpressionlapper();\r\n                                    }\r\n                                    break;\r\n                                case 5:\r\n                                    {\r\n                                        _localctx = new PostfixexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_postfixexpression);\r\n                                        this.state = 710;\r\n                                        if (!this.precpred(this._ctx, 10)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 10)');\r\n                                        }\r\n                                        this.state = 711;\r\n                                        this.match(CPP14Parser.Dot);\r\n                                        this.state = 712;\r\n                                        this.pseudodestructorname();\r\n                                    }\r\n                                    break;\r\n                                case 6:\r\n                                    {\r\n                                        _localctx = new PostfixexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_postfixexpression);\r\n                                        this.state = 713;\r\n                                        if (!this.precpred(this._ctx, 9)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 9)');\r\n                                        }\r\n                                        this.state = 714;\r\n                                        this.match(CPP14Parser.Arrow);\r\n                                        this.state = 715;\r\n                                        this.pseudodestructorname();\r\n                                    }\r\n                                    break;\r\n                                case 7:\r\n                                    {\r\n                                        _localctx = new PostfixexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_postfixexpression);\r\n                                        this.state = 716;\r\n                                        if (!this.precpred(this._ctx, 8)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 8)');\r\n                                        }\r\n                                        this.state = 717;\r\n                                        this.match(CPP14Parser.PlusPlus);\r\n                                    }\r\n                                    break;\r\n                                case 8:\r\n                                    {\r\n                                        _localctx = new PostfixexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_postfixexpression);\r\n                                        this.state = 718;\r\n                                        if (!this.precpred(this._ctx, 7)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 7)');\r\n                                        }\r\n                                        this.state = 719;\r\n                                        this.match(CPP14Parser.MinusMinus);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 724;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 30, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    expressionlist() {\r\n        let _localctx = new ExpressionlistContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 38, CPP14Parser.RULE_expressionlist);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 725;\r\n                this.initializerlist();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    pseudodestructorname() {\r\n        let _localctx = new PseudodestructornameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 40, CPP14Parser.RULE_pseudodestructorname);\r\n        let _la;\r\n        try {\r\n            this.state = 749;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 33, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 728;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 31, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 727;\r\n                                    this.nestednamespecifier(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 730;\r\n                        this.typename();\r\n                        this.state = 731;\r\n                        this.match(CPP14Parser.Doublecolon);\r\n                        this.state = 732;\r\n                        this.match(CPP14Parser.Tilde);\r\n                        this.state = 733;\r\n                        this.typename();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 735;\r\n                        this.nestednamespecifier(0);\r\n                        this.state = 736;\r\n                        this.match(CPP14Parser.Template);\r\n                        this.state = 737;\r\n                        this.simpletemplateid();\r\n                        this.state = 738;\r\n                        this.match(CPP14Parser.Doublecolon);\r\n                        this.state = 739;\r\n                        this.match(CPP14Parser.Tilde);\r\n                        this.state = 740;\r\n                        this.typename();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 743;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Decltype ||\r\n                            _la === CPP14Parser.Doublecolon ||\r\n                            _la === CPP14Parser.Identifier) {\r\n                            {\r\n                                this.state = 742;\r\n                                this.nestednamespecifier(0);\r\n                            }\r\n                        }\r\n                        this.state = 745;\r\n                        this.match(CPP14Parser.Tilde);\r\n                        this.state = 746;\r\n                        this.typename();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 747;\r\n                        this.match(CPP14Parser.Tilde);\r\n                        this.state = 748;\r\n                        this.decltypespecifier();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    binaryexpression() {\r\n        let _localctx = new BinaryexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 42, CPP14Parser.RULE_binaryexpression);\r\n        try {\r\n            this.state = 755;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 34, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 751;\r\n                        this.postfixexpression(0);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 752;\r\n                        this.unaryexpression();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 753;\r\n                        this.newexpression();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 754;\r\n                        this.deleteexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unaryexpression() {\r\n        let _localctx = new UnaryexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 44, CPP14Parser.RULE_unaryexpression);\r\n        try {\r\n            this.state = 787;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 35, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 757;\r\n                        this.match(CPP14Parser.PlusPlus);\r\n                        this.state = 758;\r\n                        this.castexpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 759;\r\n                        this.match(CPP14Parser.MinusMinus);\r\n                        this.state = 760;\r\n                        this.castexpression();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 761;\r\n                        this.unaryoperator();\r\n                        this.state = 762;\r\n                        this.castexpression();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 764;\r\n                        this.match(CPP14Parser.Sizeof);\r\n                        this.state = 765;\r\n                        this.binaryexpression();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 766;\r\n                        this.match(CPP14Parser.Sizeof);\r\n                        this.state = 767;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 768;\r\n                        this.typeidlapper();\r\n                        this.state = 769;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 771;\r\n                        this.match(CPP14Parser.Sizeof);\r\n                        this.state = 772;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 773;\r\n                        this.typeid();\r\n                        this.state = 774;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 776;\r\n                        this.match(CPP14Parser.Sizeof);\r\n                        this.state = 777;\r\n                        this.match(CPP14Parser.Ellipsis);\r\n                        this.state = 778;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 779;\r\n                        this.match(CPP14Parser.Identifier);\r\n                        this.state = 780;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 781;\r\n                        this.match(CPP14Parser.Alignof);\r\n                        this.state = 782;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 783;\r\n                        this.typeid();\r\n                        this.state = 784;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 786;\r\n                        this.noexceptexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeidlapper() {\r\n        let _localctx = new TypeidlapperContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 46, CPP14Parser.RULE_typeidlapper);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 789;\r\n                this.typeid();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unaryoperator() {\r\n        let _localctx = new UnaryoperatorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 48, CPP14Parser.RULE_unaryoperator);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 791;\r\n                _la = this._input.LA(1);\r\n                if (!(((_la - 84) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 84)) &\r\n                        ((1 << (CPP14Parser.Plus - 84)) |\r\n                            (1 << (CPP14Parser.Minus - 84)) |\r\n                            (1 << (CPP14Parser.Star - 84)) |\r\n                            (1 << (CPP14Parser.And - 84)) |\r\n                            (1 << (CPP14Parser.Or - 84)) |\r\n                            (1 << (CPP14Parser.Tilde - 84)) |\r\n                            (1 << (CPP14Parser.Not - 84)))) !==\r\n                        0)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    newexpression() {\r\n        let _localctx = new NewexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 50, CPP14Parser.RULE_newexpression);\r\n        let _la;\r\n        try {\r\n            this.state = 817;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 42, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 794;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Doublecolon) {\r\n                            {\r\n                                this.state = 793;\r\n                                this.match(CPP14Parser.Doublecolon);\r\n                            }\r\n                        }\r\n                        this.state = 796;\r\n                        this.match(CPP14Parser.New);\r\n                        this.state = 798;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.LeftParen) {\r\n                            {\r\n                                this.state = 797;\r\n                                this.newplacement();\r\n                            }\r\n                        }\r\n                        this.state = 800;\r\n                        this.newtypeid();\r\n                        this.state = 802;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 38, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 801;\r\n                                    this.newinitializer();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 805;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Doublecolon) {\r\n                            {\r\n                                this.state = 804;\r\n                                this.match(CPP14Parser.Doublecolon);\r\n                            }\r\n                        }\r\n                        this.state = 807;\r\n                        this.match(CPP14Parser.New);\r\n                        this.state = 809;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 40, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 808;\r\n                                    this.newplacement();\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 811;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 812;\r\n                        this.typeid();\r\n                        this.state = 813;\r\n                        this.match(CPP14Parser.RightParen);\r\n                        this.state = 815;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 41, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 814;\r\n                                    this.newinitializer();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    newplacement() {\r\n        let _localctx = new NewplacementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 52, CPP14Parser.RULE_newplacement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 819;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 820;\r\n                this.expressionlist();\r\n                this.state = 821;\r\n                this.match(CPP14Parser.RightParen);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    newtypeid() {\r\n        let _localctx = new NewtypeidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 54, CPP14Parser.RULE_newtypeid);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 823;\r\n                this.typespecifierseq();\r\n                this.state = 825;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 43, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 824;\r\n                            this.newdeclarator();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    newdeclarator() {\r\n        let _localctx = new NewdeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 56, CPP14Parser.RULE_newdeclarator);\r\n        try {\r\n            this.state = 832;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Star:\r\n                case CPP14Parser.And:\r\n                case CPP14Parser.AndAnd:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 827;\r\n                        this.ptroperator();\r\n                        this.state = 829;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 44, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 828;\r\n                                    this.newdeclarator();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftBracket:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 831;\r\n                        this.noptrnewdeclarator(0);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    noptrnewdeclarator(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new NoptrnewdeclaratorContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 58;\r\n        this.enterRecursionRule(_localctx, 58, CPP14Parser.RULE_noptrnewdeclarator, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 835;\r\n                    this.match(CPP14Parser.LeftBracket);\r\n                    this.state = 836;\r\n                    this.expression(0);\r\n                    this.state = 837;\r\n                    this.match(CPP14Parser.RightBracket);\r\n                    this.state = 839;\r\n                    this._errHandler.sync(this);\r\n                    switch (this.interpreter.adaptivePredict(this._input, 46, this._ctx)) {\r\n                        case 1:\r\n                            {\r\n                                this.state = 838;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 850;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new NoptrnewdeclaratorContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_noptrnewdeclarator);\r\n                                this.state = 841;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 842;\r\n                                this.match(CPP14Parser.LeftBracket);\r\n                                this.state = 843;\r\n                                this.constantexpression();\r\n                                this.state = 844;\r\n                                this.match(CPP14Parser.RightBracket);\r\n                                this.state = 846;\r\n                                this._errHandler.sync(this);\r\n                                switch (this.interpreter.adaptivePredict(this._input, 47, this._ctx)) {\r\n                                    case 1:\r\n                                        {\r\n                                            this.state = 845;\r\n                                            this.attributespecifierseq(0);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 852;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 48, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    newinitializer() {\r\n        let _localctx = new NewinitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 60, CPP14Parser.RULE_newinitializer);\r\n        let _la;\r\n        try {\r\n            this.state = 859;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.LeftParen:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 853;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 855;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignof) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Const_cast) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Delete) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.New - 32)) |\r\n                                        (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                        (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                        (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                        (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                        (1 << (CPP14Parser.This - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 64) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 64)) &\r\n                                    ((1 << (CPP14Parser.Throw - 64)) |\r\n                                        (1 << (CPP14Parser.Typeid - 64)) |\r\n                                        (1 << (CPP14Parser.Typename - 64)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                        (1 << (CPP14Parser.Void - 64)) |\r\n                                        (1 << (CPP14Parser.Wchar - 64)) |\r\n                                        (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                        (1 << (CPP14Parser.LeftBrace - 64)) |\r\n                                        (1 << (CPP14Parser.Plus - 64)) |\r\n                                        (1 << (CPP14Parser.Minus - 64)) |\r\n                                        (1 << (CPP14Parser.Star - 64)) |\r\n                                        (1 << (CPP14Parser.And - 64)) |\r\n                                        (1 << (CPP14Parser.Or - 64)) |\r\n                                        (1 << (CPP14Parser.Tilde - 64)) |\r\n                                        (1 << (CPP14Parser.Not - 64)))) !==\r\n                                    0) ||\r\n                            (((_la - 113) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 113)) &\r\n                                    ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                        (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                        (1 << (CPP14Parser.Identifier - 113)) |\r\n                                        (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 854;\r\n                                this.expressionlist();\r\n                            }\r\n                        }\r\n                        this.state = 857;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftBrace:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 858;\r\n                        this.bracedinitlist();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    deleteexpression() {\r\n        let _localctx = new DeleteexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 62, CPP14Parser.RULE_deleteexpression);\r\n        let _la;\r\n        try {\r\n            this.state = 873;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 53, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 862;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Doublecolon) {\r\n                            {\r\n                                this.state = 861;\r\n                                this.match(CPP14Parser.Doublecolon);\r\n                            }\r\n                        }\r\n                        this.state = 864;\r\n                        this.match(CPP14Parser.Delete);\r\n                        this.state = 865;\r\n                        this.castexpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 867;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Doublecolon) {\r\n                            {\r\n                                this.state = 866;\r\n                                this.match(CPP14Parser.Doublecolon);\r\n                            }\r\n                        }\r\n                        this.state = 869;\r\n                        this.match(CPP14Parser.Delete);\r\n                        this.state = 870;\r\n                        this.match(CPP14Parser.LeftBracket);\r\n                        this.state = 871;\r\n                        this.match(CPP14Parser.RightBracket);\r\n                        this.state = 872;\r\n                        this.castexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    noexceptexpression() {\r\n        let _localctx = new NoexceptexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 64, CPP14Parser.RULE_noexceptexpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 875;\r\n                this.match(CPP14Parser.Noexcept);\r\n                this.state = 876;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 877;\r\n                this.expression(0);\r\n                this.state = 878;\r\n                this.match(CPP14Parser.RightParen);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    castexpression() {\r\n        let _localctx = new CastexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 66, CPP14Parser.RULE_castexpression);\r\n        try {\r\n            this.state = 886;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 54, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 880;\r\n                        this.binaryexpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 881;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 882;\r\n                        this.typeid();\r\n                        this.state = 883;\r\n                        this.match(CPP14Parser.RightParen);\r\n                        this.state = 884;\r\n                        this.castexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    pmexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new PmexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 68;\r\n        this.enterRecursionRule(_localctx, 68, CPP14Parser.RULE_pmexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 889;\r\n                    this.castexpression();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 899;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 897;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 55, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new PmexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_pmexpression);\r\n                                        this.state = 891;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 892;\r\n                                        this.match(CPP14Parser.DotStar);\r\n                                        this.state = 893;\r\n                                        this.castexpression();\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new PmexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_pmexpression);\r\n                                        this.state = 894;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 895;\r\n                                        this.match(CPP14Parser.ArrowStar);\r\n                                        this.state = 896;\r\n                                        this.castexpression();\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 901;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 56, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    multiplicativeexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new MultiplicativeexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 70;\r\n        this.enterRecursionRule(_localctx, 70, CPP14Parser.RULE_multiplicativeexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 903;\r\n                    this.pmexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 916;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 914;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 57, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);\r\n                                        this.state = 905;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 906;\r\n                                        this.match(CPP14Parser.Star);\r\n                                        this.state = 907;\r\n                                        this.pmexpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);\r\n                                        this.state = 908;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 909;\r\n                                        this.match(CPP14Parser.Div);\r\n                                        this.state = 910;\r\n                                        this.pmexpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 3:\r\n                                    {\r\n                                        _localctx = new MultiplicativeexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_multiplicativeexpression);\r\n                                        this.state = 911;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 912;\r\n                                        this.match(CPP14Parser.Mod);\r\n                                        this.state = 913;\r\n                                        this.pmexpression(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 918;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 58, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    additiveexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new AdditiveexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 72;\r\n        this.enterRecursionRule(_localctx, 72, CPP14Parser.RULE_additiveexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 920;\r\n                    this.multiplicativeexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 930;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 928;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 59, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new AdditiveexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_additiveexpression);\r\n                                        this.state = 922;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 923;\r\n                                        this.match(CPP14Parser.Plus);\r\n                                        this.state = 924;\r\n                                        this.multiplicativeexpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new AdditiveexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_additiveexpression);\r\n                                        this.state = 925;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 926;\r\n                                        this.match(CPP14Parser.Minus);\r\n                                        this.state = 927;\r\n                                        this.multiplicativeexpression(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 932;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 60, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    shiftexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new ShiftexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 74;\r\n        this.enterRecursionRule(_localctx, 74, CPP14Parser.RULE_shiftexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 934;\r\n                    this.additiveexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 945;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 943;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 61, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new ShiftexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_shiftexpression);\r\n                                        this.state = 936;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 937;\r\n                                        this.match(CPP14Parser.LeftShift);\r\n                                        this.state = 938;\r\n                                        this.additiveexpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new ShiftexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_shiftexpression);\r\n                                        this.state = 939;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 940;\r\n                                        this.rightShift();\r\n                                        this.state = 941;\r\n                                        this.additiveexpression(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 947;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 62, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    relationalexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new RelationalexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 76;\r\n        this.enterRecursionRule(_localctx, 76, CPP14Parser.RULE_relationalexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 949;\r\n                    this.shiftexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 965;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 963;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 63, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new RelationalexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_relationalexpression);\r\n                                        this.state = 951;\r\n                                        if (!this.precpred(this._ctx, 4)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 4)');\r\n                                        }\r\n                                        this.state = 952;\r\n                                        this.match(CPP14Parser.Less);\r\n                                        this.state = 953;\r\n                                        this.shiftexpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new RelationalexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_relationalexpression);\r\n                                        this.state = 954;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 955;\r\n                                        this.match(CPP14Parser.Greater);\r\n                                        this.state = 956;\r\n                                        this.shiftexpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 3:\r\n                                    {\r\n                                        _localctx = new RelationalexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_relationalexpression);\r\n                                        this.state = 957;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 958;\r\n                                        this.match(CPP14Parser.LessEqual);\r\n                                        this.state = 959;\r\n                                        this.shiftexpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 4:\r\n                                    {\r\n                                        _localctx = new RelationalexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_relationalexpression);\r\n                                        this.state = 960;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 961;\r\n                                        this.match(CPP14Parser.GreaterEqual);\r\n                                        this.state = 962;\r\n                                        this.shiftexpression(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 967;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 64, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    equalityexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new EqualityexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 78;\r\n        this.enterRecursionRule(_localctx, 78, CPP14Parser.RULE_equalityexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 969;\r\n                    this.relationalexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 979;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 66, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 977;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 65, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new EqualityexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_equalityexpression);\r\n                                        this.state = 971;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 972;\r\n                                        this.match(CPP14Parser.Equal);\r\n                                        this.state = 973;\r\n                                        this.relationalexpression(0);\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new EqualityexpressionContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_equalityexpression);\r\n                                        this.state = 974;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 975;\r\n                                        this.match(CPP14Parser.NotEqual);\r\n                                        this.state = 976;\r\n                                        this.relationalexpression(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 981;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 66, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    andexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new AndexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 80;\r\n        this.enterRecursionRule(_localctx, 80, CPP14Parser.RULE_andexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 983;\r\n                    this.equalityexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 990;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new AndexpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_andexpression);\r\n                                this.state = 985;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 986;\r\n                                this.match(CPP14Parser.And);\r\n                                this.state = 987;\r\n                                this.equalityexpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 992;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 67, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    exclusiveorexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new ExclusiveorexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 82;\r\n        this.enterRecursionRule(_localctx, 82, CPP14Parser.RULE_exclusiveorexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 994;\r\n                    this.andexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1001;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new ExclusiveorexpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_exclusiveorexpression);\r\n                                this.state = 996;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 997;\r\n                                this.match(CPP14Parser.Caret);\r\n                                this.state = 998;\r\n                                this.andexpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1003;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 68, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    inclusiveorexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new InclusiveorexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 84;\r\n        this.enterRecursionRule(_localctx, 84, CPP14Parser.RULE_inclusiveorexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 1005;\r\n                    this.exclusiveorexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1012;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 69, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new InclusiveorexpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_inclusiveorexpression);\r\n                                this.state = 1007;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 1008;\r\n                                this.match(CPP14Parser.Or);\r\n                                this.state = 1009;\r\n                                this.exclusiveorexpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1014;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 69, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    logicalandexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new LogicalandexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 86;\r\n        this.enterRecursionRule(_localctx, 86, CPP14Parser.RULE_logicalandexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 1016;\r\n                    this.inclusiveorexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1023;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new LogicalandexpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_logicalandexpression);\r\n                                this.state = 1018;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 1019;\r\n                                this.match(CPP14Parser.AndAnd);\r\n                                this.state = 1020;\r\n                                this.inclusiveorexpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1025;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 70, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    logicalorexpression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new LogicalorexpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 88;\r\n        this.enterRecursionRule(_localctx, 88, CPP14Parser.RULE_logicalorexpression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 1027;\r\n                    this.logicalandexpression(0);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1034;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new LogicalorexpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_logicalorexpression);\r\n                                this.state = 1029;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 1030;\r\n                                this.match(CPP14Parser.OrOr);\r\n                                this.state = 1031;\r\n                                this.logicalandexpression(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1036;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 71, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    conditionalexpression() {\r\n        let _localctx = new ConditionalexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 90, CPP14Parser.RULE_conditionalexpression);\r\n        try {\r\n            this.state = 1044;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 72, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1037;\r\n                        this.logicalorexpression(0);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1038;\r\n                        this.logicalorexpression(0);\r\n                        this.state = 1039;\r\n                        this.match(CPP14Parser.Question);\r\n                        this.state = 1040;\r\n                        this.expression(0);\r\n                        this.state = 1041;\r\n                        this.match(CPP14Parser.Colon);\r\n                        this.state = 1042;\r\n                        this.assignmentexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    assignmentexpression() {\r\n        let _localctx = new AssignmentexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 92, CPP14Parser.RULE_assignmentexpression);\r\n        try {\r\n            this.state = 1052;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 73, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1046;\r\n                        this.conditionalexpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1047;\r\n                        this.logicalorexpression(0);\r\n                        this.state = 1048;\r\n                        this.assignmentoperator();\r\n                        this.state = 1049;\r\n                        this.initializerclause();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1051;\r\n                        this.throwexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    assignmentoperator() {\r\n        let _localctx = new AssignmentoperatorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 94, CPP14Parser.RULE_assignmentoperator);\r\n        try {\r\n            this.state = 1065;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Assign:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1054;\r\n                        this.match(CPP14Parser.Assign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.StarAssign:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1055;\r\n                        this.match(CPP14Parser.StarAssign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.DivAssign:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1056;\r\n                        this.match(CPP14Parser.DivAssign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.ModAssign:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1057;\r\n                        this.match(CPP14Parser.ModAssign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.PlusAssign:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1058;\r\n                        this.match(CPP14Parser.PlusAssign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.MinusAssign:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1059;\r\n                        this.match(CPP14Parser.MinusAssign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Greater:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1060;\r\n                        this.rightShiftAssign();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftShiftAssign:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 1061;\r\n                        this.match(CPP14Parser.LeftShiftAssign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.AndAssign:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 1062;\r\n                        this.match(CPP14Parser.AndAssign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.XorAssign:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 1063;\r\n                        this.match(CPP14Parser.XorAssign);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.OrAssign:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 1064;\r\n                        this.match(CPP14Parser.OrAssign);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    expression(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new ExpressionContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 96;\r\n        this.enterRecursionRule(_localctx, 96, CPP14Parser.RULE_expression, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 1068;\r\n                    this.assignmentexpression();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1075;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 75, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new ExpressionContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_expression);\r\n                                this.state = 1070;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 1071;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 1072;\r\n                                this.assignmentexpression();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1077;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 75, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    constantexpression() {\r\n        let _localctx = new ConstantexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 98, CPP14Parser.RULE_constantexpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1078;\r\n                this.conditionalexpression();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statement() {\r\n        let _localctx = new StatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 100, CPP14Parser.RULE_statement);\r\n        try {\r\n            this.state = 1082;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 76, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1080;\r\n                        this.labeledstatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1081;\r\n                        this.statementWithoutLabeldstatement();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statementWithoutLabeldstatement() {\r\n        let _localctx = new StatementWithoutLabeldstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 102, CPP14Parser.RULE_statementWithoutLabeldstatement);\r\n        let _la;\r\n        try {\r\n            this.state = 1135;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 89, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1084;\r\n                        this.emptydeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1086;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 77, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1085;\r\n                                    this.attributespecifierseq(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1088;\r\n                        this.expressionstatement();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1090;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1089;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1092;\r\n                        this.compoundstatement();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1094;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1093;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1096;\r\n                        this.selectionstatement();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1098;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1097;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1100;\r\n                        this.switchstatement();\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1102;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1101;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1104;\r\n                        this.iterationstatement();\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1106;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1105;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1108;\r\n                        this.whilestatement();\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 1110;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1109;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1112;\r\n                        this.dowhilestatement();\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 1114;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1113;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1116;\r\n                        this.jumpstatement();\r\n                    }\r\n                    break;\r\n                case 10:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 1118;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1117;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1120;\r\n                        this.breakStatement();\r\n                    }\r\n                    break;\r\n                case 11:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 1122;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1121;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1124;\r\n                        this.continueStatement();\r\n                    }\r\n                    break;\r\n                case 12:\r\n                    this.enterOuterAlt(_localctx, 12);\r\n                    {\r\n                        this.state = 1126;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1125;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1128;\r\n                        this.returnStatement();\r\n                    }\r\n                    break;\r\n                case 13:\r\n                    this.enterOuterAlt(_localctx, 13);\r\n                    {\r\n                        this.state = 1129;\r\n                        this.variabledeclarationstatement();\r\n                    }\r\n                    break;\r\n                case 14:\r\n                    this.enterOuterAlt(_localctx, 14);\r\n                    {\r\n                        this.state = 1130;\r\n                        this.declarationstatement();\r\n                    }\r\n                    break;\r\n                case 15:\r\n                    this.enterOuterAlt(_localctx, 15);\r\n                    {\r\n                        this.state = 1132;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1131;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1134;\r\n                        this.tryblock();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    labeledstatement() {\r\n        let _localctx = new LabeledstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 104, CPP14Parser.RULE_labeledstatement);\r\n        let _la;\r\n        try {\r\n            this.state = 1144;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 91, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1138;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1137;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1140;\r\n                        this.match(CPP14Parser.Identifier);\r\n                        this.state = 1141;\r\n                        this.match(CPP14Parser.Colon);\r\n                        this.state = 1142;\r\n                        this.statement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1143;\r\n                        this.switchunitstatement();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    switchunitstatement() {\r\n        let _localctx = new SwitchunitstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 106, CPP14Parser.RULE_switchunitstatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1147;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 1146;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 1152;\r\n                this._errHandler.sync(this);\r\n                switch (this._input.LA(1)) {\r\n                    case CPP14Parser.Case:\r\n                        {\r\n                            this.state = 1149;\r\n                            this.match(CPP14Parser.Case);\r\n                            this.state = 1150;\r\n                            this.constantexpression();\r\n                        }\r\n                        break;\r\n                    case CPP14Parser.Default:\r\n                        {\r\n                            this.state = 1151;\r\n                            this.match(CPP14Parser.Default);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw new NoViableAltException_1.NoViableAltException(this);\r\n                }\r\n                this.state = 1154;\r\n                this.match(CPP14Parser.Colon);\r\n                this.state = 1155;\r\n                this.statementWithoutLabeldstatementseq();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statementWithoutLabeldstatementseq() {\r\n        let _localctx = new StatementWithoutLabeldstatementseqContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 108, CPP14Parser.RULE_statementWithoutLabeldstatementseq);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1157;\r\n                this.statementWithoutLabeldstatement();\r\n                this.state = 1161;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1158;\r\n                                this.statementWithoutLabeldstatement();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1163;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 94, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    expressionstatement() {\r\n        let _localctx = new ExpressionstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 110, CPP14Parser.RULE_expressionstatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1165;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignof) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Const_cast) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Delete) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Dynamic_cast))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.New - 32)) |\r\n                                (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                (1 << (CPP14Parser.This - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 64) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 64)) &\r\n                            ((1 << (CPP14Parser.Throw - 64)) |\r\n                                (1 << (CPP14Parser.Typeid - 64)) |\r\n                                (1 << (CPP14Parser.Typename - 64)) |\r\n                                (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                (1 << (CPP14Parser.Void - 64)) |\r\n                                (1 << (CPP14Parser.Wchar - 64)) |\r\n                                (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                (1 << (CPP14Parser.Plus - 64)) |\r\n                                (1 << (CPP14Parser.Minus - 64)) |\r\n                                (1 << (CPP14Parser.Star - 64)) |\r\n                                (1 << (CPP14Parser.And - 64)) |\r\n                                (1 << (CPP14Parser.Or - 64)) |\r\n                                (1 << (CPP14Parser.Tilde - 64)) |\r\n                                (1 << (CPP14Parser.Not - 64)))) !==\r\n                            0) ||\r\n                    (((_la - 113) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 113)) &\r\n                            ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                (1 << (CPP14Parser.Identifier - 113)) |\r\n                                (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1164;\r\n                        this.expression(0);\r\n                    }\r\n                }\r\n                this.state = 1167;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    compoundstatement() {\r\n        let _localctx = new CompoundstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 112, CPP14Parser.RULE_compoundstatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1169;\r\n                this.match(CPP14Parser.LeftBrace);\r\n                this.state = 1171;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignas) |\r\n                            (1 << CPP14Parser.Alignof) |\r\n                            (1 << CPP14Parser.Asm) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Break) |\r\n                            (1 << CPP14Parser.Case) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Constexpr) |\r\n                            (1 << CPP14Parser.Const_cast) |\r\n                            (1 << CPP14Parser.Continue) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Default) |\r\n                            (1 << CPP14Parser.Delete) |\r\n                            (1 << CPP14Parser.Do) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Dynamic_cast) |\r\n                            (1 << CPP14Parser.Enum) |\r\n                            (1 << CPP14Parser.Explicit) |\r\n                            (1 << CPP14Parser.Extern))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.For - 32)) |\r\n                                (1 << (CPP14Parser.Friend - 32)) |\r\n                                (1 << (CPP14Parser.Goto - 32)) |\r\n                                (1 << (CPP14Parser.If - 32)) |\r\n                                (1 << (CPP14Parser.Inline - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.Mutable - 32)) |\r\n                                (1 << (CPP14Parser.Namespace - 32)) |\r\n                                (1 << (CPP14Parser.New - 32)) |\r\n                                (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Register - 32)) |\r\n                                (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                (1 << (CPP14Parser.Return - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                (1 << (CPP14Parser.Static - 32)) |\r\n                                (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)) |\r\n                                (1 << (CPP14Parser.Switch - 32)) |\r\n                                (1 << (CPP14Parser.This - 32)) |\r\n                                (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 64) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 64)) &\r\n                            ((1 << (CPP14Parser.Throw - 64)) |\r\n                                (1 << (CPP14Parser.Try - 64)) |\r\n                                (1 << (CPP14Parser.Typedef - 64)) |\r\n                                (1 << (CPP14Parser.Typeid - 64)) |\r\n                                (1 << (CPP14Parser.Typename - 64)) |\r\n                                (1 << (CPP14Parser.Union - 64)) |\r\n                                (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                (1 << (CPP14Parser.Using - 64)) |\r\n                                (1 << (CPP14Parser.Virtual - 64)) |\r\n                                (1 << (CPP14Parser.Void - 64)) |\r\n                                (1 << (CPP14Parser.Volatile - 64)) |\r\n                                (1 << (CPP14Parser.Wchar - 64)) |\r\n                                (1 << (CPP14Parser.While - 64)) |\r\n                                (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                (1 << (CPP14Parser.LeftBrace - 64)) |\r\n                                (1 << (CPP14Parser.Plus - 64)) |\r\n                                (1 << (CPP14Parser.Minus - 64)) |\r\n                                (1 << (CPP14Parser.Star - 64)) |\r\n                                (1 << (CPP14Parser.And - 64)) |\r\n                                (1 << (CPP14Parser.Or - 64)) |\r\n                                (1 << (CPP14Parser.Tilde - 64)) |\r\n                                (1 << (CPP14Parser.Not - 64)))) !==\r\n                            0) ||\r\n                    (((_la - 111) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 111)) &\r\n                            ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                (1 << (CPP14Parser.PlusPlus - 111)) |\r\n                                (1 << (CPP14Parser.MinusMinus - 111)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                (1 << (CPP14Parser.Semi - 111)) |\r\n                                (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                (1 << (CPP14Parser.Identifier - 111)) |\r\n                                (1 << (CPP14Parser.Integerliteral - 111)) |\r\n                                (1 << (CPP14Parser.Characterliteral - 111)) |\r\n                                (1 << (CPP14Parser.Floatingliteral - 111)) |\r\n                                (1 << (CPP14Parser.Stringliteral - 111)) |\r\n                                (1 << (CPP14Parser.Booleanliteral - 111)) |\r\n                                (1 << (CPP14Parser.Userdefinedintegerliteral - 111)) |\r\n                                (1 << (CPP14Parser.Userdefinedfloatingliteral - 111)) |\r\n                                (1 << (CPP14Parser.Userdefinedstringliteral - 111)) |\r\n                                (1 << (CPP14Parser.Userdefinedcharacterliteral - 111)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1170;\r\n                        this.statementseq();\r\n                    }\r\n                }\r\n                this.state = 1173;\r\n                this.match(CPP14Parser.RightBrace);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    statementseq() {\r\n        let _localctx = new StatementseqContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 114, CPP14Parser.RULE_statementseq);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1175;\r\n                this.statement();\r\n                this.state = 1179;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignas) |\r\n                            (1 << CPP14Parser.Alignof) |\r\n                            (1 << CPP14Parser.Asm) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Break) |\r\n                            (1 << CPP14Parser.Case) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Constexpr) |\r\n                            (1 << CPP14Parser.Const_cast) |\r\n                            (1 << CPP14Parser.Continue) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Default) |\r\n                            (1 << CPP14Parser.Delete) |\r\n                            (1 << CPP14Parser.Do) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Dynamic_cast) |\r\n                            (1 << CPP14Parser.Enum) |\r\n                            (1 << CPP14Parser.Explicit) |\r\n                            (1 << CPP14Parser.Extern))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.For - 32)) |\r\n                                (1 << (CPP14Parser.Friend - 32)) |\r\n                                (1 << (CPP14Parser.Goto - 32)) |\r\n                                (1 << (CPP14Parser.If - 32)) |\r\n                                (1 << (CPP14Parser.Inline - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.Mutable - 32)) |\r\n                                (1 << (CPP14Parser.Namespace - 32)) |\r\n                                (1 << (CPP14Parser.New - 32)) |\r\n                                (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Register - 32)) |\r\n                                (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                (1 << (CPP14Parser.Return - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                (1 << (CPP14Parser.Static - 32)) |\r\n                                (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)) |\r\n                                (1 << (CPP14Parser.Switch - 32)) |\r\n                                (1 << (CPP14Parser.This - 32)) |\r\n                                (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 64) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 64)) &\r\n                            ((1 << (CPP14Parser.Throw - 64)) |\r\n                                (1 << (CPP14Parser.Try - 64)) |\r\n                                (1 << (CPP14Parser.Typedef - 64)) |\r\n                                (1 << (CPP14Parser.Typeid - 64)) |\r\n                                (1 << (CPP14Parser.Typename - 64)) |\r\n                                (1 << (CPP14Parser.Union - 64)) |\r\n                                (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                (1 << (CPP14Parser.Using - 64)) |\r\n                                (1 << (CPP14Parser.Virtual - 64)) |\r\n                                (1 << (CPP14Parser.Void - 64)) |\r\n                                (1 << (CPP14Parser.Volatile - 64)) |\r\n                                (1 << (CPP14Parser.Wchar - 64)) |\r\n                                (1 << (CPP14Parser.While - 64)) |\r\n                                (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                (1 << (CPP14Parser.LeftBrace - 64)) |\r\n                                (1 << (CPP14Parser.Plus - 64)) |\r\n                                (1 << (CPP14Parser.Minus - 64)) |\r\n                                (1 << (CPP14Parser.Star - 64)) |\r\n                                (1 << (CPP14Parser.And - 64)) |\r\n                                (1 << (CPP14Parser.Or - 64)) |\r\n                                (1 << (CPP14Parser.Tilde - 64)) |\r\n                                (1 << (CPP14Parser.Not - 64)))) !==\r\n                            0) ||\r\n                    (((_la - 111) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 111)) &\r\n                            ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                (1 << (CPP14Parser.PlusPlus - 111)) |\r\n                                (1 << (CPP14Parser.MinusMinus - 111)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                (1 << (CPP14Parser.Semi - 111)) |\r\n                                (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                (1 << (CPP14Parser.Identifier - 111)) |\r\n                                (1 << (CPP14Parser.Integerliteral - 111)) |\r\n                                (1 << (CPP14Parser.Characterliteral - 111)) |\r\n                                (1 << (CPP14Parser.Floatingliteral - 111)) |\r\n                                (1 << (CPP14Parser.Stringliteral - 111)) |\r\n                                (1 << (CPP14Parser.Booleanliteral - 111)) |\r\n                                (1 << (CPP14Parser.Userdefinedintegerliteral - 111)) |\r\n                                (1 << (CPP14Parser.Userdefinedfloatingliteral - 111)) |\r\n                                (1 << (CPP14Parser.Userdefinedstringliteral - 111)) |\r\n                                (1 << (CPP14Parser.Userdefinedcharacterliteral - 111)))) !==\r\n                            0)) {\r\n                    {\r\n                        {\r\n                            this.state = 1176;\r\n                            this.statement();\r\n                        }\r\n                    }\r\n                    this.state = 1181;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    selectionstatement() {\r\n        let _localctx = new SelectionstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 116, CPP14Parser.RULE_selectionstatement);\r\n        try {\r\n            this.state = 1196;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 98, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1182;\r\n                        this.match(CPP14Parser.If);\r\n                        this.state = 1183;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 1184;\r\n                        this.condition();\r\n                        this.state = 1185;\r\n                        this.match(CPP14Parser.RightParen);\r\n                        this.state = 1186;\r\n                        this.statement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1188;\r\n                        this.match(CPP14Parser.If);\r\n                        this.state = 1189;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 1190;\r\n                        this.condition();\r\n                        this.state = 1191;\r\n                        this.match(CPP14Parser.RightParen);\r\n                        this.state = 1192;\r\n                        this.statement();\r\n                        this.state = 1193;\r\n                        this.match(CPP14Parser.Else);\r\n                        this.state = 1194;\r\n                        this.statement();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    switchstatement() {\r\n        let _localctx = new SwitchstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 118, CPP14Parser.RULE_switchstatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1198;\r\n                this.match(CPP14Parser.Switch);\r\n                this.state = 1199;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1200;\r\n                this.condition();\r\n                this.state = 1201;\r\n                this.match(CPP14Parser.RightParen);\r\n                {\r\n                    this.state = 1202;\r\n                    this.match(CPP14Parser.LeftBrace);\r\n                    this.state = 1203;\r\n                    this.switchunitseq();\r\n                    this.state = 1204;\r\n                    this.match(CPP14Parser.RightBrace);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    switchunitseq() {\r\n        let _localctx = new SwitchunitseqContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 120, CPP14Parser.RULE_switchunitseq);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1206;\r\n                this.switchunitstatement();\r\n                this.state = 1210;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignas) |\r\n                            (1 << CPP14Parser.Case) |\r\n                            (1 << CPP14Parser.Default))) !==\r\n                        0) ||\r\n                    _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        {\r\n                            this.state = 1207;\r\n                            this.switchunitstatement();\r\n                        }\r\n                    }\r\n                    this.state = 1212;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    condition() {\r\n        let _localctx = new ConditionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 122, CPP14Parser.RULE_condition);\r\n        let _la;\r\n        try {\r\n            this.state = 1229;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 102, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1213;\r\n                        this.expression(0);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1215;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1214;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1217;\r\n                        this.declspecifierseq();\r\n                        this.state = 1218;\r\n                        this.declarator();\r\n                        this.state = 1219;\r\n                        this.match(CPP14Parser.Assign);\r\n                        this.state = 1220;\r\n                        this.initializerclause();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1223;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1222;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1225;\r\n                        this.declspecifierseq();\r\n                        this.state = 1226;\r\n                        this.declarator();\r\n                        this.state = 1227;\r\n                        this.bracedinitlist();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    whilestatement() {\r\n        let _localctx = new WhilestatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 124, CPP14Parser.RULE_whilestatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1231;\r\n                this.match(CPP14Parser.While);\r\n                this.state = 1232;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1233;\r\n                this.condition();\r\n                this.state = 1234;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 1235;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    dowhilestatement() {\r\n        let _localctx = new DowhilestatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 126, CPP14Parser.RULE_dowhilestatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1237;\r\n                this.match(CPP14Parser.Do);\r\n                this.state = 1238;\r\n                this.compoundstatement();\r\n                this.state = 1239;\r\n                this.match(CPP14Parser.While);\r\n                this.state = 1240;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1241;\r\n                this.expression(0);\r\n                this.state = 1242;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 1243;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    iterationstatement() {\r\n        let _localctx = new IterationstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 128, CPP14Parser.RULE_iterationstatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1245;\r\n                this.match(CPP14Parser.For);\r\n                this.state = 1246;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1247;\r\n                this.forinitstatement();\r\n                this.state = 1249;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignas) |\r\n                            (1 << CPP14Parser.Alignof) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Constexpr) |\r\n                            (1 << CPP14Parser.Const_cast) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Delete) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Dynamic_cast) |\r\n                            (1 << CPP14Parser.Enum) |\r\n                            (1 << CPP14Parser.Explicit) |\r\n                            (1 << CPP14Parser.Extern))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Friend - 32)) |\r\n                                (1 << (CPP14Parser.Inline - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.Mutable - 32)) |\r\n                                (1 << (CPP14Parser.New - 32)) |\r\n                                (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Register - 32)) |\r\n                                (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                (1 << (CPP14Parser.Static - 32)) |\r\n                                (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)) |\r\n                                (1 << (CPP14Parser.This - 32)) |\r\n                                (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 64) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 64)) &\r\n                            ((1 << (CPP14Parser.Throw - 64)) |\r\n                                (1 << (CPP14Parser.Typedef - 64)) |\r\n                                (1 << (CPP14Parser.Typeid - 64)) |\r\n                                (1 << (CPP14Parser.Typename - 64)) |\r\n                                (1 << (CPP14Parser.Union - 64)) |\r\n                                (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                (1 << (CPP14Parser.Virtual - 64)) |\r\n                                (1 << (CPP14Parser.Void - 64)) |\r\n                                (1 << (CPP14Parser.Volatile - 64)) |\r\n                                (1 << (CPP14Parser.Wchar - 64)) |\r\n                                (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                (1 << (CPP14Parser.Plus - 64)) |\r\n                                (1 << (CPP14Parser.Minus - 64)) |\r\n                                (1 << (CPP14Parser.Star - 64)) |\r\n                                (1 << (CPP14Parser.And - 64)) |\r\n                                (1 << (CPP14Parser.Or - 64)) |\r\n                                (1 << (CPP14Parser.Tilde - 64)) |\r\n                                (1 << (CPP14Parser.Not - 64)))) !==\r\n                            0) ||\r\n                    (((_la - 113) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 113)) &\r\n                            ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                (1 << (CPP14Parser.Identifier - 113)) |\r\n                                (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1248;\r\n                        this.condition();\r\n                    }\r\n                }\r\n                this.state = 1251;\r\n                this.match(CPP14Parser.Semi);\r\n                this.state = 1253;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignof) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Const_cast) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Delete) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Dynamic_cast))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.New - 32)) |\r\n                                (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                (1 << (CPP14Parser.This - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 64) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 64)) &\r\n                            ((1 << (CPP14Parser.Throw - 64)) |\r\n                                (1 << (CPP14Parser.Typeid - 64)) |\r\n                                (1 << (CPP14Parser.Typename - 64)) |\r\n                                (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                (1 << (CPP14Parser.Void - 64)) |\r\n                                (1 << (CPP14Parser.Wchar - 64)) |\r\n                                (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                (1 << (CPP14Parser.Plus - 64)) |\r\n                                (1 << (CPP14Parser.Minus - 64)) |\r\n                                (1 << (CPP14Parser.Star - 64)) |\r\n                                (1 << (CPP14Parser.And - 64)) |\r\n                                (1 << (CPP14Parser.Or - 64)) |\r\n                                (1 << (CPP14Parser.Tilde - 64)) |\r\n                                (1 << (CPP14Parser.Not - 64)))) !==\r\n                            0) ||\r\n                    (((_la - 113) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 113)) &\r\n                            ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                (1 << (CPP14Parser.Identifier - 113)) |\r\n                                (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1252;\r\n                        this.expression(0);\r\n                    }\r\n                }\r\n                this.state = 1255;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 1256;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enhancedForStatement() {\r\n        let _localctx = new EnhancedForStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 130, CPP14Parser.RULE_enhancedForStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1258;\r\n                this.match(CPP14Parser.For);\r\n                this.state = 1259;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1260;\r\n                this.forrangedeclaration();\r\n                this.state = 1261;\r\n                this.match(CPP14Parser.Colon);\r\n                this.state = 1262;\r\n                this.forrangeinitializer();\r\n                this.state = 1263;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 1264;\r\n                this.statement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    forinitstatement() {\r\n        let _localctx = new ForinitstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 132, CPP14Parser.RULE_forinitstatement);\r\n        try {\r\n            this.state = 1269;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 105, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1266;\r\n                        this.expressionstatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1267;\r\n                        this.variabledeclarationstatement();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1268;\r\n                        this.simpledeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    forrangedeclaration() {\r\n        let _localctx = new ForrangedeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 134, CPP14Parser.RULE_forrangedeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1272;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 1271;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 1274;\r\n                this.declspecifierseq();\r\n                this.state = 1275;\r\n                this.declarator();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    forrangeinitializer() {\r\n        let _localctx = new ForrangeinitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 136, CPP14Parser.RULE_forrangeinitializer);\r\n        try {\r\n            this.state = 1279;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Alignof:\r\n                case CPP14Parser.Auto:\r\n                case CPP14Parser.Bool:\r\n                case CPP14Parser.Char:\r\n                case CPP14Parser.Char16:\r\n                case CPP14Parser.Char32:\r\n                case CPP14Parser.Const_cast:\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Delete:\r\n                case CPP14Parser.Double:\r\n                case CPP14Parser.File:\r\n                case CPP14Parser.Dynamic_cast:\r\n                case CPP14Parser.Float:\r\n                case CPP14Parser.Int:\r\n                case CPP14Parser.Long:\r\n                case CPP14Parser.New:\r\n                case CPP14Parser.Noexcept:\r\n                case CPP14Parser.Nullptr:\r\n                case CPP14Parser.Operator:\r\n                case CPP14Parser.Reinterpret_cast:\r\n                case CPP14Parser.Short:\r\n                case CPP14Parser.Signed:\r\n                case CPP14Parser.Sizeof:\r\n                case CPP14Parser.Static_cast:\r\n                case CPP14Parser.This:\r\n                case CPP14Parser.Throw:\r\n                case CPP14Parser.Typeid:\r\n                case CPP14Parser.Typename:\r\n                case CPP14Parser.Unsigned:\r\n                case CPP14Parser.Void:\r\n                case CPP14Parser.Wchar:\r\n                case CPP14Parser.LeftParen:\r\n                case CPP14Parser.LeftBracket:\r\n                case CPP14Parser.Plus:\r\n                case CPP14Parser.Minus:\r\n                case CPP14Parser.Star:\r\n                case CPP14Parser.And:\r\n                case CPP14Parser.Or:\r\n                case CPP14Parser.Tilde:\r\n                case CPP14Parser.Not:\r\n                case CPP14Parser.PlusPlus:\r\n                case CPP14Parser.MinusMinus:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                case CPP14Parser.Integerliteral:\r\n                case CPP14Parser.Characterliteral:\r\n                case CPP14Parser.Floatingliteral:\r\n                case CPP14Parser.Stringliteral:\r\n                case CPP14Parser.Booleanliteral:\r\n                case CPP14Parser.Userdefinedintegerliteral:\r\n                case CPP14Parser.Userdefinedfloatingliteral:\r\n                case CPP14Parser.Userdefinedstringliteral:\r\n                case CPP14Parser.Userdefinedcharacterliteral:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1277;\r\n                        this.expression(0);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftBrace:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1278;\r\n                        this.bracedinitlist();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    jumpstatement() {\r\n        let _localctx = new JumpstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 138, CPP14Parser.RULE_jumpstatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1281;\r\n                this.match(CPP14Parser.Goto);\r\n                this.state = 1282;\r\n                this.match(CPP14Parser.Identifier);\r\n                this.state = 1283;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    breakStatement() {\r\n        let _localctx = new BreakStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 140, CPP14Parser.RULE_breakStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1285;\r\n                this.match(CPP14Parser.Break);\r\n                this.state = 1286;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    continueStatement() {\r\n        let _localctx = new ContinueStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 142, CPP14Parser.RULE_continueStatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1288;\r\n                this.match(CPP14Parser.Continue);\r\n                this.state = 1289;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    returnStatement() {\r\n        let _localctx = new ReturnStatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 144, CPP14Parser.RULE_returnStatement);\r\n        let _la;\r\n        try {\r\n            this.state = 1300;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 109, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1291;\r\n                        this.match(CPP14Parser.Return);\r\n                        this.state = 1293;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignof) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Const_cast) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Delete) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.New - 32)) |\r\n                                        (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                        (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                        (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                        (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                        (1 << (CPP14Parser.This - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 64) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 64)) &\r\n                                    ((1 << (CPP14Parser.Throw - 64)) |\r\n                                        (1 << (CPP14Parser.Typeid - 64)) |\r\n                                        (1 << (CPP14Parser.Typename - 64)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                        (1 << (CPP14Parser.Void - 64)) |\r\n                                        (1 << (CPP14Parser.Wchar - 64)) |\r\n                                        (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                        (1 << (CPP14Parser.Plus - 64)) |\r\n                                        (1 << (CPP14Parser.Minus - 64)) |\r\n                                        (1 << (CPP14Parser.Star - 64)) |\r\n                                        (1 << (CPP14Parser.And - 64)) |\r\n                                        (1 << (CPP14Parser.Or - 64)) |\r\n                                        (1 << (CPP14Parser.Tilde - 64)) |\r\n                                        (1 << (CPP14Parser.Not - 64)))) !==\r\n                                    0) ||\r\n                            (((_la - 113) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 113)) &\r\n                                    ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                        (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                        (1 << (CPP14Parser.Identifier - 113)) |\r\n                                        (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 1292;\r\n                                this.expression(0);\r\n                            }\r\n                        }\r\n                        this.state = 1295;\r\n                        this.match(CPP14Parser.Semi);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1296;\r\n                        this.match(CPP14Parser.Return);\r\n                        this.state = 1297;\r\n                        this.bracedinitlist();\r\n                        this.state = 1298;\r\n                        this.match(CPP14Parser.Semi);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declarationstatement() {\r\n        let _localctx = new DeclarationstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 146, CPP14Parser.RULE_declarationstatement);\r\n        try {\r\n            this.state = 1304;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 110, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1302;\r\n                        this.simpledeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1303;\r\n                        this.blockdeclarationwithoutsimpledeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declarationseq(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new DeclarationseqContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 148;\r\n        this.enterRecursionRule(_localctx, 148, CPP14Parser.RULE_declarationseq, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 1307;\r\n                    this.declaration();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1313;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new DeclarationseqContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_declarationseq);\r\n                                this.state = 1309;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 1310;\r\n                                this.declaration();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1315;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 111, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    myclassbody() {\r\n        let _localctx = new MyclassbodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 150, CPP14Parser.RULE_myclassbody);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1317;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignas) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Constexpr) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Enum) |\r\n                            (1 << CPP14Parser.Explicit) |\r\n                            (1 << CPP14Parser.Extern))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Friend - 32)) |\r\n                                (1 << (CPP14Parser.Inline - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.Mutable - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Private - 32)) |\r\n                                (1 << (CPP14Parser.Protected - 32)) |\r\n                                (1 << (CPP14Parser.Public - 32)) |\r\n                                (1 << (CPP14Parser.Register - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Static - 32)) |\r\n                                (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)) |\r\n                                (1 << (CPP14Parser.Template - 32)) |\r\n                                (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 67) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 67)) &\r\n                            ((1 << (CPP14Parser.Typedef - 67)) |\r\n                                (1 << (CPP14Parser.Typename - 67)) |\r\n                                (1 << (CPP14Parser.Union - 67)) |\r\n                                (1 << (CPP14Parser.Unsigned - 67)) |\r\n                                (1 << (CPP14Parser.Using - 67)) |\r\n                                (1 << (CPP14Parser.Virtual - 67)) |\r\n                                (1 << (CPP14Parser.Void - 67)) |\r\n                                (1 << (CPP14Parser.Volatile - 67)) |\r\n                                (1 << (CPP14Parser.Wchar - 67)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 67)) |\r\n                                (1 << (CPP14Parser.Star - 67)) |\r\n                                (1 << (CPP14Parser.And - 67)) |\r\n                                (1 << (CPP14Parser.Tilde - 67)))) !==\r\n                            0) ||\r\n                    (((_la - 111) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 111)) &\r\n                            ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                (1 << (CPP14Parser.Semi - 111)) |\r\n                                (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1316;\r\n                        this.memberspecification();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    myclassspecifier() {\r\n        let _localctx = new MyclassspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 152, CPP14Parser.RULE_myclassspecifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1319;\r\n                this.myclasshead();\r\n                this.state = 1320;\r\n                this.match(CPP14Parser.LeftBrace);\r\n                this.state = 1321;\r\n                this.myclassbody();\r\n                this.state = 1322;\r\n                this.match(CPP14Parser.RightBrace);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    myclassspecifierstatement() {\r\n        let _localctx = new MyclassspecifierstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 154, CPP14Parser.RULE_myclassspecifierstatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1324;\r\n                this.myclassspecifier();\r\n                this.state = 1325;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    myclasshead() {\r\n        let _localctx = new MyclassheadContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 156, CPP14Parser.RULE_myclasshead);\r\n        let _la;\r\n        try {\r\n            this.state = 1348;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 119, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1327;\r\n                        this.classkey();\r\n                        this.state = 1329;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1328;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1332;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 114, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1331;\r\n                                    this.nestednamespecifier(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1334;\r\n                        this.classheadname();\r\n                        this.state = 1336;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Final) {\r\n                            {\r\n                                this.state = 1335;\r\n                                this.classvirtspecifier();\r\n                            }\r\n                        }\r\n                        this.state = 1339;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Colon) {\r\n                            {\r\n                                this.state = 1338;\r\n                                this.baseclause();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1341;\r\n                        this.classkey();\r\n                        this.state = 1343;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1342;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1346;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Colon) {\r\n                            {\r\n                                this.state = 1345;\r\n                                this.baseclause();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declaration() {\r\n        let _localctx = new DeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 158, CPP14Parser.RULE_declaration);\r\n        try {\r\n            this.state = 1362;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 120, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1350;\r\n                        this.variabledeclarationstatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1351;\r\n                        this.functiondeclarationstatement();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1352;\r\n                        this.blockdeclaration();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1353;\r\n                        this.myclassspecifierstatement();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1354;\r\n                        this.functiondefinition();\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1355;\r\n                        this.templatedeclaration();\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1356;\r\n                        this.explicitinstantiation();\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 1357;\r\n                        this.explicitspecialization();\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 1358;\r\n                        this.linkagespecification();\r\n                    }\r\n                    break;\r\n                case 10:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 1359;\r\n                        this.namespacedefinition();\r\n                    }\r\n                    break;\r\n                case 11:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 1360;\r\n                        this.emptydeclaration();\r\n                    }\r\n                    break;\r\n                case 12:\r\n                    this.enterOuterAlt(_localctx, 12);\r\n                    {\r\n                        this.state = 1361;\r\n                        this.attributedeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    blockdeclarationwithoutsimpledeclaration() {\r\n        let _localctx = new BlockdeclarationwithoutsimpledeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 160, CPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration);\r\n        try {\r\n            this.state = 1371;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 121, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1364;\r\n                        this.asmdefinition();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1365;\r\n                        this.namespacealiasdefinition();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1366;\r\n                        this.usingdeclaration();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1367;\r\n                        this.usingdirective();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1368;\r\n                        this.static_assertdeclaration();\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1369;\r\n                        this.aliasdeclaration();\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1370;\r\n                        this.opaqueenumdeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    blockdeclaration() {\r\n        let _localctx = new BlockdeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 162, CPP14Parser.RULE_blockdeclaration);\r\n        try {\r\n            this.state = 1375;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 122, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1373;\r\n                        this.simpledeclaration();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1374;\r\n                        this.blockdeclarationwithoutsimpledeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    aliasdeclaration() {\r\n        let _localctx = new AliasdeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 164, CPP14Parser.RULE_aliasdeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1377;\r\n                this.match(CPP14Parser.Using);\r\n                this.state = 1378;\r\n                this.match(CPP14Parser.Identifier);\r\n                this.state = 1380;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 1379;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 1382;\r\n                this.match(CPP14Parser.Assign);\r\n                this.state = 1383;\r\n                this.typeid();\r\n                this.state = 1384;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variabledeclarationstatement() {\r\n        let _localctx = new VariabledeclarationstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 166, CPP14Parser.RULE_variabledeclarationstatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1386;\r\n                this.variabledeclaration();\r\n                this.state = 1387;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variabledeclaration() {\r\n        let _localctx = new VariabledeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 168, CPP14Parser.RULE_variabledeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1390;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 1389;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 1393;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if ((((_la - 15) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 15)) &\r\n                        ((1 << (CPP14Parser.Constexpr - 15)) |\r\n                            (1 << (CPP14Parser.Explicit - 15)) |\r\n                            (1 << (CPP14Parser.Extern - 15)) |\r\n                            (1 << (CPP14Parser.Friend - 15)) |\r\n                            (1 << (CPP14Parser.Inline - 15)) |\r\n                            (1 << (CPP14Parser.Mutable - 15)))) !==\r\n                        0) ||\r\n                    (((_la - 50) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 50)) &\r\n                            ((1 << (CPP14Parser.Register - 50)) |\r\n                                (1 << (CPP14Parser.Static - 50)) |\r\n                                (1 << (CPP14Parser.Thread_local - 50)) |\r\n                                (1 << (CPP14Parser.Typedef - 50)) |\r\n                                (1 << (CPP14Parser.Virtual - 50)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1392;\r\n                        this.declspecifierseqwithouttype();\r\n                    }\r\n                }\r\n                this.state = 1402;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 127, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1395;\r\n                            this.typespecifier();\r\n                            this.state = 1397;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                            if (_la === CPP14Parser.Decltype ||\r\n                                _la === CPP14Parser.Operator ||\r\n                                (((_la - 86) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 86)) &\r\n                                        ((1 << (CPP14Parser.Star - 86)) |\r\n                                            (1 << (CPP14Parser.And - 86)) |\r\n                                            (1 << (CPP14Parser.Tilde - 86)) |\r\n                                            (1 << (CPP14Parser.AndAnd - 86)))) !==\r\n                                        0) ||\r\n                                (((_la - 120) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 120)) &\r\n                                        ((1 << (CPP14Parser.Doublecolon - 120)) |\r\n                                            (1 << (CPP14Parser.Ellipsis - 120)) |\r\n                                            (1 << (CPP14Parser.Identifier - 120)))) !==\r\n                                        0)) {\r\n                                {\r\n                                    this.state = 1396;\r\n                                    this.variableDeclaratorList();\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 1399;\r\n                            this.structspecifier();\r\n                            this.state = 1400;\r\n                            this.variableDeclaratorList();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    structspecifier() {\r\n        let _localctx = new StructspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 170, CPP14Parser.RULE_structspecifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1404;\r\n                this.match(CPP14Parser.Struct);\r\n                this.state = 1405;\r\n                this.classheadname();\r\n                this.state = 1406;\r\n                this.match(CPP14Parser.LeftBrace);\r\n                this.state = 1407;\r\n                this.myclassbody();\r\n                this.state = 1408;\r\n                this.match(CPP14Parser.RightBrace);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variableDeclaratorList() {\r\n        let _localctx = new VariableDeclaratorListContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 172, CPP14Parser.RULE_variableDeclaratorList);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1410;\r\n                this.variableDeclarator();\r\n                this.state = 1415;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 128, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1411;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 1412;\r\n                                this.variableDeclarator();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1417;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 128, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    variableDeclarator() {\r\n        let _localctx = new VariableDeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 174, CPP14Parser.RULE_variableDeclarator);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1421;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1418;\r\n                                this.ptroperator();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1423;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 129, this._ctx);\r\n                }\r\n                this.state = 1424;\r\n                this.declaratorid();\r\n                this.state = 1432;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1425;\r\n                                this.match(CPP14Parser.LeftBracket);\r\n                                this.state = 1427;\r\n                                this._errHandler.sync(this);\r\n                                _la = this._input.LA(1);\r\n                                if (_la === CPP14Parser.Integerliteral) {\r\n                                    {\r\n                                        this.state = 1426;\r\n                                        this.match(CPP14Parser.Integerliteral);\r\n                                    }\r\n                                }\r\n                                this.state = 1429;\r\n                                this.match(CPP14Parser.RightBracket);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1434;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 131, this._ctx);\r\n                }\r\n                this.state = 1437;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 132, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1435;\r\n                            this.match(CPP14Parser.Assign);\r\n                            this.state = 1436;\r\n                            this.initializerclause();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    dims() {\r\n        let _localctx = new DimsContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 176, CPP14Parser.RULE_dims);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1439;\r\n                this.match(CPP14Parser.LeftBracket);\r\n                this.state = 1440;\r\n                this.match(CPP14Parser.RightBracket);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    functiondeclarationstatement() {\r\n        let _localctx = new FunctiondeclarationstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 178, CPP14Parser.RULE_functiondeclarationstatement);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1443;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 1442;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 1446;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if ((((_la - 15) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 15)) &\r\n                        ((1 << (CPP14Parser.Constexpr - 15)) |\r\n                            (1 << (CPP14Parser.Explicit - 15)) |\r\n                            (1 << (CPP14Parser.Extern - 15)) |\r\n                            (1 << (CPP14Parser.Friend - 15)) |\r\n                            (1 << (CPP14Parser.Inline - 15)) |\r\n                            (1 << (CPP14Parser.Mutable - 15)))) !==\r\n                        0) ||\r\n                    (((_la - 50) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 50)) &\r\n                            ((1 << (CPP14Parser.Register - 50)) |\r\n                                (1 << (CPP14Parser.Static - 50)) |\r\n                                (1 << (CPP14Parser.Thread_local - 50)) |\r\n                                (1 << (CPP14Parser.Typedef - 50)) |\r\n                                (1 << (CPP14Parser.Virtual - 50)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1445;\r\n                        this.declspecifierseqwithouttype();\r\n                    }\r\n                }\r\n                this.state = 1448;\r\n                this.functionheader();\r\n                this.state = 1450;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Final || _la === CPP14Parser.Override) {\r\n                    {\r\n                        this.state = 1449;\r\n                        this.virtspecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 1452;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    simpledeclaration() {\r\n        let _localctx = new SimpledeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 180, CPP14Parser.RULE_simpledeclaration);\r\n        let _la;\r\n        try {\r\n            this.state = 1468;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Auto:\r\n                case CPP14Parser.Bool:\r\n                case CPP14Parser.Char:\r\n                case CPP14Parser.Char16:\r\n                case CPP14Parser.Char32:\r\n                case CPP14Parser.Class:\r\n                case CPP14Parser.Const:\r\n                case CPP14Parser.Constexpr:\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Double:\r\n                case CPP14Parser.File:\r\n                case CPP14Parser.Enum:\r\n                case CPP14Parser.Explicit:\r\n                case CPP14Parser.Extern:\r\n                case CPP14Parser.Float:\r\n                case CPP14Parser.Friend:\r\n                case CPP14Parser.Inline:\r\n                case CPP14Parser.Int:\r\n                case CPP14Parser.Long:\r\n                case CPP14Parser.Mutable:\r\n                case CPP14Parser.Operator:\r\n                case CPP14Parser.Register:\r\n                case CPP14Parser.Short:\r\n                case CPP14Parser.Signed:\r\n                case CPP14Parser.Static:\r\n                case CPP14Parser.Struct:\r\n                case CPP14Parser.Thread_local:\r\n                case CPP14Parser.Typedef:\r\n                case CPP14Parser.Typename:\r\n                case CPP14Parser.Union:\r\n                case CPP14Parser.Unsigned:\r\n                case CPP14Parser.Virtual:\r\n                case CPP14Parser.Void:\r\n                case CPP14Parser.Volatile:\r\n                case CPP14Parser.Wchar:\r\n                case CPP14Parser.LeftParen:\r\n                case CPP14Parser.Star:\r\n                case CPP14Parser.And:\r\n                case CPP14Parser.Tilde:\r\n                case CPP14Parser.AndAnd:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Semi:\r\n                case CPP14Parser.Ellipsis:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1455;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 136, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1454;\r\n                                    this.declspecifierseq();\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1458;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Decltype ||\r\n                            _la === CPP14Parser.Operator ||\r\n                            (((_la - 78) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 78)) &\r\n                                    ((1 << (CPP14Parser.LeftParen - 78)) |\r\n                                        (1 << (CPP14Parser.Star - 78)) |\r\n                                        (1 << (CPP14Parser.And - 78)) |\r\n                                        (1 << (CPP14Parser.Tilde - 78)))) !==\r\n                                    0) ||\r\n                            (((_la - 111) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 111)) &\r\n                                    ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                        (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                        (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 1457;\r\n                                this.initdeclaratorlist();\r\n                            }\r\n                        }\r\n                        this.state = 1460;\r\n                        this.match(CPP14Parser.Semi);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Alignas:\r\n                case CPP14Parser.LeftBracket:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1461;\r\n                        this.attributespecifierseq(0);\r\n                        this.state = 1463;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 138, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1462;\r\n                                    this.declspecifierseq();\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1465;\r\n                        this.initdeclaratorlist();\r\n                        this.state = 1466;\r\n                        this.match(CPP14Parser.Semi);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    static_assertdeclaration() {\r\n        let _localctx = new Static_assertdeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 182, CPP14Parser.RULE_static_assertdeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1470;\r\n                this.match(CPP14Parser.Static_assert);\r\n                this.state = 1471;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1472;\r\n                this.constantexpression();\r\n                this.state = 1473;\r\n                this.match(CPP14Parser.Comma);\r\n                this.state = 1474;\r\n                this.match(CPP14Parser.Stringliteral);\r\n                this.state = 1475;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 1476;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    emptydeclaration() {\r\n        let _localctx = new EmptydeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 184, CPP14Parser.RULE_emptydeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1478;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attributedeclaration() {\r\n        let _localctx = new AttributedeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 186, CPP14Parser.RULE_attributedeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1480;\r\n                this.attributespecifierseq(0);\r\n                this.state = 1481;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declspecifier() {\r\n        let _localctx = new DeclspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 188, CPP14Parser.RULE_declspecifier);\r\n        try {\r\n            this.state = 1485;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Constexpr:\r\n                case CPP14Parser.Explicit:\r\n                case CPP14Parser.Extern:\r\n                case CPP14Parser.Friend:\r\n                case CPP14Parser.Inline:\r\n                case CPP14Parser.Mutable:\r\n                case CPP14Parser.Register:\r\n                case CPP14Parser.Static:\r\n                case CPP14Parser.Thread_local:\r\n                case CPP14Parser.Typedef:\r\n                case CPP14Parser.Virtual:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1483;\r\n                        this.declspecifierwithouttype();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Auto:\r\n                case CPP14Parser.Bool:\r\n                case CPP14Parser.Char:\r\n                case CPP14Parser.Char16:\r\n                case CPP14Parser.Char32:\r\n                case CPP14Parser.Class:\r\n                case CPP14Parser.Const:\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Double:\r\n                case CPP14Parser.File:\r\n                case CPP14Parser.Enum:\r\n                case CPP14Parser.Float:\r\n                case CPP14Parser.Int:\r\n                case CPP14Parser.Long:\r\n                case CPP14Parser.Short:\r\n                case CPP14Parser.Signed:\r\n                case CPP14Parser.Struct:\r\n                case CPP14Parser.Typename:\r\n                case CPP14Parser.Union:\r\n                case CPP14Parser.Unsigned:\r\n                case CPP14Parser.Void:\r\n                case CPP14Parser.Volatile:\r\n                case CPP14Parser.Wchar:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1484;\r\n                        this.typespecifier();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declspecifierseq() {\r\n        let _localctx = new DeclspecifierseqContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 190, CPP14Parser.RULE_declspecifierseq);\r\n        let _la;\r\n        try {\r\n            this.state = 1494;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 142, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1487;\r\n                        this.declspecifier();\r\n                        this.state = 1489;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1488;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1491;\r\n                        this.declspecifier();\r\n                        this.state = 1492;\r\n                        this.declspecifierseq();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declspecifierwithouttype() {\r\n        let _localctx = new DeclspecifierwithouttypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 192, CPP14Parser.RULE_declspecifierwithouttype);\r\n        try {\r\n            this.state = 1501;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Extern:\r\n                case CPP14Parser.Mutable:\r\n                case CPP14Parser.Register:\r\n                case CPP14Parser.Static:\r\n                case CPP14Parser.Thread_local:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1496;\r\n                        this.storageclassspecifier();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Explicit:\r\n                case CPP14Parser.Inline:\r\n                case CPP14Parser.Virtual:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1497;\r\n                        this.functionspecifier();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Friend:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1498;\r\n                        this.match(CPP14Parser.Friend);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Typedef:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1499;\r\n                        this.match(CPP14Parser.Typedef);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Constexpr:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1500;\r\n                        this.match(CPP14Parser.Constexpr);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declspecifierseqwithouttype() {\r\n        let _localctx = new DeclspecifierseqwithouttypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 194, CPP14Parser.RULE_declspecifierseqwithouttype);\r\n        let _la;\r\n        try {\r\n            this.state = 1510;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 145, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1503;\r\n                        this.declspecifierwithouttype();\r\n                        this.state = 1505;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1504;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1507;\r\n                        this.declspecifierwithouttype();\r\n                        this.state = 1508;\r\n                        this.declspecifierseq();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    storageclassspecifier() {\r\n        let _localctx = new StorageclassspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 196, CPP14Parser.RULE_storageclassspecifier);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1512;\r\n                _la = this._input.LA(1);\r\n                if (!(_la === CPP14Parser.Extern ||\r\n                    (((_la - 40) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 40)) &\r\n                            ((1 << (CPP14Parser.Mutable - 40)) |\r\n                                (1 << (CPP14Parser.Register - 40)) |\r\n                                (1 << (CPP14Parser.Static - 40)) |\r\n                                (1 << (CPP14Parser.Thread_local - 40)))) !==\r\n                            0))) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    functionspecifier() {\r\n        let _localctx = new FunctionspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 198, CPP14Parser.RULE_functionspecifier);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1514;\r\n                _la = this._input.LA(1);\r\n                if (!(_la === CPP14Parser.Explicit ||\r\n                    _la === CPP14Parser.Inline ||\r\n                    _la === CPP14Parser.Virtual)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typedefname() {\r\n        let _localctx = new TypedefnameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 200, CPP14Parser.RULE_typedefname);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1516;\r\n                this.match(CPP14Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typespecifier() {\r\n        let _localctx = new TypespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 202, CPP14Parser.RULE_typespecifier);\r\n        try {\r\n            this.state = 1521;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 146, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1518;\r\n                        this.trailingtypespecifier();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1519;\r\n                        this.myclassspecifier();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1520;\r\n                        this.enumspecifier();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    trailingtypespecifier() {\r\n        let _localctx = new TrailingtypespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 204, CPP14Parser.RULE_trailingtypespecifier);\r\n        try {\r\n            this.state = 1527;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Auto:\r\n                case CPP14Parser.Bool:\r\n                case CPP14Parser.Char:\r\n                case CPP14Parser.Char16:\r\n                case CPP14Parser.Char32:\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Double:\r\n                case CPP14Parser.File:\r\n                case CPP14Parser.Float:\r\n                case CPP14Parser.Int:\r\n                case CPP14Parser.Long:\r\n                case CPP14Parser.Short:\r\n                case CPP14Parser.Signed:\r\n                case CPP14Parser.Unsigned:\r\n                case CPP14Parser.Void:\r\n                case CPP14Parser.Wchar:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1523;\r\n                        this.simpletypespecifier();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Class:\r\n                case CPP14Parser.Enum:\r\n                case CPP14Parser.Struct:\r\n                case CPP14Parser.Union:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1524;\r\n                        this.elaboratedtypespecifier();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Typename:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1525;\r\n                        this.typenamespecifier();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Const:\r\n                case CPP14Parser.Volatile:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1526;\r\n                        this.cvqualifier();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typespecifierseq() {\r\n        let _localctx = new TypespecifierseqContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 206, CPP14Parser.RULE_typespecifierseq);\r\n        try {\r\n            this.state = 1536;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 149, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1529;\r\n                        this.typespecifier();\r\n                        this.state = 1531;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 148, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1530;\r\n                                    this.attributespecifierseq(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1533;\r\n                        this.typespecifier();\r\n                        this.state = 1534;\r\n                        this.typespecifierseq();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    trailingtypespecifierseq() {\r\n        let _localctx = new TrailingtypespecifierseqContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 208, CPP14Parser.RULE_trailingtypespecifierseq);\r\n        try {\r\n            this.state = 1545;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 151, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1538;\r\n                        this.trailingtypespecifier();\r\n                        this.state = 1540;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 150, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1539;\r\n                                    this.attributespecifierseq(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1542;\r\n                        this.trailingtypespecifier();\r\n                        this.state = 1543;\r\n                        this.trailingtypespecifierseq();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    simpletypespecifier() {\r\n        let _localctx = new SimpletypespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 210, CPP14Parser.RULE_simpletypespecifier);\r\n        try {\r\n            this.state = 1574;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 154, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1548;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 152, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1547;\r\n                                    this.nestednamespecifier(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1550;\r\n                        this.typename();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1551;\r\n                        this.nestednamespecifier(0);\r\n                        this.state = 1552;\r\n                        this.match(CPP14Parser.Template);\r\n                        this.state = 1553;\r\n                        this.simpletemplateid();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1555;\r\n                        this.match(CPP14Parser.Char);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1556;\r\n                        this.match(CPP14Parser.Char16);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 1557;\r\n                        this.match(CPP14Parser.Char32);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 1558;\r\n                        this.match(CPP14Parser.Wchar);\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 1559;\r\n                        this.match(CPP14Parser.Bool);\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 1560;\r\n                        this.match(CPP14Parser.Short);\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 1561;\r\n                        this.match(CPP14Parser.Int);\r\n                    }\r\n                    break;\r\n                case 10:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 1562;\r\n                        this.match(CPP14Parser.Long);\r\n                    }\r\n                    break;\r\n                case 11:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 1563;\r\n                        this.match(CPP14Parser.Signed);\r\n                    }\r\n                    break;\r\n                case 12:\r\n                    this.enterOuterAlt(_localctx, 12);\r\n                    {\r\n                        this.state = 1564;\r\n                        this.match(CPP14Parser.Unsigned);\r\n                        this.state = 1566;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 153, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1565;\r\n                                    this.simpletypespecifier();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 13:\r\n                    this.enterOuterAlt(_localctx, 13);\r\n                    {\r\n                        this.state = 1568;\r\n                        this.match(CPP14Parser.Float);\r\n                    }\r\n                    break;\r\n                case 14:\r\n                    this.enterOuterAlt(_localctx, 14);\r\n                    {\r\n                        this.state = 1569;\r\n                        this.match(CPP14Parser.Double);\r\n                    }\r\n                    break;\r\n                case 15:\r\n                    this.enterOuterAlt(_localctx, 15);\r\n                    {\r\n                        this.state = 1570;\r\n                        this.match(CPP14Parser.Void);\r\n                    }\r\n                    break;\r\n                case 16:\r\n                    this.enterOuterAlt(_localctx, 16);\r\n                    {\r\n                        this.state = 1571;\r\n                        this.match(CPP14Parser.Auto);\r\n                    }\r\n                    break;\r\n                case 17:\r\n                    this.enterOuterAlt(_localctx, 17);\r\n                    {\r\n                        this.state = 1572;\r\n                        this.decltypespecifier();\r\n                    }\r\n                    break;\r\n                case 18:\r\n                    this.enterOuterAlt(_localctx, 18);\r\n                    {\r\n                        this.state = 1573;\r\n                        this.match(CPP14Parser.File);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typename() {\r\n        let _localctx = new TypenameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 212, CPP14Parser.RULE_typename);\r\n        try {\r\n            this.state = 1580;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 155, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1576;\r\n                        this.myclassname();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1577;\r\n                        this.enumname();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1578;\r\n                        this.typedefname();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1579;\r\n                        this.simpletemplateid();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    decltypespecifier() {\r\n        let _localctx = new DecltypespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 214, CPP14Parser.RULE_decltypespecifier);\r\n        try {\r\n            this.state = 1591;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 156, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1582;\r\n                        this.match(CPP14Parser.Decltype);\r\n                        this.state = 1583;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 1584;\r\n                        this.expression(0);\r\n                        this.state = 1585;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1587;\r\n                        this.match(CPP14Parser.Decltype);\r\n                        this.state = 1588;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 1589;\r\n                        this.match(CPP14Parser.Auto);\r\n                        this.state = 1590;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    elaboratedtypespecifier() {\r\n        let _localctx = new ElaboratedtypespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 216, CPP14Parser.RULE_elaboratedtypespecifier);\r\n        let _la;\r\n        try {\r\n            this.state = 1617;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 161, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1593;\r\n                        this.classkey();\r\n                        this.state = 1595;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1594;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1598;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 158, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1597;\r\n                                    this.nestednamespecifier(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1600;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1602;\r\n                        this.classkey();\r\n                        this.state = 1603;\r\n                        this.simpletemplateid();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1605;\r\n                        this.classkey();\r\n                        this.state = 1606;\r\n                        this.nestednamespecifier(0);\r\n                        this.state = 1608;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Template) {\r\n                            {\r\n                                this.state = 1607;\r\n                                this.match(CPP14Parser.Template);\r\n                            }\r\n                        }\r\n                        this.state = 1610;\r\n                        this.simpletemplateid();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1612;\r\n                        this.match(CPP14Parser.Enum);\r\n                        this.state = 1614;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 160, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1613;\r\n                                    this.nestednamespecifier(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1616;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumname() {\r\n        let _localctx = new EnumnameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 218, CPP14Parser.RULE_enumname);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1619;\r\n                this.match(CPP14Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumspecifier() {\r\n        let _localctx = new EnumspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 220, CPP14Parser.RULE_enumspecifier);\r\n        let _la;\r\n        try {\r\n            this.state = 1634;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 163, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1621;\r\n                        this.enumhead();\r\n                        this.state = 1622;\r\n                        this.match(CPP14Parser.LeftBrace);\r\n                        this.state = 1624;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Identifier) {\r\n                            {\r\n                                this.state = 1623;\r\n                                this.enumeratorlist(0);\r\n                            }\r\n                        }\r\n                        this.state = 1626;\r\n                        this.match(CPP14Parser.RightBrace);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1628;\r\n                        this.enumhead();\r\n                        this.state = 1629;\r\n                        this.match(CPP14Parser.LeftBrace);\r\n                        this.state = 1630;\r\n                        this.enumeratorlist(0);\r\n                        this.state = 1631;\r\n                        this.match(CPP14Parser.Comma);\r\n                        this.state = 1632;\r\n                        this.match(CPP14Parser.RightBrace);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumhead() {\r\n        let _localctx = new EnumheadContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 222, CPP14Parser.RULE_enumhead);\r\n        let _la;\r\n        try {\r\n            this.state = 1655;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 169, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1636;\r\n                        this.enumkey();\r\n                        this.state = 1638;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1637;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1641;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Identifier) {\r\n                            {\r\n                                this.state = 1640;\r\n                                this.match(CPP14Parser.Identifier);\r\n                            }\r\n                        }\r\n                        this.state = 1644;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Colon) {\r\n                            {\r\n                                this.state = 1643;\r\n                                this.enumbase();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1646;\r\n                        this.enumkey();\r\n                        this.state = 1648;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 1647;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1650;\r\n                        this.nestednamespecifier(0);\r\n                        this.state = 1651;\r\n                        this.match(CPP14Parser.Identifier);\r\n                        this.state = 1653;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Colon) {\r\n                            {\r\n                                this.state = 1652;\r\n                                this.enumbase();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    opaqueenumdeclaration() {\r\n        let _localctx = new OpaqueenumdeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 224, CPP14Parser.RULE_opaqueenumdeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1657;\r\n                this.enumkey();\r\n                this.state = 1659;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 1658;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 1661;\r\n                this.match(CPP14Parser.Identifier);\r\n                this.state = 1663;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Colon) {\r\n                    {\r\n                        this.state = 1662;\r\n                        this.enumbase();\r\n                    }\r\n                }\r\n                this.state = 1665;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumkey() {\r\n        let _localctx = new EnumkeyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 226, CPP14Parser.RULE_enumkey);\r\n        try {\r\n            this.state = 1672;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 172, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1667;\r\n                        this.match(CPP14Parser.Enum);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1668;\r\n                        this.match(CPP14Parser.Enum);\r\n                        this.state = 1669;\r\n                        this.match(CPP14Parser.Class);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1670;\r\n                        this.match(CPP14Parser.Enum);\r\n                        this.state = 1671;\r\n                        this.match(CPP14Parser.Struct);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumbase() {\r\n        let _localctx = new EnumbaseContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 228, CPP14Parser.RULE_enumbase);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1674;\r\n                this.match(CPP14Parser.Colon);\r\n                this.state = 1675;\r\n                this.typespecifierseq();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumeratorlist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new EnumeratorlistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 230;\r\n        this.enterRecursionRule(_localctx, 230, CPP14Parser.RULE_enumeratorlist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 1678;\r\n                    this.enumeratordefinition();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1685;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 173, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new EnumeratorlistContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_enumeratorlist);\r\n                                this.state = 1680;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 1681;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 1682;\r\n                                this.enumeratordefinition();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1687;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 173, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumeratordefinition() {\r\n        let _localctx = new EnumeratordefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 232, CPP14Parser.RULE_enumeratordefinition);\r\n        try {\r\n            this.state = 1693;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 174, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1688;\r\n                        this.enumerator();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1689;\r\n                        this.enumerator();\r\n                        this.state = 1690;\r\n                        this.match(CPP14Parser.Assign);\r\n                        this.state = 1691;\r\n                        this.constantexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    enumerator() {\r\n        let _localctx = new EnumeratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 234, CPP14Parser.RULE_enumerator);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1695;\r\n                this.match(CPP14Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    namespacename() {\r\n        let _localctx = new NamespacenameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 236, CPP14Parser.RULE_namespacename);\r\n        try {\r\n            this.state = 1699;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 175, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1697;\r\n                        this.originalnamespacename();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1698;\r\n                        this.namespacealias();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    originalnamespacename() {\r\n        let _localctx = new OriginalnamespacenameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 238, CPP14Parser.RULE_originalnamespacename);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1701;\r\n                this.match(CPP14Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    namespacedefinition() {\r\n        let _localctx = new NamespacedefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 240, CPP14Parser.RULE_namespacedefinition);\r\n        try {\r\n            this.state = 1705;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 176, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1703;\r\n                        this.namednamespacedefinition();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1704;\r\n                        this.unnamednamespacedefinition();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    namednamespacedefinition() {\r\n        let _localctx = new NamednamespacedefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 242, CPP14Parser.RULE_namednamespacedefinition);\r\n        try {\r\n            this.state = 1709;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 177, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1707;\r\n                        this.originalnamespacedefinition();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1708;\r\n                        this.extensionnamespacedefinition();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    originalnamespacedefinition() {\r\n        let _localctx = new OriginalnamespacedefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 244, CPP14Parser.RULE_originalnamespacedefinition);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1712;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Inline) {\r\n                    {\r\n                        this.state = 1711;\r\n                        this.match(CPP14Parser.Inline);\r\n                    }\r\n                }\r\n                this.state = 1714;\r\n                this.match(CPP14Parser.Namespace);\r\n                this.state = 1715;\r\n                this.match(CPP14Parser.Identifier);\r\n                this.state = 1716;\r\n                this.match(CPP14Parser.LeftBrace);\r\n                this.state = 1717;\r\n                this.namespacebody();\r\n                this.state = 1718;\r\n                this.match(CPP14Parser.RightBrace);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    extensionnamespacedefinition() {\r\n        let _localctx = new ExtensionnamespacedefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 246, CPP14Parser.RULE_extensionnamespacedefinition);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1721;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Inline) {\r\n                    {\r\n                        this.state = 1720;\r\n                        this.match(CPP14Parser.Inline);\r\n                    }\r\n                }\r\n                this.state = 1723;\r\n                this.match(CPP14Parser.Namespace);\r\n                this.state = 1724;\r\n                this.originalnamespacename();\r\n                this.state = 1725;\r\n                this.match(CPP14Parser.LeftBrace);\r\n                this.state = 1726;\r\n                this.namespacebody();\r\n                this.state = 1727;\r\n                this.match(CPP14Parser.RightBrace);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    unnamednamespacedefinition() {\r\n        let _localctx = new UnnamednamespacedefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 248, CPP14Parser.RULE_unnamednamespacedefinition);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1730;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Inline) {\r\n                    {\r\n                        this.state = 1729;\r\n                        this.match(CPP14Parser.Inline);\r\n                    }\r\n                }\r\n                this.state = 1732;\r\n                this.match(CPP14Parser.Namespace);\r\n                this.state = 1733;\r\n                this.match(CPP14Parser.LeftBrace);\r\n                this.state = 1734;\r\n                this.namespacebody();\r\n                this.state = 1735;\r\n                this.match(CPP14Parser.RightBrace);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    namespacebody() {\r\n        let _localctx = new NamespacebodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 250, CPP14Parser.RULE_namespacebody);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1738;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignas) |\r\n                            (1 << CPP14Parser.Asm) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Constexpr) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Enum) |\r\n                            (1 << CPP14Parser.Explicit) |\r\n                            (1 << CPP14Parser.Extern))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Friend - 32)) |\r\n                                (1 << (CPP14Parser.Inline - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.Mutable - 32)) |\r\n                                (1 << (CPP14Parser.Namespace - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Register - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Static - 32)) |\r\n                                (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)) |\r\n                                (1 << (CPP14Parser.Template - 32)) |\r\n                                (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 67) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 67)) &\r\n                            ((1 << (CPP14Parser.Typedef - 67)) |\r\n                                (1 << (CPP14Parser.Typename - 67)) |\r\n                                (1 << (CPP14Parser.Union - 67)) |\r\n                                (1 << (CPP14Parser.Unsigned - 67)) |\r\n                                (1 << (CPP14Parser.Using - 67)) |\r\n                                (1 << (CPP14Parser.Virtual - 67)) |\r\n                                (1 << (CPP14Parser.Void - 67)) |\r\n                                (1 << (CPP14Parser.Volatile - 67)) |\r\n                                (1 << (CPP14Parser.Wchar - 67)) |\r\n                                (1 << (CPP14Parser.LeftParen - 67)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 67)) |\r\n                                (1 << (CPP14Parser.Star - 67)) |\r\n                                (1 << (CPP14Parser.And - 67)) |\r\n                                (1 << (CPP14Parser.Tilde - 67)))) !==\r\n                            0) ||\r\n                    (((_la - 111) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 111)) &\r\n                            ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                (1 << (CPP14Parser.Semi - 111)) |\r\n                                (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 1737;\r\n                        this.declarationseq(0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    namespacealias() {\r\n        let _localctx = new NamespacealiasContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 252, CPP14Parser.RULE_namespacealias);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1740;\r\n                this.match(CPP14Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    namespacealiasdefinition() {\r\n        let _localctx = new NamespacealiasdefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 254, CPP14Parser.RULE_namespacealiasdefinition);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1742;\r\n                this.match(CPP14Parser.Namespace);\r\n                this.state = 1743;\r\n                this.match(CPP14Parser.Identifier);\r\n                this.state = 1744;\r\n                this.match(CPP14Parser.Assign);\r\n                this.state = 1745;\r\n                this.qualifiednamespacespecifier();\r\n                this.state = 1746;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    qualifiednamespacespecifier() {\r\n        let _localctx = new QualifiednamespacespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 256, CPP14Parser.RULE_qualifiednamespacespecifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1749;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 182, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1748;\r\n                            this.nestednamespecifier(0);\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 1751;\r\n                this.namespacename();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    usingdeclaration() {\r\n        let _localctx = new UsingdeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 258, CPP14Parser.RULE_usingdeclaration);\r\n        let _la;\r\n        try {\r\n            this.state = 1766;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 184, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1753;\r\n                        this.match(CPP14Parser.Using);\r\n                        this.state = 1755;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Typename) {\r\n                            {\r\n                                this.state = 1754;\r\n                                this.match(CPP14Parser.Typename);\r\n                            }\r\n                        }\r\n                        this.state = 1757;\r\n                        this.nestednamespecifier(0);\r\n                        this.state = 1758;\r\n                        this.unqualifiedid();\r\n                        this.state = 1759;\r\n                        this.match(CPP14Parser.Semi);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1761;\r\n                        this.match(CPP14Parser.Using);\r\n                        this.state = 1762;\r\n                        this.match(CPP14Parser.Doublecolon);\r\n                        this.state = 1763;\r\n                        this.unqualifiedid();\r\n                        this.state = 1764;\r\n                        this.match(CPP14Parser.Semi);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    usingdirective() {\r\n        let _localctx = new UsingdirectiveContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 260, CPP14Parser.RULE_usingdirective);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1769;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 1768;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 1771;\r\n                this.match(CPP14Parser.Using);\r\n                this.state = 1772;\r\n                this.match(CPP14Parser.Namespace);\r\n                this.state = 1774;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 186, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1773;\r\n                            this.nestednamespecifier(0);\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 1776;\r\n                this.namespacename();\r\n                this.state = 1777;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    asmdefinition() {\r\n        let _localctx = new AsmdefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 262, CPP14Parser.RULE_asmdefinition);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1779;\r\n                this.match(CPP14Parser.Asm);\r\n                this.state = 1780;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1781;\r\n                this.match(CPP14Parser.Stringliteral);\r\n                this.state = 1782;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 1783;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    linkagespecification() {\r\n        let _localctx = new LinkagespecificationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 264, CPP14Parser.RULE_linkagespecification);\r\n        let _la;\r\n        try {\r\n            this.state = 1795;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 188, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1785;\r\n                        this.match(CPP14Parser.Extern);\r\n                        this.state = 1786;\r\n                        this.match(CPP14Parser.Stringliteral);\r\n                        this.state = 1787;\r\n                        this.match(CPP14Parser.LeftBrace);\r\n                        this.state = 1789;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignas) |\r\n                                    (1 << CPP14Parser.Asm) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Class) |\r\n                                    (1 << CPP14Parser.Const) |\r\n                                    (1 << CPP14Parser.Constexpr) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Enum) |\r\n                                    (1 << CPP14Parser.Explicit) |\r\n                                    (1 << CPP14Parser.Extern))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Friend - 32)) |\r\n                                        (1 << (CPP14Parser.Inline - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.Mutable - 32)) |\r\n                                        (1 << (CPP14Parser.Namespace - 32)) |\r\n                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                        (1 << (CPP14Parser.Register - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Static - 32)) |\r\n                                        (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                        (1 << (CPP14Parser.Struct - 32)) |\r\n                                        (1 << (CPP14Parser.Template - 32)) |\r\n                                        (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 67) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 67)) &\r\n                                    ((1 << (CPP14Parser.Typedef - 67)) |\r\n                                        (1 << (CPP14Parser.Typename - 67)) |\r\n                                        (1 << (CPP14Parser.Union - 67)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 67)) |\r\n                                        (1 << (CPP14Parser.Using - 67)) |\r\n                                        (1 << (CPP14Parser.Virtual - 67)) |\r\n                                        (1 << (CPP14Parser.Void - 67)) |\r\n                                        (1 << (CPP14Parser.Volatile - 67)) |\r\n                                        (1 << (CPP14Parser.Wchar - 67)) |\r\n                                        (1 << (CPP14Parser.LeftParen - 67)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 67)) |\r\n                                        (1 << (CPP14Parser.Star - 67)) |\r\n                                        (1 << (CPP14Parser.And - 67)) |\r\n                                        (1 << (CPP14Parser.Tilde - 67)))) !==\r\n                                    0) ||\r\n                            (((_la - 111) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 111)) &\r\n                                    ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                        (1 << (CPP14Parser.Semi - 111)) |\r\n                                        (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                        (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 1788;\r\n                                this.declarationseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 1791;\r\n                        this.match(CPP14Parser.RightBrace);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1792;\r\n                        this.match(CPP14Parser.Extern);\r\n                        this.state = 1793;\r\n                        this.match(CPP14Parser.Stringliteral);\r\n                        this.state = 1794;\r\n                        this.declaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attributespecifierseq(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new AttributespecifierseqContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 266;\r\n        this.enterRecursionRule(_localctx, 266, CPP14Parser.RULE_attributespecifierseq, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 1798;\r\n                    this.attributespecifier();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1804;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new AttributespecifierseqContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_attributespecifierseq);\r\n                                this.state = 1800;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 1801;\r\n                                this.attributespecifier();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1806;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 189, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attributespecifier() {\r\n        let _localctx = new AttributespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 268, CPP14Parser.RULE_attributespecifier);\r\n        try {\r\n            this.state = 1814;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.LeftBracket:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1807;\r\n                        this.match(CPP14Parser.LeftBracket);\r\n                        this.state = 1808;\r\n                        this.match(CPP14Parser.LeftBracket);\r\n                        this.state = 1809;\r\n                        this.attributelist(0);\r\n                        this.state = 1810;\r\n                        this.match(CPP14Parser.RightBracket);\r\n                        this.state = 1811;\r\n                        this.match(CPP14Parser.RightBracket);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Alignas:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1813;\r\n                        this.alignmentspecifier();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    alignmentspecifier() {\r\n        let _localctx = new AlignmentspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 270, CPP14Parser.RULE_alignmentspecifier);\r\n        let _la;\r\n        try {\r\n            this.state = 1832;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 193, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1816;\r\n                        this.match(CPP14Parser.Alignas);\r\n                        this.state = 1817;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 1818;\r\n                        this.typeid();\r\n                        this.state = 1820;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Ellipsis) {\r\n                            {\r\n                                this.state = 1819;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                        }\r\n                        this.state = 1822;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1824;\r\n                        this.match(CPP14Parser.Alignas);\r\n                        this.state = 1825;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 1826;\r\n                        this.constantexpression();\r\n                        this.state = 1828;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Ellipsis) {\r\n                            {\r\n                                this.state = 1827;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                        }\r\n                        this.state = 1830;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attributelist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new AttributelistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 272;\r\n        this.enterRecursionRule(_localctx, 272, CPP14Parser.RULE_attributelist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1841;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 195, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1836;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 194, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        this.state = 1835;\r\n                                        this.attribute();\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 1838;\r\n                            this.attribute();\r\n                            this.state = 1839;\r\n                            this.match(CPP14Parser.Ellipsis);\r\n                        }\r\n                        break;\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1855;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 1853;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 197, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new AttributelistContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_attributelist);\r\n                                        this.state = 1843;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 1844;\r\n                                        this.match(CPP14Parser.Comma);\r\n                                        this.state = 1846;\r\n                                        this._errHandler.sync(this);\r\n                                        switch (this.interpreter.adaptivePredict(this._input, 196, this._ctx)) {\r\n                                            case 1:\r\n                                                {\r\n                                                    this.state = 1845;\r\n                                                    this.attribute();\r\n                                                }\r\n                                                break;\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new AttributelistContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_attributelist);\r\n                                        this.state = 1848;\r\n                                        if (!this.precpred(this._ctx, 1)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                        }\r\n                                        this.state = 1849;\r\n                                        this.match(CPP14Parser.Comma);\r\n                                        this.state = 1850;\r\n                                        this.attribute();\r\n                                        this.state = 1851;\r\n                                        this.match(CPP14Parser.Ellipsis);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1857;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 198, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attribute() {\r\n        let _localctx = new AttributeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 274, CPP14Parser.RULE_attribute);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1858;\r\n                this.attributetoken();\r\n                this.state = 1860;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 199, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1859;\r\n                            this.attributeargumentclause();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attributetoken() {\r\n        let _localctx = new AttributetokenContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 276, CPP14Parser.RULE_attributetoken);\r\n        try {\r\n            this.state = 1864;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 200, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1862;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1863;\r\n                        this.attributescopedtoken();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attributescopedtoken() {\r\n        let _localctx = new AttributescopedtokenContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 278, CPP14Parser.RULE_attributescopedtoken);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1866;\r\n                this.attributenamespace();\r\n                this.state = 1867;\r\n                this.match(CPP14Parser.Doublecolon);\r\n                this.state = 1868;\r\n                this.match(CPP14Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attributenamespace() {\r\n        let _localctx = new AttributenamespaceContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 280, CPP14Parser.RULE_attributenamespace);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1870;\r\n                this.match(CPP14Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    attributeargumentclause() {\r\n        let _localctx = new AttributeargumentclauseContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 282, CPP14Parser.RULE_attributeargumentclause);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1872;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1873;\r\n                this.balancedtokenseq(0);\r\n                this.state = 1874;\r\n                this.match(CPP14Parser.RightParen);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    balancedtokenseq(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new BalancedtokenseqContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 284;\r\n        this.enterRecursionRule(_localctx, 284, CPP14Parser.RULE_balancedtokenseq, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 1878;\r\n                    this._errHandler.sync(this);\r\n                    switch (this.interpreter.adaptivePredict(this._input, 201, this._ctx)) {\r\n                        case 1:\r\n                            {\r\n                                this.state = 1877;\r\n                                this.balancedtoken();\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1884;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new BalancedtokenseqContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_balancedtokenseq);\r\n                                this.state = 1880;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 1881;\r\n                                this.balancedtoken();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1886;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 202, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    balancedtoken() {\r\n        let _localctx = new BalancedtokenContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 286, CPP14Parser.RULE_balancedtoken);\r\n        try {\r\n            this.state = 1899;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.LeftParen:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1887;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 1888;\r\n                        this.balancedtokenseq(0);\r\n                        this.state = 1889;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftBracket:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1891;\r\n                        this.match(CPP14Parser.LeftBracket);\r\n                        this.state = 1892;\r\n                        this.balancedtokenseq(0);\r\n                        this.state = 1893;\r\n                        this.match(CPP14Parser.RightBracket);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftBrace:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1895;\r\n                        this.match(CPP14Parser.LeftBrace);\r\n                        this.state = 1896;\r\n                        this.balancedtokenseq(0);\r\n                        this.state = 1897;\r\n                        this.match(CPP14Parser.RightBrace);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    initdeclaratorlist() {\r\n        let _localctx = new InitdeclaratorlistContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 288, CPP14Parser.RULE_initdeclaratorlist);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1901;\r\n                this.initdeclarator();\r\n                this.state = 1906;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                while (_la === CPP14Parser.Comma) {\r\n                    {\r\n                        {\r\n                            this.state = 1902;\r\n                            this.match(CPP14Parser.Comma);\r\n                            this.state = 1903;\r\n                            this.initdeclarator();\r\n                        }\r\n                    }\r\n                    this.state = 1908;\r\n                    this._errHandler.sync(this);\r\n                    _la = this._input.LA(1);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    initdeclarator() {\r\n        let _localctx = new InitdeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 290, CPP14Parser.RULE_initdeclarator);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1909;\r\n                this.declarator();\r\n                this.state = 1911;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la - 78) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 78)) &\r\n                        ((1 << (CPP14Parser.LeftParen - 78)) |\r\n                            (1 << (CPP14Parser.LeftBrace - 78)) |\r\n                            (1 << (CPP14Parser.Assign - 78)))) !==\r\n                        0) {\r\n                    {\r\n                        this.state = 1910;\r\n                        this.initializer();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declarator() {\r\n        let _localctx = new DeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 292, CPP14Parser.RULE_declarator);\r\n        try {\r\n            this.state = 1918;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 206, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1913;\r\n                        this.ptrdeclarator();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1914;\r\n                        this.noptrdeclarator(0);\r\n                        this.state = 1915;\r\n                        this.parametersandqualifiers();\r\n                        this.state = 1916;\r\n                        this.trailingreturntype();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ptrdeclarator() {\r\n        let _localctx = new PtrdeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 294, CPP14Parser.RULE_ptrdeclarator);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1923;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 1920;\r\n                                this.ptroperator();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1925;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);\r\n                }\r\n                this.state = 1926;\r\n                this.noptrdeclarator(0);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    noptrdeclarator(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new NoptrdeclaratorContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 296;\r\n        this.enterRecursionRule(_localctx, 296, CPP14Parser.RULE_noptrdeclarator, _p);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1937;\r\n                this._errHandler.sync(this);\r\n                switch (this._input.LA(1)) {\r\n                    case CPP14Parser.Decltype:\r\n                    case CPP14Parser.Operator:\r\n                    case CPP14Parser.Tilde:\r\n                    case CPP14Parser.Doublecolon:\r\n                    case CPP14Parser.Ellipsis:\r\n                    case CPP14Parser.Identifier:\r\n                        {\r\n                            this.state = 1929;\r\n                            this.declaratorid();\r\n                            this.state = 1931;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 208, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        this.state = 1930;\r\n                                        this.attributespecifierseq(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case CPP14Parser.LeftParen:\r\n                        {\r\n                            this.state = 1933;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 1934;\r\n                            this.ptrdeclarator();\r\n                            this.state = 1935;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        throw new NoViableAltException_1.NoViableAltException(this);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 1952;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 1950;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 212, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new NoptrdeclaratorContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_noptrdeclarator);\r\n                                        this.state = 1939;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 1940;\r\n                                        this.parametersandqualifiers();\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new NoptrdeclaratorContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_noptrdeclarator);\r\n                                        this.state = 1941;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 1942;\r\n                                        this.match(CPP14Parser.LeftBracket);\r\n                                        this.state = 1944;\r\n                                        this._errHandler.sync(this);\r\n                                        _la = this._input.LA(1);\r\n                                        if (((_la & ~0x1f) === 0 &&\r\n                                            ((1 << _la) &\r\n                                                ((1 << CPP14Parser.Alignof) |\r\n                                                    (1 << CPP14Parser.Auto) |\r\n                                                    (1 << CPP14Parser.Bool) |\r\n                                                    (1 << CPP14Parser.Char) |\r\n                                                    (1 << CPP14Parser.Char16) |\r\n                                                    (1 << CPP14Parser.Char32) |\r\n                                                    (1 << CPP14Parser.Const_cast) |\r\n                                                    (1 << CPP14Parser.Decltype) |\r\n                                                    (1 << CPP14Parser.Delete) |\r\n                                                    (1 << CPP14Parser.Double) |\r\n                                                    (1 << CPP14Parser.File) |\r\n                                                    (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                                0) ||\r\n                                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 32)) &\r\n                                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                                        (1 << (CPP14Parser.New - 32)) |\r\n                                                        (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                                        (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                                        (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                                        (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                                        (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                                        (1 << (CPP14Parser.This - 32)))) !==\r\n                                                    0) ||\r\n                                            (((_la - 68) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 68)) &\r\n                                                    ((1 << (CPP14Parser.Typeid - 68)) |\r\n                                                        (1 << (CPP14Parser.Typename - 68)) |\r\n                                                        (1 << (CPP14Parser.Unsigned - 68)) |\r\n                                                        (1 << (CPP14Parser.Void - 68)) |\r\n                                                        (1 << (CPP14Parser.Wchar - 68)) |\r\n                                                        (1 << (CPP14Parser.LeftParen - 68)) |\r\n                                                        (1 << (CPP14Parser.LeftBracket - 68)) |\r\n                                                        (1 << (CPP14Parser.Plus - 68)) |\r\n                                                        (1 << (CPP14Parser.Minus - 68)) |\r\n                                                        (1 << (CPP14Parser.Star - 68)) |\r\n                                                        (1 << (CPP14Parser.And - 68)) |\r\n                                                        (1 << (CPP14Parser.Or - 68)) |\r\n                                                        (1 << (CPP14Parser.Tilde - 68)) |\r\n                                                        (1 << (CPP14Parser.Not - 68)))) !==\r\n                                                    0) ||\r\n                                            (((_la - 113) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 113)) &\r\n                                                    ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                                        (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                                        (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                                        (1 << (CPP14Parser.Identifier - 113)) |\r\n                                                        (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                                    0)) {\r\n                                            {\r\n                                                this.state = 1943;\r\n                                                this.constantexpression();\r\n                                            }\r\n                                        }\r\n                                        this.state = 1946;\r\n                                        this.match(CPP14Parser.RightBracket);\r\n                                        this.state = 1948;\r\n                                        this._errHandler.sync(this);\r\n                                        switch (this.interpreter.adaptivePredict(this._input, 211, this._ctx)) {\r\n                                            case 1:\r\n                                                {\r\n                                                    this.state = 1947;\r\n                                                    this.attributespecifierseq(0);\r\n                                                }\r\n                                                break;\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 1954;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 213, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    parametersandqualifiers() {\r\n        let _localctx = new ParametersandqualifiersContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 298, CPP14Parser.RULE_parametersandqualifiers);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1955;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 1956;\r\n                this.parameterdeclarationclause();\r\n                this.state = 1957;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 1959;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 214, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1958;\r\n                            this.cvqualifierseq();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 1962;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 215, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1961;\r\n                            this.refqualifier();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 1965;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 216, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1964;\r\n                            this.exceptionspecification();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 1968;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 217, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1967;\r\n                            this.attributespecifierseq(0);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    trailingreturntype() {\r\n        let _localctx = new TrailingreturntypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 300, CPP14Parser.RULE_trailingreturntype);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 1970;\r\n                this.match(CPP14Parser.Arrow);\r\n                this.state = 1971;\r\n                this.trailingtypespecifierseq();\r\n                this.state = 1973;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 218, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 1972;\r\n                            this.abstractdeclarator();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ptroperator() {\r\n        let _localctx = new PtroperatorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 302, CPP14Parser.RULE_ptroperator);\r\n        try {\r\n            this.state = 1998;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Star:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 1975;\r\n                        this.match(CPP14Parser.Star);\r\n                        this.state = 1977;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 219, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1976;\r\n                                    this.attributespecifierseq(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1980;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 220, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1979;\r\n                                    this.cvqualifierseq();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case CPP14Parser.And:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 1982;\r\n                        this.match(CPP14Parser.And);\r\n                        this.state = 1984;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 221, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1983;\r\n                                    this.attributespecifierseq(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case CPP14Parser.AndAnd:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 1986;\r\n                        this.match(CPP14Parser.AndAnd);\r\n                        this.state = 1988;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 222, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1987;\r\n                                    this.attributespecifierseq(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 1990;\r\n                        this.nestednamespecifier(0);\r\n                        this.state = 1991;\r\n                        this.match(CPP14Parser.Star);\r\n                        this.state = 1993;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 223, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1992;\r\n                                    this.attributespecifierseq(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 1996;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 224, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 1995;\r\n                                    this.cvqualifierseq();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    cvqualifierseq() {\r\n        let _localctx = new CvqualifierseqContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 304, CPP14Parser.RULE_cvqualifierseq);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2000;\r\n                this.cvqualifier();\r\n                this.state = 2002;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 226, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2001;\r\n                            this.cvqualifierseq();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    cvqualifier() {\r\n        let _localctx = new CvqualifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 306, CPP14Parser.RULE_cvqualifier);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2004;\r\n                _la = this._input.LA(1);\r\n                if (!(_la === CPP14Parser.Const || _la === CPP14Parser.Volatile)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    refqualifier() {\r\n        let _localctx = new RefqualifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 308, CPP14Parser.RULE_refqualifier);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2006;\r\n                _la = this._input.LA(1);\r\n                if (!(_la === CPP14Parser.And || _la === CPP14Parser.AndAnd)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    declaratorid() {\r\n        let _localctx = new DeclaratoridContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 310, CPP14Parser.RULE_declaratorid);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2009;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Ellipsis) {\r\n                    {\r\n                        this.state = 2008;\r\n                        this.match(CPP14Parser.Ellipsis);\r\n                    }\r\n                }\r\n                this.state = 2011;\r\n                this.idexpression();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeid() {\r\n        let _localctx = new TypeidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 312, CPP14Parser.RULE_typeid);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2013;\r\n                this.typespecifierseq();\r\n                this.state = 2015;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 228, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2014;\r\n                            this.abstractdeclarator();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    abstractdeclarator() {\r\n        let _localctx = new AbstractdeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 314, CPP14Parser.RULE_abstractdeclarator);\r\n        try {\r\n            this.state = 2025;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 230, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2017;\r\n                        this.ptrabstractdeclarator();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2019;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 229, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2018;\r\n                                    this.noptrabstractdeclarator(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 2021;\r\n                        this.parametersandqualifiers();\r\n                        this.state = 2022;\r\n                        this.trailingreturntype();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2024;\r\n                        this.abstractpackdeclarator();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ptrabstractdeclarator() {\r\n        let _localctx = new PtrabstractdeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 316, CPP14Parser.RULE_ptrabstractdeclarator);\r\n        try {\r\n            this.state = 2032;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.LeftParen:\r\n                case CPP14Parser.LeftBracket:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2027;\r\n                        this.noptrabstractdeclarator(0);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Star:\r\n                case CPP14Parser.And:\r\n                case CPP14Parser.AndAnd:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2028;\r\n                        this.ptroperator();\r\n                        this.state = 2030;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 231, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2029;\r\n                                    this.ptrabstractdeclarator();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    noptrabstractdeclarator(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new NoptrabstractdeclaratorContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 318;\r\n        this.enterRecursionRule(_localctx, 318, CPP14Parser.RULE_noptrabstractdeclarator, _p);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2048;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 235, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2035;\r\n                            this.parametersandqualifiers();\r\n                        }\r\n                        break;\r\n                    case 2:\r\n                        {\r\n                            this.state = 2036;\r\n                            this.match(CPP14Parser.LeftBracket);\r\n                            this.state = 2038;\r\n                            this._errHandler.sync(this);\r\n                            _la = this._input.LA(1);\r\n                            if (((_la & ~0x1f) === 0 &&\r\n                                ((1 << _la) &\r\n                                    ((1 << CPP14Parser.Alignof) |\r\n                                        (1 << CPP14Parser.Auto) |\r\n                                        (1 << CPP14Parser.Bool) |\r\n                                        (1 << CPP14Parser.Char) |\r\n                                        (1 << CPP14Parser.Char16) |\r\n                                        (1 << CPP14Parser.Char32) |\r\n                                        (1 << CPP14Parser.Const_cast) |\r\n                                        (1 << CPP14Parser.Decltype) |\r\n                                        (1 << CPP14Parser.Delete) |\r\n                                        (1 << CPP14Parser.Double) |\r\n                                        (1 << CPP14Parser.File) |\r\n                                        (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                    0) ||\r\n                                (((_la - 32) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 32)) &\r\n                                        ((1 << (CPP14Parser.Float - 32)) |\r\n                                            (1 << (CPP14Parser.Int - 32)) |\r\n                                            (1 << (CPP14Parser.Long - 32)) |\r\n                                            (1 << (CPP14Parser.New - 32)) |\r\n                                            (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                            (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                            (1 << (CPP14Parser.Operator - 32)) |\r\n                                            (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                            (1 << (CPP14Parser.Short - 32)) |\r\n                                            (1 << (CPP14Parser.Signed - 32)) |\r\n                                            (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                            (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                            (1 << (CPP14Parser.This - 32)))) !==\r\n                                        0) ||\r\n                                (((_la - 68) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 68)) &\r\n                                        ((1 << (CPP14Parser.Typeid - 68)) |\r\n                                            (1 << (CPP14Parser.Typename - 68)) |\r\n                                            (1 << (CPP14Parser.Unsigned - 68)) |\r\n                                            (1 << (CPP14Parser.Void - 68)) |\r\n                                            (1 << (CPP14Parser.Wchar - 68)) |\r\n                                            (1 << (CPP14Parser.LeftParen - 68)) |\r\n                                            (1 << (CPP14Parser.LeftBracket - 68)) |\r\n                                            (1 << (CPP14Parser.Plus - 68)) |\r\n                                            (1 << (CPP14Parser.Minus - 68)) |\r\n                                            (1 << (CPP14Parser.Star - 68)) |\r\n                                            (1 << (CPP14Parser.And - 68)) |\r\n                                            (1 << (CPP14Parser.Or - 68)) |\r\n                                            (1 << (CPP14Parser.Tilde - 68)) |\r\n                                            (1 << (CPP14Parser.Not - 68)))) !==\r\n                                        0) ||\r\n                                (((_la - 113) & ~0x1f) === 0 &&\r\n                                    ((1 << (_la - 113)) &\r\n                                        ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                            (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                            (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                            (1 << (CPP14Parser.Identifier - 113)) |\r\n                                            (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                            (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                        0)) {\r\n                                {\r\n                                    this.state = 2037;\r\n                                    this.constantexpression();\r\n                                }\r\n                            }\r\n                            this.state = 2040;\r\n                            this.match(CPP14Parser.RightBracket);\r\n                            this.state = 2042;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 234, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        this.state = 2041;\r\n                                        this.attributespecifierseq(0);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        {\r\n                            this.state = 2044;\r\n                            this.match(CPP14Parser.LeftParen);\r\n                            this.state = 2045;\r\n                            this.ptrabstractdeclarator();\r\n                            this.state = 2046;\r\n                            this.match(CPP14Parser.RightParen);\r\n                        }\r\n                        break;\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2063;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 2061;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 238, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_noptrabstractdeclarator);\r\n                                        this.state = 2050;\r\n                                        if (!this.precpred(this._ctx, 5)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 5)');\r\n                                        }\r\n                                        this.state = 2051;\r\n                                        this.parametersandqualifiers();\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new NoptrabstractdeclaratorContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_noptrabstractdeclarator);\r\n                                        this.state = 2052;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 2053;\r\n                                        this.match(CPP14Parser.LeftBracket);\r\n                                        this.state = 2055;\r\n                                        this._errHandler.sync(this);\r\n                                        _la = this._input.LA(1);\r\n                                        if (((_la & ~0x1f) === 0 &&\r\n                                            ((1 << _la) &\r\n                                                ((1 << CPP14Parser.Alignof) |\r\n                                                    (1 << CPP14Parser.Auto) |\r\n                                                    (1 << CPP14Parser.Bool) |\r\n                                                    (1 << CPP14Parser.Char) |\r\n                                                    (1 << CPP14Parser.Char16) |\r\n                                                    (1 << CPP14Parser.Char32) |\r\n                                                    (1 << CPP14Parser.Const_cast) |\r\n                                                    (1 << CPP14Parser.Decltype) |\r\n                                                    (1 << CPP14Parser.Delete) |\r\n                                                    (1 << CPP14Parser.Double) |\r\n                                                    (1 << CPP14Parser.File) |\r\n                                                    (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                                0) ||\r\n                                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 32)) &\r\n                                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                                        (1 << (CPP14Parser.New - 32)) |\r\n                                                        (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                                        (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                                        (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                                        (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                                        (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                                        (1 << (CPP14Parser.This - 32)))) !==\r\n                                                    0) ||\r\n                                            (((_la - 68) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 68)) &\r\n                                                    ((1 << (CPP14Parser.Typeid - 68)) |\r\n                                                        (1 << (CPP14Parser.Typename - 68)) |\r\n                                                        (1 << (CPP14Parser.Unsigned - 68)) |\r\n                                                        (1 << (CPP14Parser.Void - 68)) |\r\n                                                        (1 << (CPP14Parser.Wchar - 68)) |\r\n                                                        (1 << (CPP14Parser.LeftParen - 68)) |\r\n                                                        (1 << (CPP14Parser.LeftBracket - 68)) |\r\n                                                        (1 << (CPP14Parser.Plus - 68)) |\r\n                                                        (1 << (CPP14Parser.Minus - 68)) |\r\n                                                        (1 << (CPP14Parser.Star - 68)) |\r\n                                                        (1 << (CPP14Parser.And - 68)) |\r\n                                                        (1 << (CPP14Parser.Or - 68)) |\r\n                                                        (1 << (CPP14Parser.Tilde - 68)) |\r\n                                                        (1 << (CPP14Parser.Not - 68)))) !==\r\n                                                    0) ||\r\n                                            (((_la - 113) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 113)) &\r\n                                                    ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                                        (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                                        (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                                        (1 << (CPP14Parser.Identifier - 113)) |\r\n                                                        (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                                    0)) {\r\n                                            {\r\n                                                this.state = 2054;\r\n                                                this.constantexpression();\r\n                                            }\r\n                                        }\r\n                                        this.state = 2057;\r\n                                        this.match(CPP14Parser.RightBracket);\r\n                                        this.state = 2059;\r\n                                        this._errHandler.sync(this);\r\n                                        switch (this.interpreter.adaptivePredict(this._input, 237, this._ctx)) {\r\n                                            case 1:\r\n                                                {\r\n                                                    this.state = 2058;\r\n                                                    this.attributespecifierseq(0);\r\n                                                }\r\n                                                break;\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2065;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    abstractpackdeclarator() {\r\n        let _localctx = new AbstractpackdeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 320, CPP14Parser.RULE_abstractpackdeclarator);\r\n        try {\r\n            this.state = 2070;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Ellipsis:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2066;\r\n                        this.noptrabstractpackdeclarator(0);\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Star:\r\n                case CPP14Parser.And:\r\n                case CPP14Parser.AndAnd:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2067;\r\n                        this.ptroperator();\r\n                        this.state = 2068;\r\n                        this.abstractpackdeclarator();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    noptrabstractpackdeclarator(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new NoptrabstractpackdeclaratorContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 322;\r\n        this.enterRecursionRule(_localctx, 322, CPP14Parser.RULE_noptrabstractpackdeclarator, _p);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2073;\r\n                    this.match(CPP14Parser.Ellipsis);\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2088;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            this.state = 2086;\r\n                            this._errHandler.sync(this);\r\n                            switch (this.interpreter.adaptivePredict(this._input, 243, this._ctx)) {\r\n                                case 1:\r\n                                    {\r\n                                        _localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_noptrabstractpackdeclarator);\r\n                                        this.state = 2075;\r\n                                        if (!this.precpred(this._ctx, 3)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');\r\n                                        }\r\n                                        this.state = 2076;\r\n                                        this.parametersandqualifiers();\r\n                                    }\r\n                                    break;\r\n                                case 2:\r\n                                    {\r\n                                        _localctx = new NoptrabstractpackdeclaratorContext(_parentctx, _parentState);\r\n                                        this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_noptrabstractpackdeclarator);\r\n                                        this.state = 2077;\r\n                                        if (!this.precpred(this._ctx, 2)) {\r\n                                            throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');\r\n                                        }\r\n                                        this.state = 2078;\r\n                                        this.match(CPP14Parser.LeftBracket);\r\n                                        this.state = 2080;\r\n                                        this._errHandler.sync(this);\r\n                                        _la = this._input.LA(1);\r\n                                        if (((_la & ~0x1f) === 0 &&\r\n                                            ((1 << _la) &\r\n                                                ((1 << CPP14Parser.Alignof) |\r\n                                                    (1 << CPP14Parser.Auto) |\r\n                                                    (1 << CPP14Parser.Bool) |\r\n                                                    (1 << CPP14Parser.Char) |\r\n                                                    (1 << CPP14Parser.Char16) |\r\n                                                    (1 << CPP14Parser.Char32) |\r\n                                                    (1 << CPP14Parser.Const_cast) |\r\n                                                    (1 << CPP14Parser.Decltype) |\r\n                                                    (1 << CPP14Parser.Delete) |\r\n                                                    (1 << CPP14Parser.Double) |\r\n                                                    (1 << CPP14Parser.File) |\r\n                                                    (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                                0) ||\r\n                                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 32)) &\r\n                                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                                        (1 << (CPP14Parser.New - 32)) |\r\n                                                        (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                                        (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                                        (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                                        (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                                        (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                                        (1 << (CPP14Parser.This - 32)))) !==\r\n                                                    0) ||\r\n                                            (((_la - 68) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 68)) &\r\n                                                    ((1 << (CPP14Parser.Typeid - 68)) |\r\n                                                        (1 << (CPP14Parser.Typename - 68)) |\r\n                                                        (1 << (CPP14Parser.Unsigned - 68)) |\r\n                                                        (1 << (CPP14Parser.Void - 68)) |\r\n                                                        (1 << (CPP14Parser.Wchar - 68)) |\r\n                                                        (1 << (CPP14Parser.LeftParen - 68)) |\r\n                                                        (1 << (CPP14Parser.LeftBracket - 68)) |\r\n                                                        (1 << (CPP14Parser.Plus - 68)) |\r\n                                                        (1 << (CPP14Parser.Minus - 68)) |\r\n                                                        (1 << (CPP14Parser.Star - 68)) |\r\n                                                        (1 << (CPP14Parser.And - 68)) |\r\n                                                        (1 << (CPP14Parser.Or - 68)) |\r\n                                                        (1 << (CPP14Parser.Tilde - 68)) |\r\n                                                        (1 << (CPP14Parser.Not - 68)))) !==\r\n                                                    0) ||\r\n                                            (((_la - 113) & ~0x1f) === 0 &&\r\n                                                ((1 << (_la - 113)) &\r\n                                                    ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                                        (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                                        (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                                        (1 << (CPP14Parser.Identifier - 113)) |\r\n                                                        (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                                        (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                                    0)) {\r\n                                            {\r\n                                                this.state = 2079;\r\n                                                this.constantexpression();\r\n                                            }\r\n                                        }\r\n                                        this.state = 2082;\r\n                                        this.match(CPP14Parser.RightBracket);\r\n                                        this.state = 2084;\r\n                                        this._errHandler.sync(this);\r\n                                        switch (this.interpreter.adaptivePredict(this._input, 242, this._ctx)) {\r\n                                            case 1:\r\n                                                {\r\n                                                    this.state = 2083;\r\n                                                    this.attributespecifierseq(0);\r\n                                                }\r\n                                                break;\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2090;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 244, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    parameterdeclarationclause() {\r\n        let _localctx = new ParameterdeclarationclauseContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 324, CPP14Parser.RULE_parameterdeclarationclause);\r\n        let _la;\r\n        try {\r\n            this.state = 2101;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 247, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2092;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignas) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Class) |\r\n                                    (1 << CPP14Parser.Const) |\r\n                                    (1 << CPP14Parser.Constexpr) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Enum) |\r\n                                    (1 << CPP14Parser.Explicit) |\r\n                                    (1 << CPP14Parser.Extern))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Friend - 32)) |\r\n                                        (1 << (CPP14Parser.Inline - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.Mutable - 32)) |\r\n                                        (1 << (CPP14Parser.Register - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Static - 32)) |\r\n                                        (1 << (CPP14Parser.Struct - 32)) |\r\n                                        (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 67) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 67)) &\r\n                                    ((1 << (CPP14Parser.Typedef - 67)) |\r\n                                        (1 << (CPP14Parser.Typename - 67)) |\r\n                                        (1 << (CPP14Parser.Union - 67)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 67)) |\r\n                                        (1 << (CPP14Parser.Virtual - 67)) |\r\n                                        (1 << (CPP14Parser.Void - 67)) |\r\n                                        (1 << (CPP14Parser.Volatile - 67)) |\r\n                                        (1 << (CPP14Parser.Wchar - 67)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 67)))) !==\r\n                                    0) ||\r\n                            _la === CPP14Parser.Doublecolon ||\r\n                            _la === CPP14Parser.Identifier) {\r\n                            {\r\n                                this.state = 2091;\r\n                                this.parameterdeclarationlist(0);\r\n                            }\r\n                        }\r\n                        this.state = 2095;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Ellipsis) {\r\n                            {\r\n                                this.state = 2094;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2097;\r\n                        this.parameterdeclarationlist(0);\r\n                        this.state = 2098;\r\n                        this.match(CPP14Parser.Comma);\r\n                        this.state = 2099;\r\n                        this.match(CPP14Parser.Ellipsis);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    parameterdeclarationlist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new ParameterdeclarationlistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 326;\r\n        this.enterRecursionRule(_localctx, 326, CPP14Parser.RULE_parameterdeclarationlist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2104;\r\n                    this.parameterdeclaration();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2111;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new ParameterdeclarationlistContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_parameterdeclarationlist);\r\n                                this.state = 2106;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2107;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 2108;\r\n                                this.parameterdeclaration();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2113;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 248, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    parameterdeclaration() {\r\n        let _localctx = new ParameterdeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 328, CPP14Parser.RULE_parameterdeclaration);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2115;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 2114;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 2118;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if ((((_la - 15) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 15)) &\r\n                        ((1 << (CPP14Parser.Constexpr - 15)) |\r\n                            (1 << (CPP14Parser.Explicit - 15)) |\r\n                            (1 << (CPP14Parser.Extern - 15)) |\r\n                            (1 << (CPP14Parser.Friend - 15)) |\r\n                            (1 << (CPP14Parser.Inline - 15)) |\r\n                            (1 << (CPP14Parser.Mutable - 15)))) !==\r\n                        0) ||\r\n                    (((_la - 50) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 50)) &\r\n                            ((1 << (CPP14Parser.Register - 50)) |\r\n                                (1 << (CPP14Parser.Static - 50)) |\r\n                                (1 << (CPP14Parser.Thread_local - 50)) |\r\n                                (1 << (CPP14Parser.Typedef - 50)) |\r\n                                (1 << (CPP14Parser.Virtual - 50)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 2117;\r\n                        this.declspecifierseqwithouttype();\r\n                    }\r\n                }\r\n                this.state = 2120;\r\n                this.typespecifier();\r\n                this.state = 2122;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 251, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2121;\r\n                            this.variableDeclaratorList();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    functiondefinition() {\r\n        let _localctx = new FunctiondefinitionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 330, CPP14Parser.RULE_functiondefinition);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2125;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 2124;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 2128;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if ((((_la - 15) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 15)) &\r\n                        ((1 << (CPP14Parser.Constexpr - 15)) |\r\n                            (1 << (CPP14Parser.Explicit - 15)) |\r\n                            (1 << (CPP14Parser.Extern - 15)) |\r\n                            (1 << (CPP14Parser.Friend - 15)) |\r\n                            (1 << (CPP14Parser.Inline - 15)) |\r\n                            (1 << (CPP14Parser.Mutable - 15)))) !==\r\n                        0) ||\r\n                    (((_la - 50) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 50)) &\r\n                            ((1 << (CPP14Parser.Register - 50)) |\r\n                                (1 << (CPP14Parser.Static - 50)) |\r\n                                (1 << (CPP14Parser.Thread_local - 50)) |\r\n                                (1 << (CPP14Parser.Typedef - 50)) |\r\n                                (1 << (CPP14Parser.Virtual - 50)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 2127;\r\n                        this.declspecifierseqwithouttype();\r\n                    }\r\n                }\r\n                this.state = 2130;\r\n                this.functionheader();\r\n                this.state = 2132;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Final || _la === CPP14Parser.Override) {\r\n                    {\r\n                        this.state = 2131;\r\n                        this.virtspecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 2134;\r\n                this.functionbody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    functionheader() {\r\n        let _localctx = new FunctionheaderContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 332, CPP14Parser.RULE_functionheader);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2137;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 255, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2136;\r\n                            this.typespecifier();\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 2142;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 2139;\r\n                                this.ptroperator();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2144;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 256, this._ctx);\r\n                }\r\n                this.state = 2145;\r\n                this.functiondeclarator();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    functiondeclarator() {\r\n        let _localctx = new FunctiondeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 334, CPP14Parser.RULE_functiondeclarator);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2147;\r\n                this.declaratorid();\r\n                this.state = 2148;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 2149;\r\n                this.parameterdeclarationclause();\r\n                this.state = 2150;\r\n                this.match(CPP14Parser.RightParen);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    functionbody() {\r\n        let _localctx = new FunctionbodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 336, CPP14Parser.RULE_functionbody);\r\n        let _la;\r\n        try {\r\n            this.state = 2163;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 258, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2153;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Colon) {\r\n                            {\r\n                                this.state = 2152;\r\n                                this.ctorinitializer();\r\n                            }\r\n                        }\r\n                        this.state = 2155;\r\n                        this.compoundstatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2156;\r\n                        this.functiontryblock();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2157;\r\n                        this.match(CPP14Parser.Assign);\r\n                        this.state = 2158;\r\n                        this.match(CPP14Parser.Default);\r\n                        this.state = 2159;\r\n                        this.match(CPP14Parser.Semi);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2160;\r\n                        this.match(CPP14Parser.Assign);\r\n                        this.state = 2161;\r\n                        this.match(CPP14Parser.Delete);\r\n                        this.state = 2162;\r\n                        this.match(CPP14Parser.Semi);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    initializer() {\r\n        let _localctx = new InitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 338, CPP14Parser.RULE_initializer);\r\n        try {\r\n            this.state = 2170;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.LeftBrace:\r\n                case CPP14Parser.Assign:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2165;\r\n                        this.braceorequalinitializer();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftParen:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2166;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 2167;\r\n                        this.expressionlist();\r\n                        this.state = 2168;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    braceorequalinitializer() {\r\n        let _localctx = new BraceorequalinitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 340, CPP14Parser.RULE_braceorequalinitializer);\r\n        try {\r\n            this.state = 2175;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Assign:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2172;\r\n                        this.match(CPP14Parser.Assign);\r\n                        this.state = 2173;\r\n                        this.initializerclause();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftBrace:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2174;\r\n                        this.bracedinitlist();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    initializerclause() {\r\n        let _localctx = new InitializerclauseContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 342, CPP14Parser.RULE_initializerclause);\r\n        try {\r\n            this.state = 2179;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Alignof:\r\n                case CPP14Parser.Auto:\r\n                case CPP14Parser.Bool:\r\n                case CPP14Parser.Char:\r\n                case CPP14Parser.Char16:\r\n                case CPP14Parser.Char32:\r\n                case CPP14Parser.Const_cast:\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Delete:\r\n                case CPP14Parser.Double:\r\n                case CPP14Parser.File:\r\n                case CPP14Parser.Dynamic_cast:\r\n                case CPP14Parser.Float:\r\n                case CPP14Parser.Int:\r\n                case CPP14Parser.Long:\r\n                case CPP14Parser.New:\r\n                case CPP14Parser.Noexcept:\r\n                case CPP14Parser.Nullptr:\r\n                case CPP14Parser.Operator:\r\n                case CPP14Parser.Reinterpret_cast:\r\n                case CPP14Parser.Short:\r\n                case CPP14Parser.Signed:\r\n                case CPP14Parser.Sizeof:\r\n                case CPP14Parser.Static_cast:\r\n                case CPP14Parser.This:\r\n                case CPP14Parser.Throw:\r\n                case CPP14Parser.Typeid:\r\n                case CPP14Parser.Typename:\r\n                case CPP14Parser.Unsigned:\r\n                case CPP14Parser.Void:\r\n                case CPP14Parser.Wchar:\r\n                case CPP14Parser.LeftParen:\r\n                case CPP14Parser.LeftBracket:\r\n                case CPP14Parser.Plus:\r\n                case CPP14Parser.Minus:\r\n                case CPP14Parser.Star:\r\n                case CPP14Parser.And:\r\n                case CPP14Parser.Or:\r\n                case CPP14Parser.Tilde:\r\n                case CPP14Parser.Not:\r\n                case CPP14Parser.PlusPlus:\r\n                case CPP14Parser.MinusMinus:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Identifier:\r\n                case CPP14Parser.Integerliteral:\r\n                case CPP14Parser.Characterliteral:\r\n                case CPP14Parser.Floatingliteral:\r\n                case CPP14Parser.Stringliteral:\r\n                case CPP14Parser.Booleanliteral:\r\n                case CPP14Parser.Userdefinedintegerliteral:\r\n                case CPP14Parser.Userdefinedfloatingliteral:\r\n                case CPP14Parser.Userdefinedstringliteral:\r\n                case CPP14Parser.Userdefinedcharacterliteral:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2177;\r\n                        this.assignmentexpression();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.LeftBrace:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2178;\r\n                        this.bracedinitlist();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    initializerlist() {\r\n        let _localctx = new InitializerlistContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 344, CPP14Parser.RULE_initializerlist);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2181;\r\n                this.initializerclause();\r\n                this.state = 2186;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 2182;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 2183;\r\n                                this.initializerclause();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2188;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 262, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    bracedinitlist() {\r\n        let _localctx = new BracedinitlistContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 346, CPP14Parser.RULE_bracedinitlist);\r\n        let _la;\r\n        try {\r\n            this.state = 2198;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 264, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2189;\r\n                        this.match(CPP14Parser.LeftBrace);\r\n                        this.state = 2190;\r\n                        this.initializerlist();\r\n                        this.state = 2192;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Comma) {\r\n                            {\r\n                                this.state = 2191;\r\n                                this.match(CPP14Parser.Comma);\r\n                            }\r\n                        }\r\n                        this.state = 2194;\r\n                        this.match(CPP14Parser.RightBrace);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2196;\r\n                        this.match(CPP14Parser.LeftBrace);\r\n                        this.state = 2197;\r\n                        this.match(CPP14Parser.RightBrace);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    myclassname() {\r\n        let _localctx = new MyclassnameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 348, CPP14Parser.RULE_myclassname);\r\n        try {\r\n            this.state = 2202;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 265, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2200;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2201;\r\n                        this.simpletemplateid();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classspecifier() {\r\n        let _localctx = new ClassspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 350, CPP14Parser.RULE_classspecifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2204;\r\n                this.classhead();\r\n                this.state = 2205;\r\n                this.classbody();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classbody() {\r\n        let _localctx = new ClassbodyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 352, CPP14Parser.RULE_classbody);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2207;\r\n                this.match(CPP14Parser.LeftBrace);\r\n                this.state = 2209;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignas) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Constexpr) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Enum) |\r\n                            (1 << CPP14Parser.Explicit) |\r\n                            (1 << CPP14Parser.Extern))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Friend - 32)) |\r\n                                (1 << (CPP14Parser.Inline - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.Mutable - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Private - 32)) |\r\n                                (1 << (CPP14Parser.Protected - 32)) |\r\n                                (1 << (CPP14Parser.Public - 32)) |\r\n                                (1 << (CPP14Parser.Register - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Static - 32)) |\r\n                                (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)) |\r\n                                (1 << (CPP14Parser.Template - 32)) |\r\n                                (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 67) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 67)) &\r\n                            ((1 << (CPP14Parser.Typedef - 67)) |\r\n                                (1 << (CPP14Parser.Typename - 67)) |\r\n                                (1 << (CPP14Parser.Union - 67)) |\r\n                                (1 << (CPP14Parser.Unsigned - 67)) |\r\n                                (1 << (CPP14Parser.Using - 67)) |\r\n                                (1 << (CPP14Parser.Virtual - 67)) |\r\n                                (1 << (CPP14Parser.Void - 67)) |\r\n                                (1 << (CPP14Parser.Volatile - 67)) |\r\n                                (1 << (CPP14Parser.Wchar - 67)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 67)) |\r\n                                (1 << (CPP14Parser.Star - 67)) |\r\n                                (1 << (CPP14Parser.And - 67)) |\r\n                                (1 << (CPP14Parser.Tilde - 67)))) !==\r\n                            0) ||\r\n                    (((_la - 111) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 111)) &\r\n                            ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                (1 << (CPP14Parser.Semi - 111)) |\r\n                                (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 2208;\r\n                        this.memberspecification();\r\n                    }\r\n                }\r\n                this.state = 2211;\r\n                this.match(CPP14Parser.RightBrace);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classhead() {\r\n        let _localctx = new ClassheadContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 354, CPP14Parser.RULE_classhead);\r\n        let _la;\r\n        try {\r\n            this.state = 2234;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 273, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2213;\r\n                        this.classkey();\r\n                        this.state = 2215;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 2214;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 2218;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 268, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2217;\r\n                                    this.nestednamespecifier(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 2220;\r\n                        this.classheadname();\r\n                        this.state = 2222;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Final) {\r\n                            {\r\n                                this.state = 2221;\r\n                                this.classvirtspecifier();\r\n                            }\r\n                        }\r\n                        this.state = 2225;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Colon) {\r\n                            {\r\n                                this.state = 2224;\r\n                                this.baseclause();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2227;\r\n                        this.classkey();\r\n                        this.state = 2229;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 2228;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 2232;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Colon) {\r\n                            {\r\n                                this.state = 2231;\r\n                                this.baseclause();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classheadname() {\r\n        let _localctx = new ClassheadnameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 356, CPP14Parser.RULE_classheadname);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2237;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 274, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2236;\r\n                            this.nestednamespecifier(0);\r\n                        }\r\n                        break;\r\n                }\r\n                this.state = 2239;\r\n                this.myclassname();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classvirtspecifier() {\r\n        let _localctx = new ClassvirtspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 358, CPP14Parser.RULE_classvirtspecifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2241;\r\n                this.match(CPP14Parser.Final);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classkey() {\r\n        let _localctx = new ClasskeyContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 360, CPP14Parser.RULE_classkey);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2243;\r\n                _la = this._input.LA(1);\r\n                if (!(_la === CPP14Parser.Class || _la === CPP14Parser.Struct || _la === CPP14Parser.Union)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    memberspecification() {\r\n        let _localctx = new MemberspecificationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 362, CPP14Parser.RULE_memberspecification);\r\n        let _la;\r\n        try {\r\n            this.state = 2254;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Alignas:\r\n                case CPP14Parser.Auto:\r\n                case CPP14Parser.Bool:\r\n                case CPP14Parser.Char:\r\n                case CPP14Parser.Char16:\r\n                case CPP14Parser.Char32:\r\n                case CPP14Parser.Class:\r\n                case CPP14Parser.Const:\r\n                case CPP14Parser.Constexpr:\r\n                case CPP14Parser.Decltype:\r\n                case CPP14Parser.Double:\r\n                case CPP14Parser.File:\r\n                case CPP14Parser.Enum:\r\n                case CPP14Parser.Explicit:\r\n                case CPP14Parser.Extern:\r\n                case CPP14Parser.Float:\r\n                case CPP14Parser.Friend:\r\n                case CPP14Parser.Inline:\r\n                case CPP14Parser.Int:\r\n                case CPP14Parser.Long:\r\n                case CPP14Parser.Mutable:\r\n                case CPP14Parser.Operator:\r\n                case CPP14Parser.Register:\r\n                case CPP14Parser.Short:\r\n                case CPP14Parser.Signed:\r\n                case CPP14Parser.Static:\r\n                case CPP14Parser.Static_assert:\r\n                case CPP14Parser.Struct:\r\n                case CPP14Parser.Template:\r\n                case CPP14Parser.Thread_local:\r\n                case CPP14Parser.Typedef:\r\n                case CPP14Parser.Typename:\r\n                case CPP14Parser.Union:\r\n                case CPP14Parser.Unsigned:\r\n                case CPP14Parser.Using:\r\n                case CPP14Parser.Virtual:\r\n                case CPP14Parser.Void:\r\n                case CPP14Parser.Volatile:\r\n                case CPP14Parser.Wchar:\r\n                case CPP14Parser.LeftBracket:\r\n                case CPP14Parser.Star:\r\n                case CPP14Parser.And:\r\n                case CPP14Parser.Tilde:\r\n                case CPP14Parser.AndAnd:\r\n                case CPP14Parser.Doublecolon:\r\n                case CPP14Parser.Semi:\r\n                case CPP14Parser.Ellipsis:\r\n                case CPP14Parser.Identifier:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2245;\r\n                        this.memberdeclaration();\r\n                        this.state = 2247;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignas) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Class) |\r\n                                    (1 << CPP14Parser.Const) |\r\n                                    (1 << CPP14Parser.Constexpr) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Enum) |\r\n                                    (1 << CPP14Parser.Explicit) |\r\n                                    (1 << CPP14Parser.Extern))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Friend - 32)) |\r\n                                        (1 << (CPP14Parser.Inline - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.Mutable - 32)) |\r\n                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                        (1 << (CPP14Parser.Private - 32)) |\r\n                                        (1 << (CPP14Parser.Protected - 32)) |\r\n                                        (1 << (CPP14Parser.Public - 32)) |\r\n                                        (1 << (CPP14Parser.Register - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Static - 32)) |\r\n                                        (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                        (1 << (CPP14Parser.Struct - 32)) |\r\n                                        (1 << (CPP14Parser.Template - 32)) |\r\n                                        (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 67) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 67)) &\r\n                                    ((1 << (CPP14Parser.Typedef - 67)) |\r\n                                        (1 << (CPP14Parser.Typename - 67)) |\r\n                                        (1 << (CPP14Parser.Union - 67)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 67)) |\r\n                                        (1 << (CPP14Parser.Using - 67)) |\r\n                                        (1 << (CPP14Parser.Virtual - 67)) |\r\n                                        (1 << (CPP14Parser.Void - 67)) |\r\n                                        (1 << (CPP14Parser.Volatile - 67)) |\r\n                                        (1 << (CPP14Parser.Wchar - 67)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 67)) |\r\n                                        (1 << (CPP14Parser.Star - 67)) |\r\n                                        (1 << (CPP14Parser.And - 67)) |\r\n                                        (1 << (CPP14Parser.Tilde - 67)))) !==\r\n                                    0) ||\r\n                            (((_la - 111) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 111)) &\r\n                                    ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                        (1 << (CPP14Parser.Semi - 111)) |\r\n                                        (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                        (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 2246;\r\n                                this.memberspecification();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Private:\r\n                case CPP14Parser.Protected:\r\n                case CPP14Parser.Public:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2249;\r\n                        this.accessspecifier();\r\n                        this.state = 2250;\r\n                        this.match(CPP14Parser.Colon);\r\n                        this.state = 2252;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignas) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Class) |\r\n                                    (1 << CPP14Parser.Const) |\r\n                                    (1 << CPP14Parser.Constexpr) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Enum) |\r\n                                    (1 << CPP14Parser.Explicit) |\r\n                                    (1 << CPP14Parser.Extern))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Friend - 32)) |\r\n                                        (1 << (CPP14Parser.Inline - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.Mutable - 32)) |\r\n                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                        (1 << (CPP14Parser.Private - 32)) |\r\n                                        (1 << (CPP14Parser.Protected - 32)) |\r\n                                        (1 << (CPP14Parser.Public - 32)) |\r\n                                        (1 << (CPP14Parser.Register - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Static - 32)) |\r\n                                        (1 << (CPP14Parser.Static_assert - 32)) |\r\n                                        (1 << (CPP14Parser.Struct - 32)) |\r\n                                        (1 << (CPP14Parser.Template - 32)) |\r\n                                        (1 << (CPP14Parser.Thread_local - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 67) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 67)) &\r\n                                    ((1 << (CPP14Parser.Typedef - 67)) |\r\n                                        (1 << (CPP14Parser.Typename - 67)) |\r\n                                        (1 << (CPP14Parser.Union - 67)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 67)) |\r\n                                        (1 << (CPP14Parser.Using - 67)) |\r\n                                        (1 << (CPP14Parser.Virtual - 67)) |\r\n                                        (1 << (CPP14Parser.Void - 67)) |\r\n                                        (1 << (CPP14Parser.Volatile - 67)) |\r\n                                        (1 << (CPP14Parser.Wchar - 67)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 67)) |\r\n                                        (1 << (CPP14Parser.Star - 67)) |\r\n                                        (1 << (CPP14Parser.And - 67)) |\r\n                                        (1 << (CPP14Parser.Tilde - 67)))) !==\r\n                                    0) ||\r\n                            (((_la - 111) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 111)) &\r\n                                    ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                        (1 << (CPP14Parser.Semi - 111)) |\r\n                                        (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                        (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 2251;\r\n                                this.memberspecification();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    memberdeclaration() {\r\n        let _localctx = new MemberdeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 364, CPP14Parser.RULE_memberdeclaration);\r\n        try {\r\n            this.state = 2263;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 278, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2256;\r\n                        this.membervariabledeclarationstatement();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2257;\r\n                        this.functiondefinition();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2258;\r\n                        this.usingdeclaration();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2259;\r\n                        this.static_assertdeclaration();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2260;\r\n                        this.templatedeclaration();\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2261;\r\n                        this.aliasdeclaration();\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 2262;\r\n                        this.emptydeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    membervariabledeclarationstatement() {\r\n        let _localctx = new MembervariabledeclarationstatementContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 366, CPP14Parser.RULE_membervariabledeclarationstatement);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2265;\r\n                this.membervariabledeclaration();\r\n                this.state = 2266;\r\n                this.match(CPP14Parser.Semi);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    membervariabledeclaration() {\r\n        let _localctx = new MembervariabledeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 368, CPP14Parser.RULE_membervariabledeclaration);\r\n        let _la;\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2269;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                    {\r\n                        this.state = 2268;\r\n                        this.attributespecifierseq(0);\r\n                    }\r\n                }\r\n                this.state = 2272;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if ((((_la - 15) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 15)) &\r\n                        ((1 << (CPP14Parser.Constexpr - 15)) |\r\n                            (1 << (CPP14Parser.Explicit - 15)) |\r\n                            (1 << (CPP14Parser.Extern - 15)) |\r\n                            (1 << (CPP14Parser.Friend - 15)) |\r\n                            (1 << (CPP14Parser.Inline - 15)) |\r\n                            (1 << (CPP14Parser.Mutable - 15)))) !==\r\n                        0) ||\r\n                    (((_la - 50) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 50)) &\r\n                            ((1 << (CPP14Parser.Register - 50)) |\r\n                                (1 << (CPP14Parser.Static - 50)) |\r\n                                (1 << (CPP14Parser.Thread_local - 50)) |\r\n                                (1 << (CPP14Parser.Typedef - 50)) |\r\n                                (1 << (CPP14Parser.Virtual - 50)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 2271;\r\n                        this.declspecifierseqwithouttype();\r\n                    }\r\n                }\r\n                this.state = 2274;\r\n                this.typespecifier();\r\n                this.state = 2278;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        {\r\n                            {\r\n                                this.state = 2275;\r\n                                this.ptroperator();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2280;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);\r\n                }\r\n                this.state = 2282;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Alignas ||\r\n                    _la === CPP14Parser.Decltype ||\r\n                    _la === CPP14Parser.Operator ||\r\n                    _la === CPP14Parser.LeftBracket ||\r\n                    _la === CPP14Parser.Tilde ||\r\n                    (((_la - 119) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 119)) &\r\n                            ((1 << (CPP14Parser.Colon - 119)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 119)) |\r\n                                (1 << (CPP14Parser.Ellipsis - 119)) |\r\n                                (1 << (CPP14Parser.Identifier - 119)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 2281;\r\n                        this.memberdeclaratorlist(0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    memberdeclaratorlist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new MemberdeclaratorlistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 370;\r\n        this.enterRecursionRule(_localctx, 370, CPP14Parser.RULE_memberdeclaratorlist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2285;\r\n                    this.memberdeclarator();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2292;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new MemberdeclaratorlistContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_memberdeclaratorlist);\r\n                                this.state = 2287;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2288;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 2289;\r\n                                this.memberdeclarator();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2294;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 283, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    memberdeclarator() {\r\n        let _localctx = new MemberdeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 372, CPP14Parser.RULE_memberdeclarator);\r\n        let _la;\r\n        try {\r\n            this.state = 2319;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 290, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2295;\r\n                        this.declaratorid();\r\n                        this.state = 2297;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 284, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2296;\r\n                                    this.virtspecifierseq(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 2300;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 285, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2299;\r\n                                    this.purespecifier();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2302;\r\n                        this.declaratorid();\r\n                        this.state = 2305;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 286, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2303;\r\n                                    this.match(CPP14Parser.Assign);\r\n                                    this.state = 2304;\r\n                                    this.initializerclause();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2307;\r\n                        this.declaratorid();\r\n                        this.state = 2309;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 287, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2308;\r\n                                    this.bracedinitlist();\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2312;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Identifier) {\r\n                            {\r\n                                this.state = 2311;\r\n                                this.match(CPP14Parser.Identifier);\r\n                            }\r\n                        }\r\n                        this.state = 2315;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 2314;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 2317;\r\n                        this.match(CPP14Parser.Colon);\r\n                        this.state = 2318;\r\n                        this.constantexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    virtspecifierseq(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new VirtspecifierseqContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 374;\r\n        this.enterRecursionRule(_localctx, 374, CPP14Parser.RULE_virtspecifierseq, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2322;\r\n                    this.virtspecifier();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2328;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new VirtspecifierseqContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_virtspecifierseq);\r\n                                this.state = 2324;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2325;\r\n                                this.virtspecifier();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2330;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 291, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    virtspecifier() {\r\n        let _localctx = new VirtspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 376, CPP14Parser.RULE_virtspecifier);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2331;\r\n                _la = this._input.LA(1);\r\n                if (!(_la === CPP14Parser.Final || _la === CPP14Parser.Override)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    purespecifier() {\r\n        let _localctx = new PurespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 378, CPP14Parser.RULE_purespecifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2333;\r\n                this.match(CPP14Parser.Assign);\r\n                this.state = 2334;\r\n                _localctx._val = this.match(CPP14Parser.Octalliteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    baseclause() {\r\n        let _localctx = new BaseclauseContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 380, CPP14Parser.RULE_baseclause);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2336;\r\n                this.match(CPP14Parser.Colon);\r\n                this.state = 2337;\r\n                this.basespecifierlist(0);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    basespecifierlist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new BasespecifierlistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 382;\r\n        this.enterRecursionRule(_localctx, 382, CPP14Parser.RULE_basespecifierlist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2340;\r\n                    this.basespecifier();\r\n                    this.state = 2342;\r\n                    this._errHandler.sync(this);\r\n                    switch (this.interpreter.adaptivePredict(this._input, 292, this._ctx)) {\r\n                        case 1:\r\n                            {\r\n                                this.state = 2341;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2352;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new BasespecifierlistContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_basespecifierlist);\r\n                                this.state = 2344;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2345;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 2346;\r\n                                this.basespecifier();\r\n                                this.state = 2348;\r\n                                this._errHandler.sync(this);\r\n                                switch (this.interpreter.adaptivePredict(this._input, 293, this._ctx)) {\r\n                                    case 1:\r\n                                        {\r\n                                            this.state = 2347;\r\n                                            this.match(CPP14Parser.Ellipsis);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2354;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 294, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    basespecifier() {\r\n        let _localctx = new BasespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 384, CPP14Parser.RULE_basespecifier);\r\n        let _la;\r\n        try {\r\n            this.state = 2376;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 300, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2356;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 2355;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 2358;\r\n                        this.basetypespecifier();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2360;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 2359;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 2362;\r\n                        this.match(CPP14Parser.Virtual);\r\n                        this.state = 2364;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la - 47) & ~0x1f) === 0 &&\r\n                            ((1 << (_la - 47)) &\r\n                                ((1 << (CPP14Parser.Private - 47)) |\r\n                                    (1 << (CPP14Parser.Protected - 47)) |\r\n                                    (1 << (CPP14Parser.Public - 47)))) !==\r\n                                0) {\r\n                            {\r\n                                this.state = 2363;\r\n                                this.accessspecifier();\r\n                            }\r\n                        }\r\n                        this.state = 2366;\r\n                        this.basetypespecifier();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2368;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 2367;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 2370;\r\n                        this.accessspecifier();\r\n                        this.state = 2372;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Virtual) {\r\n                            {\r\n                                this.state = 2371;\r\n                                this.match(CPP14Parser.Virtual);\r\n                            }\r\n                        }\r\n                        this.state = 2374;\r\n                        this.basetypespecifier();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    classordecltype() {\r\n        let _localctx = new ClassordecltypeContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 386, CPP14Parser.RULE_classordecltype);\r\n        try {\r\n            this.state = 2383;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 302, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2379;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 301, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2378;\r\n                                    this.nestednamespecifier(0);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 2381;\r\n                        this.myclassname();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2382;\r\n                        this.decltypespecifier();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    basetypespecifier() {\r\n        let _localctx = new BasetypespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 388, CPP14Parser.RULE_basetypespecifier);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2385;\r\n                this.classordecltype();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    accessspecifier() {\r\n        let _localctx = new AccessspecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 390, CPP14Parser.RULE_accessspecifier);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2387;\r\n                _la = this._input.LA(1);\r\n                if (!(((_la - 47) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 47)) &\r\n                        ((1 << (CPP14Parser.Private - 47)) |\r\n                            (1 << (CPP14Parser.Protected - 47)) |\r\n                            (1 << (CPP14Parser.Public - 47)))) !==\r\n                        0)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    conversionfunctionid() {\r\n        let _localctx = new ConversionfunctionidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 392, CPP14Parser.RULE_conversionfunctionid);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2389;\r\n                this.match(CPP14Parser.Operator);\r\n                this.state = 2390;\r\n                this.conversiontypeid();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    conversiontypeid() {\r\n        let _localctx = new ConversiontypeidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 394, CPP14Parser.RULE_conversiontypeid);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2392;\r\n                this.typespecifierseq();\r\n                this.state = 2394;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 303, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2393;\r\n                            this.conversiondeclarator();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    conversiondeclarator() {\r\n        let _localctx = new ConversiondeclaratorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 396, CPP14Parser.RULE_conversiondeclarator);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2396;\r\n                this.ptroperator();\r\n                this.state = 2398;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 304, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2397;\r\n                            this.conversiondeclarator();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    ctorinitializer() {\r\n        let _localctx = new CtorinitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 398, CPP14Parser.RULE_ctorinitializer);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2400;\r\n                this.match(CPP14Parser.Colon);\r\n                this.state = 2401;\r\n                this.meminitializerlist();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    meminitializerlist() {\r\n        let _localctx = new MeminitializerlistContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 400, CPP14Parser.RULE_meminitializerlist);\r\n        let _la;\r\n        try {\r\n            this.state = 2414;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 307, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2403;\r\n                        this.meminitializer();\r\n                        this.state = 2405;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Ellipsis) {\r\n                            {\r\n                                this.state = 2404;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2407;\r\n                        this.meminitializer();\r\n                        this.state = 2409;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Ellipsis) {\r\n                            {\r\n                                this.state = 2408;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                        }\r\n                        this.state = 2411;\r\n                        this.match(CPP14Parser.Comma);\r\n                        this.state = 2412;\r\n                        this.meminitializerlist();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    meminitializer() {\r\n        let _localctx = new MeminitializerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 402, CPP14Parser.RULE_meminitializer);\r\n        let _la;\r\n        try {\r\n            this.state = 2426;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 309, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2416;\r\n                        this.meminitializerid();\r\n                        this.state = 2417;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 2419;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignof) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Const_cast) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Delete) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Dynamic_cast))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.New - 32)) |\r\n                                        (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                        (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                        (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                        (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                        (1 << (CPP14Parser.This - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 64) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 64)) &\r\n                                    ((1 << (CPP14Parser.Throw - 64)) |\r\n                                        (1 << (CPP14Parser.Typeid - 64)) |\r\n                                        (1 << (CPP14Parser.Typename - 64)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 64)) |\r\n                                        (1 << (CPP14Parser.Void - 64)) |\r\n                                        (1 << (CPP14Parser.Wchar - 64)) |\r\n                                        (1 << (CPP14Parser.LeftParen - 64)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 64)) |\r\n                                        (1 << (CPP14Parser.LeftBrace - 64)) |\r\n                                        (1 << (CPP14Parser.Plus - 64)) |\r\n                                        (1 << (CPP14Parser.Minus - 64)) |\r\n                                        (1 << (CPP14Parser.Star - 64)) |\r\n                                        (1 << (CPP14Parser.And - 64)) |\r\n                                        (1 << (CPP14Parser.Or - 64)) |\r\n                                        (1 << (CPP14Parser.Tilde - 64)) |\r\n                                        (1 << (CPP14Parser.Not - 64)))) !==\r\n                                    0) ||\r\n                            (((_la - 113) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 113)) &\r\n                                    ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                        (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                        (1 << (CPP14Parser.Identifier - 113)) |\r\n                                        (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 2418;\r\n                                this.expressionlist();\r\n                            }\r\n                        }\r\n                        this.state = 2421;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2423;\r\n                        this.meminitializerid();\r\n                        this.state = 2424;\r\n                        this.bracedinitlist();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    meminitializerid() {\r\n        let _localctx = new MeminitializeridContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 404, CPP14Parser.RULE_meminitializerid);\r\n        try {\r\n            this.state = 2430;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 310, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2428;\r\n                        this.classordecltype();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2429;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    operatorfunctionid() {\r\n        let _localctx = new OperatorfunctionidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 406, CPP14Parser.RULE_operatorfunctionid);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2432;\r\n                this.match(CPP14Parser.Operator);\r\n                this.state = 2433;\r\n                this.operator();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    literaloperatorid() {\r\n        let _localctx = new LiteraloperatoridContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 408, CPP14Parser.RULE_literaloperatorid);\r\n        try {\r\n            this.state = 2440;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 311, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2435;\r\n                        this.match(CPP14Parser.Operator);\r\n                        this.state = 2436;\r\n                        this.match(CPP14Parser.Stringliteral);\r\n                        this.state = 2437;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2438;\r\n                        this.match(CPP14Parser.Operator);\r\n                        this.state = 2439;\r\n                        this.match(CPP14Parser.Userdefinedstringliteral);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    templatedeclaration() {\r\n        let _localctx = new TemplatedeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 410, CPP14Parser.RULE_templatedeclaration);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2442;\r\n                this.match(CPP14Parser.Template);\r\n                this.state = 2443;\r\n                this.match(CPP14Parser.Less);\r\n                this.state = 2444;\r\n                this.templateparameterlist(0);\r\n                this.state = 2445;\r\n                this.match(CPP14Parser.Greater);\r\n                this.state = 2446;\r\n                this.declaration();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    templateparameterlist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new TemplateparameterlistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 412;\r\n        this.enterRecursionRule(_localctx, 412, CPP14Parser.RULE_templateparameterlist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2449;\r\n                    this.templateparameter();\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2456;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new TemplateparameterlistContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_templateparameterlist);\r\n                                this.state = 2451;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2452;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 2453;\r\n                                this.templateparameter();\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2458;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    templateparameter() {\r\n        let _localctx = new TemplateparameterContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 414, CPP14Parser.RULE_templateparameter);\r\n        try {\r\n            this.state = 2461;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 313, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2459;\r\n                        this.typeparameter();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2460;\r\n                        this.parameterdeclaration();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeparameter() {\r\n        let _localctx = new TypeparameterContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 416, CPP14Parser.RULE_typeparameter);\r\n        let _la;\r\n        try {\r\n            this.state = 2511;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 323, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2463;\r\n                        this.match(CPP14Parser.Class);\r\n                        this.state = 2465;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 314, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2464;\r\n                                    this.match(CPP14Parser.Ellipsis);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 2468;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 315, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2467;\r\n                                    this.match(CPP14Parser.Identifier);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2470;\r\n                        this.match(CPP14Parser.Class);\r\n                        this.state = 2472;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Identifier) {\r\n                            {\r\n                                this.state = 2471;\r\n                                this.match(CPP14Parser.Identifier);\r\n                            }\r\n                        }\r\n                        this.state = 2474;\r\n                        this.match(CPP14Parser.Assign);\r\n                        this.state = 2475;\r\n                        this.typeid();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2476;\r\n                        this.match(CPP14Parser.Typename);\r\n                        this.state = 2478;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 317, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2477;\r\n                                    this.match(CPP14Parser.Ellipsis);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 2481;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 318, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2480;\r\n                                    this.match(CPP14Parser.Identifier);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2483;\r\n                        this.match(CPP14Parser.Typename);\r\n                        this.state = 2485;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Identifier) {\r\n                            {\r\n                                this.state = 2484;\r\n                                this.match(CPP14Parser.Identifier);\r\n                            }\r\n                        }\r\n                        this.state = 2487;\r\n                        this.match(CPP14Parser.Assign);\r\n                        this.state = 2488;\r\n                        this.typeid();\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2489;\r\n                        this.match(CPP14Parser.Template);\r\n                        this.state = 2490;\r\n                        this.match(CPP14Parser.Less);\r\n                        this.state = 2491;\r\n                        this.templateparameterlist(0);\r\n                        this.state = 2492;\r\n                        this.match(CPP14Parser.Greater);\r\n                        this.state = 2493;\r\n                        this.match(CPP14Parser.Class);\r\n                        this.state = 2495;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 320, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2494;\r\n                                    this.match(CPP14Parser.Ellipsis);\r\n                                }\r\n                                break;\r\n                        }\r\n                        this.state = 2498;\r\n                        this._errHandler.sync(this);\r\n                        switch (this.interpreter.adaptivePredict(this._input, 321, this._ctx)) {\r\n                            case 1:\r\n                                {\r\n                                    this.state = 2497;\r\n                                    this.match(CPP14Parser.Identifier);\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2500;\r\n                        this.match(CPP14Parser.Template);\r\n                        this.state = 2501;\r\n                        this.match(CPP14Parser.Less);\r\n                        this.state = 2502;\r\n                        this.templateparameterlist(0);\r\n                        this.state = 2503;\r\n                        this.match(CPP14Parser.Greater);\r\n                        this.state = 2504;\r\n                        this.match(CPP14Parser.Class);\r\n                        this.state = 2506;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Identifier) {\r\n                            {\r\n                                this.state = 2505;\r\n                                this.match(CPP14Parser.Identifier);\r\n                            }\r\n                        }\r\n                        this.state = 2508;\r\n                        this.match(CPP14Parser.Assign);\r\n                        this.state = 2509;\r\n                        this.idexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    simpletemplateid() {\r\n        let _localctx = new SimpletemplateidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 418, CPP14Parser.RULE_simpletemplateid);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2513;\r\n                this.templatename();\r\n                this.state = 2514;\r\n                this.match(CPP14Parser.Less);\r\n                this.state = 2516;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Alignof) |\r\n                            (1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Const_cast) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Delete) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Dynamic_cast) |\r\n                            (1 << CPP14Parser.Enum))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.New - 32)) |\r\n                                (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                (1 << (CPP14Parser.Operator - 32)) |\r\n                                (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)) |\r\n                                (1 << (CPP14Parser.This - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 68) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 68)) &\r\n                            ((1 << (CPP14Parser.Typeid - 68)) |\r\n                                (1 << (CPP14Parser.Typename - 68)) |\r\n                                (1 << (CPP14Parser.Union - 68)) |\r\n                                (1 << (CPP14Parser.Unsigned - 68)) |\r\n                                (1 << (CPP14Parser.Void - 68)) |\r\n                                (1 << (CPP14Parser.Volatile - 68)) |\r\n                                (1 << (CPP14Parser.Wchar - 68)) |\r\n                                (1 << (CPP14Parser.LeftParen - 68)) |\r\n                                (1 << (CPP14Parser.LeftBracket - 68)) |\r\n                                (1 << (CPP14Parser.Plus - 68)) |\r\n                                (1 << (CPP14Parser.Minus - 68)) |\r\n                                (1 << (CPP14Parser.Star - 68)) |\r\n                                (1 << (CPP14Parser.And - 68)) |\r\n                                (1 << (CPP14Parser.Or - 68)) |\r\n                                (1 << (CPP14Parser.Tilde - 68)) |\r\n                                (1 << (CPP14Parser.Not - 68)))) !==\r\n                            0) ||\r\n                    (((_la - 113) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 113)) &\r\n                            ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                (1 << (CPP14Parser.Identifier - 113)) |\r\n                                (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                            0)) {\r\n                    {\r\n                        this.state = 2515;\r\n                        this.templateargumentlist(0);\r\n                    }\r\n                }\r\n                this.state = 2518;\r\n                this.match(CPP14Parser.Greater);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    templateid() {\r\n        let _localctx = new TemplateidContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 420, CPP14Parser.RULE_templateid);\r\n        let _la;\r\n        try {\r\n            this.state = 2535;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 327, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2520;\r\n                        this.simpletemplateid();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2521;\r\n                        this.operatorfunctionid();\r\n                        this.state = 2522;\r\n                        this.match(CPP14Parser.Less);\r\n                        this.state = 2524;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignof) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Class) |\r\n                                    (1 << CPP14Parser.Const) |\r\n                                    (1 << CPP14Parser.Const_cast) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Delete) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Dynamic_cast) |\r\n                                    (1 << CPP14Parser.Enum))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.New - 32)) |\r\n                                        (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                        (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                        (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                        (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                        (1 << (CPP14Parser.Struct - 32)) |\r\n                                        (1 << (CPP14Parser.This - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 68) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 68)) &\r\n                                    ((1 << (CPP14Parser.Typeid - 68)) |\r\n                                        (1 << (CPP14Parser.Typename - 68)) |\r\n                                        (1 << (CPP14Parser.Union - 68)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 68)) |\r\n                                        (1 << (CPP14Parser.Void - 68)) |\r\n                                        (1 << (CPP14Parser.Volatile - 68)) |\r\n                                        (1 << (CPP14Parser.Wchar - 68)) |\r\n                                        (1 << (CPP14Parser.LeftParen - 68)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 68)) |\r\n                                        (1 << (CPP14Parser.Plus - 68)) |\r\n                                        (1 << (CPP14Parser.Minus - 68)) |\r\n                                        (1 << (CPP14Parser.Star - 68)) |\r\n                                        (1 << (CPP14Parser.And - 68)) |\r\n                                        (1 << (CPP14Parser.Or - 68)) |\r\n                                        (1 << (CPP14Parser.Tilde - 68)) |\r\n                                        (1 << (CPP14Parser.Not - 68)))) !==\r\n                                    0) ||\r\n                            (((_la - 113) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 113)) &\r\n                                    ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                        (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                        (1 << (CPP14Parser.Identifier - 113)) |\r\n                                        (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 2523;\r\n                                this.templateargumentlist(0);\r\n                            }\r\n                        }\r\n                        this.state = 2526;\r\n                        this.match(CPP14Parser.Greater);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2528;\r\n                        this.literaloperatorid();\r\n                        this.state = 2529;\r\n                        this.match(CPP14Parser.Less);\r\n                        this.state = 2531;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (((_la & ~0x1f) === 0 &&\r\n                            ((1 << _la) &\r\n                                ((1 << CPP14Parser.Alignof) |\r\n                                    (1 << CPP14Parser.Auto) |\r\n                                    (1 << CPP14Parser.Bool) |\r\n                                    (1 << CPP14Parser.Char) |\r\n                                    (1 << CPP14Parser.Char16) |\r\n                                    (1 << CPP14Parser.Char32) |\r\n                                    (1 << CPP14Parser.Class) |\r\n                                    (1 << CPP14Parser.Const) |\r\n                                    (1 << CPP14Parser.Const_cast) |\r\n                                    (1 << CPP14Parser.Decltype) |\r\n                                    (1 << CPP14Parser.Delete) |\r\n                                    (1 << CPP14Parser.Double) |\r\n                                    (1 << CPP14Parser.File) |\r\n                                    (1 << CPP14Parser.Dynamic_cast) |\r\n                                    (1 << CPP14Parser.Enum))) !==\r\n                                0) ||\r\n                            (((_la - 32) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 32)) &\r\n                                    ((1 << (CPP14Parser.Float - 32)) |\r\n                                        (1 << (CPP14Parser.Int - 32)) |\r\n                                        (1 << (CPP14Parser.Long - 32)) |\r\n                                        (1 << (CPP14Parser.New - 32)) |\r\n                                        (1 << (CPP14Parser.Noexcept - 32)) |\r\n                                        (1 << (CPP14Parser.Nullptr - 32)) |\r\n                                        (1 << (CPP14Parser.Operator - 32)) |\r\n                                        (1 << (CPP14Parser.Reinterpret_cast - 32)) |\r\n                                        (1 << (CPP14Parser.Short - 32)) |\r\n                                        (1 << (CPP14Parser.Signed - 32)) |\r\n                                        (1 << (CPP14Parser.Sizeof - 32)) |\r\n                                        (1 << (CPP14Parser.Static_cast - 32)) |\r\n                                        (1 << (CPP14Parser.Struct - 32)) |\r\n                                        (1 << (CPP14Parser.This - 32)))) !==\r\n                                    0) ||\r\n                            (((_la - 68) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 68)) &\r\n                                    ((1 << (CPP14Parser.Typeid - 68)) |\r\n                                        (1 << (CPP14Parser.Typename - 68)) |\r\n                                        (1 << (CPP14Parser.Union - 68)) |\r\n                                        (1 << (CPP14Parser.Unsigned - 68)) |\r\n                                        (1 << (CPP14Parser.Void - 68)) |\r\n                                        (1 << (CPP14Parser.Volatile - 68)) |\r\n                                        (1 << (CPP14Parser.Wchar - 68)) |\r\n                                        (1 << (CPP14Parser.LeftParen - 68)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 68)) |\r\n                                        (1 << (CPP14Parser.Plus - 68)) |\r\n                                        (1 << (CPP14Parser.Minus - 68)) |\r\n                                        (1 << (CPP14Parser.Star - 68)) |\r\n                                        (1 << (CPP14Parser.And - 68)) |\r\n                                        (1 << (CPP14Parser.Or - 68)) |\r\n                                        (1 << (CPP14Parser.Tilde - 68)) |\r\n                                        (1 << (CPP14Parser.Not - 68)))) !==\r\n                                    0) ||\r\n                            (((_la - 113) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 113)) &\r\n                                    ((1 << (CPP14Parser.PlusPlus - 113)) |\r\n                                        (1 << (CPP14Parser.MinusMinus - 113)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 113)) |\r\n                                        (1 << (CPP14Parser.Identifier - 113)) |\r\n                                        (1 << (CPP14Parser.Integerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Characterliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Floatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Stringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Booleanliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedintegerliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedfloatingliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedstringliteral - 113)) |\r\n                                        (1 << (CPP14Parser.Userdefinedcharacterliteral - 113)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 2530;\r\n                                this.templateargumentlist(0);\r\n                            }\r\n                        }\r\n                        this.state = 2533;\r\n                        this.match(CPP14Parser.Greater);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    templatename() {\r\n        let _localctx = new TemplatenameContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 422, CPP14Parser.RULE_templatename);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2537;\r\n                this.match(CPP14Parser.Identifier);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    templateargumentlist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new TemplateargumentlistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 424;\r\n        this.enterRecursionRule(_localctx, 424, CPP14Parser.RULE_templateargumentlist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2540;\r\n                    this.templateargument();\r\n                    this.state = 2542;\r\n                    this._errHandler.sync(this);\r\n                    switch (this.interpreter.adaptivePredict(this._input, 328, this._ctx)) {\r\n                        case 1:\r\n                            {\r\n                                this.state = 2541;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2552;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new TemplateargumentlistContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_templateargumentlist);\r\n                                this.state = 2544;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2545;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 2546;\r\n                                this.templateargument();\r\n                                this.state = 2548;\r\n                                this._errHandler.sync(this);\r\n                                switch (this.interpreter.adaptivePredict(this._input, 329, this._ctx)) {\r\n                                    case 1:\r\n                                        {\r\n                                            this.state = 2547;\r\n                                            this.match(CPP14Parser.Ellipsis);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2554;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 330, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    templateargument() {\r\n        let _localctx = new TemplateargumentContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 426, CPP14Parser.RULE_templateargument);\r\n        try {\r\n            this.state = 2558;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 331, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2555;\r\n                        this.constantexpression();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2556;\r\n                        this.typeid();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2557;\r\n                        this.idexpression();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typenamespecifier() {\r\n        let _localctx = new TypenamespecifierContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 428, CPP14Parser.RULE_typenamespecifier);\r\n        let _la;\r\n        try {\r\n            this.state = 2571;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 333, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2560;\r\n                        this.match(CPP14Parser.Typename);\r\n                        this.state = 2561;\r\n                        this.nestednamespecifier(0);\r\n                        this.state = 2562;\r\n                        this.match(CPP14Parser.Identifier);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2564;\r\n                        this.match(CPP14Parser.Typename);\r\n                        this.state = 2565;\r\n                        this.nestednamespecifier(0);\r\n                        this.state = 2567;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Template) {\r\n                            {\r\n                                this.state = 2566;\r\n                                this.match(CPP14Parser.Template);\r\n                            }\r\n                        }\r\n                        this.state = 2569;\r\n                        this.simpletemplateid();\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    explicitinstantiation() {\r\n        let _localctx = new ExplicitinstantiationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 430, CPP14Parser.RULE_explicitinstantiation);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2574;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Extern) {\r\n                    {\r\n                        this.state = 2573;\r\n                        this.match(CPP14Parser.Extern);\r\n                    }\r\n                }\r\n                this.state = 2576;\r\n                this.match(CPP14Parser.Template);\r\n                this.state = 2577;\r\n                this.declaration();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    explicitspecialization() {\r\n        let _localctx = new ExplicitspecializationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 432, CPP14Parser.RULE_explicitspecialization);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2579;\r\n                this.match(CPP14Parser.Template);\r\n                this.state = 2580;\r\n                this.match(CPP14Parser.Less);\r\n                this.state = 2581;\r\n                this.match(CPP14Parser.Greater);\r\n                this.state = 2582;\r\n                this.declaration();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    tryblock() {\r\n        let _localctx = new TryblockContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 434, CPP14Parser.RULE_tryblock);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2584;\r\n                this.match(CPP14Parser.Try);\r\n                this.state = 2585;\r\n                this.compoundstatement();\r\n                this.state = 2586;\r\n                this.handlerseq();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    functiontryblock() {\r\n        let _localctx = new FunctiontryblockContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 436, CPP14Parser.RULE_functiontryblock);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2588;\r\n                this.match(CPP14Parser.Try);\r\n                this.state = 2590;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (_la === CPP14Parser.Colon) {\r\n                    {\r\n                        this.state = 2589;\r\n                        this.ctorinitializer();\r\n                    }\r\n                }\r\n                this.state = 2592;\r\n                this.compoundstatement();\r\n                this.state = 2593;\r\n                this.handlerseq();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    handlerseq() {\r\n        let _localctx = new HandlerseqContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 438, CPP14Parser.RULE_handlerseq);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2595;\r\n                this.handler();\r\n                this.state = 2597;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 336, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2596;\r\n                            this.handlerseq();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    handler() {\r\n        let _localctx = new HandlerContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 440, CPP14Parser.RULE_handler);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2599;\r\n                this.match(CPP14Parser.Catch);\r\n                this.state = 2600;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 2601;\r\n                this.exceptiondeclaration();\r\n                this.state = 2602;\r\n                this.match(CPP14Parser.RightParen);\r\n                this.state = 2603;\r\n                this.compoundstatement();\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    exceptiondeclaration() {\r\n        let _localctx = new ExceptiondeclarationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 442, CPP14Parser.RULE_exceptiondeclaration);\r\n        let _la;\r\n        try {\r\n            this.state = 2619;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 340, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2606;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 2605;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 2608;\r\n                        this.typespecifierseq();\r\n                        this.state = 2609;\r\n                        this.declarator();\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2612;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Alignas || _la === CPP14Parser.LeftBracket) {\r\n                            {\r\n                                this.state = 2611;\r\n                                this.attributespecifierseq(0);\r\n                            }\r\n                        }\r\n                        this.state = 2614;\r\n                        this.typespecifierseq();\r\n                        this.state = 2616;\r\n                        this._errHandler.sync(this);\r\n                        _la = this._input.LA(1);\r\n                        if (_la === CPP14Parser.Decltype ||\r\n                            (((_la - 78) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 78)) &\r\n                                    ((1 << (CPP14Parser.LeftParen - 78)) |\r\n                                        (1 << (CPP14Parser.LeftBracket - 78)) |\r\n                                        (1 << (CPP14Parser.Star - 78)) |\r\n                                        (1 << (CPP14Parser.And - 78)))) !==\r\n                                    0) ||\r\n                            (((_la - 111) & ~0x1f) === 0 &&\r\n                                ((1 << (_la - 111)) &\r\n                                    ((1 << (CPP14Parser.AndAnd - 111)) |\r\n                                        (1 << (CPP14Parser.Doublecolon - 111)) |\r\n                                        (1 << (CPP14Parser.Ellipsis - 111)) |\r\n                                        (1 << (CPP14Parser.Identifier - 111)))) !==\r\n                                    0)) {\r\n                            {\r\n                                this.state = 2615;\r\n                                this.abstractdeclarator();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2618;\r\n                        this.match(CPP14Parser.Ellipsis);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    throwexpression() {\r\n        let _localctx = new ThrowexpressionContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 444, CPP14Parser.RULE_throwexpression);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2621;\r\n                this.match(CPP14Parser.Throw);\r\n                this.state = 2623;\r\n                this._errHandler.sync(this);\r\n                switch (this.interpreter.adaptivePredict(this._input, 341, this._ctx)) {\r\n                    case 1:\r\n                        {\r\n                            this.state = 2622;\r\n                            this.assignmentexpression();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    exceptionspecification() {\r\n        let _localctx = new ExceptionspecificationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 446, CPP14Parser.RULE_exceptionspecification);\r\n        try {\r\n            this.state = 2627;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Throw:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2625;\r\n                        this.dynamicexceptionspecification();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Noexcept:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2626;\r\n                        this.noexceptspecification();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    dynamicexceptionspecification() {\r\n        let _localctx = new DynamicexceptionspecificationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 448, CPP14Parser.RULE_dynamicexceptionspecification);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2629;\r\n                this.match(CPP14Parser.Throw);\r\n                this.state = 2630;\r\n                this.match(CPP14Parser.LeftParen);\r\n                this.state = 2632;\r\n                this._errHandler.sync(this);\r\n                _la = this._input.LA(1);\r\n                if (((_la & ~0x1f) === 0 &&\r\n                    ((1 << _la) &\r\n                        ((1 << CPP14Parser.Auto) |\r\n                            (1 << CPP14Parser.Bool) |\r\n                            (1 << CPP14Parser.Char) |\r\n                            (1 << CPP14Parser.Char16) |\r\n                            (1 << CPP14Parser.Char32) |\r\n                            (1 << CPP14Parser.Class) |\r\n                            (1 << CPP14Parser.Const) |\r\n                            (1 << CPP14Parser.Decltype) |\r\n                            (1 << CPP14Parser.Double) |\r\n                            (1 << CPP14Parser.File) |\r\n                            (1 << CPP14Parser.Enum))) !==\r\n                        0) ||\r\n                    (((_la - 32) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 32)) &\r\n                            ((1 << (CPP14Parser.Float - 32)) |\r\n                                (1 << (CPP14Parser.Int - 32)) |\r\n                                (1 << (CPP14Parser.Long - 32)) |\r\n                                (1 << (CPP14Parser.Short - 32)) |\r\n                                (1 << (CPP14Parser.Signed - 32)) |\r\n                                (1 << (CPP14Parser.Struct - 32)))) !==\r\n                            0) ||\r\n                    (((_la - 69) & ~0x1f) === 0 &&\r\n                        ((1 << (_la - 69)) &\r\n                            ((1 << (CPP14Parser.Typename - 69)) |\r\n                                (1 << (CPP14Parser.Union - 69)) |\r\n                                (1 << (CPP14Parser.Unsigned - 69)) |\r\n                                (1 << (CPP14Parser.Void - 69)) |\r\n                                (1 << (CPP14Parser.Volatile - 69)) |\r\n                                (1 << (CPP14Parser.Wchar - 69)))) !==\r\n                            0) ||\r\n                    _la === CPP14Parser.Doublecolon ||\r\n                    _la === CPP14Parser.Identifier) {\r\n                    {\r\n                        this.state = 2631;\r\n                        this.typeidlist(0);\r\n                    }\r\n                }\r\n                this.state = 2634;\r\n                this.match(CPP14Parser.RightParen);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    typeidlist(_p) {\r\n        if (_p === undefined) {\r\n            _p = 0;\r\n        }\r\n        let _parentctx = this._ctx;\r\n        let _parentState = this.state;\r\n        let _localctx = new TypeidlistContext(this._ctx, _parentState);\r\n        let _prevctx = _localctx;\r\n        let _startState = 450;\r\n        this.enterRecursionRule(_localctx, 450, CPP14Parser.RULE_typeidlist, _p);\r\n        try {\r\n            let _alt;\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                {\r\n                    this.state = 2637;\r\n                    this.typeid();\r\n                    this.state = 2639;\r\n                    this._errHandler.sync(this);\r\n                    switch (this.interpreter.adaptivePredict(this._input, 344, this._ctx)) {\r\n                        case 1:\r\n                            {\r\n                                this.state = 2638;\r\n                                this.match(CPP14Parser.Ellipsis);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                this._ctx._stop = this._input.tryLT(-1);\r\n                this.state = 2649;\r\n                this._errHandler.sync(this);\r\n                _alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);\r\n                while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {\r\n                    if (_alt === 1) {\r\n                        if (this._parseListeners != null) {\r\n                            this.triggerExitRuleEvent();\r\n                        }\r\n                        _prevctx = _localctx;\r\n                        {\r\n                            {\r\n                                _localctx = new TypeidlistContext(_parentctx, _parentState);\r\n                                this.pushNewRecursionContext(_localctx, _startState, CPP14Parser.RULE_typeidlist);\r\n                                this.state = 2641;\r\n                                if (!this.precpred(this._ctx, 1)) {\r\n                                    throw new FailedPredicateException_1.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');\r\n                                }\r\n                                this.state = 2642;\r\n                                this.match(CPP14Parser.Comma);\r\n                                this.state = 2643;\r\n                                this.typeid();\r\n                                this.state = 2645;\r\n                                this._errHandler.sync(this);\r\n                                switch (this.interpreter.adaptivePredict(this._input, 345, this._ctx)) {\r\n                                    case 1:\r\n                                        {\r\n                                            this.state = 2644;\r\n                                            this.match(CPP14Parser.Ellipsis);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.state = 2651;\r\n                    this._errHandler.sync(this);\r\n                    _alt = this.interpreter.adaptivePredict(this._input, 346, this._ctx);\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.unrollRecursionContexts(_parentctx);\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    noexceptspecification() {\r\n        let _localctx = new NoexceptspecificationContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 452, CPP14Parser.RULE_noexceptspecification);\r\n        try {\r\n            this.state = 2658;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 347, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2652;\r\n                        this.match(CPP14Parser.Noexcept);\r\n                        this.state = 2653;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 2654;\r\n                        this.constantexpression();\r\n                        this.state = 2655;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2657;\r\n                        this.match(CPP14Parser.Noexcept);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    rightShift() {\r\n        let _localctx = new RightShiftContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 454, CPP14Parser.RULE_rightShift);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2660;\r\n                this.match(CPP14Parser.Greater);\r\n                this.state = 2661;\r\n                this.match(CPP14Parser.Greater);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    rightShiftAssign() {\r\n        let _localctx = new RightShiftAssignContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 456, CPP14Parser.RULE_rightShiftAssign);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2663;\r\n                this.match(CPP14Parser.Greater);\r\n                this.state = 2664;\r\n                this.match(CPP14Parser.Greater);\r\n                this.state = 2665;\r\n                this.match(CPP14Parser.Assign);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    operator() {\r\n        let _localctx = new OperatorContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 458, CPP14Parser.RULE_operator);\r\n        try {\r\n            this.state = 2715;\r\n            this._errHandler.sync(this);\r\n            switch (this.interpreter.adaptivePredict(this._input, 348, this._ctx)) {\r\n                case 1:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2667;\r\n                        this.match(CPP14Parser.New);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2668;\r\n                        this.match(CPP14Parser.Delete);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2669;\r\n                        this.match(CPP14Parser.New);\r\n                        this.state = 2670;\r\n                        this.match(CPP14Parser.LeftBracket);\r\n                        this.state = 2671;\r\n                        this.match(CPP14Parser.RightBracket);\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2672;\r\n                        this.match(CPP14Parser.Delete);\r\n                        this.state = 2673;\r\n                        this.match(CPP14Parser.LeftBracket);\r\n                        this.state = 2674;\r\n                        this.match(CPP14Parser.RightBracket);\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2675;\r\n                        this.match(CPP14Parser.Plus);\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2676;\r\n                        this.match(CPP14Parser.Minus);\r\n                    }\r\n                    break;\r\n                case 7:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 2677;\r\n                        this.match(CPP14Parser.Star);\r\n                    }\r\n                    break;\r\n                case 8:\r\n                    this.enterOuterAlt(_localctx, 8);\r\n                    {\r\n                        this.state = 2678;\r\n                        this.match(CPP14Parser.Div);\r\n                    }\r\n                    break;\r\n                case 9:\r\n                    this.enterOuterAlt(_localctx, 9);\r\n                    {\r\n                        this.state = 2679;\r\n                        this.match(CPP14Parser.Mod);\r\n                    }\r\n                    break;\r\n                case 10:\r\n                    this.enterOuterAlt(_localctx, 10);\r\n                    {\r\n                        this.state = 2680;\r\n                        this.match(CPP14Parser.Caret);\r\n                    }\r\n                    break;\r\n                case 11:\r\n                    this.enterOuterAlt(_localctx, 11);\r\n                    {\r\n                        this.state = 2681;\r\n                        this.match(CPP14Parser.And);\r\n                    }\r\n                    break;\r\n                case 12:\r\n                    this.enterOuterAlt(_localctx, 12);\r\n                    {\r\n                        this.state = 2682;\r\n                        this.match(CPP14Parser.Or);\r\n                    }\r\n                    break;\r\n                case 13:\r\n                    this.enterOuterAlt(_localctx, 13);\r\n                    {\r\n                        this.state = 2683;\r\n                        this.match(CPP14Parser.Tilde);\r\n                    }\r\n                    break;\r\n                case 14:\r\n                    this.enterOuterAlt(_localctx, 14);\r\n                    {\r\n                        this.state = 2684;\r\n                        this.match(CPP14Parser.Not);\r\n                    }\r\n                    break;\r\n                case 15:\r\n                    this.enterOuterAlt(_localctx, 15);\r\n                    {\r\n                        this.state = 2685;\r\n                        this.match(CPP14Parser.Assign);\r\n                    }\r\n                    break;\r\n                case 16:\r\n                    this.enterOuterAlt(_localctx, 16);\r\n                    {\r\n                        this.state = 2686;\r\n                        this.match(CPP14Parser.Less);\r\n                    }\r\n                    break;\r\n                case 17:\r\n                    this.enterOuterAlt(_localctx, 17);\r\n                    {\r\n                        this.state = 2687;\r\n                        this.match(CPP14Parser.Greater);\r\n                    }\r\n                    break;\r\n                case 18:\r\n                    this.enterOuterAlt(_localctx, 18);\r\n                    {\r\n                        this.state = 2688;\r\n                        this.match(CPP14Parser.PlusAssign);\r\n                    }\r\n                    break;\r\n                case 19:\r\n                    this.enterOuterAlt(_localctx, 19);\r\n                    {\r\n                        this.state = 2689;\r\n                        this.match(CPP14Parser.MinusAssign);\r\n                    }\r\n                    break;\r\n                case 20:\r\n                    this.enterOuterAlt(_localctx, 20);\r\n                    {\r\n                        this.state = 2690;\r\n                        this.match(CPP14Parser.StarAssign);\r\n                    }\r\n                    break;\r\n                case 21:\r\n                    this.enterOuterAlt(_localctx, 21);\r\n                    {\r\n                        this.state = 2691;\r\n                        this.match(CPP14Parser.DivAssign);\r\n                    }\r\n                    break;\r\n                case 22:\r\n                    this.enterOuterAlt(_localctx, 22);\r\n                    {\r\n                        this.state = 2692;\r\n                        this.match(CPP14Parser.ModAssign);\r\n                    }\r\n                    break;\r\n                case 23:\r\n                    this.enterOuterAlt(_localctx, 23);\r\n                    {\r\n                        this.state = 2693;\r\n                        this.match(CPP14Parser.XorAssign);\r\n                    }\r\n                    break;\r\n                case 24:\r\n                    this.enterOuterAlt(_localctx, 24);\r\n                    {\r\n                        this.state = 2694;\r\n                        this.match(CPP14Parser.AndAssign);\r\n                    }\r\n                    break;\r\n                case 25:\r\n                    this.enterOuterAlt(_localctx, 25);\r\n                    {\r\n                        this.state = 2695;\r\n                        this.match(CPP14Parser.OrAssign);\r\n                    }\r\n                    break;\r\n                case 26:\r\n                    this.enterOuterAlt(_localctx, 26);\r\n                    {\r\n                        this.state = 2696;\r\n                        this.match(CPP14Parser.LeftShift);\r\n                    }\r\n                    break;\r\n                case 27:\r\n                    this.enterOuterAlt(_localctx, 27);\r\n                    {\r\n                        this.state = 2697;\r\n                        this.rightShift();\r\n                    }\r\n                    break;\r\n                case 28:\r\n                    this.enterOuterAlt(_localctx, 28);\r\n                    {\r\n                        this.state = 2698;\r\n                        this.rightShiftAssign();\r\n                    }\r\n                    break;\r\n                case 29:\r\n                    this.enterOuterAlt(_localctx, 29);\r\n                    {\r\n                        this.state = 2699;\r\n                        this.match(CPP14Parser.LeftShiftAssign);\r\n                    }\r\n                    break;\r\n                case 30:\r\n                    this.enterOuterAlt(_localctx, 30);\r\n                    {\r\n                        this.state = 2700;\r\n                        this.match(CPP14Parser.Equal);\r\n                    }\r\n                    break;\r\n                case 31:\r\n                    this.enterOuterAlt(_localctx, 31);\r\n                    {\r\n                        this.state = 2701;\r\n                        this.match(CPP14Parser.NotEqual);\r\n                    }\r\n                    break;\r\n                case 32:\r\n                    this.enterOuterAlt(_localctx, 32);\r\n                    {\r\n                        this.state = 2702;\r\n                        this.match(CPP14Parser.LessEqual);\r\n                    }\r\n                    break;\r\n                case 33:\r\n                    this.enterOuterAlt(_localctx, 33);\r\n                    {\r\n                        this.state = 2703;\r\n                        this.match(CPP14Parser.GreaterEqual);\r\n                    }\r\n                    break;\r\n                case 34:\r\n                    this.enterOuterAlt(_localctx, 34);\r\n                    {\r\n                        this.state = 2704;\r\n                        this.match(CPP14Parser.AndAnd);\r\n                    }\r\n                    break;\r\n                case 35:\r\n                    this.enterOuterAlt(_localctx, 35);\r\n                    {\r\n                        this.state = 2705;\r\n                        this.match(CPP14Parser.OrOr);\r\n                    }\r\n                    break;\r\n                case 36:\r\n                    this.enterOuterAlt(_localctx, 36);\r\n                    {\r\n                        this.state = 2706;\r\n                        this.match(CPP14Parser.PlusPlus);\r\n                    }\r\n                    break;\r\n                case 37:\r\n                    this.enterOuterAlt(_localctx, 37);\r\n                    {\r\n                        this.state = 2707;\r\n                        this.match(CPP14Parser.MinusMinus);\r\n                    }\r\n                    break;\r\n                case 38:\r\n                    this.enterOuterAlt(_localctx, 38);\r\n                    {\r\n                        this.state = 2708;\r\n                        this.match(CPP14Parser.Comma);\r\n                    }\r\n                    break;\r\n                case 39:\r\n                    this.enterOuterAlt(_localctx, 39);\r\n                    {\r\n                        this.state = 2709;\r\n                        this.match(CPP14Parser.ArrowStar);\r\n                    }\r\n                    break;\r\n                case 40:\r\n                    this.enterOuterAlt(_localctx, 40);\r\n                    {\r\n                        this.state = 2710;\r\n                        this.match(CPP14Parser.Arrow);\r\n                    }\r\n                    break;\r\n                case 41:\r\n                    this.enterOuterAlt(_localctx, 41);\r\n                    {\r\n                        this.state = 2711;\r\n                        this.match(CPP14Parser.LeftParen);\r\n                        this.state = 2712;\r\n                        this.match(CPP14Parser.RightParen);\r\n                    }\r\n                    break;\r\n                case 42:\r\n                    this.enterOuterAlt(_localctx, 42);\r\n                    {\r\n                        this.state = 2713;\r\n                        this.match(CPP14Parser.LeftBracket);\r\n                        this.state = 2714;\r\n                        this.match(CPP14Parser.RightBracket);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    literal() {\r\n        let _localctx = new LiteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 460, CPP14Parser.RULE_literal);\r\n        try {\r\n            this.state = 2724;\r\n            this._errHandler.sync(this);\r\n            switch (this._input.LA(1)) {\r\n                case CPP14Parser.Integerliteral:\r\n                    this.enterOuterAlt(_localctx, 1);\r\n                    {\r\n                        this.state = 2717;\r\n                        this.integerliteral();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Characterliteral:\r\n                    this.enterOuterAlt(_localctx, 2);\r\n                    {\r\n                        this.state = 2718;\r\n                        this.characterliteral();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Floatingliteral:\r\n                    this.enterOuterAlt(_localctx, 3);\r\n                    {\r\n                        this.state = 2719;\r\n                        this.floatingliteral();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Stringliteral:\r\n                    this.enterOuterAlt(_localctx, 4);\r\n                    {\r\n                        this.state = 2720;\r\n                        this.stringliteral();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Booleanliteral:\r\n                    this.enterOuterAlt(_localctx, 5);\r\n                    {\r\n                        this.state = 2721;\r\n                        this.booleanliteral();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Nullptr:\r\n                    this.enterOuterAlt(_localctx, 6);\r\n                    {\r\n                        this.state = 2722;\r\n                        this.pointerliteral();\r\n                    }\r\n                    break;\r\n                case CPP14Parser.Userdefinedintegerliteral:\r\n                case CPP14Parser.Userdefinedfloatingliteral:\r\n                case CPP14Parser.Userdefinedstringliteral:\r\n                case CPP14Parser.Userdefinedcharacterliteral:\r\n                    this.enterOuterAlt(_localctx, 7);\r\n                    {\r\n                        this.state = 2723;\r\n                        this.userdefinedliteral();\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new NoViableAltException_1.NoViableAltException(this);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    integerliteral() {\r\n        let _localctx = new IntegerliteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 462, CPP14Parser.RULE_integerliteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2726;\r\n                this.match(CPP14Parser.Integerliteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    characterliteral() {\r\n        let _localctx = new CharacterliteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 464, CPP14Parser.RULE_characterliteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2728;\r\n                this.match(CPP14Parser.Characterliteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    floatingliteral() {\r\n        let _localctx = new FloatingliteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 466, CPP14Parser.RULE_floatingliteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2730;\r\n                this.match(CPP14Parser.Floatingliteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    stringliteral() {\r\n        let _localctx = new StringliteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 468, CPP14Parser.RULE_stringliteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2732;\r\n                this.match(CPP14Parser.Stringliteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    booleanliteral() {\r\n        let _localctx = new BooleanliteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 470, CPP14Parser.RULE_booleanliteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2734;\r\n                this.match(CPP14Parser.Booleanliteral);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    pointerliteral() {\r\n        let _localctx = new PointerliteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 472, CPP14Parser.RULE_pointerliteral);\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2736;\r\n                this.match(CPP14Parser.Nullptr);\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    // @RuleVersion(0)\r\n    userdefinedliteral() {\r\n        let _localctx = new UserdefinedliteralContext(this._ctx, this.state);\r\n        this.enterRule(_localctx, 474, CPP14Parser.RULE_userdefinedliteral);\r\n        let _la;\r\n        try {\r\n            this.enterOuterAlt(_localctx, 1);\r\n            {\r\n                this.state = 2738;\r\n                _la = this._input.LA(1);\r\n                if (!(((_la - 136) & ~0x1f) === 0 &&\r\n                    ((1 << (_la - 136)) &\r\n                        ((1 << (CPP14Parser.Userdefinedintegerliteral - 136)) |\r\n                            (1 << (CPP14Parser.Userdefinedfloatingliteral - 136)) |\r\n                            (1 << (CPP14Parser.Userdefinedstringliteral - 136)) |\r\n                            (1 << (CPP14Parser.Userdefinedcharacterliteral - 136)))) !==\r\n                        0)) {\r\n                    this._errHandler.recoverInline(this);\r\n                }\r\n                else {\r\n                    if (this._input.LA(1) === Token_1.Token.EOF) {\r\n                        this.matchedEOF = true;\r\n                    }\r\n                    this._errHandler.reportMatch(this);\r\n                    this.consume();\r\n                }\r\n            }\r\n        }\r\n        catch (re) {\r\n            if (re instanceof RecognitionException_1.RecognitionException) {\r\n                _localctx.exception = re;\r\n                this._errHandler.reportError(this, re);\r\n                this._errHandler.recover(this, re);\r\n            }\r\n            else {\r\n                throw re;\r\n            }\r\n        }\r\n        finally {\r\n            this.exitRule();\r\n        }\r\n        return _localctx;\r\n    }\r\n    sempred(_localctx, ruleIndex, predIndex) {\r\n        switch (ruleIndex) {\r\n            case 6:\r\n                return this.nestednamespecifier_sempred(_localctx, predIndex);\r\n            case 11:\r\n                return this.capturelist_sempred(_localctx, predIndex);\r\n            case 18:\r\n                return this.postfixexpression_sempred(_localctx, predIndex);\r\n            case 29:\r\n                return this.noptrnewdeclarator_sempred(_localctx, predIndex);\r\n            case 34:\r\n                return this.pmexpression_sempred(_localctx, predIndex);\r\n            case 35:\r\n                return this.multiplicativeexpression_sempred(_localctx, predIndex);\r\n            case 36:\r\n                return this.additiveexpression_sempred(_localctx, predIndex);\r\n            case 37:\r\n                return this.shiftexpression_sempred(_localctx, predIndex);\r\n            case 38:\r\n                return this.relationalexpression_sempred(_localctx, predIndex);\r\n            case 39:\r\n                return this.equalityexpression_sempred(_localctx, predIndex);\r\n            case 40:\r\n                return this.andexpression_sempred(_localctx, predIndex);\r\n            case 41:\r\n                return this.exclusiveorexpression_sempred(_localctx, predIndex);\r\n            case 42:\r\n                return this.inclusiveorexpression_sempred(_localctx, predIndex);\r\n            case 43:\r\n                return this.logicalandexpression_sempred(_localctx, predIndex);\r\n            case 44:\r\n                return this.logicalorexpression_sempred(_localctx, predIndex);\r\n            case 48:\r\n                return this.expression_sempred(_localctx, predIndex);\r\n            case 74:\r\n                return this.declarationseq_sempred(_localctx, predIndex);\r\n            case 115:\r\n                return this.enumeratorlist_sempred(_localctx, predIndex);\r\n            case 133:\r\n                return this.attributespecifierseq_sempred(_localctx, predIndex);\r\n            case 136:\r\n                return this.attributelist_sempred(_localctx, predIndex);\r\n            case 142:\r\n                return this.balancedtokenseq_sempred(_localctx, predIndex);\r\n            case 148:\r\n                return this.noptrdeclarator_sempred(_localctx, predIndex);\r\n            case 159:\r\n                return this.noptrabstractdeclarator_sempred(_localctx, predIndex);\r\n            case 161:\r\n                return this.noptrabstractpackdeclarator_sempred(_localctx, predIndex);\r\n            case 163:\r\n                return this.parameterdeclarationlist_sempred(_localctx, predIndex);\r\n            case 185:\r\n                return this.memberdeclaratorlist_sempred(_localctx, predIndex);\r\n            case 187:\r\n                return this.virtspecifierseq_sempred(_localctx, predIndex);\r\n            case 191:\r\n                return this.basespecifierlist_sempred(_localctx, predIndex);\r\n            case 206:\r\n                return this.templateparameterlist_sempred(_localctx, predIndex);\r\n            case 212:\r\n                return this.templateargumentlist_sempred(_localctx, predIndex);\r\n            case 225:\r\n                return this.typeidlist_sempred(_localctx, predIndex);\r\n        }\r\n        return true;\r\n    }\r\n    nestednamespecifier_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 0:\r\n                return this.precpred(this._ctx, 2);\r\n            case 1:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    capturelist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 2:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    postfixexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 3:\r\n                return this.precpred(this._ctx, 18);\r\n            case 4:\r\n                return this.precpred(this._ctx, 17);\r\n            case 5:\r\n                return this.precpred(this._ctx, 12);\r\n            case 6:\r\n                return this.precpred(this._ctx, 11);\r\n            case 7:\r\n                return this.precpred(this._ctx, 10);\r\n            case 8:\r\n                return this.precpred(this._ctx, 9);\r\n            case 9:\r\n                return this.precpred(this._ctx, 8);\r\n            case 10:\r\n                return this.precpred(this._ctx, 7);\r\n        }\r\n        return true;\r\n    }\r\n    noptrnewdeclarator_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 11:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    pmexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 12:\r\n                return this.precpred(this._ctx, 2);\r\n            case 13:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    multiplicativeexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 14:\r\n                return this.precpred(this._ctx, 3);\r\n            case 15:\r\n                return this.precpred(this._ctx, 2);\r\n            case 16:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    additiveexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 17:\r\n                return this.precpred(this._ctx, 2);\r\n            case 18:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    shiftexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 19:\r\n                return this.precpred(this._ctx, 2);\r\n            case 20:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    relationalexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 21:\r\n                return this.precpred(this._ctx, 4);\r\n            case 22:\r\n                return this.precpred(this._ctx, 3);\r\n            case 23:\r\n                return this.precpred(this._ctx, 2);\r\n            case 24:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    equalityexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 25:\r\n                return this.precpred(this._ctx, 2);\r\n            case 26:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    andexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 27:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    exclusiveorexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 28:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    inclusiveorexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 29:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    logicalandexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 30:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    logicalorexpression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 31:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    expression_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 32:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    declarationseq_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 33:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    enumeratorlist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 34:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    attributespecifierseq_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 35:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    attributelist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 36:\r\n                return this.precpred(this._ctx, 3);\r\n            case 37:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    balancedtokenseq_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 38:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    noptrdeclarator_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 39:\r\n                return this.precpred(this._ctx, 3);\r\n            case 40:\r\n                return this.precpred(this._ctx, 2);\r\n        }\r\n        return true;\r\n    }\r\n    noptrabstractdeclarator_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 41:\r\n                return this.precpred(this._ctx, 5);\r\n            case 42:\r\n                return this.precpred(this._ctx, 3);\r\n        }\r\n        return true;\r\n    }\r\n    noptrabstractpackdeclarator_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 43:\r\n                return this.precpred(this._ctx, 3);\r\n            case 44:\r\n                return this.precpred(this._ctx, 2);\r\n        }\r\n        return true;\r\n    }\r\n    parameterdeclarationlist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 45:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    memberdeclaratorlist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 46:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    virtspecifierseq_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 47:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    basespecifierlist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 48:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    templateparameterlist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 49:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    templateargumentlist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 50:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    typeidlist_sempred(_localctx, predIndex) {\r\n        switch (predIndex) {\r\n            case 51:\r\n                return this.precpred(this._ctx, 1);\r\n        }\r\n        return true;\r\n    }\r\n    static get _ATN() {\r\n        if (!CPP14Parser.__ATN) {\r\n            CPP14Parser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(CPP14Parser._serializedATN));\r\n        }\r\n        return CPP14Parser.__ATN;\r\n    }\r\n}\r\nexports.CPP14Parser = CPP14Parser;\r\nCPP14Parser.Directive = 1;\r\nCPP14Parser.Alignas = 2;\r\nCPP14Parser.Alignof = 3;\r\nCPP14Parser.Asm = 4;\r\nCPP14Parser.Auto = 5;\r\nCPP14Parser.Bool = 6;\r\nCPP14Parser.Break = 7;\r\nCPP14Parser.Case = 8;\r\nCPP14Parser.Catch = 9;\r\nCPP14Parser.Char = 10;\r\nCPP14Parser.Char16 = 11;\r\nCPP14Parser.Char32 = 12;\r\nCPP14Parser.Class = 13;\r\nCPP14Parser.Const = 14;\r\nCPP14Parser.Constexpr = 15;\r\nCPP14Parser.Const_cast = 16;\r\nCPP14Parser.Continue = 17;\r\nCPP14Parser.Decltype = 18;\r\nCPP14Parser.Default = 19;\r\nCPP14Parser.Delete = 20;\r\nCPP14Parser.Do = 21;\r\nCPP14Parser.Double = 22;\r\nCPP14Parser.File = 23;\r\nCPP14Parser.Dynamic_cast = 24;\r\nCPP14Parser.Else = 25;\r\nCPP14Parser.Enum = 26;\r\nCPP14Parser.Explicit = 27;\r\nCPP14Parser.Export = 28;\r\nCPP14Parser.Extern = 29;\r\nCPP14Parser.False = 30;\r\nCPP14Parser.Final = 31;\r\nCPP14Parser.Float = 32;\r\nCPP14Parser.For = 33;\r\nCPP14Parser.Friend = 34;\r\nCPP14Parser.Goto = 35;\r\nCPP14Parser.If = 36;\r\nCPP14Parser.Inline = 37;\r\nCPP14Parser.Int = 38;\r\nCPP14Parser.Long = 39;\r\nCPP14Parser.Mutable = 40;\r\nCPP14Parser.Namespace = 41;\r\nCPP14Parser.New = 42;\r\nCPP14Parser.Noexcept = 43;\r\nCPP14Parser.Nullptr = 44;\r\nCPP14Parser.Operator = 45;\r\nCPP14Parser.Override = 46;\r\nCPP14Parser.Private = 47;\r\nCPP14Parser.Protected = 48;\r\nCPP14Parser.Public = 49;\r\nCPP14Parser.Register = 50;\r\nCPP14Parser.Reinterpret_cast = 51;\r\nCPP14Parser.Return = 52;\r\nCPP14Parser.Short = 53;\r\nCPP14Parser.Signed = 54;\r\nCPP14Parser.Sizeof = 55;\r\nCPP14Parser.Static = 56;\r\nCPP14Parser.Static_assert = 57;\r\nCPP14Parser.Static_cast = 58;\r\nCPP14Parser.Struct = 59;\r\nCPP14Parser.Switch = 60;\r\nCPP14Parser.Template = 61;\r\nCPP14Parser.This = 62;\r\nCPP14Parser.Thread_local = 63;\r\nCPP14Parser.Throw = 64;\r\nCPP14Parser.True = 65;\r\nCPP14Parser.Try = 66;\r\nCPP14Parser.Typedef = 67;\r\nCPP14Parser.Typeid = 68;\r\nCPP14Parser.Typename = 69;\r\nCPP14Parser.Union = 70;\r\nCPP14Parser.Unsigned = 71;\r\nCPP14Parser.Using = 72;\r\nCPP14Parser.Virtual = 73;\r\nCPP14Parser.Void = 74;\r\nCPP14Parser.Volatile = 75;\r\nCPP14Parser.Wchar = 76;\r\nCPP14Parser.While = 77;\r\nCPP14Parser.LeftParen = 78;\r\nCPP14Parser.RightParen = 79;\r\nCPP14Parser.LeftBracket = 80;\r\nCPP14Parser.RightBracket = 81;\r\nCPP14Parser.LeftBrace = 82;\r\nCPP14Parser.RightBrace = 83;\r\nCPP14Parser.Plus = 84;\r\nCPP14Parser.Minus = 85;\r\nCPP14Parser.Star = 86;\r\nCPP14Parser.Div = 87;\r\nCPP14Parser.Mod = 88;\r\nCPP14Parser.Caret = 89;\r\nCPP14Parser.And = 90;\r\nCPP14Parser.Or = 91;\r\nCPP14Parser.Tilde = 92;\r\nCPP14Parser.Not = 93;\r\nCPP14Parser.Assign = 94;\r\nCPP14Parser.Less = 95;\r\nCPP14Parser.Greater = 96;\r\nCPP14Parser.PlusAssign = 97;\r\nCPP14Parser.MinusAssign = 98;\r\nCPP14Parser.StarAssign = 99;\r\nCPP14Parser.DivAssign = 100;\r\nCPP14Parser.ModAssign = 101;\r\nCPP14Parser.XorAssign = 102;\r\nCPP14Parser.AndAssign = 103;\r\nCPP14Parser.OrAssign = 104;\r\nCPP14Parser.LeftShift = 105;\r\nCPP14Parser.LeftShiftAssign = 106;\r\nCPP14Parser.Equal = 107;\r\nCPP14Parser.NotEqual = 108;\r\nCPP14Parser.LessEqual = 109;\r\nCPP14Parser.GreaterEqual = 110;\r\nCPP14Parser.AndAnd = 111;\r\nCPP14Parser.OrOr = 112;\r\nCPP14Parser.PlusPlus = 113;\r\nCPP14Parser.MinusMinus = 114;\r\nCPP14Parser.Comma = 115;\r\nCPP14Parser.ArrowStar = 116;\r\nCPP14Parser.Arrow = 117;\r\nCPP14Parser.Question = 118;\r\nCPP14Parser.Colon = 119;\r\nCPP14Parser.Doublecolon = 120;\r\nCPP14Parser.Semi = 121;\r\nCPP14Parser.Dot = 122;\r\nCPP14Parser.DotStar = 123;\r\nCPP14Parser.Ellipsis = 124;\r\nCPP14Parser.Identifier = 125;\r\nCPP14Parser.Integerliteral = 126;\r\nCPP14Parser.Decimalliteral = 127;\r\nCPP14Parser.Octalliteral = 128;\r\nCPP14Parser.Hexadecimalliteral = 129;\r\nCPP14Parser.Binaryliteral = 130;\r\nCPP14Parser.Integersuffix = 131;\r\nCPP14Parser.Characterliteral = 132;\r\nCPP14Parser.Floatingliteral = 133;\r\nCPP14Parser.Stringliteral = 134;\r\nCPP14Parser.Booleanliteral = 135;\r\nCPP14Parser.Userdefinedintegerliteral = 136;\r\nCPP14Parser.Userdefinedfloatingliteral = 137;\r\nCPP14Parser.Userdefinedstringliteral = 138;\r\nCPP14Parser.Userdefinedcharacterliteral = 139;\r\nCPP14Parser.Whitespace = 140;\r\nCPP14Parser.Newline = 141;\r\nCPP14Parser.BlockComment = 142;\r\nCPP14Parser.LineComment = 143;\r\nCPP14Parser.RULE_translationunit = 0;\r\nCPP14Parser.RULE_primaryexpression = 1;\r\nCPP14Parser.RULE_idexpression = 2;\r\nCPP14Parser.RULE_identexpression = 3;\r\nCPP14Parser.RULE_unqualifiedid = 4;\r\nCPP14Parser.RULE_qualifiedid = 5;\r\nCPP14Parser.RULE_nestednamespecifier = 6;\r\nCPP14Parser.RULE_lambdaexpression = 7;\r\nCPP14Parser.RULE_lambdaintroducer = 8;\r\nCPP14Parser.RULE_lambdacapture = 9;\r\nCPP14Parser.RULE_capturedefault = 10;\r\nCPP14Parser.RULE_capturelist = 11;\r\nCPP14Parser.RULE_capture = 12;\r\nCPP14Parser.RULE_simplecapture = 13;\r\nCPP14Parser.RULE_initcapture = 14;\r\nCPP14Parser.RULE_lambdadeclarator = 15;\r\nCPP14Parser.RULE_idexpressionlapper = 16;\r\nCPP14Parser.RULE_functioncallexpression = 17;\r\nCPP14Parser.RULE_postfixexpression = 18;\r\nCPP14Parser.RULE_expressionlist = 19;\r\nCPP14Parser.RULE_pseudodestructorname = 20;\r\nCPP14Parser.RULE_binaryexpression = 21;\r\nCPP14Parser.RULE_unaryexpression = 22;\r\nCPP14Parser.RULE_typeidlapper = 23;\r\nCPP14Parser.RULE_unaryoperator = 24;\r\nCPP14Parser.RULE_newexpression = 25;\r\nCPP14Parser.RULE_newplacement = 26;\r\nCPP14Parser.RULE_newtypeid = 27;\r\nCPP14Parser.RULE_newdeclarator = 28;\r\nCPP14Parser.RULE_noptrnewdeclarator = 29;\r\nCPP14Parser.RULE_newinitializer = 30;\r\nCPP14Parser.RULE_deleteexpression = 31;\r\nCPP14Parser.RULE_noexceptexpression = 32;\r\nCPP14Parser.RULE_castexpression = 33;\r\nCPP14Parser.RULE_pmexpression = 34;\r\nCPP14Parser.RULE_multiplicativeexpression = 35;\r\nCPP14Parser.RULE_additiveexpression = 36;\r\nCPP14Parser.RULE_shiftexpression = 37;\r\nCPP14Parser.RULE_relationalexpression = 38;\r\nCPP14Parser.RULE_equalityexpression = 39;\r\nCPP14Parser.RULE_andexpression = 40;\r\nCPP14Parser.RULE_exclusiveorexpression = 41;\r\nCPP14Parser.RULE_inclusiveorexpression = 42;\r\nCPP14Parser.RULE_logicalandexpression = 43;\r\nCPP14Parser.RULE_logicalorexpression = 44;\r\nCPP14Parser.RULE_conditionalexpression = 45;\r\nCPP14Parser.RULE_assignmentexpression = 46;\r\nCPP14Parser.RULE_assignmentoperator = 47;\r\nCPP14Parser.RULE_expression = 48;\r\nCPP14Parser.RULE_constantexpression = 49;\r\nCPP14Parser.RULE_statement = 50;\r\nCPP14Parser.RULE_statementWithoutLabeldstatement = 51;\r\nCPP14Parser.RULE_labeledstatement = 52;\r\nCPP14Parser.RULE_switchunitstatement = 53;\r\nCPP14Parser.RULE_statementWithoutLabeldstatementseq = 54;\r\nCPP14Parser.RULE_expressionstatement = 55;\r\nCPP14Parser.RULE_compoundstatement = 56;\r\nCPP14Parser.RULE_statementseq = 57;\r\nCPP14Parser.RULE_selectionstatement = 58;\r\nCPP14Parser.RULE_switchstatement = 59;\r\nCPP14Parser.RULE_switchunitseq = 60;\r\nCPP14Parser.RULE_condition = 61;\r\nCPP14Parser.RULE_whilestatement = 62;\r\nCPP14Parser.RULE_dowhilestatement = 63;\r\nCPP14Parser.RULE_iterationstatement = 64;\r\nCPP14Parser.RULE_enhancedForStatement = 65;\r\nCPP14Parser.RULE_forinitstatement = 66;\r\nCPP14Parser.RULE_forrangedeclaration = 67;\r\nCPP14Parser.RULE_forrangeinitializer = 68;\r\nCPP14Parser.RULE_jumpstatement = 69;\r\nCPP14Parser.RULE_breakStatement = 70;\r\nCPP14Parser.RULE_continueStatement = 71;\r\nCPP14Parser.RULE_returnStatement = 72;\r\nCPP14Parser.RULE_declarationstatement = 73;\r\nCPP14Parser.RULE_declarationseq = 74;\r\nCPP14Parser.RULE_myclassbody = 75;\r\nCPP14Parser.RULE_myclassspecifier = 76;\r\nCPP14Parser.RULE_myclassspecifierstatement = 77;\r\nCPP14Parser.RULE_myclasshead = 78;\r\nCPP14Parser.RULE_declaration = 79;\r\nCPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration = 80;\r\nCPP14Parser.RULE_blockdeclaration = 81;\r\nCPP14Parser.RULE_aliasdeclaration = 82;\r\nCPP14Parser.RULE_variabledeclarationstatement = 83;\r\nCPP14Parser.RULE_variabledeclaration = 84;\r\nCPP14Parser.RULE_structspecifier = 85;\r\nCPP14Parser.RULE_variableDeclaratorList = 86;\r\nCPP14Parser.RULE_variableDeclarator = 87;\r\nCPP14Parser.RULE_dims = 88;\r\nCPP14Parser.RULE_functiondeclarationstatement = 89;\r\nCPP14Parser.RULE_simpledeclaration = 90;\r\nCPP14Parser.RULE_static_assertdeclaration = 91;\r\nCPP14Parser.RULE_emptydeclaration = 92;\r\nCPP14Parser.RULE_attributedeclaration = 93;\r\nCPP14Parser.RULE_declspecifier = 94;\r\nCPP14Parser.RULE_declspecifierseq = 95;\r\nCPP14Parser.RULE_declspecifierwithouttype = 96;\r\nCPP14Parser.RULE_declspecifierseqwithouttype = 97;\r\nCPP14Parser.RULE_storageclassspecifier = 98;\r\nCPP14Parser.RULE_functionspecifier = 99;\r\nCPP14Parser.RULE_typedefname = 100;\r\nCPP14Parser.RULE_typespecifier = 101;\r\nCPP14Parser.RULE_trailingtypespecifier = 102;\r\nCPP14Parser.RULE_typespecifierseq = 103;\r\nCPP14Parser.RULE_trailingtypespecifierseq = 104;\r\nCPP14Parser.RULE_simpletypespecifier = 105;\r\nCPP14Parser.RULE_typename = 106;\r\nCPP14Parser.RULE_decltypespecifier = 107;\r\nCPP14Parser.RULE_elaboratedtypespecifier = 108;\r\nCPP14Parser.RULE_enumname = 109;\r\nCPP14Parser.RULE_enumspecifier = 110;\r\nCPP14Parser.RULE_enumhead = 111;\r\nCPP14Parser.RULE_opaqueenumdeclaration = 112;\r\nCPP14Parser.RULE_enumkey = 113;\r\nCPP14Parser.RULE_enumbase = 114;\r\nCPP14Parser.RULE_enumeratorlist = 115;\r\nCPP14Parser.RULE_enumeratordefinition = 116;\r\nCPP14Parser.RULE_enumerator = 117;\r\nCPP14Parser.RULE_namespacename = 118;\r\nCPP14Parser.RULE_originalnamespacename = 119;\r\nCPP14Parser.RULE_namespacedefinition = 120;\r\nCPP14Parser.RULE_namednamespacedefinition = 121;\r\nCPP14Parser.RULE_originalnamespacedefinition = 122;\r\nCPP14Parser.RULE_extensionnamespacedefinition = 123;\r\nCPP14Parser.RULE_unnamednamespacedefinition = 124;\r\nCPP14Parser.RULE_namespacebody = 125;\r\nCPP14Parser.RULE_namespacealias = 126;\r\nCPP14Parser.RULE_namespacealiasdefinition = 127;\r\nCPP14Parser.RULE_qualifiednamespacespecifier = 128;\r\nCPP14Parser.RULE_usingdeclaration = 129;\r\nCPP14Parser.RULE_usingdirective = 130;\r\nCPP14Parser.RULE_asmdefinition = 131;\r\nCPP14Parser.RULE_linkagespecification = 132;\r\nCPP14Parser.RULE_attributespecifierseq = 133;\r\nCPP14Parser.RULE_attributespecifier = 134;\r\nCPP14Parser.RULE_alignmentspecifier = 135;\r\nCPP14Parser.RULE_attributelist = 136;\r\nCPP14Parser.RULE_attribute = 137;\r\nCPP14Parser.RULE_attributetoken = 138;\r\nCPP14Parser.RULE_attributescopedtoken = 139;\r\nCPP14Parser.RULE_attributenamespace = 140;\r\nCPP14Parser.RULE_attributeargumentclause = 141;\r\nCPP14Parser.RULE_balancedtokenseq = 142;\r\nCPP14Parser.RULE_balancedtoken = 143;\r\nCPP14Parser.RULE_initdeclaratorlist = 144;\r\nCPP14Parser.RULE_initdeclarator = 145;\r\nCPP14Parser.RULE_declarator = 146;\r\nCPP14Parser.RULE_ptrdeclarator = 147;\r\nCPP14Parser.RULE_noptrdeclarator = 148;\r\nCPP14Parser.RULE_parametersandqualifiers = 149;\r\nCPP14Parser.RULE_trailingreturntype = 150;\r\nCPP14Parser.RULE_ptroperator = 151;\r\nCPP14Parser.RULE_cvqualifierseq = 152;\r\nCPP14Parser.RULE_cvqualifier = 153;\r\nCPP14Parser.RULE_refqualifier = 154;\r\nCPP14Parser.RULE_declaratorid = 155;\r\nCPP14Parser.RULE_typeid = 156;\r\nCPP14Parser.RULE_abstractdeclarator = 157;\r\nCPP14Parser.RULE_ptrabstractdeclarator = 158;\r\nCPP14Parser.RULE_noptrabstractdeclarator = 159;\r\nCPP14Parser.RULE_abstractpackdeclarator = 160;\r\nCPP14Parser.RULE_noptrabstractpackdeclarator = 161;\r\nCPP14Parser.RULE_parameterdeclarationclause = 162;\r\nCPP14Parser.RULE_parameterdeclarationlist = 163;\r\nCPP14Parser.RULE_parameterdeclaration = 164;\r\nCPP14Parser.RULE_functiondefinition = 165;\r\nCPP14Parser.RULE_functionheader = 166;\r\nCPP14Parser.RULE_functiondeclarator = 167;\r\nCPP14Parser.RULE_functionbody = 168;\r\nCPP14Parser.RULE_initializer = 169;\r\nCPP14Parser.RULE_braceorequalinitializer = 170;\r\nCPP14Parser.RULE_initializerclause = 171;\r\nCPP14Parser.RULE_initializerlist = 172;\r\nCPP14Parser.RULE_bracedinitlist = 173;\r\nCPP14Parser.RULE_myclassname = 174;\r\nCPP14Parser.RULE_classspecifier = 175;\r\nCPP14Parser.RULE_classbody = 176;\r\nCPP14Parser.RULE_classhead = 177;\r\nCPP14Parser.RULE_classheadname = 178;\r\nCPP14Parser.RULE_classvirtspecifier = 179;\r\nCPP14Parser.RULE_classkey = 180;\r\nCPP14Parser.RULE_memberspecification = 181;\r\nCPP14Parser.RULE_memberdeclaration = 182;\r\nCPP14Parser.RULE_membervariabledeclarationstatement = 183;\r\nCPP14Parser.RULE_membervariabledeclaration = 184;\r\nCPP14Parser.RULE_memberdeclaratorlist = 185;\r\nCPP14Parser.RULE_memberdeclarator = 186;\r\nCPP14Parser.RULE_virtspecifierseq = 187;\r\nCPP14Parser.RULE_virtspecifier = 188;\r\nCPP14Parser.RULE_purespecifier = 189;\r\nCPP14Parser.RULE_baseclause = 190;\r\nCPP14Parser.RULE_basespecifierlist = 191;\r\nCPP14Parser.RULE_basespecifier = 192;\r\nCPP14Parser.RULE_classordecltype = 193;\r\nCPP14Parser.RULE_basetypespecifier = 194;\r\nCPP14Parser.RULE_accessspecifier = 195;\r\nCPP14Parser.RULE_conversionfunctionid = 196;\r\nCPP14Parser.RULE_conversiontypeid = 197;\r\nCPP14Parser.RULE_conversiondeclarator = 198;\r\nCPP14Parser.RULE_ctorinitializer = 199;\r\nCPP14Parser.RULE_meminitializerlist = 200;\r\nCPP14Parser.RULE_meminitializer = 201;\r\nCPP14Parser.RULE_meminitializerid = 202;\r\nCPP14Parser.RULE_operatorfunctionid = 203;\r\nCPP14Parser.RULE_literaloperatorid = 204;\r\nCPP14Parser.RULE_templatedeclaration = 205;\r\nCPP14Parser.RULE_templateparameterlist = 206;\r\nCPP14Parser.RULE_templateparameter = 207;\r\nCPP14Parser.RULE_typeparameter = 208;\r\nCPP14Parser.RULE_simpletemplateid = 209;\r\nCPP14Parser.RULE_templateid = 210;\r\nCPP14Parser.RULE_templatename = 211;\r\nCPP14Parser.RULE_templateargumentlist = 212;\r\nCPP14Parser.RULE_templateargument = 213;\r\nCPP14Parser.RULE_typenamespecifier = 214;\r\nCPP14Parser.RULE_explicitinstantiation = 215;\r\nCPP14Parser.RULE_explicitspecialization = 216;\r\nCPP14Parser.RULE_tryblock = 217;\r\nCPP14Parser.RULE_functiontryblock = 218;\r\nCPP14Parser.RULE_handlerseq = 219;\r\nCPP14Parser.RULE_handler = 220;\r\nCPP14Parser.RULE_exceptiondeclaration = 221;\r\nCPP14Parser.RULE_throwexpression = 222;\r\nCPP14Parser.RULE_exceptionspecification = 223;\r\nCPP14Parser.RULE_dynamicexceptionspecification = 224;\r\nCPP14Parser.RULE_typeidlist = 225;\r\nCPP14Parser.RULE_noexceptspecification = 226;\r\nCPP14Parser.RULE_rightShift = 227;\r\nCPP14Parser.RULE_rightShiftAssign = 228;\r\nCPP14Parser.RULE_operator = 229;\r\nCPP14Parser.RULE_literal = 230;\r\nCPP14Parser.RULE_integerliteral = 231;\r\nCPP14Parser.RULE_characterliteral = 232;\r\nCPP14Parser.RULE_floatingliteral = 233;\r\nCPP14Parser.RULE_stringliteral = 234;\r\nCPP14Parser.RULE_booleanliteral = 235;\r\nCPP14Parser.RULE_pointerliteral = 236;\r\nCPP14Parser.RULE_userdefinedliteral = 237;\r\n// tslint:disable:no-trailing-whitespace\r\nCPP14Parser.ruleNames = [\r\n    'translationunit',\r\n    'primaryexpression',\r\n    'idexpression',\r\n    'identexpression',\r\n    'unqualifiedid',\r\n    'qualifiedid',\r\n    'nestednamespecifier',\r\n    'lambdaexpression',\r\n    'lambdaintroducer',\r\n    'lambdacapture',\r\n    'capturedefault',\r\n    'capturelist',\r\n    'capture',\r\n    'simplecapture',\r\n    'initcapture',\r\n    'lambdadeclarator',\r\n    'idexpressionlapper',\r\n    'functioncallexpression',\r\n    'postfixexpression',\r\n    'expressionlist',\r\n    'pseudodestructorname',\r\n    'binaryexpression',\r\n    'unaryexpression',\r\n    'typeidlapper',\r\n    'unaryoperator',\r\n    'newexpression',\r\n    'newplacement',\r\n    'newtypeid',\r\n    'newdeclarator',\r\n    'noptrnewdeclarator',\r\n    'newinitializer',\r\n    'deleteexpression',\r\n    'noexceptexpression',\r\n    'castexpression',\r\n    'pmexpression',\r\n    'multiplicativeexpression',\r\n    'additiveexpression',\r\n    'shiftexpression',\r\n    'relationalexpression',\r\n    'equalityexpression',\r\n    'andexpression',\r\n    'exclusiveorexpression',\r\n    'inclusiveorexpression',\r\n    'logicalandexpression',\r\n    'logicalorexpression',\r\n    'conditionalexpression',\r\n    'assignmentexpression',\r\n    'assignmentoperator',\r\n    'expression',\r\n    'constantexpression',\r\n    'statement',\r\n    'statementWithoutLabeldstatement',\r\n    'labeledstatement',\r\n    'switchunitstatement',\r\n    'statementWithoutLabeldstatementseq',\r\n    'expressionstatement',\r\n    'compoundstatement',\r\n    'statementseq',\r\n    'selectionstatement',\r\n    'switchstatement',\r\n    'switchunitseq',\r\n    'condition',\r\n    'whilestatement',\r\n    'dowhilestatement',\r\n    'iterationstatement',\r\n    'enhancedForStatement',\r\n    'forinitstatement',\r\n    'forrangedeclaration',\r\n    'forrangeinitializer',\r\n    'jumpstatement',\r\n    'breakStatement',\r\n    'continueStatement',\r\n    'returnStatement',\r\n    'declarationstatement',\r\n    'declarationseq',\r\n    'myclassbody',\r\n    'myclassspecifier',\r\n    'myclassspecifierstatement',\r\n    'myclasshead',\r\n    'declaration',\r\n    'blockdeclarationwithoutsimpledeclaration',\r\n    'blockdeclaration',\r\n    'aliasdeclaration',\r\n    'variabledeclarationstatement',\r\n    'variabledeclaration',\r\n    'structspecifier',\r\n    'variableDeclaratorList',\r\n    'variableDeclarator',\r\n    'dims',\r\n    'functiondeclarationstatement',\r\n    'simpledeclaration',\r\n    'static_assertdeclaration',\r\n    'emptydeclaration',\r\n    'attributedeclaration',\r\n    'declspecifier',\r\n    'declspecifierseq',\r\n    'declspecifierwithouttype',\r\n    'declspecifierseqwithouttype',\r\n    'storageclassspecifier',\r\n    'functionspecifier',\r\n    'typedefname',\r\n    'typespecifier',\r\n    'trailingtypespecifier',\r\n    'typespecifierseq',\r\n    'trailingtypespecifierseq',\r\n    'simpletypespecifier',\r\n    'typename',\r\n    'decltypespecifier',\r\n    'elaboratedtypespecifier',\r\n    'enumname',\r\n    'enumspecifier',\r\n    'enumhead',\r\n    'opaqueenumdeclaration',\r\n    'enumkey',\r\n    'enumbase',\r\n    'enumeratorlist',\r\n    'enumeratordefinition',\r\n    'enumerator',\r\n    'namespacename',\r\n    'originalnamespacename',\r\n    'namespacedefinition',\r\n    'namednamespacedefinition',\r\n    'originalnamespacedefinition',\r\n    'extensionnamespacedefinition',\r\n    'unnamednamespacedefinition',\r\n    'namespacebody',\r\n    'namespacealias',\r\n    'namespacealiasdefinition',\r\n    'qualifiednamespacespecifier',\r\n    'usingdeclaration',\r\n    'usingdirective',\r\n    'asmdefinition',\r\n    'linkagespecification',\r\n    'attributespecifierseq',\r\n    'attributespecifier',\r\n    'alignmentspecifier',\r\n    'attributelist',\r\n    'attribute',\r\n    'attributetoken',\r\n    'attributescopedtoken',\r\n    'attributenamespace',\r\n    'attributeargumentclause',\r\n    'balancedtokenseq',\r\n    'balancedtoken',\r\n    'initdeclaratorlist',\r\n    'initdeclarator',\r\n    'declarator',\r\n    'ptrdeclarator',\r\n    'noptrdeclarator',\r\n    'parametersandqualifiers',\r\n    'trailingreturntype',\r\n    'ptroperator',\r\n    'cvqualifierseq',\r\n    'cvqualifier',\r\n    'refqualifier',\r\n    'declaratorid',\r\n    'typeid',\r\n    'abstractdeclarator',\r\n    'ptrabstractdeclarator',\r\n    'noptrabstractdeclarator',\r\n    'abstractpackdeclarator',\r\n    'noptrabstractpackdeclarator',\r\n    'parameterdeclarationclause',\r\n    'parameterdeclarationlist',\r\n    'parameterdeclaration',\r\n    'functiondefinition',\r\n    'functionheader',\r\n    'functiondeclarator',\r\n    'functionbody',\r\n    'initializer',\r\n    'braceorequalinitializer',\r\n    'initializerclause',\r\n    'initializerlist',\r\n    'bracedinitlist',\r\n    'myclassname',\r\n    'classspecifier',\r\n    'classbody',\r\n    'classhead',\r\n    'classheadname',\r\n    'classvirtspecifier',\r\n    'classkey',\r\n    'memberspecification',\r\n    'memberdeclaration',\r\n    'membervariabledeclarationstatement',\r\n    'membervariabledeclaration',\r\n    'memberdeclaratorlist',\r\n    'memberdeclarator',\r\n    'virtspecifierseq',\r\n    'virtspecifier',\r\n    'purespecifier',\r\n    'baseclause',\r\n    'basespecifierlist',\r\n    'basespecifier',\r\n    'classordecltype',\r\n    'basetypespecifier',\r\n    'accessspecifier',\r\n    'conversionfunctionid',\r\n    'conversiontypeid',\r\n    'conversiondeclarator',\r\n    'ctorinitializer',\r\n    'meminitializerlist',\r\n    'meminitializer',\r\n    'meminitializerid',\r\n    'operatorfunctionid',\r\n    'literaloperatorid',\r\n    'templatedeclaration',\r\n    'templateparameterlist',\r\n    'templateparameter',\r\n    'typeparameter',\r\n    'simpletemplateid',\r\n    'templateid',\r\n    'templatename',\r\n    'templateargumentlist',\r\n    'templateargument',\r\n    'typenamespecifier',\r\n    'explicitinstantiation',\r\n    'explicitspecialization',\r\n    'tryblock',\r\n    'functiontryblock',\r\n    'handlerseq',\r\n    'handler',\r\n    'exceptiondeclaration',\r\n    'throwexpression',\r\n    'exceptionspecification',\r\n    'dynamicexceptionspecification',\r\n    'typeidlist',\r\n    'noexceptspecification',\r\n    'rightShift',\r\n    'rightShiftAssign',\r\n    'operator',\r\n    'literal',\r\n    'integerliteral',\r\n    'characterliteral',\r\n    'floatingliteral',\r\n    'stringliteral',\r\n    'booleanliteral',\r\n    'pointerliteral',\r\n    'userdefinedliteral',\r\n];\r\nCPP14Parser._LITERAL_NAMES = [\r\n    undefined,\r\n    undefined,\r\n    \"'alignas'\",\r\n    \"'alignof'\",\r\n    \"'asm'\",\r\n    \"'auto'\",\r\n    \"'bool'\",\r\n    \"'break'\",\r\n    \"'case'\",\r\n    \"'catch'\",\r\n    \"'char'\",\r\n    \"'char16_t'\",\r\n    \"'char32_t'\",\r\n    \"'class'\",\r\n    \"'const'\",\r\n    \"'constexpr'\",\r\n    \"'const_cast'\",\r\n    \"'continue'\",\r\n    \"'decltype'\",\r\n    \"'default'\",\r\n    \"'delete'\",\r\n    \"'do'\",\r\n    \"'double'\",\r\n    \"'FILE'\",\r\n    \"'dynamic_cast'\",\r\n    \"'else'\",\r\n    \"'enum'\",\r\n    \"'explicit'\",\r\n    \"'export'\",\r\n    \"'extern'\",\r\n    \"'false'\",\r\n    \"'final'\",\r\n    \"'float'\",\r\n    \"'for'\",\r\n    \"'friend'\",\r\n    \"'goto'\",\r\n    \"'if'\",\r\n    \"'inline'\",\r\n    \"'int'\",\r\n    \"'long'\",\r\n    \"'mutable'\",\r\n    \"'namespace'\",\r\n    \"'new'\",\r\n    \"'noexcept'\",\r\n    \"'nullptr'\",\r\n    \"'operator'\",\r\n    \"'override'\",\r\n    \"'private'\",\r\n    \"'protected'\",\r\n    \"'public'\",\r\n    \"'register'\",\r\n    \"'reinterpret_cast'\",\r\n    \"'return'\",\r\n    \"'short'\",\r\n    \"'signed'\",\r\n    \"'sizeof'\",\r\n    \"'static'\",\r\n    \"'static_assert'\",\r\n    \"'static_cast'\",\r\n    \"'struct'\",\r\n    \"'switch'\",\r\n    \"'template'\",\r\n    \"'this'\",\r\n    \"'thread_local'\",\r\n    \"'throw'\",\r\n    \"'true'\",\r\n    \"'try'\",\r\n    \"'typedef'\",\r\n    \"'typeid'\",\r\n    \"'typename'\",\r\n    \"'union'\",\r\n    \"'unsigned'\",\r\n    \"'using'\",\r\n    \"'virtual'\",\r\n    \"'void'\",\r\n    \"'volatile'\",\r\n    \"'wchar_t'\",\r\n    \"'while'\",\r\n    \"'('\",\r\n    \"')'\",\r\n    \"'['\",\r\n    \"']'\",\r\n    \"'{'\",\r\n    \"'}'\",\r\n    \"'+'\",\r\n    \"'-'\",\r\n    \"'*'\",\r\n    \"'/'\",\r\n    \"'%'\",\r\n    \"'^'\",\r\n    \"'&'\",\r\n    \"'|'\",\r\n    \"'~'\",\r\n    \"'!'\",\r\n    \"'='\",\r\n    \"'<'\",\r\n    \"'>'\",\r\n    \"'+='\",\r\n    \"'-='\",\r\n    \"'*='\",\r\n    \"'/='\",\r\n    \"'%='\",\r\n    \"'^='\",\r\n    \"'&='\",\r\n    \"'|='\",\r\n    \"'<<'\",\r\n    \"'<<='\",\r\n    \"'=='\",\r\n    \"'!='\",\r\n    \"'<='\",\r\n    \"'>='\",\r\n    \"'&&'\",\r\n    \"'||'\",\r\n    \"'++'\",\r\n    \"'--'\",\r\n    \"','\",\r\n    \"'->*'\",\r\n    \"'->'\",\r\n    \"'?'\",\r\n    \"':'\",\r\n    \"'::'\",\r\n    \"';'\",\r\n    \"'.'\",\r\n    \"'.*'\",\r\n    \"'...'\",\r\n];\r\nCPP14Parser._SYMBOLIC_NAMES = [\r\n    undefined,\r\n    'Directive',\r\n    'Alignas',\r\n    'Alignof',\r\n    'Asm',\r\n    'Auto',\r\n    'Bool',\r\n    'Break',\r\n    'Case',\r\n    'Catch',\r\n    'Char',\r\n    'Char16',\r\n    'Char32',\r\n    'Class',\r\n    'Const',\r\n    'Constexpr',\r\n    'Const_cast',\r\n    'Continue',\r\n    'Decltype',\r\n    'Default',\r\n    'Delete',\r\n    'Do',\r\n    'Double',\r\n    'File',\r\n    'Dynamic_cast',\r\n    'Else',\r\n    'Enum',\r\n    'Explicit',\r\n    'Export',\r\n    'Extern',\r\n    'False',\r\n    'Final',\r\n    'Float',\r\n    'For',\r\n    'Friend',\r\n    'Goto',\r\n    'If',\r\n    'Inline',\r\n    'Int',\r\n    'Long',\r\n    'Mutable',\r\n    'Namespace',\r\n    'New',\r\n    'Noexcept',\r\n    'Nullptr',\r\n    'Operator',\r\n    'Override',\r\n    'Private',\r\n    'Protected',\r\n    'Public',\r\n    'Register',\r\n    'Reinterpret_cast',\r\n    'Return',\r\n    'Short',\r\n    'Signed',\r\n    'Sizeof',\r\n    'Static',\r\n    'Static_assert',\r\n    'Static_cast',\r\n    'Struct',\r\n    'Switch',\r\n    'Template',\r\n    'This',\r\n    'Thread_local',\r\n    'Throw',\r\n    'True',\r\n    'Try',\r\n    'Typedef',\r\n    'Typeid',\r\n    'Typename',\r\n    'Union',\r\n    'Unsigned',\r\n    'Using',\r\n    'Virtual',\r\n    'Void',\r\n    'Volatile',\r\n    'Wchar',\r\n    'While',\r\n    'LeftParen',\r\n    'RightParen',\r\n    'LeftBracket',\r\n    'RightBracket',\r\n    'LeftBrace',\r\n    'RightBrace',\r\n    'Plus',\r\n    'Minus',\r\n    'Star',\r\n    'Div',\r\n    'Mod',\r\n    'Caret',\r\n    'And',\r\n    'Or',\r\n    'Tilde',\r\n    'Not',\r\n    'Assign',\r\n    'Less',\r\n    'Greater',\r\n    'PlusAssign',\r\n    'MinusAssign',\r\n    'StarAssign',\r\n    'DivAssign',\r\n    'ModAssign',\r\n    'XorAssign',\r\n    'AndAssign',\r\n    'OrAssign',\r\n    'LeftShift',\r\n    'LeftShiftAssign',\r\n    'Equal',\r\n    'NotEqual',\r\n    'LessEqual',\r\n    'GreaterEqual',\r\n    'AndAnd',\r\n    'OrOr',\r\n    'PlusPlus',\r\n    'MinusMinus',\r\n    'Comma',\r\n    'ArrowStar',\r\n    'Arrow',\r\n    'Question',\r\n    'Colon',\r\n    'Doublecolon',\r\n    'Semi',\r\n    'Dot',\r\n    'DotStar',\r\n    'Ellipsis',\r\n    'Identifier',\r\n    'Integerliteral',\r\n    'Decimalliteral',\r\n    'Octalliteral',\r\n    'Hexadecimalliteral',\r\n    'Binaryliteral',\r\n    'Integersuffix',\r\n    'Characterliteral',\r\n    'Floatingliteral',\r\n    'Stringliteral',\r\n    'Booleanliteral',\r\n    'Userdefinedintegerliteral',\r\n    'Userdefinedfloatingliteral',\r\n    'Userdefinedstringliteral',\r\n    'Userdefinedcharacterliteral',\r\n    'Whitespace',\r\n    'Newline',\r\n    'BlockComment',\r\n    'LineComment',\r\n];\r\nCPP14Parser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(CPP14Parser._LITERAL_NAMES, CPP14Parser._SYMBOLIC_NAMES, []);\r\nCPP14Parser._serializedATNSegments = 5;\r\nCPP14Parser._serializedATNSegment0 = '\\x03\\uAF6F\\u8320\\u479D\\uB75C\\u4880\\u1605\\u191C\\uAB37\\x03\\x91\\u0AB7\\x04' +\r\n    '\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04' +\r\n    '\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r' +\r\n    '\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12' +\r\n    '\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\\x17' +\r\n    '\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x04\\x1C\\t\\x1C' +\r\n    '\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\"\\t\"\\x04' +\r\n    \"#\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04+\\t\" +\r\n    '+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x041\\t1\\x042\\t2\\x043\\t3\\x04' +\r\n    '4\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x048\\t8\\x049\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04' +\r\n    '=\\t=\\x04>\\t>\\x04?\\t?\\x04@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04' +\r\n    'F\\tF\\x04G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04M\\tM\\x04N\\tN\\x04' +\r\n    'O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04T\\tT\\x04U\\tU\\x04V\\tV\\x04W\\tW\\x04' +\r\n    'X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04[\\t[\\x04\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t' +\r\n    '`\\x04a\\ta\\x04b\\tb\\x04c\\tc\\x04d\\td\\x04e\\te\\x04f\\tf\\x04g\\tg\\x04h\\th\\x04' +\r\n    'i\\ti\\x04j\\tj\\x04k\\tk\\x04l\\tl\\x04m\\tm\\x04n\\tn\\x04o\\to\\x04p\\tp\\x04q\\tq\\x04' +\r\n    'r\\tr\\x04s\\ts\\x04t\\tt\\x04u\\tu\\x04v\\tv\\x04w\\tw\\x04x\\tx\\x04y\\ty\\x04z\\tz\\x04' +\r\n    '{\\t{\\x04|\\t|\\x04}\\t}\\x04~\\t~\\x04\\x7F\\t\\x7F\\x04\\x80\\t\\x80\\x04\\x81\\t\\x81' +\r\n    '\\x04\\x82\\t\\x82\\x04\\x83\\t\\x83\\x04\\x84\\t\\x84\\x04\\x85\\t\\x85\\x04\\x86\\t\\x86' +\r\n    '\\x04\\x87\\t\\x87\\x04\\x88\\t\\x88\\x04\\x89\\t\\x89\\x04\\x8A\\t\\x8A\\x04\\x8B\\t\\x8B' +\r\n    '\\x04\\x8C\\t\\x8C\\x04\\x8D\\t\\x8D\\x04\\x8E\\t\\x8E\\x04\\x8F\\t\\x8F\\x04\\x90\\t\\x90' +\r\n    '\\x04\\x91\\t\\x91\\x04\\x92\\t\\x92\\x04\\x93\\t\\x93\\x04\\x94\\t\\x94\\x04\\x95\\t\\x95' +\r\n    '\\x04\\x96\\t\\x96\\x04\\x97\\t\\x97\\x04\\x98\\t\\x98\\x04\\x99\\t\\x99\\x04\\x9A\\t\\x9A' +\r\n    '\\x04\\x9B\\t\\x9B\\x04\\x9C\\t\\x9C\\x04\\x9D\\t\\x9D\\x04\\x9E\\t\\x9E\\x04\\x9F\\t\\x9F' +\r\n    '\\x04\\xA0\\t\\xA0\\x04\\xA1\\t\\xA1\\x04\\xA2\\t\\xA2\\x04\\xA3\\t\\xA3\\x04\\xA4\\t\\xA4' +\r\n    '\\x04\\xA5\\t\\xA5\\x04\\xA6\\t\\xA6\\x04\\xA7\\t\\xA7\\x04\\xA8\\t\\xA8\\x04\\xA9\\t\\xA9' +\r\n    '\\x04\\xAA\\t\\xAA\\x04\\xAB\\t\\xAB\\x04\\xAC\\t\\xAC\\x04\\xAD\\t\\xAD\\x04\\xAE\\t\\xAE' +\r\n    '\\x04\\xAF\\t\\xAF\\x04\\xB0\\t\\xB0\\x04\\xB1\\t\\xB1\\x04\\xB2\\t\\xB2\\x04\\xB3\\t\\xB3' +\r\n    '\\x04\\xB4\\t\\xB4\\x04\\xB5\\t\\xB5\\x04\\xB6\\t\\xB6\\x04\\xB7\\t\\xB7\\x04\\xB8\\t\\xB8' +\r\n    '\\x04\\xB9\\t\\xB9\\x04\\xBA\\t\\xBA\\x04\\xBB\\t\\xBB\\x04\\xBC\\t\\xBC\\x04\\xBD\\t\\xBD' +\r\n    '\\x04\\xBE\\t\\xBE\\x04\\xBF\\t\\xBF\\x04\\xC0\\t\\xC0\\x04\\xC1\\t\\xC1\\x04\\xC2\\t\\xC2' +\r\n    '\\x04\\xC3\\t\\xC3\\x04\\xC4\\t\\xC4\\x04\\xC5\\t\\xC5\\x04\\xC6\\t\\xC6\\x04\\xC7\\t\\xC7' +\r\n    '\\x04\\xC8\\t\\xC8\\x04\\xC9\\t\\xC9\\x04\\xCA\\t\\xCA\\x04\\xCB\\t\\xCB\\x04\\xCC\\t\\xCC' +\r\n    '\\x04\\xCD\\t\\xCD\\x04\\xCE\\t\\xCE\\x04\\xCF\\t\\xCF\\x04\\xD0\\t\\xD0\\x04\\xD1\\t\\xD1' +\r\n    '\\x04\\xD2\\t\\xD2\\x04\\xD3\\t\\xD3\\x04\\xD4\\t\\xD4\\x04\\xD5\\t\\xD5\\x04\\xD6\\t\\xD6' +\r\n    '\\x04\\xD7\\t\\xD7\\x04\\xD8\\t\\xD8\\x04\\xD9\\t\\xD9\\x04\\xDA\\t\\xDA\\x04\\xDB\\t\\xDB' +\r\n    '\\x04\\xDC\\t\\xDC\\x04\\xDD\\t\\xDD\\x04\\xDE\\t\\xDE\\x04\\xDF\\t\\xDF\\x04\\xE0\\t\\xE0' +\r\n    '\\x04\\xE1\\t\\xE1\\x04\\xE2\\t\\xE2\\x04\\xE3\\t\\xE3\\x04\\xE4\\t\\xE4\\x04\\xE5\\t\\xE5' +\r\n    '\\x04\\xE6\\t\\xE6\\x04\\xE7\\t\\xE7\\x04\\xE8\\t\\xE8\\x04\\xE9\\t\\xE9\\x04\\xEA\\t\\xEA' +\r\n    '\\x04\\xEB\\t\\xEB\\x04\\xEC\\t\\xEC\\x04\\xED\\t\\xED\\x04\\xEE\\t\\xEE\\x04\\xEF\\t\\xEF' +\r\n    '\\x03\\x02\\x05\\x02\\u01E0\\n\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03' +\r\n    '\\x03\\x03\\x03\\x03\\x03\\x05\\x03\\u01EA\\n\\x03\\x03\\x04\\x03\\x04\\x05\\x04\\u01EE' +\r\n    '\\n\\x04\\x03\\x05\\x03\\x05\\x05\\x05\\u01F2\\n\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03' +\r\n    '\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x05\\x06\\u01FD\\n\\x06\\x03\\x07' +\r\n    '\\x03\\x07\\x05\\x07\\u0201\\n\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03' +\r\n    '\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x05\\b\\u0210\\n\\b\\x03\\b\\x03\\b\\x03' +\r\n    '\\b\\x03\\b\\x03\\b\\x05\\b\\u0217\\n\\b\\x03\\b\\x03\\b\\x03\\b\\x07\\b\\u021C\\n\\b\\f\\b\\x0E' +\r\n    '\\b\\u021F\\v\\b\\x03\\t\\x03\\t\\x05\\t\\u0223\\n\\t\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x05\\n' +\r\n    '\\u0229\\n\\n\\x03\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x05\\v\\u0233' +\r\n    '\\n\\v\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\r\\x05\\r\\u023A\\n\\r\\x03\\r\\x03\\r\\x03\\r\\x03' +\r\n    '\\r\\x05\\r\\u0240\\n\\r\\x07\\r\\u0242\\n\\r\\f\\r\\x0E\\r\\u0245\\v\\r\\x03\\x0E\\x03\\x0E' +\r\n    '\\x05\\x0E\\u0249\\n\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x05\\x0F\\u024F\\n\\x0F' +\r\n    '\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x05\\x10\\u0256\\n\\x10\\x03\\x11\\x03' +\r\n    '\\x11\\x03\\x11\\x03\\x11\\x05\\x11\\u025C\\n\\x11\\x03\\x11\\x05\\x11\\u025F\\n\\x11\\x03' +\r\n    '\\x11\\x05\\x11\\u0262\\n\\x11\\x03\\x11\\x05\\x11\\u0265\\n\\x11\\x03\\x12\\x03\\x12\\x03' +\r\n    '\\x13\\x03\\x13\\x03\\x13\\x05\\x13\\u026C\\n\\x13\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14' +\r\n    '\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x05\\x14\\u0276\\n\\x14\\x03\\x14\\x03\\x14\\x03' +\r\n    '\\x14\\x03\\x14\\x03\\x14\\x05\\x14\\u027D\\n\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14' +\r\n    '\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14' +\r\n    '\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14' +\r\n    '\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14' +\r\n    '\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14' +\r\n    '\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14' +\r\n    '\\x03\\x14\\x05\\x14\\u02B1\\n\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03' +\r\n    '\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x05\\x14\\u02C0' +\r\n    '\\n\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x05\\x14\\u02C6\\n\\x14\\x03\\x14\\x03' +\r\n    '\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03' +\r\n    '\\x14\\x07\\x14\\u02D3\\n\\x14\\f\\x14\\x0E\\x14\\u02D6\\v\\x14\\x03\\x15\\x03\\x15\\x03' +\r\n    '\\x16\\x05\\x16\\u02DB\\n\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16' +\r\n    '\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x05\\x16\\u02EA' +\r\n    '\\n\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x05\\x16\\u02F0\\n\\x16\\x03\\x17\\x03' +\r\n    '\\x17\\x03\\x17\\x03\\x17\\x05\\x17\\u02F6\\n\\x17\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18' +\r\n    '\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18' +\r\n    '\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18' +\r\n    '\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x05\\x18' +\r\n    '\\u0316\\n\\x18\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x05\\x1B\\u031D\\n\\x1B' +\r\n    '\\x03\\x1B\\x03\\x1B\\x05\\x1B\\u0321\\n\\x1B\\x03\\x1B\\x03\\x1B\\x05\\x1B\\u0325\\n\\x1B' +\r\n    '\\x03\\x1B\\x05\\x1B\\u0328\\n\\x1B\\x03\\x1B\\x03\\x1B\\x05\\x1B\\u032C\\n\\x1B\\x03\\x1B' +\r\n    '\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x05\\x1B\\u0332\\n\\x1B\\x05\\x1B\\u0334\\n\\x1B\\x03\\x1C' +\r\n    '\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1D\\x03\\x1D\\x05\\x1D\\u033C\\n\\x1D\\x03\\x1E\\x03' +\r\n    '\\x1E\\x05\\x1E\\u0340\\n\\x1E\\x03\\x1E\\x05\\x1E\\u0343\\n\\x1E\\x03\\x1F\\x03\\x1F\\x03' +\r\n    '\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u034A\\n\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F' +\r\n    '\\x03\\x1F\\x05\\x1F\\u0351\\n\\x1F\\x07\\x1F\\u0353\\n\\x1F\\f\\x1F\\x0E\\x1F\\u0356\\v' +\r\n    '\\x1F\\x03 \\x03 \\x05 \\u035A\\n \\x03 \\x03 \\x05 \\u035E\\n \\x03!\\x05!\\u0361\\n' +\r\n    '!\\x03!\\x03!\\x03!\\x05!\\u0366\\n!\\x03!\\x03!\\x03!\\x03!\\x05!\\u036C\\n!\\x03\"' +\r\n    '\\x03\"\\x03\"\\x03\"\\x03\"\\x03#\\x03#\\x03#\\x03#\\x03#\\x03#\\x05#\\u0379\\n#\\x03' +\r\n    '$\\x03$\\x03$\\x03$\\x03$\\x03$\\x03$\\x03$\\x03$\\x07$\\u0384\\n$\\f$\\x0E$\\u0387' +\r\n    '\\v$\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x07%\\u0395' +\r\n    '\\n%\\f%\\x0E%\\u0398\\v%\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x07' +\r\n    \"&\\u03A3\\n&\\f&\\x0E&\\u03A6\\v&\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\" +\r\n    \"\\x03'\\x03'\\x03'\\x07'\\u03B2\\n'\\f'\\x0E'\\u03B5\\v'\\x03(\\x03(\\x03(\" +\r\n    '\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x07(\\u03C6' +\r\n    '\\n(\\f(\\x0E(\\u03C9\\v(\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x07' +\r\n    ')\\u03D4\\n)\\f)\\x0E)\\u03D7\\v)\\x03*\\x03*\\x03*\\x03*\\x03*\\x03*\\x07*\\u03DF\\n' +\r\n    '*\\f*\\x0E*\\u03E2\\v*\\x03+\\x03+\\x03+\\x03+\\x03+\\x03+\\x07+\\u03EA\\n+\\f+\\x0E' +\r\n    '+\\u03ED\\v+\\x03,\\x03,\\x03,\\x03,\\x03,\\x03,\\x07,\\u03F5\\n,\\f,\\x0E,\\u03F8\\v' +\r\n    ',\\x03-\\x03-\\x03-\\x03-\\x03-\\x03-\\x07-\\u0400\\n-\\f-\\x0E-\\u0403\\v-\\x03.\\x03' +\r\n    '.\\x03.\\x03.\\x03.\\x03.\\x07.\\u040B\\n.\\f.\\x0E.\\u040E\\v.\\x03/\\x03/\\x03/\\x03' +\r\n    '/\\x03/\\x03/\\x03/\\x05/\\u0417\\n/\\x030\\x030\\x030\\x030\\x030\\x030\\x050\\u041F' +\r\n    '\\n0\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x031\\x051\\u042C' +\r\n    '\\n1\\x032\\x032\\x032\\x032\\x032\\x032\\x072\\u0434\\n2\\f2\\x0E2\\u0437\\v2\\x033' +\r\n    '\\x033\\x034\\x034\\x054\\u043D\\n4\\x035\\x035\\x055\\u0441\\n5\\x035\\x035\\x055\\u0445' +\r\n    '\\n5\\x035\\x035\\x055\\u0449\\n5\\x035\\x035\\x055\\u044D\\n5\\x035\\x035\\x055\\u0451' +\r\n    '\\n5\\x035\\x035\\x055\\u0455\\n5\\x035\\x035\\x055\\u0459\\n5\\x035\\x035\\x055\\u045D' +\r\n    '\\n5\\x035\\x035\\x055\\u0461\\n5\\x035\\x035\\x055\\u0465\\n5\\x035\\x035\\x055\\u0469' +\r\n    '\\n5\\x035\\x035\\x035\\x035\\x055\\u046F\\n5\\x035\\x055\\u0472\\n5\\x036\\x056\\u0475' +\r\n    '\\n6\\x036\\x036\\x036\\x036\\x056\\u047B\\n6\\x037\\x057\\u047E\\n7\\x037\\x037\\x03' +\r\n    '7\\x057\\u0483\\n7\\x037\\x037\\x037\\x038\\x038\\x078\\u048A\\n8\\f8\\x0E8\\u048D\\v' +\r\n    '8\\x039\\x059\\u0490\\n9\\x039\\x039\\x03:\\x03:\\x05:\\u0496\\n:\\x03:\\x03:\\x03;' +\r\n    '\\x03;\\x07;\\u049C\\n;\\f;\\x0E;\\u049F\\v;\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03' +\r\n    '<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x03<\\x05<\\u04AF\\n<\\x03=\\x03=\\x03=\\x03' +\r\n    '=\\x03=\\x03=\\x03=\\x03=\\x03>\\x03>\\x07>\\u04BB\\n>\\f>\\x0E>\\u04BE\\v>\\x03?\\x03' +\r\n    '?\\x05?\\u04C2\\n?\\x03?\\x03?\\x03?\\x03?\\x03?\\x03?\\x05?\\u04CA\\n?\\x03?\\x03?' +\r\n    '\\x03?\\x03?\\x05?\\u04D0\\n?\\x03@\\x03@\\x03@\\x03@\\x03@\\x03@\\x03A\\x03A\\x03A' +\r\n    '\\x03A\\x03A\\x03A\\x03A\\x03A\\x03B\\x03B\\x03B\\x03B\\x05B\\u04E4\\nB\\x03B\\x03B' +\r\n    '\\x05B\\u04E8\\nB\\x03B\\x03B\\x03B\\x03C\\x03C\\x03C\\x03C\\x03C\\x03C\\x03C\\x03C' +\r\n    '\\x03D\\x03D\\x03D\\x05D\\u04F8\\nD\\x03E\\x05E\\u04FB\\nE\\x03E\\x03E\\x03E\\x03F\\x03' +\r\n    'F\\x05F\\u0502\\nF\\x03G\\x03G\\x03G\\x03G\\x03H\\x03H\\x03H\\x03I\\x03I\\x03I\\x03' +\r\n    'J\\x03J\\x05J\\u0510\\nJ\\x03J\\x03J\\x03J\\x03J\\x03J\\x05J\\u0517\\nJ\\x03K\\x03K' +\r\n    '\\x05K\\u051B\\nK\\x03L\\x03L\\x03L\\x03L\\x03L\\x07L\\u0522\\nL\\fL\\x0EL\\u0525\\v' +\r\n    'L\\x03M\\x05M\\u0528\\nM\\x03N\\x03N\\x03N\\x03N\\x03N\\x03O\\x03O\\x03O\\x03P\\x03' +\r\n    'P\\x05P\\u0534\\nP\\x03P\\x05P\\u0537\\nP\\x03P\\x03P\\x05P\\u053B\\nP\\x03P\\x05P\\u053E' +\r\n    '\\nP\\x03P\\x03P\\x05P\\u0542\\nP\\x03P\\x05P\\u0545\\nP\\x05P\\u0547\\nP\\x03Q\\x03' +\r\n    'Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x05Q\\u0555\\nQ\\x03' +\r\n    'R\\x03R\\x03R\\x03R\\x03R\\x03R\\x03R\\x05R\\u055E\\nR\\x03S\\x03S\\x05S\\u0562\\nS' +\r\n    '\\x03T\\x03T\\x03T\\x05T\\u0567\\nT\\x03T\\x03T\\x03T\\x03T\\x03U\\x03U\\x03U\\x03V' +\r\n    '\\x05V\\u0571\\nV\\x03V\\x05V\\u0574\\nV\\x03V\\x03V\\x05V\\u0578\\nV\\x03V\\x03V\\x03' +\r\n    'V\\x05V\\u057D\\nV\\x03W\\x03W\\x03W\\x03W\\x03W\\x03W\\x03X\\x03X\\x03X\\x07X\\u0588' +\r\n    '\\nX\\fX\\x0EX\\u058B\\vX\\x03Y\\x07Y\\u058E\\nY\\fY\\x0EY\\u0591\\vY\\x03Y\\x03Y\\x03' +\r\n    'Y\\x05Y\\u0596\\nY\\x03Y\\x07Y\\u0599\\nY\\fY\\x0EY\\u059C\\vY\\x03Y\\x03Y\\x05Y\\u05A0' +\r\n    '\\nY\\x03Z\\x03Z\\x03Z\\x03[\\x05[\\u05A6\\n[\\x03[\\x05[\\u05A9\\n[\\x03[\\x03[\\x05' +\r\n    '[\\u05AD\\n[\\x03[\\x03[\\x03\\\\\\x05\\\\\\u05B2\\n\\\\\\x03\\\\\\x05\\\\\\u05B5\\n\\\\\\x03\\\\' +\r\n    '\\x03\\\\\\x03\\\\\\x05\\\\\\u05BA\\n\\\\\\x03\\\\\\x03\\\\\\x03\\\\\\x05\\\\\\u05BF\\n\\\\\\x03]\\x03' +\r\n    ']\\x03]\\x03]\\x03]\\x03]\\x03]\\x03]\\x03^\\x03^\\x03_\\x03_\\x03_\\x03`\\x03`\\x05' +\r\n    '`\\u05D0\\n`\\x03a\\x03a\\x05a\\u05D4\\na\\x03a\\x03a\\x03a\\x05a\\u05D9\\na\\x03b\\x03' +\r\n    'b\\x03b\\x03b\\x03b\\x05b\\u05E0\\nb\\x03c\\x03c\\x05c\\u05E4\\nc\\x03c\\x03c\\x03c' +\r\n    '\\x05c\\u05E9\\nc\\x03d\\x03d\\x03e\\x03e\\x03f\\x03f\\x03g\\x03g\\x03g\\x05g\\u05F4' +\r\n    '\\ng\\x03h\\x03h\\x03h\\x03h\\x05h\\u05FA\\nh\\x03i\\x03i\\x05i\\u05FE\\ni\\x03i\\x03' +\r\n    'i\\x03i\\x05i\\u0603\\ni\\x03j\\x03j\\x05j\\u0607\\nj\\x03j\\x03j\\x03j\\x05j\\u060C' +\r\n    '\\nj\\x03k\\x05k\\u060F\\nk\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03' +\r\n    'k\\x03k\\x03k\\x03k\\x03k\\x03k\\x03k\\x05k\\u0621\\nk\\x03k\\x03k\\x03k\\x03k\\x03' +\r\n    'k\\x03k\\x05k\\u0629\\nk\\x03l\\x03l\\x03l\\x03l\\x05l\\u062F\\nl\\x03m\\x03m\\x03m' +\r\n    '\\x03m\\x03m\\x03m\\x03m\\x03m\\x03m\\x05m\\u063A\\nm\\x03n\\x03n\\x05n\\u063E\\nn\\x03' +\r\n    'n\\x05n\\u0641\\nn\\x03n\\x03n\\x03n\\x03n\\x03n\\x03n\\x03n\\x03n\\x05n\\u064B\\nn' +\r\n    '\\x03n\\x03n\\x03n\\x03n\\x05n\\u0651\\nn\\x03n\\x05n\\u0654\\nn\\x03o\\x03o\\x03p\\x03' +\r\n    'p\\x03p\\x05p\\u065B\\np\\x03p\\x03p\\x03p\\x03p\\x03p\\x03p\\x03p\\x03p\\x05p\\u0665' +\r\n    '\\np\\x03q\\x03q\\x05q\\u0669\\nq\\x03q\\x05q\\u066C\\nq\\x03q\\x05q\\u066F\\nq\\x03' +\r\n    'q\\x03q\\x05q\\u0673\\nq\\x03q\\x03q\\x03q\\x05q\\u0678\\nq\\x05q\\u067A\\nq\\x03r\\x03' +\r\n    'r\\x05r\\u067E\\nr\\x03r\\x03r\\x05r\\u0682\\nr\\x03r\\x03r\\x03s\\x03s\\x03s\\x03s' +\r\n    '\\x03s\\x05s\\u068B\\ns\\x03t\\x03t\\x03t\\x03u\\x03u\\x03u\\x03u\\x03u\\x03u\\x07u' +\r\n    '\\u0696\\nu\\fu\\x0Eu\\u0699\\vu\\x03v\\x03v\\x03v\\x03v\\x03v\\x05v\\u06A0\\nv\\x03' +\r\n    'w\\x03w\\x03x\\x03x\\x05x\\u06A6\\nx\\x03y\\x03y\\x03z\\x03z\\x05z\\u06AC\\nz\\x03{' +\r\n    '\\x03{\\x05{\\u06B0\\n{\\x03|\\x05|\\u06B3\\n|\\x03|\\x03|\\x03|\\x03|\\x03|\\x03|\\x03' +\r\n    '}\\x05}\\u06BC\\n}\\x03}\\x03}\\x03}\\x03}\\x03}\\x03}\\x03~\\x05~\\u06C5\\n~\\x03~' +\r\n    '\\x03~\\x03~\\x03~\\x03~\\x03\\x7F\\x05\\x7F\\u06CD\\n\\x7F\\x03\\x80\\x03\\x80\\x03\\x81' +\r\n    '\\x03\\x81\\x03\\x81\\x03\\x81\\x03\\x81\\x03\\x81\\x03\\x82\\x05\\x82\\u06D8\\n\\x82\\x03' +\r\n    '\\x82\\x03\\x82\\x03\\x83\\x03\\x83\\x05\\x83\\u06DE\\n\\x83\\x03\\x83\\x03\\x83\\x03\\x83' +\r\n    '\\x03\\x83\\x03\\x83\\x03\\x83\\x03\\x83\\x03\\x83\\x03\\x83\\x05\\x83\\u06E9\\n\\x83\\x03' +\r\n    '\\x84\\x05\\x84\\u06EC\\n\\x84\\x03\\x84\\x03\\x84\\x03\\x84\\x05\\x84\\u06F1\\n\\x84\\x03' +\r\n    '\\x84\\x03\\x84\\x03\\x84\\x03\\x85\\x03\\x85\\x03\\x85\\x03\\x85\\x03\\x85\\x03\\x85\\x03' +\r\n    '\\x86\\x03\\x86\\x03\\x86\\x03\\x86\\x05\\x86\\u0700\\n\\x86\\x03\\x86\\x03\\x86\\x03\\x86' +\r\n    '\\x03\\x86\\x05\\x86\\u0706\\n\\x86\\x03\\x87\\x03\\x87\\x03\\x87\\x03\\x87\\x03\\x87\\x07' +\r\n    '\\x87\\u070D\\n\\x87\\f\\x87\\x0E\\x87\\u0710\\v\\x87\\x03\\x88\\x03\\x88\\x03\\x88\\x03' +\r\n    '\\x88\\x03\\x88\\x03\\x88\\x03\\x88\\x05\\x88\\u0719\\n\\x88\\x03\\x89\\x03\\x89\\x03\\x89' +\r\n    '\\x03\\x89\\x05\\x89\\u071F\\n\\x89\\x03\\x89\\x03\\x89\\x03\\x89\\x03\\x89\\x03\\x89\\x03' +\r\n    '\\x89\\x05\\x89\\u0727\\n\\x89\\x03\\x89\\x03\\x89\\x05\\x89\\u072B\\n\\x89\\x03\\x8A\\x03' +\r\n    '\\x8A\\x05\\x8A\\u072F\\n\\x8A\\x03\\x8A\\x03\\x8A\\x03\\x8A\\x05\\x8A\\u0734\\n\\x8A\\x03' +\r\n    '\\x8A\\x03\\x8A\\x03\\x8A\\x05\\x8A\\u0739\\n\\x8A\\x03\\x8A\\x03\\x8A\\x03\\x8A\\x03\\x8A' +\r\n    '\\x03\\x8A\\x07\\x8A\\u0740\\n\\x8A\\f\\x8A\\x0E\\x8A\\u0743\\v\\x8A\\x03\\x8B\\x03\\x8B' +\r\n    '\\x05\\x8B\\u0747\\n\\x8B\\x03\\x8C\\x03\\x8C\\x05\\x8C\\u074B\\n\\x8C\\x03\\x8D\\x03\\x8D' +\r\n    '\\x03\\x8D\\x03\\x8D\\x03\\x8E\\x03\\x8E\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x8F\\x03\\x90' +\r\n    '\\x03\\x90\\x05\\x90\\u0759\\n\\x90\\x03\\x90\\x03\\x90\\x07\\x90\\u075D\\n\\x90\\f\\x90' +\r\n    '\\x0E\\x90\\u0760\\v\\x90\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03' +\r\n    '\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x03\\x91\\x05\\x91\\u076E\\n\\x91\\x03\\x92' +\r\n    '\\x03\\x92\\x03\\x92\\x07\\x92\\u0773\\n\\x92\\f\\x92\\x0E\\x92\\u0776\\v\\x92\\x03\\x93' +\r\n    '\\x03\\x93\\x05\\x93\\u077A\\n\\x93\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x03\\x94\\x05' +\r\n    '\\x94\\u0781\\n\\x94\\x03\\x95\\x07\\x95\\u0784\\n\\x95\\f\\x95\\x0E\\x95\\u0787\\v\\x95' +\r\n    '\\x03\\x95\\x03\\x95\\x03\\x96\\x03\\x96\\x03\\x96\\x05\\x96\\u078E\\n\\x96\\x03\\x96\\x03' +\r\n    '\\x96\\x03\\x96\\x03\\x96\\x05\\x96\\u0794\\n\\x96\\x03\\x96\\x03\\x96\\x03\\x96\\x03\\x96' +\r\n    '\\x03\\x96\\x05\\x96\\u079B\\n\\x96\\x03\\x96\\x03\\x96\\x05\\x96\\u079F\\n\\x96\\x07\\x96' +\r\n    '\\u07A1\\n\\x96\\f\\x96\\x0E\\x96\\u07A4\\v\\x96\\x03\\x97\\x03\\x97\\x03\\x97\\x03\\x97' +\r\n    '\\x05\\x97\\u07AA\\n\\x97\\x03\\x97\\x05\\x97\\u07AD\\n\\x97\\x03\\x97\\x05\\x97\\u07B0' +\r\n    '\\n\\x97\\x03\\x97\\x05\\x97\\u07B3\\n\\x97\\x03\\x98\\x03\\x98\\x03\\x98\\x05\\x98\\u07B8' +\r\n    '\\n\\x98\\x03\\x99\\x03\\x99\\x05\\x99\\u07BC\\n\\x99\\x03\\x99\\x05\\x99\\u07BF\\n\\x99' +\r\n    '\\x03\\x99\\x03\\x99\\x05\\x99\\u07C3\\n\\x99\\x03\\x99\\x03\\x99\\x05\\x99\\u07C7\\n\\x99' +\r\n    '\\x03\\x99\\x03\\x99\\x03\\x99\\x05\\x99\\u07CC\\n\\x99\\x03\\x99\\x05\\x99\\u07CF\\n\\x99' +\r\n    '\\x05\\x99\\u07D1\\n\\x99\\x03\\x9A\\x03\\x9A\\x05\\x9A\\u07D5\\n\\x9A\\x03\\x9B\\x03\\x9B' +\r\n    '\\x03\\x9C\\x03\\x9C\\x03\\x9D\\x05\\x9D\\u07DC\\n\\x9D\\x03\\x9D\\x03\\x9D\\x03\\x9E\\x03' +\r\n    '\\x9E\\x05\\x9E\\u07E2\\n\\x9E\\x03\\x9F\\x03\\x9F\\x05\\x9F\\u07E6\\n\\x9F\\x03\\x9F\\x03' +\r\n    '\\x9F\\x03\\x9F\\x03\\x9F\\x05\\x9F\\u07EC\\n\\x9F\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x05\\xA0' +\r\n    '\\u07F1\\n\\xA0\\x05\\xA0\\u07F3\\n\\xA0\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x05\\xA1' +\r\n    '\\u07F9\\n\\xA1\\x03\\xA1\\x03\\xA1\\x05\\xA1\\u07FD\\n\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1' +\r\n    '\\x03\\xA1\\x05\\xA1\\u0803\\n\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x03\\xA1\\x05' +\r\n    '\\xA1\\u080A\\n\\xA1\\x03\\xA1\\x03\\xA1\\x05\\xA1\\u080E\\n\\xA1\\x07\\xA1\\u0810\\n\\xA1' +\r\n    '\\f\\xA1\\x0E\\xA1\\u0813\\v\\xA1\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x03\\xA2\\x05\\xA2\\u0819' +\r\n    '\\n\\xA2\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x03\\xA3' +\r\n    '\\x05\\xA3\\u0823\\n\\xA3\\x03\\xA3\\x03\\xA3\\x05\\xA3\\u0827\\n\\xA3\\x07\\xA3\\u0829' +\r\n    '\\n\\xA3\\f\\xA3\\x0E\\xA3\\u082C\\v\\xA3\\x03\\xA4\\x05\\xA4\\u082F\\n\\xA4\\x03\\xA4\\x05' +\r\n    '\\xA4\\u0832\\n\\xA4\\x03\\xA4\\x03\\xA4\\x03\\xA4\\x03\\xA4\\x05\\xA4\\u0838\\n\\xA4\\x03' +\r\n    '\\xA5\\x03\\xA5\\x03\\xA5\\x03\\xA5\\x03\\xA5\\x03\\xA5\\x07\\xA5\\u0840\\n\\xA5\\f\\xA5' +\r\n    '\\x0E\\xA5\\u0843\\v\\xA5\\x03\\xA6\\x05\\xA6\\u0846\\n\\xA6\\x03\\xA6\\x05\\xA6\\u0849' +\r\n    '\\n\\xA6\\x03\\xA6\\x03\\xA6\\x05\\xA6\\u084D\\n\\xA6\\x03\\xA7\\x05\\xA7\\u0850\\n\\xA7' +\r\n    '\\x03\\xA7\\x05\\xA7\\u0853\\n\\xA7\\x03\\xA7\\x03\\xA7\\x05\\xA7\\u0857\\n\\xA7\\x03\\xA7' +\r\n    '\\x03\\xA7\\x03\\xA8\\x05\\xA8\\u085C\\n\\xA8\\x03\\xA8\\x07\\xA8\\u085F\\n\\xA8\\f\\xA8' +\r\n    '\\x0E\\xA8\\u0862\\v\\xA8\\x03\\xA8\\x03\\xA8\\x03\\xA9\\x03\\xA9\\x03\\xA9\\x03\\xA9\\x03' +\r\n    '\\xA9\\x03\\xAA\\x05\\xAA\\u086C\\n\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x03\\xAA' +\r\n    '\\x03\\xAA\\x03\\xAA\\x03\\xAA\\x05\\xAA\\u0876\\n\\xAA\\x03\\xAB\\x03\\xAB\\x03\\xAB\\x03' +\r\n    '\\xAB\\x03\\xAB\\x05\\xAB\\u087D\\n\\xAB\\x03\\xAC\\x03\\xAC\\x03\\xAC\\x05\\xAC\\u0882' +\r\n    '\\n\\xAC\\x03\\xAD\\x03\\xAD\\x05\\xAD\\u0886\\n\\xAD\\x03\\xAE\\x03\\xAE\\x03\\xAE\\x07' +\r\n    '\\xAE\\u088B\\n\\xAE\\f\\xAE\\x0E\\xAE\\u088E\\v\\xAE\\x03\\xAF\\x03\\xAF\\x03\\xAF\\x05' +\r\n    '\\xAF\\u0893\\n\\xAF\\x03\\xAF\\x03\\xAF\\x03\\xAF\\x03\\xAF\\x05\\xAF\\u0899\\n\\xAF\\x03' +\r\n    '\\xB0\\x03\\xB0\\x05\\xB0\\u089D\\n\\xB0\\x03\\xB1\\x03\\xB1\\x03\\xB1\\x03\\xB2\\x03\\xB2' +\r\n    '\\x05\\xB2\\u08A4\\n\\xB2\\x03\\xB2\\x03\\xB2\\x03\\xB3\\x03\\xB3\\x05\\xB3\\u08AA\\n\\xB3' +\r\n    '\\x03\\xB3\\x05\\xB3\\u08AD\\n\\xB3\\x03\\xB3\\x03\\xB3\\x05\\xB3\\u08B1\\n\\xB3\\x03\\xB3' +\r\n    '\\x05\\xB3\\u08B4\\n\\xB3\\x03\\xB3\\x03\\xB3\\x05\\xB3\\u08B8\\n\\xB3\\x03\\xB3\\x05\\xB3' +\r\n    '\\u08BB\\n\\xB3\\x05\\xB3\\u08BD\\n\\xB3\\x03\\xB4\\x05\\xB4\\u08C0\\n\\xB4\\x03\\xB4\\x03' +\r\n    '\\xB4\\x03\\xB5\\x03\\xB5\\x03\\xB6\\x03\\xB6\\x03\\xB7\\x03\\xB7\\x05\\xB7\\u08CA\\n\\xB7' +\r\n    '\\x03\\xB7\\x03\\xB7\\x03\\xB7\\x05\\xB7\\u08CF\\n\\xB7\\x05\\xB7\\u08D1\\n\\xB7\\x03\\xB8' +\r\n    '\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x03\\xB8\\x05\\xB8\\u08DA\\n\\xB8\\x03' +\r\n    '\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xBA\\x05\\xBA\\u08E0\\n\\xBA\\x03\\xBA\\x05\\xBA\\u08E3' +\r\n    '\\n\\xBA\\x03\\xBA\\x03\\xBA\\x07\\xBA\\u08E7\\n\\xBA\\f\\xBA\\x0E\\xBA\\u08EA\\v\\xBA\\x03' +\r\n    '\\xBA\\x05\\xBA\\u08ED\\n\\xBA\\x03\\xBB\\x03\\xBB\\x03\\xBB\\x03\\xBB\\x03\\xBB\\x03\\xBB' +\r\n    '\\x07\\xBB\\u08F5\\n\\xBB\\f\\xBB\\x0E\\xBB\\u08F8\\v\\xBB\\x03\\xBC\\x03\\xBC\\x05\\xBC' +\r\n    '\\u08FC\\n\\xBC\\x03\\xBC\\x05\\xBC\\u08FF\\n\\xBC\\x03\\xBC\\x03\\xBC\\x03\\xBC\\x05\\xBC' +\r\n    '\\u0904\\n\\xBC\\x03\\xBC\\x03\\xBC\\x05\\xBC\\u0908\\n\\xBC\\x03\\xBC\\x05\\xBC\\u090B' +\r\n    '\\n\\xBC\\x03\\xBC\\x05\\xBC\\u090E\\n\\xBC\\x03\\xBC\\x03\\xBC\\x05\\xBC\\u0912\\n\\xBC' +\r\n    '\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x07\\xBD\\u0919\\n\\xBD\\f\\xBD\\x0E' +\r\n    '\\xBD\\u091C\\v\\xBD\\x03\\xBE\\x03\\xBE\\x03\\xBF\\x03\\xBF';\r\nCPP14Parser._serializedATNSegment1 = '\\x03\\xBF\\x03\\xC0\\x03\\xC0\\x03\\xC0\\x03\\xC1\\x03\\xC1\\x03\\xC1\\x05\\xC1\\u0929' +\r\n    '\\n\\xC1\\x03\\xC1\\x03\\xC1\\x03\\xC1\\x03\\xC1\\x05\\xC1\\u092F\\n\\xC1\\x07\\xC1\\u0931' +\r\n    '\\n\\xC1\\f\\xC1\\x0E\\xC1\\u0934\\v\\xC1\\x03\\xC2\\x05\\xC2\\u0937\\n\\xC2\\x03\\xC2\\x03' +\r\n    '\\xC2\\x05\\xC2\\u093B\\n\\xC2\\x03\\xC2\\x03\\xC2\\x05\\xC2\\u093F\\n\\xC2\\x03\\xC2\\x03' +\r\n    '\\xC2\\x05\\xC2\\u0943\\n\\xC2\\x03\\xC2\\x03\\xC2\\x05\\xC2\\u0947\\n\\xC2\\x03\\xC2\\x03' +\r\n    '\\xC2\\x05\\xC2\\u094B\\n\\xC2\\x03\\xC3\\x05\\xC3\\u094E\\n\\xC3\\x03\\xC3\\x03\\xC3\\x05' +\r\n    '\\xC3\\u0952\\n\\xC3\\x03\\xC4\\x03\\xC4\\x03\\xC5\\x03\\xC5\\x03\\xC6\\x03\\xC6\\x03\\xC6' +\r\n    '\\x03\\xC7\\x03\\xC7\\x05\\xC7\\u095D\\n\\xC7\\x03\\xC8\\x03\\xC8\\x05\\xC8\\u0961\\n\\xC8' +\r\n    '\\x03\\xC9\\x03\\xC9\\x03\\xC9\\x03\\xCA\\x03\\xCA\\x05\\xCA\\u0968\\n\\xCA\\x03\\xCA\\x03' +\r\n    '\\xCA\\x05\\xCA\\u096C\\n\\xCA\\x03\\xCA\\x03\\xCA\\x03\\xCA\\x05\\xCA\\u0971\\n\\xCA\\x03' +\r\n    '\\xCB\\x03\\xCB\\x03\\xCB\\x05\\xCB\\u0976\\n\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB\\x03\\xCB' +\r\n    '\\x03\\xCB\\x05\\xCB\\u097D\\n\\xCB\\x03\\xCC\\x03\\xCC\\x05\\xCC\\u0981\\n\\xCC\\x03\\xCD' +\r\n    '\\x03\\xCD\\x03\\xCD\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x03\\xCE\\x05\\xCE\\u098B' +\r\n    '\\n\\xCE\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xCF\\x03\\xD0\\x03\\xD0' +\r\n    '\\x03\\xD0\\x03\\xD0\\x03\\xD0\\x03\\xD0\\x07\\xD0\\u0999\\n\\xD0\\f\\xD0\\x0E\\xD0\\u099C' +\r\n    '\\v\\xD0\\x03\\xD1\\x03\\xD1\\x05\\xD1\\u09A0\\n\\xD1\\x03\\xD2\\x03\\xD2\\x05\\xD2\\u09A4' +\r\n    '\\n\\xD2\\x03\\xD2\\x05\\xD2\\u09A7\\n\\xD2\\x03\\xD2\\x03\\xD2\\x05\\xD2\\u09AB\\n\\xD2' +\r\n    '\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x05\\xD2\\u09B1\\n\\xD2\\x03\\xD2\\x05\\xD2\\u09B4' +\r\n    '\\n\\xD2\\x03\\xD2\\x03\\xD2\\x05\\xD2\\u09B8\\n\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03' +\r\n    '\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x05\\xD2\\u09C2\\n\\xD2\\x03\\xD2\\x05\\xD2' +\r\n    '\\u09C5\\n\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x05\\xD2\\u09CD' +\r\n    '\\n\\xD2\\x03\\xD2\\x03\\xD2\\x03\\xD2\\x05\\xD2\\u09D2\\n\\xD2\\x03\\xD3\\x03\\xD3\\x03' +\r\n    '\\xD3\\x05\\xD3\\u09D7\\n\\xD3\\x03\\xD3\\x03\\xD3\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4' +\r\n    '\\x05\\xD4\\u09DF\\n\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x03\\xD4\\x05\\xD4\\u09E6' +\r\n    '\\n\\xD4\\x03\\xD4\\x03\\xD4\\x05\\xD4\\u09EA\\n\\xD4\\x03\\xD5\\x03\\xD5\\x03\\xD6\\x03' +\r\n    '\\xD6\\x03\\xD6\\x05\\xD6\\u09F1\\n\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x03\\xD6\\x05\\xD6' +\r\n    '\\u09F7\\n\\xD6\\x07\\xD6\\u09F9\\n\\xD6\\f\\xD6\\x0E\\xD6\\u09FC\\v\\xD6\\x03\\xD7\\x03' +\r\n    '\\xD7\\x03\\xD7\\x05\\xD7\\u0A01\\n\\xD7\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8\\x03\\xD8' +\r\n    '\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u0A0A\\n\\xD8\\x03\\xD8\\x03\\xD8\\x05\\xD8\\u0A0E\\n\\xD8' +\r\n    '\\x03\\xD9\\x05\\xD9\\u0A11\\n\\xD9\\x03\\xD9\\x03\\xD9\\x03\\xD9\\x03\\xDA\\x03\\xDA\\x03' +\r\n    '\\xDA\\x03\\xDA\\x03\\xDA\\x03\\xDB\\x03\\xDB\\x03\\xDB\\x03\\xDB\\x03\\xDC\\x03\\xDC\\x05' +\r\n    '\\xDC\\u0A21\\n\\xDC\\x03\\xDC\\x03\\xDC\\x03\\xDC\\x03\\xDD\\x03\\xDD\\x05\\xDD\\u0A28' +\r\n    '\\n\\xDD\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDE\\x03\\xDF\\x05\\xDF' +\r\n    '\\u0A31\\n\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x03\\xDF\\x05\\xDF\\u0A37\\n\\xDF\\x03\\xDF' +\r\n    '\\x03\\xDF\\x05\\xDF\\u0A3B\\n\\xDF\\x03\\xDF\\x05\\xDF\\u0A3E\\n\\xDF\\x03\\xE0\\x03\\xE0' +\r\n    '\\x05\\xE0\\u0A42\\n\\xE0\\x03\\xE1\\x03\\xE1\\x05\\xE1\\u0A46\\n\\xE1\\x03\\xE2\\x03\\xE2' +\r\n    '\\x03\\xE2\\x05\\xE2\\u0A4B\\n\\xE2\\x03\\xE2\\x03\\xE2\\x03\\xE3\\x03\\xE3\\x03\\xE3\\x05' +\r\n    '\\xE3\\u0A52\\n\\xE3\\x03\\xE3\\x03\\xE3\\x03\\xE3\\x03\\xE3\\x05\\xE3\\u0A58\\n\\xE3\\x07' +\r\n    '\\xE3\\u0A5A\\n\\xE3\\f\\xE3\\x0E\\xE3\\u0A5D\\v\\xE3\\x03\\xE4\\x03\\xE4\\x03\\xE4\\x03' +\r\n    '\\xE4\\x03\\xE4\\x03\\xE4\\x05\\xE4\\u0A65\\n\\xE4\\x03\\xE5\\x03\\xE5\\x03\\xE5\\x03\\xE6' +\r\n    '\\x03\\xE6\\x03\\xE6\\x03\\xE6\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7' +\r\n    '\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7' +\r\n    '\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7' +\r\n    '\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7' +\r\n    '\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7' +\r\n    '\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x03\\xE7\\x05\\xE7\\u0A9E\\n\\xE7\\x03' +\r\n    '\\xE8\\x03\\xE8\\x03\\xE8\\x03\\xE8\\x03\\xE8\\x03\\xE8\\x03\\xE8\\x05\\xE8\\u0AA7\\n\\xE8' +\r\n    '\\x03\\xE9\\x03\\xE9\\x03\\xEA\\x03\\xEA\\x03\\xEB\\x03\\xEB\\x03\\xEC\\x03\\xEC\\x03\\xED' +\r\n    '\\x03\\xED\\x03\\xEE\\x03\\xEE\\x03\\xEF\\x03\\xEF\\x03\\xEF\\x02\\x02!\\x0E\\x18&<FH' +\r\n    'JLNPRTVXZb\\x96\\xE8\\u010C\\u0112\\u011E\\u012A\\u0140\\u0144\\u0148\\u0174\\u0178' +\r\n    '\\u0180\\u019E\\u01AA\\u01C4\\xF0\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\\f\\x02' +\r\n    '\\x0E\\x02\\x10\\x02\\x12\\x02\\x14\\x02\\x16\\x02\\x18\\x02\\x1A\\x02\\x1C\\x02\\x1E\\x02' +\r\n    ' \\x02\"\\x02$\\x02&\\x02(\\x02*\\x02,\\x02.\\x020\\x022\\x024\\x026\\x028\\x02:\\x02' +\r\n    '<\\x02>\\x02@\\x02B\\x02D\\x02F\\x02H\\x02J\\x02L\\x02N\\x02P\\x02R\\x02T\\x02V\\x02' +\r\n    'X\\x02Z\\x02\\\\\\x02^\\x02`\\x02b\\x02d\\x02f\\x02h\\x02j\\x02l\\x02n\\x02p\\x02r\\x02' +\r\n    't\\x02v\\x02x\\x02z\\x02|\\x02~\\x02\\x80\\x02\\x82\\x02\\x84\\x02\\x86\\x02\\x88\\x02' +\r\n    '\\x8A\\x02\\x8C\\x02\\x8E\\x02\\x90\\x02\\x92\\x02\\x94\\x02\\x96\\x02\\x98\\x02\\x9A\\x02' +\r\n    '\\x9C\\x02\\x9E\\x02\\xA0\\x02\\xA2\\x02\\xA4\\x02\\xA6\\x02\\xA8\\x02\\xAA\\x02\\xAC\\x02' +\r\n    '\\xAE\\x02\\xB0\\x02\\xB2\\x02\\xB4\\x02\\xB6\\x02\\xB8\\x02\\xBA\\x02\\xBC\\x02\\xBE\\x02' +\r\n    '\\xC0\\x02\\xC2\\x02\\xC4\\x02\\xC6\\x02\\xC8\\x02\\xCA\\x02\\xCC\\x02\\xCE\\x02\\xD0\\x02' +\r\n    '\\xD2\\x02\\xD4\\x02\\xD6\\x02\\xD8\\x02\\xDA\\x02\\xDC\\x02\\xDE\\x02\\xE0\\x02\\xE2\\x02' +\r\n    '\\xE4\\x02\\xE6\\x02\\xE8\\x02\\xEA\\x02\\xEC\\x02\\xEE\\x02\\xF0\\x02\\xF2\\x02\\xF4\\x02' +\r\n    '\\xF6\\x02\\xF8\\x02\\xFA\\x02\\xFC\\x02\\xFE\\x02\\u0100\\x02\\u0102\\x02\\u0104\\x02' +\r\n    '\\u0106\\x02\\u0108\\x02\\u010A\\x02\\u010C\\x02\\u010E\\x02\\u0110\\x02\\u0112\\x02' +\r\n    '\\u0114\\x02\\u0116\\x02\\u0118\\x02\\u011A\\x02\\u011C\\x02\\u011E\\x02\\u0120\\x02' +\r\n    '\\u0122\\x02\\u0124\\x02\\u0126\\x02\\u0128\\x02\\u012A\\x02\\u012C\\x02\\u012E\\x02' +\r\n    '\\u0130\\x02\\u0132\\x02\\u0134\\x02\\u0136\\x02\\u0138\\x02\\u013A\\x02\\u013C\\x02' +\r\n    '\\u013E\\x02\\u0140\\x02\\u0142\\x02\\u0144\\x02\\u0146\\x02\\u0148\\x02\\u014A\\x02' +\r\n    '\\u014C\\x02\\u014E\\x02\\u0150\\x02\\u0152\\x02\\u0154\\x02\\u0156\\x02\\u0158\\x02' +\r\n    '\\u015A\\x02\\u015C\\x02\\u015E\\x02\\u0160\\x02\\u0162\\x02\\u0164\\x02\\u0166\\x02' +\r\n    '\\u0168\\x02\\u016A\\x02\\u016C\\x02\\u016E\\x02\\u0170\\x02\\u0172\\x02\\u0174\\x02' +\r\n    '\\u0176\\x02\\u0178\\x02\\u017A\\x02\\u017C\\x02\\u017E\\x02\\u0180\\x02\\u0182\\x02' +\r\n    '\\u0184\\x02\\u0186\\x02\\u0188\\x02\\u018A\\x02\\u018C\\x02\\u018E\\x02\\u0190\\x02' +\r\n    '\\u0192\\x02\\u0194\\x02\\u0196\\x02\\u0198\\x02\\u019A\\x02\\u019C\\x02\\u019E\\x02' +\r\n    '\\u01A0\\x02\\u01A2\\x02\\u01A4\\x02\\u01A6\\x02\\u01A8\\x02\\u01AA\\x02\\u01AC\\x02' +\r\n    '\\u01AE\\x02\\u01B0\\x02\\u01B2\\x02\\u01B4\\x02\\u01B6\\x02\\u01B8\\x02\\u01BA\\x02' +\r\n    '\\u01BC\\x02\\u01BE\\x02\\u01C0\\x02\\u01C2\\x02\\u01C4\\x02\\u01C6\\x02\\u01C8\\x02' +\r\n    '\\u01CA\\x02\\u01CC\\x02\\u01CE\\x02\\u01D0\\x02\\u01D2\\x02\\u01D4\\x02\\u01D6\\x02' +\r\n    '\\u01D8\\x02\\u01DA\\x02\\u01DC\\x02\\x02\\f\\x04\\x02\\\\\\\\``\\x04\\x02VX\\\\_\\x07\\x02' +\r\n    \"\\x1F\\x1F**44::AA\\x05\\x02\\x1D\\x1D''KK\\x04\\x02\\x10\\x10MM\\x04\\x02\\\\\\\\q\" +\r\n    'q\\x05\\x02\\x0F\\x0F==HH\\x04\\x02!!00\\x03\\x0213\\x03\\x02\\x8A\\x8D\\u0BD6\\x02' +\r\n    '\\u01DF\\x03\\x02\\x02\\x02\\x04\\u01E9\\x03\\x02\\x02\\x02\\x06\\u01ED\\x03\\x02\\x02' +\r\n    '\\x02\\b\\u01F1\\x03\\x02\\x02\\x02\\n\\u01FC\\x03\\x02\\x02\\x02\\f\\u01FE\\x03\\x02\\x02' +\r\n    '\\x02\\x0E\\u020F\\x03\\x02\\x02\\x02\\x10\\u0220\\x03\\x02\\x02\\x02\\x12\\u0226\\x03' +\r\n    '\\x02\\x02\\x02\\x14\\u0232\\x03\\x02\\x02\\x02\\x16\\u0234\\x03\\x02\\x02\\x02\\x18\\u0236' +\r\n    '\\x03\\x02\\x02\\x02\\x1A\\u0248\\x03\\x02\\x02\\x02\\x1C\\u024E\\x03\\x02\\x02\\x02\\x1E' +\r\n    '\\u0255\\x03\\x02\\x02\\x02 \\u0257\\x03\\x02\\x02\\x02\"\\u0266\\x03\\x02\\x02\\x02' +\r\n    '$\\u0268\\x03\\x02\\x02\\x02&\\u02B0\\x03\\x02\\x02\\x02(\\u02D7\\x03\\x02\\x02\\x02' +\r\n    '*\\u02EF\\x03\\x02\\x02\\x02,\\u02F5\\x03\\x02\\x02\\x02.\\u0315\\x03\\x02\\x02\\x02' +\r\n    '0\\u0317\\x03\\x02\\x02\\x022\\u0319\\x03\\x02\\x02\\x024\\u0333\\x03\\x02\\x02\\x02' +\r\n    '6\\u0335\\x03\\x02\\x02\\x028\\u0339\\x03\\x02\\x02\\x02:\\u0342\\x03\\x02\\x02\\x02' +\r\n    '<\\u0344\\x03\\x02\\x02\\x02>\\u035D\\x03\\x02\\x02\\x02@\\u036B\\x03\\x02\\x02\\x02' +\r\n    'B\\u036D\\x03\\x02\\x02\\x02D\\u0378\\x03\\x02\\x02\\x02F\\u037A\\x03\\x02\\x02\\x02' +\r\n    'H\\u0388\\x03\\x02\\x02\\x02J\\u0399\\x03\\x02\\x02\\x02L\\u03A7\\x03\\x02\\x02\\x02' +\r\n    'N\\u03B6\\x03\\x02\\x02\\x02P\\u03CA\\x03\\x02\\x02\\x02R\\u03D8\\x03\\x02\\x02\\x02' +\r\n    'T\\u03E3\\x03\\x02\\x02\\x02V\\u03EE\\x03\\x02\\x02\\x02X\\u03F9\\x03\\x02\\x02\\x02' +\r\n    'Z\\u0404\\x03\\x02\\x02\\x02\\\\\\u0416\\x03\\x02\\x02\\x02^\\u041E\\x03\\x02\\x02\\x02' +\r\n    '`\\u042B\\x03\\x02\\x02\\x02b\\u042D\\x03\\x02\\x02\\x02d\\u0438\\x03\\x02\\x02\\x02' +\r\n    'f\\u043C\\x03\\x02\\x02\\x02h\\u0471\\x03\\x02\\x02\\x02j\\u047A\\x03\\x02\\x02\\x02' +\r\n    'l\\u047D\\x03\\x02\\x02\\x02n\\u0487\\x03\\x02\\x02\\x02p\\u048F\\x03\\x02\\x02\\x02' +\r\n    'r\\u0493\\x03\\x02\\x02\\x02t\\u0499\\x03\\x02\\x02\\x02v\\u04AE\\x03\\x02\\x02\\x02' +\r\n    'x\\u04B0\\x03\\x02\\x02\\x02z\\u04B8\\x03\\x02\\x02\\x02|\\u04CF\\x03\\x02\\x02\\x02' +\r\n    '~\\u04D1\\x03\\x02\\x02\\x02\\x80\\u04D7\\x03\\x02\\x02\\x02\\x82\\u04DF\\x03\\x02\\x02' +\r\n    '\\x02\\x84\\u04EC\\x03\\x02\\x02\\x02\\x86\\u04F7\\x03\\x02\\x02\\x02\\x88\\u04FA\\x03' +\r\n    '\\x02\\x02\\x02\\x8A\\u0501\\x03\\x02\\x02\\x02\\x8C\\u0503\\x03\\x02\\x02\\x02\\x8E\\u0507' +\r\n    '\\x03\\x02\\x02\\x02\\x90\\u050A\\x03\\x02\\x02\\x02\\x92\\u0516\\x03\\x02\\x02\\x02\\x94' +\r\n    '\\u051A\\x03\\x02\\x02\\x02\\x96\\u051C\\x03\\x02\\x02\\x02\\x98\\u0527\\x03\\x02\\x02' +\r\n    '\\x02\\x9A\\u0529\\x03\\x02\\x02\\x02\\x9C\\u052E\\x03\\x02\\x02\\x02\\x9E\\u0546\\x03' +\r\n    '\\x02\\x02\\x02\\xA0\\u0554\\x03\\x02\\x02\\x02\\xA2\\u055D\\x03\\x02\\x02\\x02\\xA4\\u0561' +\r\n    '\\x03\\x02\\x02\\x02\\xA6\\u0563\\x03\\x02\\x02\\x02\\xA8\\u056C\\x03\\x02\\x02\\x02\\xAA' +\r\n    '\\u0570\\x03\\x02\\x02\\x02\\xAC\\u057E\\x03\\x02\\x02\\x02\\xAE\\u0584\\x03\\x02\\x02' +\r\n    '\\x02\\xB0\\u058F\\x03\\x02\\x02\\x02\\xB2\\u05A1\\x03\\x02\\x02\\x02\\xB4\\u05A5\\x03' +\r\n    '\\x02\\x02\\x02\\xB6\\u05BE\\x03\\x02\\x02\\x02\\xB8\\u05C0\\x03\\x02\\x02\\x02\\xBA\\u05C8' +\r\n    '\\x03\\x02\\x02\\x02\\xBC\\u05CA\\x03\\x02\\x02\\x02\\xBE\\u05CF\\x03\\x02\\x02\\x02\\xC0' +\r\n    '\\u05D8\\x03\\x02\\x02\\x02\\xC2\\u05DF\\x03\\x02\\x02\\x02\\xC4\\u05E8\\x03\\x02\\x02' +\r\n    '\\x02\\xC6\\u05EA\\x03\\x02\\x02\\x02\\xC8\\u05EC\\x03\\x02\\x02\\x02\\xCA\\u05EE\\x03' +\r\n    '\\x02\\x02\\x02\\xCC\\u05F3\\x03\\x02\\x02\\x02\\xCE\\u05F9\\x03\\x02\\x02\\x02\\xD0\\u0602' +\r\n    '\\x03\\x02\\x02\\x02\\xD2\\u060B\\x03\\x02\\x02\\x02\\xD4\\u0628\\x03\\x02\\x02\\x02\\xD6' +\r\n    '\\u062E\\x03\\x02\\x02\\x02\\xD8\\u0639\\x03\\x02\\x02\\x02\\xDA\\u0653\\x03\\x02\\x02' +\r\n    '\\x02\\xDC\\u0655\\x03\\x02\\x02\\x02\\xDE\\u0664\\x03\\x02\\x02\\x02\\xE0\\u0679\\x03' +\r\n    '\\x02\\x02\\x02\\xE2\\u067B\\x03\\x02\\x02\\x02\\xE4\\u068A\\x03\\x02\\x02\\x02\\xE6\\u068C' +\r\n    '\\x03\\x02\\x02\\x02\\xE8\\u068F\\x03\\x02\\x02\\x02\\xEA\\u069F\\x03\\x02\\x02\\x02\\xEC' +\r\n    '\\u06A1\\x03\\x02\\x02\\x02\\xEE\\u06A5\\x03\\x02\\x02\\x02\\xF0\\u06A7\\x03\\x02\\x02' +\r\n    '\\x02\\xF2\\u06AB\\x03\\x02\\x02\\x02\\xF4\\u06AF\\x03\\x02\\x02\\x02\\xF6\\u06B2\\x03' +\r\n    '\\x02\\x02\\x02\\xF8\\u06BB\\x03\\x02\\x02\\x02\\xFA\\u06C4\\x03\\x02\\x02\\x02\\xFC\\u06CC' +\r\n    '\\x03\\x02\\x02\\x02\\xFE\\u06CE\\x03\\x02\\x02\\x02\\u0100\\u06D0\\x03\\x02\\x02\\x02' +\r\n    '\\u0102\\u06D7\\x03\\x02\\x02\\x02\\u0104\\u06E8\\x03\\x02\\x02\\x02\\u0106\\u06EB\\x03' +\r\n    '\\x02\\x02\\x02\\u0108\\u06F5\\x03\\x02\\x02\\x02\\u010A\\u0705\\x03\\x02\\x02\\x02\\u010C' +\r\n    '\\u0707\\x03\\x02\\x02\\x02\\u010E\\u0718\\x03\\x02\\x02\\x02\\u0110\\u072A\\x03\\x02' +\r\n    '\\x02\\x02\\u0112\\u0733\\x03\\x02\\x02\\x02\\u0114\\u0744\\x03\\x02\\x02\\x02\\u0116' +\r\n    '\\u074A\\x03\\x02\\x02\\x02\\u0118\\u074C\\x03\\x02\\x02\\x02\\u011A\\u0750\\x03\\x02' +\r\n    '\\x02\\x02\\u011C\\u0752\\x03\\x02\\x02\\x02\\u011E\\u0756\\x03\\x02\\x02\\x02\\u0120' +\r\n    '\\u076D\\x03\\x02\\x02\\x02\\u0122\\u076F\\x03\\x02\\x02\\x02\\u0124\\u0777\\x03\\x02' +\r\n    '\\x02\\x02\\u0126\\u0780\\x03\\x02\\x02\\x02\\u0128\\u0785\\x03\\x02\\x02\\x02\\u012A' +\r\n    '\\u0793\\x03\\x02\\x02\\x02\\u012C\\u07A5\\x03\\x02\\x02\\x02\\u012E\\u07B4\\x03\\x02' +\r\n    '\\x02\\x02\\u0130\\u07D0\\x03\\x02\\x02\\x02\\u0132\\u07D2\\x03\\x02\\x02\\x02\\u0134' +\r\n    '\\u07D6\\x03\\x02\\x02\\x02\\u0136\\u07D8\\x03\\x02\\x02\\x02\\u0138\\u07DB\\x03\\x02' +\r\n    '\\x02\\x02\\u013A\\u07DF\\x03\\x02\\x02\\x02\\u013C\\u07EB\\x03\\x02\\x02\\x02\\u013E' +\r\n    '\\u07F2\\x03\\x02\\x02\\x02\\u0140\\u0802\\x03\\x02\\x02\\x02\\u0142\\u0818\\x03\\x02' +\r\n    '\\x02\\x02\\u0144\\u081A\\x03\\x02\\x02\\x02\\u0146\\u0837\\x03\\x02\\x02\\x02\\u0148' +\r\n    '\\u0839\\x03\\x02\\x02\\x02\\u014A\\u0845\\x03\\x02\\x02\\x02\\u014C\\u084F\\x03\\x02' +\r\n    '\\x02\\x02\\u014E\\u085B\\x03\\x02\\x02\\x02\\u0150\\u0865\\x03\\x02\\x02\\x02\\u0152' +\r\n    '\\u0875\\x03\\x02\\x02\\x02\\u0154\\u087C\\x03\\x02\\x02\\x02\\u0156\\u0881\\x03\\x02' +\r\n    '\\x02\\x02\\u0158\\u0885\\x03\\x02\\x02\\x02\\u015A\\u0887\\x03\\x02\\x02\\x02\\u015C' +\r\n    '\\u0898\\x03\\x02\\x02\\x02\\u015E\\u089C\\x03\\x02\\x02\\x02\\u0160\\u089E\\x03\\x02' +\r\n    '\\x02\\x02\\u0162\\u08A1\\x03\\x02\\x02\\x02\\u0164\\u08BC\\x03\\x02\\x02\\x02\\u0166' +\r\n    '\\u08BF\\x03\\x02\\x02\\x02\\u0168\\u08C3\\x03\\x02\\x02\\x02\\u016A\\u08C5\\x03\\x02' +\r\n    '\\x02\\x02\\u016C\\u08D0\\x03\\x02\\x02\\x02\\u016E\\u08D9\\x03\\x02\\x02\\x02\\u0170' +\r\n    '\\u08DB\\x03\\x02\\x02\\x02\\u0172\\u08DF\\x03\\x02\\x02\\x02\\u0174\\u08EE\\x03\\x02' +\r\n    '\\x02\\x02\\u0176\\u0911\\x03\\x02\\x02\\x02\\u0178\\u0913\\x03\\x02\\x02\\x02\\u017A' +\r\n    '\\u091D\\x03\\x02\\x02\\x02\\u017C\\u091F\\x03\\x02\\x02\\x02\\u017E\\u0922\\x03\\x02' +\r\n    '\\x02\\x02\\u0180\\u0925\\x03\\x02\\x02\\x02\\u0182\\u094A\\x03\\x02\\x02\\x02\\u0184' +\r\n    '\\u0951\\x03\\x02\\x02\\x02\\u0186\\u0953\\x03\\x02\\x02\\x02\\u0188\\u0955\\x03\\x02' +\r\n    '\\x02\\x02\\u018A\\u0957\\x03\\x02\\x02\\x02\\u018C\\u095A\\x03\\x02\\x02\\x02\\u018E' +\r\n    '\\u095E\\x03\\x02\\x02\\x02\\u0190\\u0962\\x03\\x02\\x02\\x02\\u0192\\u0970\\x03\\x02' +\r\n    '\\x02\\x02\\u0194\\u097C\\x03\\x02\\x02\\x02\\u0196\\u0980\\x03\\x02\\x02\\x02\\u0198' +\r\n    '\\u0982\\x03\\x02\\x02\\x02\\u019A\\u098A\\x03\\x02\\x02\\x02\\u019C\\u098C\\x03\\x02' +\r\n    '\\x02\\x02\\u019E\\u0992\\x03\\x02\\x02\\x02\\u01A0\\u099F\\x03\\x02\\x02\\x02\\u01A2' +\r\n    '\\u09D1\\x03\\x02\\x02\\x02\\u01A4\\u09D3\\x03\\x02\\x02\\x02\\u01A6\\u09E9\\x03\\x02' +\r\n    '\\x02\\x02\\u01A8\\u09EB\\x03\\x02\\x02\\x02\\u01AA\\u09ED\\x03\\x02\\x02\\x02\\u01AC' +\r\n    '\\u0A00\\x03\\x02\\x02\\x02\\u01AE\\u0A0D\\x03\\x02\\x02\\x02\\u01B0\\u0A10\\x03\\x02' +\r\n    '\\x02\\x02\\u01B2\\u0A15\\x03\\x02\\x02\\x02\\u01B4\\u0A1A\\x03\\x02\\x02\\x02\\u01B6' +\r\n    '\\u0A1E\\x03\\x02\\x02\\x02\\u01B8\\u0A25\\x03\\x02\\x02\\x02\\u01BA\\u0A29\\x03\\x02' +\r\n    '\\x02\\x02\\u01BC\\u0A3D\\x03\\x02\\x02\\x02\\u01BE\\u0A3F\\x03\\x02\\x02\\x02\\u01C0' +\r\n    '\\u0A45\\x03\\x02\\x02\\x02\\u01C2\\u0A47\\x03\\x02\\x02\\x02\\u01C4\\u0A4E\\x03\\x02' +\r\n    '\\x02\\x02\\u01C6\\u0A64\\x03\\x02\\x02\\x02\\u01C8\\u0A66\\x03\\x02\\x02\\x02\\u01CA' +\r\n    '\\u0A69\\x03\\x02\\x02\\x02\\u01CC\\u0A9D\\x03\\x02\\x02\\x02\\u01CE\\u0AA6\\x03\\x02' +\r\n    '\\x02\\x02\\u01D0\\u0AA8\\x03\\x02\\x02\\x02\\u01D2\\u0AAA\\x03\\x02\\x02\\x02\\u01D4' +\r\n    '\\u0AAC\\x03\\x02\\x02\\x02\\u01D6\\u0AAE\\x03\\x02\\x02\\x02\\u01D8\\u0AB0\\x03\\x02' +\r\n    '\\x02\\x02\\u01DA\\u0AB2\\x03\\x02\\x02\\x02\\u01DC\\u0AB4\\x03\\x02\\x02\\x02\\u01DE' +\r\n    '\\u01E0\\x05\\x96L\\x02\\u01DF\\u01DE\\x03\\x02\\x02\\x02\\u01DF\\u01E0\\x03\\x02\\x02' +\r\n    '\\x02\\u01E0\\x03\\x03\\x02\\x02\\x02\\u01E1\\u01EA\\x05\\u01CE\\xE8\\x02\\u01E2\\u01EA' +\r\n    '\\x07@\\x02\\x02\\u01E3\\u01E4\\x07P\\x02\\x02\\u01E4\\u01E5\\x05b2\\x02\\u01E5\\u01E6' +\r\n    '\\x07Q\\x02\\x02\\u01E6\\u01EA\\x03\\x02\\x02\\x02\\u01E7\\u01EA\\x05\\b\\x05\\x02\\u01E8' +\r\n    '\\u01EA\\x05\\x10\\t\\x02\\u01E9\\u01E1\\x03\\x02\\x02\\x02\\u01E9\\u01E2\\x03\\x02\\x02' +\r\n    '\\x02\\u01E9\\u01E3\\x03\\x02\\x02\\x02\\u01E9\\u01E7\\x03\\x02\\x02\\x02\\u01E9\\u01E8' +\r\n    '\\x03\\x02\\x02\\x02\\u01EA\\x05\\x03\\x02\\x02\\x02\\u01EB\\u01EE\\x05\\n\\x06\\x02\\u01EC' +\r\n    '\\u01EE\\x05\\f\\x07\\x02\\u01ED\\u01EB\\x03\\x02\\x02\\x02\\u01ED\\u01EC\\x03\\x02\\x02' +\r\n    '\\x02\\u01EE\\x07\\x03\\x02\\x02\\x02\\u01EF\\u01F2\\x05\\n\\x06\\x02\\u01F0\\u01F2\\x05' +\r\n    '\\f\\x07\\x02\\u01F1\\u01EF\\x03\\x02\\x02\\x02\\u01F1\\u01F0\\x03\\x02\\x02\\x02\\u01F2' +\r\n    '\\t\\x03\\x02\\x02\\x02\\u01F3\\u01FD\\x07\\x7F\\x02\\x02\\u01F4\\u01FD\\x05\\u0198\\xCD' +\r\n    '\\x02\\u01F5\\u01FD\\x05\\u018A\\xC6\\x02\\u01F6\\u01FD\\x05\\u019A\\xCE\\x02\\u01F7' +\r\n    '\\u01F8\\x07^\\x02\\x02\\u01F8\\u01FD\\x05\\u015E\\xB0\\x02\\u01F9\\u01FA\\x07^\\x02' +\r\n    '\\x02\\u01FA\\u01FD\\x05\\xD8m\\x02\\u01FB\\u01FD\\x05\\u01A6\\xD4\\x02\\u01FC\\u01F3' +\r\n    '\\x03\\x02\\x02\\x02\\u01FC\\u01F4\\x03\\x02\\x02\\x02\\u01FC\\u01F5\\x03\\x02\\x02\\x02' +\r\n    '\\u01FC\\u01F6\\x03\\x02\\x02\\x02\\u01FC\\u01F7\\x03\\x02\\x02\\x02\\u01FC\\u01F9\\x03' +\r\n    '\\x02\\x02\\x02\\u01FC\\u01FB\\x03\\x02\\x02\\x02\\u01FD\\v\\x03\\x02\\x02\\x02\\u01FE' +\r\n    '\\u0200\\x05\\x0E\\b\\x02\\u01FF\\u0201\\x07?\\x02\\x02\\u0200\\u01FF\\x03\\x02\\x02' +\r\n    '\\x02\\u0200\\u0201\\x03\\x02\\x02\\x02\\u0201\\u0202\\x03\\x02\\x02\\x02\\u0202\\u0203' +\r\n    '\\x05\\n\\x06\\x02\\u0203\\r\\x03\\x02\\x02\\x02\\u0204\\u0205\\b\\b\\x01\\x02\\u0205\\u0210' +\r\n    '\\x07z\\x02\\x02\\u0206\\u0207\\x05\\xD6l\\x02\\u0207\\u0208\\x07z\\x02\\x02\\u0208' +\r\n    '\\u0210\\x03\\x02\\x02\\x02\\u0209\\u020A\\x05\\xEEx\\x02\\u020A\\u020B\\x07z\\x02\\x02' +\r\n    '\\u020B\\u0210\\x03\\x02\\x02\\x02\\u020C\\u020D\\x05\\xD8m\\x02\\u020D\\u020E\\x07' +\r\n    'z\\x02\\x02\\u020E\\u0210\\x03\\x02\\x02\\x02\\u020F\\u0204\\x03\\x02\\x02\\x02\\u020F' +\r\n    '\\u0206\\x03\\x02\\x02\\x02\\u020F\\u0209\\x03\\x02\\x02\\x02\\u020F\\u020C\\x03\\x02' +\r\n    '\\x02\\x02\\u0210\\u021D\\x03\\x02\\x02\\x02\\u0211\\u0212\\f\\x04\\x02\\x02\\u0212\\u0213' +\r\n    '\\x07\\x7F\\x02\\x02\\u0213\\u021C\\x07z\\x02\\x02\\u0214\\u0216\\f\\x03\\x02\\x02\\u0215' +\r\n    '\\u0217\\x07?\\x02\\x02\\u0216\\u0215\\x03\\x02\\x02\\x02\\u0216\\u0217\\x03\\x02\\x02' +\r\n    '\\x02\\u0217\\u0218\\x03\\x02\\x02\\x02\\u0218\\u0219\\x05\\u01A4\\xD3\\x02\\u0219\\u021A' +\r\n    '\\x07z\\x02\\x02\\u021A\\u021C\\x03\\x02\\x02\\x02\\u021B\\u0211\\x03\\x02\\x02\\x02' +\r\n    '\\u021B\\u0214\\x03\\x02\\x02\\x02\\u021C\\u021F\\x03\\x02\\x02\\x02\\u021D\\u021B\\x03' +\r\n    '\\x02\\x02\\x02\\u021D\\u021E\\x03\\x02\\x02\\x02\\u021E\\x0F\\x03\\x02\\x02\\x02\\u021F' +\r\n    '\\u021D\\x03\\x02\\x02\\x02\\u0220\\u0222\\x05\\x12\\n\\x02\\u0221\\u0223\\x05 \\x11' +\r\n    '\\x02\\u0222\\u0221\\x03\\x02\\x02\\x02\\u0222\\u0223\\x03\\x02\\x02\\x02\\u0223\\u0224' +\r\n    '\\x03\\x02\\x02\\x02\\u0224\\u0225\\x05r:\\x02\\u0225\\x11\\x03\\x02\\x02\\x02\\u0226' +\r\n    '\\u0228\\x07R\\x02\\x02\\u0227\\u0229\\x05\\x14\\v\\x02\\u0228\\u0227\\x03\\x02\\x02' +\r\n    '\\x02\\u0228\\u0229\\x03\\x02\\x02\\x02\\u0229\\u022A\\x03\\x02\\x02\\x02\\u022A\\u022B' +\r\n    '\\x07S\\x02\\x02\\u022B\\x13\\x03\\x02\\x02\\x02\\u022C\\u0233\\x05\\x16\\f\\x02\\u022D' +\r\n    '\\u0233\\x05\\x18\\r\\x02\\u022E\\u022F\\x05\\x16\\f\\x02\\u022F\\u0230\\x07u\\x02\\x02' +\r\n    '\\u0230\\u0231\\x05\\x18\\r\\x02\\u0231\\u0233\\x03\\x02\\x02\\x02\\u0232\\u022C\\x03' +\r\n    '\\x02\\x02\\x02\\u0232\\u022D\\x03\\x02\\x02\\x02\\u0232\\u022E\\x03\\x02\\x02\\x02\\u0233' +\r\n    '\\x15\\x03\\x02\\x02\\x02\\u0234\\u0235\\t\\x02\\x02\\x02\\u0235\\x17\\x03\\x02\\x02\\x02' +\r\n    '\\u0236\\u0237\\b\\r\\x01\\x02\\u0237\\u0239\\x05\\x1A\\x0E\\x02\\u0238\\u023A\\x07~' +\r\n    '\\x02\\x02\\u0239\\u0238\\x03\\x02\\x02\\x02\\u0239\\u023A\\x03\\x02\\x02\\x02\\u023A' +\r\n    '\\u0243\\x03\\x02\\x02\\x02\\u023B\\u023C\\f\\x03\\x02\\x02\\u023C\\u023D\\x07u\\x02' +\r\n    '\\x02\\u023D\\u023F\\x05\\x1A\\x0E\\x02\\u023E\\u0240\\x07~\\x02\\x02\\u023F\\u023E' +\r\n    '\\x03\\x02\\x02\\x02\\u023F\\u0240\\x03\\x02\\x02\\x02\\u0240\\u0242\\x03\\x02\\x02\\x02' +\r\n    '\\u0241\\u023B\\x03\\x02\\x02\\x02\\u0242\\u0245\\x03\\x02\\x02\\x02\\u0243\\u0241\\x03' +\r\n    '\\x02\\x02\\x02\\u0243\\u0244\\x03\\x02\\x02\\x02\\u0244\\x19\\x03\\x02\\x02\\x02\\u0245' +\r\n    '\\u0243\\x03\\x02\\x02\\x02\\u0246\\u0249\\x05\\x1C\\x0F\\x02\\u0247\\u0249\\x05\\x1E' +\r\n    '\\x10\\x02\\u0248\\u0246\\x03\\x02\\x02\\x02\\u0248\\u0247\\x03\\x02\\x02\\x02\\u0249' +\r\n    '\\x1B\\x03\\x02\\x02\\x02\\u024A\\u024F\\x07\\x7F\\x02\\x02\\u024B\\u024C\\x07\\\\\\x02' +\r\n    '\\x02\\u024C\\u024F\\x07\\x7F\\x02\\x02\\u024D\\u024F\\x07@\\x02\\x02\\u024E\\u024A' +\r\n    '\\x03\\x02\\x02\\x02\\u024E\\u024B\\x03\\x02\\x02\\x02\\u024E\\u024D\\x03\\x02\\x02\\x02' +\r\n    '\\u024F\\x1D\\x03\\x02\\x02\\x02\\u0250\\u0251\\x07\\x7F\\x02\\x02\\u0251\\u0256\\x05' +\r\n    '\\u0154\\xAB\\x02\\u0252\\u0253\\x07\\\\\\x02\\x02\\u0253\\u0254\\x07\\x7F\\x02\\x02\\u0254' +\r\n    '\\u0256\\x05\\u0154\\xAB\\x02\\u0255\\u0250\\x03\\x02\\x02\\x02\\u0255\\u0252\\x03\\x02' +\r\n    '\\x02\\x02\\u0256\\x1F\\x03\\x02\\x02\\x02\\u0257\\u0258\\x07P\\x02\\x02\\u0258\\u0259' +\r\n    '\\x05\\u0146\\xA4\\x02\\u0259\\u025B\\x07Q\\x02\\x02\\u025A\\u025C\\x07*\\x02\\x02\\u025B' +\r\n    '\\u025A\\x03\\x02\\x02\\x02\\u025B\\u025C\\x03\\x02\\x02\\x02\\u025C\\u025E\\x03\\x02' +\r\n    '\\x02\\x02\\u025D\\u025F\\x05\\u01C0\\xE1\\x02\\u025E\\u025D\\x03\\x02\\x02\\x02\\u025E' +\r\n    '\\u025F\\x03\\x02\\x02\\x02\\u025F\\u0261\\x03\\x02\\x02\\x02\\u0260\\u0262\\x05\\u010C' +\r\n    '\\x87\\x02\\u0261\\u0260\\x03\\x02\\x02\\x02\\u0261\\u0262\\x03\\x02\\x02\\x02\\u0262' +\r\n    '\\u0264\\x03\\x02\\x02\\x02\\u0263\\u0265\\x05\\u012E\\x98\\x02\\u0264\\u0263\\x03\\x02' +\r\n    '\\x02\\x02\\u0264\\u0265\\x03\\x02\\x02\\x02\\u0265!\\x03\\x02\\x02\\x02\\u0266\\u0267' +\r\n    '\\x05\\x06\\x04\\x02\\u0267#\\x03\\x02\\x02\\x02\\u0268\\u0269\\x05\\x04\\x03\\x02\\u0269' +\r\n    '\\u026B\\x07P\\x02\\x02\\u026A\\u026C\\x05\\u015A\\xAE\\x02\\u026B\\u026A\\x03\\x02' +\r\n    '\\x02\\x02\\u026B\\u026C\\x03\\x02\\x02\\x02\\u026C\\u026D\\x03\\x02\\x02\\x02\\u026D' +\r\n    '\\u026E\\x07Q\\x02\\x02\\u026E%\\x03\\x02\\x02\\x02\\u026F\\u0270\\b\\x14\\x01\\x02\\u0270' +\r\n    '\\u02B1\\x05\\x04\\x03\\x02\\u0271\\u02B1\\x05$\\x13\\x02\\u0272\\u0273\\x05\\xD4k\\x02' +\r\n    '\\u0273\\u0275\\x07P\\x02\\x02\\u0274\\u0276\\x05(\\x15\\x02\\u0275\\u0274\\x03\\x02' +\r\n    '\\x02\\x02\\u0275\\u0276\\x03\\x02\\x02\\x02\\u0276\\u0277\\x03\\x02\\x02\\x02\\u0277' +\r\n    '\\u0278\\x07Q\\x02\\x02\\u0278\\u02B1\\x03\\x02\\x02\\x02\\u0279\\u027A\\x05\\u01AE' +\r\n    '\\xD8\\x02\\u027A\\u027C\\x07P\\x02\\x02\\u027B\\u027D\\x05(\\x15\\x02\\u027C\\u027B' +\r\n    '\\x03\\x02\\x02\\x02\\u027C\\u027D\\x03\\x02\\x02\\x02\\u027D\\u027E\\x03\\x02\\x02\\x02' +\r\n    '\\u027E\\u027F\\x07Q\\x02\\x02\\u027F\\u02B1\\x03\\x02\\x02\\x02\\u0280\\u0281\\x05' +\r\n    '\\xD4k\\x02\\u0281\\u0282\\x05\\u015C\\xAF\\x02\\u0282\\u02B1\\x03\\x02\\x02\\x02\\u0283' +\r\n    '\\u0284\\x05\\u01AE\\xD8\\x02\\u0284\\u0285\\x05\\u015C\\xAF\\x02\\u0285\\u02B1\\x03' +\r\n    '\\x02\\x02\\x02\\u0286\\u0287\\x07\\x1A\\x02\\x02\\u0287\\u0288\\x07a\\x02\\x02\\u0288' +\r\n    '\\u0289\\x05\\u013A\\x9E\\x02\\u0289\\u028A\\x07b\\x02\\x02\\u028A\\u028B\\x07P\\x02' +\r\n    '\\x02\\u028B\\u028C\\x05b2\\x02\\u028C\\u028D\\x07Q\\x02\\x02\\u028D\\u02B1\\x03\\x02' +\r\n    '\\x02\\x02\\u028E\\u028F\\x07<\\x02\\x02\\u028F\\u0290\\x07a\\x02\\x02\\u0290\\u0291' +\r\n    '\\x05\\u013A\\x9E\\x02\\u0291\\u0292\\x07b\\x02\\x02\\u0292\\u0293\\x07P\\x02\\x02\\u0293' +\r\n    '\\u0294\\x05b2\\x02\\u0294\\u0295\\x07Q\\x02\\x02\\u0295\\u02B1\\x03\\x02\\x02\\x02' +\r\n    '\\u0296\\u0297\\x075\\x02\\x02\\u0297\\u0298\\x07a\\x02\\x02\\u0298\\u0299\\x05\\u013A' +\r\n    '\\x9E\\x02\\u0299\\u029A\\x07b\\x02\\x02\\u029A\\u029B\\x07P\\x02\\x02\\u029B\\u029C' +\r\n    '\\x05b2\\x02\\u029C\\u029D\\x07Q\\x02\\x02\\u029D\\u02B1\\x03\\x02\\x02\\x02\\u029E' +\r\n    '\\u029F\\x07\\x12\\x02\\x02\\u029F\\u02A0\\x07a\\x02\\x02\\u02A0\\u02A1\\x05\\u013A' +\r\n    '\\x9E\\x02\\u02A1\\u02A2\\x07b\\x02\\x02\\u02A2\\u02A3\\x07P\\x02\\x02\\u02A3\\u02A4' +\r\n    '\\x05b2\\x02\\u02A4\\u02A5\\x07Q\\x02\\x02\\u02A5\\u02B1\\x03\\x02\\x02\\x02\\u02A6' +\r\n    '\\u02A7\\x07F\\x02\\x02\\u02A7\\u02A8\\x07P\\x02\\x02\\u02A8\\u02A9\\x05b2\\x02\\u02A9' +\r\n    '\\u02AA\\x07Q\\x02\\x02\\u02AA\\u02B1\\x03\\x02\\x02\\x02\\u02AB\\u02AC\\x07F\\x02\\x02' +\r\n    '\\u02AC\\u02AD\\x07P\\x02\\x02\\u02AD\\u02AE\\x05\\u013A\\x9E\\x02\\u02AE\\u02AF\\x07' +\r\n    'Q\\x02\\x02\\u02AF\\u02B1\\x03\\x02\\x02\\x02\\u02B0\\u026F\\x03\\x02\\x02\\x02\\u02B0' +\r\n    '\\u0271\\x03\\x02\\x02\\x02\\u02B0\\u0272\\x03\\x02\\x02\\x02\\u02B0\\u0279\\x03\\x02' +\r\n    '\\x02\\x02\\u02B0\\u0280\\x03\\x02\\x02\\x02\\u02B0\\u0283\\x03\\x02\\x02\\x02\\u02B0' +\r\n    '\\u0286\\x03\\x02\\x02\\x02\\u02B0\\u028E\\x03\\x02\\x02\\x02\\u02B0\\u0296\\x03\\x02' +\r\n    '\\x02\\x02\\u02B0\\u029E\\x03\\x02\\x02\\x02\\u02B0\\u02A6\\x03\\x02\\x02\\x02\\u02B0' +\r\n    '\\u02AB\\x03\\x02\\x02\\x02\\u02B1\\u02D4\\x03\\x02\\x02\\x02\\u02B2\\u02B3\\f\\x14\\x02' +\r\n    '\\x02\\u02B3\\u02B4\\x07R\\x02\\x02\\u02B4\\u02B5\\x05^0\\x02\\u02B5\\u02B6\\x07S\\x02' +\r\n    '\\x02\\u02B6\\u02D3\\x03\\x02\\x02\\x02\\u02B7\\u02B8\\f\\x13\\x02\\x02\\u02B8\\u02B9' +\r\n    '\\x07R\\x02\\x02\\u02B9\\u02BA\\x05\\u015C\\xAF\\x02\\u02BA\\u02BB\\x07S\\x02\\x02\\u02BB' +\r\n    '\\u02D3\\x03\\x02\\x02\\x02\\u02BC\\u02BD\\f\\x0E\\x02\\x02\\u02BD\\u02BF\\x07|\\x02' +\r\n    '\\x02\\u02BE\\u02C0\\x07?\\x02\\x02\\u02BF\\u02BE\\x03\\x02\\x02\\x02\\u02BF\\u02C0' +\r\n    '\\x03\\x02\\x02\\x02\\u02C0\\u02C1\\x03\\x02\\x02\\x02\\u02C1\\u02D3\\x05\"\\x12\\x02' +\r\n    '\\u02C2\\u02C3\\f\\r\\x02\\x02\\u02C3\\u02C5\\x07w\\x02\\x02\\u02C4\\u02C6\\x07?\\x02' +\r\n    '\\x02\\u02C5\\u02C4\\x03\\x02\\x02\\x02\\u02C5\\u02C6\\x03\\x02\\x02\\x02\\u02C6\\u02C7' +\r\n    '\\x03\\x02\\x02\\x02\\u02C7\\u02D3\\x05\"\\x12\\x02\\u02C8\\u02C9\\f\\f\\x02\\x02\\u02C9' +\r\n    '\\u02CA\\x07|\\x02\\x02\\u02CA\\u02D3\\x05*\\x16\\x02\\u02CB\\u02CC\\f\\v\\x02\\x02\\u02CC' +\r\n    '\\u02CD\\x07w\\x02\\x02\\u02CD\\u02D3\\x05*\\x16\\x02\\u02CE\\u02CF\\f\\n\\x02\\x02\\u02CF' +\r\n    '\\u02D3\\x07s\\x02\\x02\\u02D0\\u02D1\\f\\t\\x02\\x02\\u02D1\\u02D3\\x07t\\x02\\x02\\u02D2' +\r\n    '\\u02B2\\x03\\x02\\x02\\x02\\u02D2\\u02B7\\x03\\x02\\x02\\x02\\u02D2\\u02BC\\x03\\x02' +\r\n    '\\x02\\x02\\u02D2\\u02C2\\x03\\x02\\x02\\x02\\u02D2\\u02C8\\x03\\x02\\x02\\x02\\u02D2' +\r\n    '\\u02CB\\x03\\x02\\x02\\x02\\u02D2\\u02CE\\x03\\x02\\x02\\x02\\u02D2\\u02D0\\x03\\x02' +\r\n    '\\x02\\x02\\u02D3\\u02D6\\x03\\x02\\x02\\x02\\u02D4\\u02D2\\x03\\x02\\x02\\x02\\u02D4' +\r\n    \"\\u02D5\\x03\\x02\\x02\\x02\\u02D5'\\x03\\x02\\x02\\x02\\u02D6\\u02D4\\x03\\x02\\x02\" +\r\n    '\\x02\\u02D7\\u02D8\\x05\\u015A\\xAE\\x02\\u02D8)\\x03\\x02\\x02\\x02\\u02D9\\u02DB' +\r\n    '\\x05\\x0E\\b\\x02\\u02DA\\u02D9\\x03\\x02\\x02\\x02\\u02DA\\u02DB\\x03\\x02\\x02\\x02' +\r\n    '\\u02DB\\u02DC\\x03\\x02\\x02\\x02\\u02DC\\u02DD\\x05\\xD6l\\x02\\u02DD\\u02DE\\x07' +\r\n    'z\\x02\\x02\\u02DE\\u02DF\\x07^\\x02\\x02\\u02DF\\u02E0\\x05\\xD6l\\x02\\u02E0\\u02F0' +\r\n    '\\x03\\x02\\x02\\x02\\u02E1\\u02E2\\x05\\x0E\\b\\x02\\u02E2\\u02E3\\x07?\\x02\\x02\\u02E3' +\r\n    '\\u02E4\\x05\\u01A4\\xD3\\x02\\u02E4\\u02E5\\x07z\\x02\\x02\\u02E5\\u02E6\\x07^\\x02' +\r\n    '\\x02\\u02E6\\u02E7\\x05\\xD6l\\x02\\u02E7\\u02F0\\x03\\x02\\x02\\x02\\u02E8\\u02EA' +\r\n    '\\x05\\x0E\\b\\x02\\u02E9\\u02E8\\x03\\x02\\x02\\x02\\u02E9\\u02EA\\x03\\x02\\x02\\x02' +\r\n    '\\u02EA\\u02EB\\x03\\x02\\x02\\x02\\u02EB\\u02EC\\x07^\\x02\\x02\\u02EC\\u02F0\\x05' +\r\n    '\\xD6l\\x02\\u02ED\\u02EE\\x07^\\x02\\x02\\u02EE\\u02F0\\x05\\xD8m\\x02\\u02EF\\u02DA' +\r\n    '\\x03\\x02\\x02\\x02\\u02EF\\u02E1\\x03\\x02\\x02\\x02\\u02EF\\u02E9\\x03\\x02\\x02\\x02' +\r\n    '\\u02EF\\u02ED\\x03\\x02\\x02\\x02\\u02F0+\\x03\\x02\\x02\\x02\\u02F1\\u02F6\\x05&\\x14' +\r\n    '\\x02\\u02F2\\u02F6\\x05.\\x18\\x02\\u02F3\\u02F6\\x054\\x1B\\x02\\u02F4\\u02F6\\x05' +\r\n    '@!\\x02\\u02F5\\u02F1\\x03\\x02\\x02\\x02\\u02F5\\u02F2\\x03\\x02\\x02\\x02\\u02F5\\u02F3' +\r\n    '\\x03\\x02\\x02\\x02\\u02F5\\u02F4\\x03\\x02\\x02\\x02\\u02F6-\\x03\\x02\\x02\\x02\\u02F7' +\r\n    '\\u02F8\\x07s\\x02\\x02\\u02F8\\u0316\\x05D#\\x02\\u02F9\\u02FA\\x07t\\x02\\x02\\u02FA' +\r\n    '\\u0316\\x05D#\\x02\\u02FB\\u02FC\\x052\\x1A\\x02';\r\nCPP14Parser._serializedATNSegment2 = '\\u02FC\\u02FD\\x05D#\\x02\\u02FD\\u0316\\x03\\x02\\x02\\x02\\u02FE\\u02FF\\x079\\x02' +\r\n    '\\x02\\u02FF\\u0316\\x05,\\x17\\x02\\u0300\\u0301\\x079\\x02\\x02\\u0301\\u0302\\x07' +\r\n    'P\\x02\\x02\\u0302\\u0303\\x050\\x19\\x02\\u0303\\u0304\\x07Q\\x02\\x02\\u0304\\u0316' +\r\n    '\\x03\\x02\\x02\\x02\\u0305\\u0306\\x079\\x02\\x02\\u0306\\u0307\\x07P\\x02\\x02\\u0307' +\r\n    '\\u0308\\x05\\u013A\\x9E\\x02\\u0308\\u0309\\x07Q\\x02\\x02\\u0309\\u0316\\x03\\x02' +\r\n    '\\x02\\x02\\u030A\\u030B\\x079\\x02\\x02\\u030B\\u030C\\x07~\\x02\\x02\\u030C\\u030D' +\r\n    '\\x07P\\x02\\x02\\u030D\\u030E\\x07\\x7F\\x02\\x02\\u030E\\u0316\\x07Q\\x02\\x02\\u030F' +\r\n    '\\u0310\\x07\\x05\\x02\\x02\\u0310\\u0311\\x07P\\x02\\x02\\u0311\\u0312\\x05\\u013A' +\r\n    '\\x9E\\x02\\u0312\\u0313\\x07Q\\x02\\x02\\u0313\\u0316\\x03\\x02\\x02\\x02\\u0314\\u0316' +\r\n    '\\x05B\"\\x02\\u0315\\u02F7\\x03\\x02\\x02\\x02\\u0315\\u02F9\\x03\\x02\\x02\\x02\\u0315' +\r\n    '\\u02FB\\x03\\x02\\x02\\x02\\u0315\\u02FE\\x03\\x02\\x02\\x02\\u0315\\u0300\\x03\\x02' +\r\n    '\\x02\\x02\\u0315\\u0305\\x03\\x02\\x02\\x02\\u0315\\u030A\\x03\\x02\\x02\\x02\\u0315' +\r\n    '\\u030F\\x03\\x02\\x02\\x02\\u0315\\u0314\\x03\\x02\\x02\\x02\\u0316/\\x03\\x02\\x02' +\r\n    '\\x02\\u0317\\u0318\\x05\\u013A\\x9E\\x02\\u03181\\x03\\x02\\x02\\x02\\u0319\\u031A' +\r\n    '\\t\\x03\\x02\\x02\\u031A3\\x03\\x02\\x02\\x02\\u031B\\u031D\\x07z\\x02\\x02\\u031C\\u031B' +\r\n    '\\x03\\x02\\x02\\x02\\u031C\\u031D\\x03\\x02\\x02\\x02\\u031D\\u031E\\x03\\x02\\x02\\x02' +\r\n    '\\u031E\\u0320\\x07,\\x02\\x02\\u031F\\u0321\\x056\\x1C\\x02\\u0320\\u031F\\x03\\x02' +\r\n    '\\x02\\x02\\u0320\\u0321\\x03\\x02\\x02\\x02\\u0321\\u0322\\x03\\x02\\x02\\x02\\u0322' +\r\n    '\\u0324\\x058\\x1D\\x02\\u0323\\u0325\\x05> \\x02\\u0324\\u0323\\x03\\x02\\x02\\x02' +\r\n    '\\u0324\\u0325\\x03\\x02\\x02\\x02\\u0325\\u0334\\x03\\x02\\x02\\x02\\u0326\\u0328\\x07' +\r\n    'z\\x02\\x02\\u0327\\u0326\\x03\\x02\\x02\\x02\\u0327\\u0328\\x03\\x02\\x02\\x02\\u0328' +\r\n    '\\u0329\\x03\\x02\\x02\\x02\\u0329\\u032B\\x07,\\x02\\x02\\u032A\\u032C\\x056\\x1C\\x02' +\r\n    '\\u032B\\u032A\\x03\\x02\\x02\\x02\\u032B\\u032C\\x03\\x02\\x02\\x02\\u032C\\u032D\\x03' +\r\n    '\\x02\\x02\\x02\\u032D\\u032E\\x07P\\x02\\x02\\u032E\\u032F\\x05\\u013A\\x9E\\x02\\u032F' +\r\n    '\\u0331\\x07Q\\x02\\x02\\u0330\\u0332\\x05> \\x02\\u0331\\u0330\\x03\\x02\\x02\\x02' +\r\n    '\\u0331\\u0332\\x03\\x02\\x02\\x02\\u0332\\u0334\\x03\\x02\\x02\\x02\\u0333\\u031C\\x03' +\r\n    '\\x02\\x02\\x02\\u0333\\u0327\\x03\\x02\\x02\\x02\\u03345\\x03\\x02\\x02\\x02\\u0335' +\r\n    '\\u0336\\x07P\\x02\\x02\\u0336\\u0337\\x05(\\x15\\x02\\u0337\\u0338\\x07Q\\x02\\x02' +\r\n    '\\u03387\\x03\\x02\\x02\\x02\\u0339\\u033B\\x05\\xD0i\\x02\\u033A\\u033C\\x05:\\x1E' +\r\n    '\\x02\\u033B\\u033A\\x03\\x02\\x02\\x02\\u033B\\u033C\\x03\\x02\\x02\\x02\\u033C9\\x03' +\r\n    '\\x02\\x02\\x02\\u033D\\u033F\\x05\\u0130\\x99\\x02\\u033E\\u0340\\x05:\\x1E\\x02\\u033F' +\r\n    '\\u033E\\x03\\x02\\x02\\x02\\u033F\\u0340\\x03\\x02\\x02\\x02\\u0340\\u0343\\x03\\x02' +\r\n    '\\x02\\x02\\u0341\\u0343\\x05<\\x1F\\x02\\u0342\\u033D\\x03\\x02\\x02\\x02\\u0342\\u0341' +\r\n    '\\x03\\x02\\x02\\x02\\u0343;\\x03\\x02\\x02\\x02\\u0344\\u0345\\b\\x1F\\x01\\x02\\u0345' +\r\n    '\\u0346\\x07R\\x02\\x02\\u0346\\u0347\\x05b2\\x02\\u0347\\u0349\\x07S\\x02\\x02\\u0348' +\r\n    '\\u034A\\x05\\u010C\\x87\\x02\\u0349\\u0348\\x03\\x02\\x02\\x02\\u0349\\u034A\\x03\\x02' +\r\n    '\\x02\\x02\\u034A\\u0354\\x03\\x02\\x02\\x02\\u034B\\u034C\\f\\x03\\x02\\x02\\u034C\\u034D' +\r\n    '\\x07R\\x02\\x02\\u034D\\u034E\\x05d3\\x02\\u034E\\u0350\\x07S\\x02\\x02\\u034F\\u0351' +\r\n    '\\x05\\u010C\\x87\\x02\\u0350\\u034F\\x03\\x02\\x02\\x02\\u0350\\u0351\\x03\\x02\\x02' +\r\n    '\\x02\\u0351\\u0353\\x03\\x02\\x02\\x02\\u0352\\u034B\\x03\\x02\\x02\\x02\\u0353\\u0356' +\r\n    '\\x03\\x02\\x02\\x02\\u0354\\u0352\\x03\\x02\\x02\\x02\\u0354\\u0355\\x03\\x02\\x02\\x02' +\r\n    '\\u0355=\\x03\\x02\\x02\\x02\\u0356\\u0354\\x03\\x02\\x02\\x02\\u0357\\u0359\\x07P\\x02' +\r\n    '\\x02\\u0358\\u035A\\x05(\\x15\\x02\\u0359\\u0358\\x03\\x02\\x02\\x02\\u0359\\u035A' +\r\n    '\\x03\\x02\\x02\\x02\\u035A\\u035B\\x03\\x02\\x02\\x02\\u035B\\u035E\\x07Q\\x02\\x02' +\r\n    '\\u035C\\u035E\\x05\\u015C\\xAF\\x02\\u035D\\u0357\\x03\\x02\\x02\\x02\\u035D\\u035C' +\r\n    '\\x03\\x02\\x02\\x02\\u035E?\\x03\\x02\\x02\\x02\\u035F\\u0361\\x07z\\x02\\x02\\u0360' +\r\n    '\\u035F\\x03\\x02\\x02\\x02\\u0360\\u0361\\x03\\x02\\x02\\x02\\u0361\\u0362\\x03\\x02' +\r\n    '\\x02\\x02\\u0362\\u0363\\x07\\x16\\x02\\x02\\u0363\\u036C\\x05D#\\x02\\u0364\\u0366' +\r\n    '\\x07z\\x02\\x02\\u0365\\u0364\\x03\\x02\\x02\\x02\\u0365\\u0366\\x03\\x02\\x02\\x02' +\r\n    '\\u0366\\u0367\\x03\\x02\\x02\\x02\\u0367\\u0368\\x07\\x16\\x02\\x02\\u0368\\u0369\\x07' +\r\n    'R\\x02\\x02\\u0369\\u036A\\x07S\\x02\\x02\\u036A\\u036C\\x05D#\\x02\\u036B\\u0360\\x03' +\r\n    '\\x02\\x02\\x02\\u036B\\u0365\\x03\\x02\\x02\\x02\\u036CA\\x03\\x02\\x02\\x02\\u036D' +\r\n    '\\u036E\\x07-\\x02\\x02\\u036E\\u036F\\x07P\\x02\\x02\\u036F\\u0370\\x05b2\\x02\\u0370' +\r\n    '\\u0371\\x07Q\\x02\\x02\\u0371C\\x03\\x02\\x02\\x02\\u0372\\u0379\\x05,\\x17\\x02\\u0373' +\r\n    '\\u0374\\x07P\\x02\\x02\\u0374\\u0375\\x05\\u013A\\x9E\\x02\\u0375\\u0376\\x07Q\\x02' +\r\n    '\\x02\\u0376\\u0377\\x05D#\\x02\\u0377\\u0379\\x03\\x02\\x02\\x02\\u0378\\u0372\\x03' +\r\n    '\\x02\\x02\\x02\\u0378\\u0373\\x03\\x02\\x02\\x02\\u0379E\\x03\\x02\\x02\\x02\\u037A' +\r\n    '\\u037B\\b$\\x01\\x02\\u037B\\u037C\\x05D#\\x02\\u037C\\u0385\\x03\\x02\\x02\\x02\\u037D' +\r\n    '\\u037E\\f\\x04\\x02\\x02\\u037E\\u037F\\x07}\\x02\\x02\\u037F\\u0384\\x05D#\\x02\\u0380' +\r\n    '\\u0381\\f\\x03\\x02\\x02\\u0381\\u0382\\x07v\\x02\\x02\\u0382\\u0384\\x05D#\\x02\\u0383' +\r\n    '\\u037D\\x03\\x02\\x02\\x02\\u0383\\u0380\\x03\\x02\\x02\\x02\\u0384\\u0387\\x03\\x02' +\r\n    '\\x02\\x02\\u0385\\u0383\\x03\\x02\\x02\\x02\\u0385\\u0386\\x03\\x02\\x02\\x02\\u0386' +\r\n    'G\\x03\\x02\\x02\\x02\\u0387\\u0385\\x03\\x02\\x02\\x02\\u0388\\u0389\\b%\\x01\\x02\\u0389' +\r\n    '\\u038A\\x05F$\\x02\\u038A\\u0396\\x03\\x02\\x02\\x02\\u038B\\u038C\\f\\x05\\x02\\x02' +\r\n    '\\u038C\\u038D\\x07X\\x02\\x02\\u038D\\u0395\\x05F$\\x02\\u038E\\u038F\\f\\x04\\x02' +\r\n    '\\x02\\u038F\\u0390\\x07Y\\x02\\x02\\u0390\\u0395\\x05F$\\x02\\u0391\\u0392\\f\\x03' +\r\n    '\\x02\\x02\\u0392\\u0393\\x07Z\\x02\\x02\\u0393\\u0395\\x05F$\\x02\\u0394\\u038B\\x03' +\r\n    '\\x02\\x02\\x02\\u0394\\u038E\\x03\\x02\\x02\\x02\\u0394\\u0391\\x03\\x02\\x02\\x02\\u0395' +\r\n    '\\u0398\\x03\\x02\\x02\\x02\\u0396\\u0394\\x03\\x02\\x02\\x02\\u0396\\u0397\\x03\\x02' +\r\n    '\\x02\\x02\\u0397I\\x03\\x02\\x02\\x02\\u0398\\u0396\\x03\\x02\\x02\\x02\\u0399\\u039A' +\r\n    '\\b&\\x01\\x02\\u039A\\u039B\\x05H%\\x02\\u039B\\u03A4\\x03\\x02\\x02\\x02\\u039C\\u039D' +\r\n    '\\f\\x04\\x02\\x02\\u039D\\u039E\\x07V\\x02\\x02\\u039E\\u03A3\\x05H%\\x02\\u039F\\u03A0' +\r\n    '\\f\\x03\\x02\\x02\\u03A0\\u03A1\\x07W\\x02\\x02\\u03A1\\u03A3\\x05H%\\x02\\u03A2\\u039C' +\r\n    '\\x03\\x02\\x02\\x02\\u03A2\\u039F\\x03\\x02\\x02\\x02\\u03A3\\u03A6\\x03\\x02\\x02\\x02' +\r\n    '\\u03A4\\u03A2\\x03\\x02\\x02\\x02\\u03A4\\u03A5\\x03\\x02\\x02\\x02\\u03A5K\\x03\\x02' +\r\n    \"\\x02\\x02\\u03A6\\u03A4\\x03\\x02\\x02\\x02\\u03A7\\u03A8\\b'\\x01\\x02\\u03A8\\u03A9\" +\r\n    '\\x05J&\\x02\\u03A9\\u03B3\\x03\\x02\\x02\\x02\\u03AA\\u03AB\\f\\x04\\x02\\x02\\u03AB' +\r\n    '\\u03AC\\x07k\\x02\\x02\\u03AC\\u03B2\\x05J&\\x02\\u03AD\\u03AE\\f\\x03\\x02\\x02\\u03AE' +\r\n    '\\u03AF\\x05\\u01C8\\xE5\\x02\\u03AF\\u03B0\\x05J&\\x02\\u03B0\\u03B2\\x03\\x02\\x02' +\r\n    '\\x02\\u03B1\\u03AA\\x03\\x02\\x02\\x02\\u03B1\\u03AD\\x03\\x02\\x02\\x02\\u03B2\\u03B5' +\r\n    '\\x03\\x02\\x02\\x02\\u03B3\\u03B1\\x03\\x02\\x02\\x02\\u03B3\\u03B4\\x03\\x02\\x02\\x02' +\r\n    '\\u03B4M\\x03\\x02\\x02\\x02\\u03B5\\u03B3\\x03\\x02\\x02\\x02\\u03B6\\u03B7\\b(\\x01' +\r\n    \"\\x02\\u03B7\\u03B8\\x05L'\\x02\\u03B8\\u03C7\\x03\\x02\\x02\\x02\\u03B9\\u03BA\\f\" +\r\n    \"\\x06\\x02\\x02\\u03BA\\u03BB\\x07a\\x02\\x02\\u03BB\\u03C6\\x05L'\\x02\\u03BC\\u03BD\" +\r\n    \"\\f\\x05\\x02\\x02\\u03BD\\u03BE\\x07b\\x02\\x02\\u03BE\\u03C6\\x05L'\\x02\\u03BF\\u03C0\" +\r\n    \"\\f\\x04\\x02\\x02\\u03C0\\u03C1\\x07o\\x02\\x02\\u03C1\\u03C6\\x05L'\\x02\\u03C2\\u03C3\" +\r\n    \"\\f\\x03\\x02\\x02\\u03C3\\u03C4\\x07p\\x02\\x02\\u03C4\\u03C6\\x05L'\\x02\\u03C5\\u03B9\" +\r\n    '\\x03\\x02\\x02\\x02\\u03C5\\u03BC\\x03\\x02\\x02\\x02\\u03C5\\u03BF\\x03\\x02\\x02\\x02' +\r\n    '\\u03C5\\u03C2\\x03\\x02\\x02\\x02\\u03C6\\u03C9\\x03\\x02\\x02\\x02\\u03C7\\u03C5\\x03' +\r\n    '\\x02\\x02\\x02\\u03C7\\u03C8\\x03\\x02\\x02\\x02\\u03C8O\\x03\\x02\\x02\\x02\\u03C9' +\r\n    '\\u03C7\\x03\\x02\\x02\\x02\\u03CA\\u03CB\\b)\\x01\\x02\\u03CB\\u03CC\\x05N(\\x02\\u03CC' +\r\n    '\\u03D5\\x03\\x02\\x02\\x02\\u03CD\\u03CE\\f\\x04\\x02\\x02\\u03CE\\u03CF\\x07m\\x02' +\r\n    '\\x02\\u03CF\\u03D4\\x05N(\\x02\\u03D0\\u03D1\\f\\x03\\x02\\x02\\u03D1\\u03D2\\x07n' +\r\n    '\\x02\\x02\\u03D2\\u03D4\\x05N(\\x02\\u03D3\\u03CD\\x03\\x02\\x02\\x02\\u03D3\\u03D0' +\r\n    '\\x03\\x02\\x02\\x02\\u03D4\\u03D7\\x03\\x02\\x02\\x02\\u03D5\\u03D3\\x03\\x02\\x02\\x02' +\r\n    '\\u03D5\\u03D6\\x03\\x02\\x02\\x02\\u03D6Q\\x03\\x02\\x02\\x02\\u03D7\\u03D5\\x03\\x02' +\r\n    '\\x02\\x02\\u03D8\\u03D9\\b*\\x01\\x02\\u03D9\\u03DA\\x05P)\\x02\\u03DA\\u03E0\\x03' +\r\n    '\\x02\\x02\\x02\\u03DB\\u03DC\\f\\x03\\x02\\x02\\u03DC\\u03DD\\x07\\\\\\x02\\x02\\u03DD' +\r\n    '\\u03DF\\x05P)\\x02\\u03DE\\u03DB\\x03\\x02\\x02\\x02\\u03DF\\u03E2\\x03\\x02\\x02\\x02' +\r\n    '\\u03E0\\u03DE\\x03\\x02\\x02\\x02\\u03E0\\u03E1\\x03\\x02\\x02\\x02\\u03E1S\\x03\\x02' +\r\n    '\\x02\\x02\\u03E2\\u03E0\\x03\\x02\\x02\\x02\\u03E3\\u03E4\\b+\\x01\\x02\\u03E4\\u03E5' +\r\n    '\\x05R*\\x02\\u03E5\\u03EB\\x03\\x02\\x02\\x02\\u03E6\\u03E7\\f\\x03\\x02\\x02\\u03E7' +\r\n    '\\u03E8\\x07[\\x02\\x02\\u03E8\\u03EA\\x05R*\\x02\\u03E9\\u03E6\\x03\\x02\\x02\\x02' +\r\n    '\\u03EA\\u03ED\\x03\\x02\\x02\\x02\\u03EB\\u03E9\\x03\\x02\\x02\\x02\\u03EB\\u03EC\\x03' +\r\n    '\\x02\\x02\\x02\\u03ECU\\x03\\x02\\x02\\x02\\u03ED\\u03EB\\x03\\x02\\x02\\x02\\u03EE' +\r\n    '\\u03EF\\b,\\x01\\x02\\u03EF\\u03F0\\x05T+\\x02\\u03F0\\u03F6\\x03\\x02\\x02\\x02\\u03F1' +\r\n    '\\u03F2\\f\\x03\\x02\\x02\\u03F2\\u03F3\\x07]\\x02\\x02\\u03F3\\u03F5\\x05T+\\x02\\u03F4' +\r\n    '\\u03F1\\x03\\x02\\x02\\x02\\u03F5\\u03F8\\x03\\x02\\x02\\x02\\u03F6\\u03F4\\x03\\x02' +\r\n    '\\x02\\x02\\u03F6\\u03F7\\x03\\x02\\x02\\x02\\u03F7W\\x03\\x02\\x02\\x02\\u03F8\\u03F6' +\r\n    '\\x03\\x02\\x02\\x02\\u03F9\\u03FA\\b-\\x01\\x02\\u03FA\\u03FB\\x05V,\\x02\\u03FB\\u0401' +\r\n    '\\x03\\x02\\x02\\x02\\u03FC\\u03FD\\f\\x03\\x02\\x02\\u03FD\\u03FE\\x07q\\x02\\x02\\u03FE' +\r\n    '\\u0400\\x05V,\\x02\\u03FF\\u03FC\\x03\\x02\\x02\\x02\\u0400\\u0403\\x03\\x02\\x02\\x02' +\r\n    '\\u0401\\u03FF\\x03\\x02\\x02\\x02\\u0401\\u0402\\x03\\x02\\x02\\x02\\u0402Y\\x03\\x02' +\r\n    '\\x02\\x02\\u0403\\u0401\\x03\\x02\\x02\\x02\\u0404\\u0405\\b.\\x01\\x02\\u0405\\u0406' +\r\n    '\\x05X-\\x02\\u0406\\u040C\\x03\\x02\\x02\\x02\\u0407\\u0408\\f\\x03\\x02\\x02\\u0408' +\r\n    '\\u0409\\x07r\\x02\\x02\\u0409\\u040B\\x05X-\\x02\\u040A\\u0407\\x03\\x02\\x02\\x02' +\r\n    '\\u040B\\u040E\\x03\\x02\\x02\\x02\\u040C\\u040A\\x03\\x02\\x02\\x02\\u040C\\u040D\\x03' +\r\n    '\\x02\\x02\\x02\\u040D[\\x03\\x02\\x02\\x02\\u040E\\u040C\\x03\\x02\\x02\\x02\\u040F' +\r\n    '\\u0417\\x05Z.\\x02\\u0410\\u0411\\x05Z.\\x02\\u0411\\u0412\\x07x\\x02\\x02\\u0412' +\r\n    '\\u0413\\x05b2\\x02\\u0413\\u0414\\x07y\\x02\\x02\\u0414\\u0415\\x05^0\\x02\\u0415' +\r\n    '\\u0417\\x03\\x02\\x02\\x02\\u0416\\u040F\\x03\\x02\\x02\\x02\\u0416\\u0410\\x03\\x02' +\r\n    '\\x02\\x02\\u0417]\\x03\\x02\\x02\\x02\\u0418\\u041F\\x05\\\\/\\x02\\u0419\\u041A\\x05' +\r\n    'Z.\\x02\\u041A\\u041B\\x05`1\\x02\\u041B\\u041C\\x05\\u0158\\xAD\\x02\\u041C\\u041F' +\r\n    '\\x03\\x02\\x02\\x02\\u041D\\u041F\\x05\\u01BE\\xE0\\x02\\u041E\\u0418\\x03\\x02\\x02' +\r\n    '\\x02\\u041E\\u0419\\x03\\x02\\x02\\x02\\u041E\\u041D\\x03\\x02\\x02\\x02\\u041F_\\x03' +\r\n    '\\x02\\x02\\x02\\u0420\\u042C\\x07`\\x02\\x02\\u0421\\u042C\\x07e\\x02\\x02\\u0422\\u042C' +\r\n    '\\x07f\\x02\\x02\\u0423\\u042C\\x07g\\x02\\x02\\u0424\\u042C\\x07c\\x02\\x02\\u0425' +\r\n    '\\u042C\\x07d\\x02\\x02\\u0426\\u042C\\x05\\u01CA\\xE6\\x02\\u0427\\u042C\\x07l\\x02' +\r\n    '\\x02\\u0428\\u042C\\x07i\\x02\\x02\\u0429\\u042C\\x07h\\x02\\x02\\u042A\\u042C\\x07' +\r\n    'j\\x02\\x02\\u042B\\u0420\\x03\\x02\\x02\\x02\\u042B\\u0421\\x03\\x02\\x02\\x02\\u042B' +\r\n    '\\u0422\\x03\\x02\\x02\\x02\\u042B\\u0423\\x03\\x02\\x02\\x02\\u042B\\u0424\\x03\\x02' +\r\n    '\\x02\\x02\\u042B\\u0425\\x03\\x02\\x02\\x02\\u042B\\u0426\\x03\\x02\\x02\\x02\\u042B' +\r\n    '\\u0427\\x03\\x02\\x02\\x02\\u042B\\u0428\\x03\\x02\\x02\\x02\\u042B\\u0429\\x03\\x02' +\r\n    '\\x02\\x02\\u042B\\u042A\\x03\\x02\\x02\\x02\\u042Ca\\x03\\x02\\x02\\x02\\u042D\\u042E' +\r\n    '\\b2\\x01\\x02\\u042E\\u042F\\x05^0\\x02\\u042F\\u0435\\x03\\x02\\x02\\x02\\u0430\\u0431' +\r\n    '\\f\\x03\\x02\\x02\\u0431\\u0432\\x07u\\x02\\x02\\u0432\\u0434\\x05^0\\x02\\u0433\\u0430' +\r\n    '\\x03\\x02\\x02\\x02\\u0434\\u0437\\x03\\x02\\x02\\x02\\u0435\\u0433\\x03\\x02\\x02\\x02' +\r\n    '\\u0435\\u0436\\x03\\x02\\x02\\x02\\u0436c\\x03\\x02\\x02\\x02\\u0437\\u0435\\x03\\x02' +\r\n    '\\x02\\x02\\u0438\\u0439\\x05\\\\/\\x02\\u0439e\\x03\\x02\\x02\\x02\\u043A\\u043D\\x05' +\r\n    'j6\\x02\\u043B\\u043D\\x05h5\\x02\\u043C\\u043A\\x03\\x02\\x02\\x02\\u043C\\u043B\\x03' +\r\n    '\\x02\\x02\\x02\\u043Dg\\x03\\x02\\x02\\x02\\u043E\\u0472\\x05\\xBA^\\x02\\u043F\\u0441' +\r\n    '\\x05\\u010C\\x87\\x02\\u0440\\u043F\\x03\\x02\\x02\\x02\\u0440\\u0441\\x03\\x02\\x02' +\r\n    '\\x02\\u0441\\u0442\\x03\\x02\\x02\\x02\\u0442\\u0472\\x05p9\\x02\\u0443\\u0445\\x05' +\r\n    '\\u010C\\x87\\x02\\u0444\\u0443\\x03\\x02\\x02\\x02\\u0444\\u0445\\x03\\x02\\x02\\x02' +\r\n    '\\u0445\\u0446\\x03\\x02\\x02\\x02\\u0446\\u0472\\x05r:\\x02\\u0447\\u0449\\x05\\u010C' +\r\n    '\\x87\\x02\\u0448\\u0447\\x03\\x02\\x02\\x02\\u0448\\u0449\\x03\\x02\\x02\\x02\\u0449' +\r\n    '\\u044A\\x03\\x02\\x02\\x02\\u044A\\u0472\\x05v<\\x02\\u044B\\u044D\\x05\\u010C\\x87' +\r\n    '\\x02\\u044C\\u044B\\x03\\x02\\x02\\x02\\u044C\\u044D\\x03\\x02\\x02\\x02\\u044D\\u044E' +\r\n    '\\x03\\x02\\x02\\x02\\u044E\\u0472\\x05x=\\x02\\u044F\\u0451\\x05\\u010C\\x87\\x02\\u0450' +\r\n    '\\u044F\\x03\\x02\\x02\\x02\\u0450\\u0451\\x03\\x02\\x02\\x02\\u0451\\u0452\\x03\\x02' +\r\n    '\\x02\\x02\\u0452\\u0472\\x05\\x82B\\x02\\u0453\\u0455\\x05\\u010C\\x87\\x02\\u0454' +\r\n    '\\u0453\\x03\\x02\\x02\\x02\\u0454\\u0455\\x03\\x02\\x02\\x02\\u0455\\u0456\\x03\\x02' +\r\n    '\\x02\\x02\\u0456\\u0472\\x05~@\\x02\\u0457\\u0459\\x05\\u010C\\x87\\x02\\u0458\\u0457' +\r\n    '\\x03\\x02\\x02\\x02\\u0458\\u0459\\x03\\x02\\x02\\x02\\u0459\\u045A\\x03\\x02\\x02\\x02' +\r\n    '\\u045A\\u0472\\x05\\x80A\\x02\\u045B\\u045D\\x05\\u010C\\x87\\x02\\u045C\\u045B\\x03' +\r\n    '\\x02\\x02\\x02\\u045C\\u045D\\x03\\x02\\x02\\x02\\u045D\\u045E\\x03\\x02\\x02\\x02\\u045E' +\r\n    '\\u0472\\x05\\x8CG\\x02\\u045F\\u0461\\x05\\u010C\\x87\\x02\\u0460\\u045F\\x03\\x02' +\r\n    '\\x02\\x02\\u0460\\u0461\\x03\\x02\\x02\\x02\\u0461\\u0462\\x03\\x02\\x02\\x02\\u0462' +\r\n    '\\u0472\\x05\\x8EH\\x02\\u0463\\u0465\\x05\\u010C\\x87\\x02\\u0464\\u0463\\x03\\x02' +\r\n    '\\x02\\x02\\u0464\\u0465\\x03\\x02\\x02\\x02\\u0465\\u0466\\x03\\x02\\x02\\x02\\u0466' +\r\n    '\\u0472\\x05\\x90I\\x02\\u0467\\u0469\\x05\\u010C\\x87\\x02\\u0468\\u0467\\x03\\x02' +\r\n    '\\x02\\x02\\u0468\\u0469\\x03\\x02\\x02\\x02\\u0469\\u046A\\x03\\x02\\x02\\x02\\u046A' +\r\n    '\\u0472\\x05\\x92J\\x02\\u046B\\u0472\\x05\\xA8U\\x02\\u046C\\u0472\\x05\\x94K\\x02' +\r\n    '\\u046D\\u046F\\x05\\u010C\\x87\\x02\\u046E\\u046D\\x03\\x02\\x02\\x02\\u046E\\u046F' +\r\n    '\\x03\\x02\\x02\\x02\\u046F\\u0470\\x03\\x02\\x02\\x02\\u0470\\u0472\\x05\\u01B4\\xDB' +\r\n    '\\x02\\u0471\\u043E\\x03\\x02\\x02\\x02\\u0471\\u0440\\x03\\x02\\x02\\x02\\u0471\\u0444' +\r\n    '\\x03\\x02\\x02\\x02\\u0471\\u0448\\x03\\x02\\x02\\x02\\u0471\\u044C\\x03\\x02\\x02\\x02' +\r\n    '\\u0471\\u0450\\x03\\x02\\x02\\x02\\u0471\\u0454\\x03\\x02\\x02\\x02\\u0471\\u0458\\x03' +\r\n    '\\x02\\x02\\x02\\u0471\\u045C\\x03\\x02\\x02\\x02\\u0471\\u0460\\x03\\x02\\x02\\x02\\u0471' +\r\n    '\\u0464\\x03\\x02\\x02\\x02\\u0471\\u0468\\x03\\x02\\x02\\x02\\u0471\\u046B\\x03\\x02' +\r\n    '\\x02\\x02\\u0471\\u046C\\x03\\x02\\x02\\x02\\u0471\\u046E\\x03\\x02\\x02\\x02\\u0472' +\r\n    'i\\x03\\x02\\x02\\x02\\u0473\\u0475\\x05\\u010C\\x87\\x02\\u0474\\u0473\\x03\\x02\\x02' +\r\n    '\\x02\\u0474\\u0475\\x03\\x02\\x02\\x02\\u0475\\u0476\\x03\\x02\\x02\\x02\\u0476\\u0477' +\r\n    '\\x07\\x7F\\x02\\x02\\u0477\\u0478\\x07y\\x02\\x02\\u0478\\u047B\\x05f4\\x02\\u0479' +\r\n    '\\u047B\\x05l7\\x02\\u047A\\u0474\\x03\\x02\\x02\\x02\\u047A\\u0479\\x03\\x02\\x02\\x02' +\r\n    '\\u047Bk\\x03\\x02\\x02\\x02\\u047C\\u047E\\x05\\u010C\\x87\\x02\\u047D\\u047C\\x03' +\r\n    '\\x02\\x02\\x02\\u047D\\u047E\\x03\\x02\\x02\\x02\\u047E\\u0482\\x03\\x02\\x02\\x02\\u047F' +\r\n    '\\u0480\\x07\\n\\x02\\x02\\u0480\\u0483\\x05d3\\x02\\u0481\\u0483\\x07\\x15\\x02\\x02' +\r\n    '\\u0482\\u047F\\x03\\x02\\x02\\x02\\u0482\\u0481\\x03\\x02\\x02\\x02\\u0483\\u0484\\x03' +\r\n    '\\x02\\x02\\x02\\u0484\\u0485\\x07y\\x02\\x02\\u0485\\u0486\\x05n8\\x02\\u0486m\\x03' +\r\n    '\\x02\\x02\\x02\\u0487\\u048B\\x05h5\\x02\\u0488\\u048A\\x05h5\\x02\\u0489\\u0488\\x03' +\r\n    '\\x02\\x02\\x02\\u048A\\u048D\\x03\\x02\\x02\\x02\\u048B\\u0489\\x03\\x02\\x02\\x02\\u048B' +\r\n    '\\u048C\\x03\\x02\\x02\\x02\\u048Co\\x03\\x02\\x02\\x02\\u048D\\u048B\\x03\\x02\\x02' +\r\n    '\\x02\\u048E\\u0490\\x05b2\\x02\\u048F\\u048E\\x03\\x02\\x02\\x02\\u048F\\u0490\\x03' +\r\n    '\\x02\\x02\\x02\\u0490\\u0491\\x03\\x02\\x02\\x02\\u0491\\u0492\\x07{\\x02\\x02\\u0492' +\r\n    'q\\x03\\x02\\x02\\x02\\u0493\\u0495\\x07T\\x02\\x02\\u0494\\u0496\\x05t;\\x02\\u0495' +\r\n    '\\u0494\\x03\\x02\\x02\\x02\\u0495\\u0496\\x03\\x02\\x02\\x02\\u0496\\u0497\\x03\\x02' +\r\n    '\\x02\\x02\\u0497\\u0498\\x07U\\x02\\x02\\u0498s\\x03\\x02\\x02\\x02\\u0499\\u049D\\x05' +\r\n    'f4\\x02\\u049A\\u049C\\x05f4\\x02\\u049B\\u049A\\x03\\x02\\x02\\x02\\u049C\\u049F\\x03' +\r\n    '\\x02\\x02\\x02\\u049D\\u049B\\x03\\x02\\x02\\x02\\u049D\\u049E\\x03\\x02\\x02\\x02\\u049E' +\r\n    'u\\x03\\x02\\x02\\x02\\u049F\\u049D\\x03\\x02\\x02\\x02\\u04A0\\u04A1\\x07&\\x02\\x02' +\r\n    '\\u04A1\\u04A2\\x07P\\x02\\x02\\u04A2\\u04A3\\x05|?\\x02\\u04A3\\u04A4\\x07Q\\x02\\x02' +\r\n    '\\u04A4\\u04A5\\x05f4\\x02\\u04A5\\u04AF\\x03\\x02\\x02\\x02\\u04A6\\u04A7\\x07&\\x02' +\r\n    '\\x02\\u04A7\\u04A8\\x07P\\x02\\x02\\u04A8\\u04A9\\x05|?\\x02\\u04A9\\u04AA\\x07Q\\x02' +\r\n    '\\x02\\u04AA\\u04AB\\x05f4\\x02\\u04AB\\u04AC\\x07\\x1B\\x02\\x02\\u04AC\\u04AD\\x05' +\r\n    'f4\\x02\\u04AD\\u04AF\\x03\\x02\\x02\\x02\\u04AE\\u04A0\\x03\\x02\\x02\\x02\\u04AE\\u04A6' +\r\n    '\\x03\\x02\\x02\\x02\\u04AFw\\x03\\x02\\x02\\x02\\u04B0\\u04B1\\x07>\\x02\\x02\\u04B1' +\r\n    '\\u04B2\\x07P\\x02\\x02\\u04B2\\u04B3\\x05|?\\x02\\u04B3\\u04B4\\x07Q\\x02\\x02\\u04B4' +\r\n    '\\u04B5\\x07T\\x02\\x02\\u04B5\\u04B6\\x05z>\\x02\\u04B6\\u04B7\\x07U\\x02\\x02\\u04B7' +\r\n    'y\\x03\\x02\\x02\\x02\\u04B8\\u04BC\\x05l7\\x02\\u04B9\\u04BB\\x05l7\\x02\\u04BA\\u04B9' +\r\n    '\\x03\\x02\\x02\\x02\\u04BB\\u04BE\\x03\\x02\\x02\\x02\\u04BC\\u04BA\\x03\\x02\\x02\\x02' +\r\n    '\\u04BC\\u04BD\\x03\\x02\\x02\\x02\\u04BD{\\x03\\x02\\x02\\x02\\u04BE\\u04BC\\x03\\x02' +\r\n    '\\x02\\x02\\u04BF\\u04D0\\x05b2\\x02\\u04C0\\u04C2\\x05\\u010C\\x87\\x02\\u04C1\\u04C0' +\r\n    '\\x03\\x02\\x02\\x02\\u04C1\\u04C2\\x03\\x02\\x02\\x02\\u04C2\\u04C3\\x03\\x02\\x02\\x02' +\r\n    '\\u04C3\\u04C4\\x05\\xC0a\\x02\\u04C4\\u04C5\\x05\\u0126\\x94\\x02\\u04C5\\u04C6\\x07' +\r\n    '`\\x02\\x02\\u04C6\\u04C7\\x05\\u0158\\xAD\\x02\\u04C7\\u04D0\\x03\\x02\\x02\\x02\\u04C8' +\r\n    '\\u04CA\\x05\\u010C\\x87\\x02\\u04C9\\u04C8\\x03\\x02\\x02\\x02\\u04C9\\u04CA\\x03\\x02' +\r\n    '\\x02\\x02\\u04CA\\u04CB\\x03\\x02\\x02\\x02\\u04CB\\u04CC\\x05\\xC0a\\x02\\u04CC\\u04CD' +\r\n    '\\x05\\u0126\\x94\\x02\\u04CD\\u04CE\\x05\\u015C\\xAF\\x02\\u04CE\\u04D0\\x03\\x02\\x02' +\r\n    '\\x02\\u04CF\\u04BF\\x03\\x02\\x02\\x02\\u04CF\\u04C1\\x03\\x02\\x02\\x02\\u04CF\\u04C9' +\r\n    '\\x03\\x02\\x02\\x02\\u04D0}\\x03\\x02\\x02\\x02\\u04D1\\u04D2\\x07O\\x02\\x02\\u04D2' +\r\n    '\\u04D3\\x07P\\x02\\x02\\u04D3\\u04D4\\x05|?\\x02\\u04D4\\u04D5\\x07Q\\x02\\x02\\u04D5' +\r\n    '\\u04D6\\x05f4\\x02\\u04D6\\x7F\\x03\\x02\\x02\\x02\\u04D7\\u04D8\\x07\\x17\\x02\\x02' +\r\n    '\\u04D8\\u04D9\\x05r:\\x02\\u04D9\\u04DA\\x07O\\x02\\x02\\u04DA\\u04DB\\x07P\\x02\\x02' +\r\n    '\\u04DB\\u04DC\\x05b2\\x02\\u04DC\\u04DD\\x07Q\\x02\\x02\\u04DD\\u04DE\\x07{\\x02\\x02' +\r\n    '\\u04DE\\x81\\x03\\x02\\x02\\x02\\u04DF\\u04E0\\x07#\\x02\\x02\\u04E0\\u04E1\\x07P\\x02' +\r\n    '\\x02\\u04E1\\u04E3\\x05\\x86D\\x02\\u04E2\\u04E4\\x05|?\\x02\\u04E3\\u04E2\\x03\\x02' +\r\n    '\\x02\\x02\\u04E3\\u04E4\\x03\\x02\\x02\\x02\\u04E4\\u04E5\\x03\\x02\\x02\\x02\\u04E5' +\r\n    '\\u04E7\\x07{\\x02\\x02\\u04E6\\u04E8\\x05b2\\x02\\u04E7\\u04E6\\x03\\x02\\x02\\x02' +\r\n    '\\u04E7\\u04E8\\x03\\x02\\x02\\x02\\u04E8\\u04E9\\x03\\x02\\x02\\x02\\u04E9\\u04EA\\x07' +\r\n    'Q\\x02\\x02\\u04EA\\u04EB\\x05f4\\x02\\u04EB\\x83\\x03\\x02\\x02\\x02\\u04EC\\u04ED' +\r\n    '\\x07#\\x02\\x02\\u04ED\\u04EE\\x07P\\x02\\x02\\u04EE\\u04EF\\x05\\x88E\\x02\\u04EF' +\r\n    '\\u04F0\\x07y\\x02\\x02\\u04F0\\u04F1\\x05\\x8AF\\x02\\u04F1\\u04F2\\x07Q\\x02\\x02' +\r\n    '\\u04F2\\u04F3\\x05f4\\x02\\u04F3\\x85\\x03\\x02\\x02\\x02\\u04F4\\u04F8\\x05p9\\x02' +\r\n    '\\u04F5\\u04F8\\x05\\xA8U\\x02\\u04F6\\u04F8\\x05\\xB6\\\\\\x02\\u04F7\\u04F4\\x03\\x02' +\r\n    '\\x02\\x02\\u04F7\\u04F5\\x03\\x02\\x02\\x02\\u04F7\\u04F6\\x03\\x02\\x02\\x02\\u04F8' +\r\n    '\\x87\\x03\\x02\\x02\\x02\\u04F9\\u04FB\\x05\\u010C\\x87\\x02\\u04FA\\u04F9\\x03\\x02' +\r\n    '\\x02\\x02\\u04FA\\u04FB\\x03\\x02\\x02\\x02\\u04FB\\u04FC\\x03\\x02\\x02\\x02\\u04FC' +\r\n    '\\u04FD\\x05\\xC0a\\x02\\u04FD\\u04FE\\x05\\u0126\\x94\\x02\\u04FE\\x89\\x03\\x02\\x02' +\r\n    '\\x02\\u04FF\\u0502\\x05b2\\x02\\u0500\\u0502\\x05\\u015C\\xAF\\x02\\u0501\\u04FF\\x03' +\r\n    '\\x02\\x02\\x02\\u0501\\u0500\\x03\\x02\\x02\\x02\\u0502\\x8B\\x03\\x02\\x02\\x02\\u0503' +\r\n    '\\u0504\\x07%\\x02\\x02\\u0504\\u0505\\x07\\x7F\\x02\\x02\\u0505\\u0506\\x07{\\x02\\x02' +\r\n    '\\u0506\\x8D\\x03\\x02\\x02\\x02\\u0507\\u0508\\x07\\t\\x02\\x02\\u0508\\u0509\\x07{' +\r\n    '\\x02\\x02\\u0509\\x8F\\x03\\x02\\x02\\x02\\u050A\\u050B\\x07\\x13\\x02\\x02\\u050B\\u050C' +\r\n    '\\x07{\\x02\\x02\\u050C\\x91\\x03\\x02\\x02\\x02\\u050D\\u050F\\x076\\x02\\x02\\u050E' +\r\n    '\\u0510\\x05b2\\x02\\u050F\\u050E\\x03\\x02\\x02\\x02\\u050F\\u0510\\x03\\x02\\x02\\x02' +\r\n    '\\u0510\\u0511\\x03\\x02\\x02\\x02\\u0511\\u0517\\x07{\\x02\\x02\\u0512\\u0513\\x07' +\r\n    '6\\x02\\x02\\u0513\\u0514\\x05\\u015C\\xAF\\x02\\u0514\\u0515\\x07{\\x02\\x02\\u0515' +\r\n    '\\u0517\\x03\\x02\\x02\\x02\\u0516\\u050D\\x03\\x02\\x02\\x02\\u0516\\u0512\\x03\\x02' +\r\n    '\\x02\\x02\\u0517\\x93\\x03\\x02\\x02\\x02\\u0518\\u051B\\x05\\xB6\\\\\\x02\\u0519\\u051B' +\r\n    '\\x05\\xA2R\\x02\\u051A\\u0518\\x03\\x02\\x02\\x02\\u051A\\u0519\\x03\\x02\\x02\\x02' +\r\n    '\\u051B\\x95\\x03\\x02\\x02\\x02\\u051C\\u051D\\bL\\x01\\x02\\u051D\\u051E\\x05\\xA0' +\r\n    'Q\\x02\\u051E\\u0523\\x03\\x02\\x02\\x02\\u051F\\u0520\\f\\x03\\x02\\x02\\u0520\\u0522' +\r\n    '\\x05\\xA0Q\\x02\\u0521\\u051F\\x03\\x02\\x02\\x02\\u0522\\u0525\\x03\\x02\\x02\\x02' +\r\n    '\\u0523\\u0521\\x03\\x02\\x02\\x02\\u0523\\u0524\\x03\\x02\\x02\\x02\\u0524\\x97\\x03' +\r\n    '\\x02\\x02\\x02\\u0525\\u0523\\x03\\x02\\x02\\x02\\u0526\\u0528\\x05\\u016C\\xB7\\x02' +\r\n    '\\u0527\\u0526\\x03\\x02\\x02\\x02\\u0527\\u0528\\x03\\x02\\x02\\x02\\u0528\\x99\\x03' +\r\n    '\\x02\\x02\\x02\\u0529\\u052A\\x05\\x9EP\\x02\\u052A\\u052B\\x07T\\x02\\x02\\u052B\\u052C' +\r\n    '\\x05\\x98M\\x02\\u052C\\u052D\\x07U\\x02\\x02\\u052D\\x9B\\x03\\x02\\x02\\x02\\u052E' +\r\n    '\\u052F\\x05\\x9AN\\x02\\u052F\\u0530\\x07{\\x02\\x02\\u0530\\x9D\\x03\\x02\\x02\\x02' +\r\n    '\\u0531\\u0533\\x05\\u016A\\xB6\\x02\\u0532\\u0534\\x05\\u010C\\x87\\x02\\u0533\\u0532' +\r\n    '\\x03\\x02\\x02\\x02\\u0533\\u0534\\x03\\x02\\x02\\x02\\u0534\\u0536\\x03\\x02\\x02\\x02' +\r\n    '\\u0535\\u0537\\x05\\x0E\\b\\x02\\u0536\\u0535\\x03\\x02\\x02\\x02\\u0536\\u0537\\x03' +\r\n    '\\x02\\x02\\x02\\u0537\\u0538\\x03\\x02\\x02\\x02\\u0538\\u053A\\x05\\u0166\\xB4\\x02' +\r\n    '\\u0539\\u053B\\x05\\u0168\\xB5\\x02\\u053A\\u0539\\x03\\x02\\x02\\x02\\u053A\\u053B' +\r\n    '\\x03\\x02\\x02\\x02\\u053B\\u053D\\x03\\x02\\x02\\x02\\u053C\\u053E\\x05\\u017E\\xC0' +\r\n    '\\x02\\u053D\\u053C\\x03\\x02\\x02\\x02\\u053D\\u053E\\x03\\x02\\x02\\x02\\u053E\\u0547' +\r\n    '\\x03\\x02\\x02\\x02\\u053F\\u0541\\x05\\u016A\\xB6\\x02\\u0540\\u0542\\x05\\u010C\\x87' +\r\n    '\\x02\\u0541\\u0540\\x03\\x02\\x02\\x02\\u0541\\u0542\\x03\\x02\\x02\\x02\\u0542\\u0544' +\r\n    '\\x03\\x02\\x02\\x02\\u0543\\u0545\\x05\\u017E\\xC0\\x02\\u0544\\u0543\\x03\\x02\\x02' +\r\n    '\\x02\\u0544\\u0545\\x03\\x02\\x02\\x02\\u0545\\u0547\\x03\\x02\\x02\\x02\\u0546\\u0531' +\r\n    '\\x03\\x02\\x02\\x02\\u0546\\u053F\\x03\\x02\\x02\\x02\\u0547\\x9F\\x03\\x02\\x02\\x02' +\r\n    '\\u0548\\u0555\\x05\\xA8U\\x02\\u0549\\u0555\\x05\\xB4[\\x02\\u054A\\u0555\\x05\\xA4' +\r\n    'S\\x02\\u054B\\u0555\\x05\\x9CO\\x02\\u054C\\u0555\\x05\\u014C\\xA7\\x02\\u054D\\u0555' +\r\n    '\\x05\\u019C\\xCF\\x02\\u054E\\u0555\\x05\\u01B0\\xD9\\x02\\u054F\\u0555\\x05\\u01B2' +\r\n    '\\xDA\\x02\\u0550\\u0555\\x05\\u010A\\x86\\x02\\u0551\\u0555\\x05\\xF2z\\x02\\u0552' +\r\n    '\\u0555\\x05\\xBA^\\x02\\u0553\\u0555\\x05\\xBC_\\x02\\u0554\\u0548\\x03\\x02\\x02\\x02' +\r\n    '\\u0554\\u0549\\x03\\x02\\x02\\x02\\u0554\\u054A\\x03\\x02\\x02\\x02\\u0554\\u054B\\x03' +\r\n    '\\x02\\x02\\x02\\u0554\\u054C\\x03\\x02\\x02\\x02\\u0554\\u054D\\x03\\x02\\x02\\x02\\u0554' +\r\n    '\\u054E\\x03\\x02\\x02\\x02\\u0554\\u054F\\x03\\x02\\x02\\x02\\u0554\\u0550\\x03\\x02' +\r\n    '\\x02\\x02\\u0554\\u0551\\x03\\x02\\x02\\x02\\u0554\\u0552\\x03\\x02\\x02\\x02\\u0554' +\r\n    '\\u0553\\x03\\x02\\x02\\x02\\u0555\\xA1\\x03\\x02\\x02\\x02\\u0556\\u055E\\x05\\u0108' +\r\n    '\\x85\\x02\\u0557\\u055E\\x05\\u0100\\x81\\x02\\u0558\\u055E\\x05\\u0104\\x83\\x02\\u0559' +\r\n    '\\u055E\\x05\\u0106\\x84\\x02\\u055A\\u055E\\x05\\xB8]\\x02\\u055B\\u055E\\x05\\xA6' +\r\n    'T\\x02\\u055C\\u055E\\x05\\xE2r\\x02\\u055D\\u0556\\x03\\x02\\x02\\x02\\u055D\\u0557' +\r\n    '\\x03\\x02\\x02\\x02\\u055D\\u0558\\x03\\x02\\x02\\x02\\u055D\\u0559\\x03\\x02\\x02\\x02' +\r\n    '\\u055D\\u055A\\x03\\x02\\x02\\x02\\u055D\\u055B\\x03\\x02\\x02\\x02\\u055D\\u055C\\x03' +\r\n    '\\x02\\x02\\x02\\u055E\\xA3\\x03\\x02\\x02\\x02\\u055F\\u0562\\x05\\xB6\\\\\\x02\\u0560' +\r\n    '\\u0562\\x05\\xA2R\\x02\\u0561\\u055F\\x03\\x02\\x02\\x02\\u0561\\u0560\\x03\\x02\\x02' +\r\n    '\\x02\\u0562\\xA5\\x03\\x02\\x02\\x02\\u0563\\u0564\\x07J\\x02\\x02\\u0564\\u0566\\x07' +\r\n    '\\x7F\\x02\\x02\\u0565\\u0567\\x05\\u010C\\x87\\x02\\u0566\\u0565\\x03\\x02\\x02\\x02' +\r\n    '\\u0566\\u0567\\x03\\x02\\x02\\x02\\u0567\\u0568\\x03\\x02\\x02\\x02\\u0568\\u0569\\x07' +\r\n    '`\\x02\\x02\\u0569\\u056A\\x05\\u013A\\x9E\\x02\\u056A\\u056B\\x07{\\x02\\x02\\u056B' +\r\n    '\\xA7\\x03\\x02\\x02\\x02\\u056C\\u056D\\x05\\xAAV\\x02\\u056D\\u056E\\x07{\\x02\\x02' +\r\n    '\\u056E\\xA9\\x03\\x02\\x02\\x02\\u056F\\u0571\\x05\\u010C\\x87\\x02\\u0570\\u056F\\x03' +\r\n    '\\x02\\x02\\x02\\u0570\\u0571\\x03\\x02\\x02\\x02\\u0571\\u0573\\x03\\x02\\x02\\x02\\u0572' +\r\n    '\\u0574\\x05\\xC4c\\x02\\u0573\\u0572\\x03\\x02\\x02\\x02\\u0573\\u0574\\x03\\x02\\x02' +\r\n    '\\x02\\u0574\\u057C\\x03\\x02\\x02\\x02\\u0575\\u0577\\x05\\xCCg\\x02\\u0576\\u0578' +\r\n    '\\x05\\xAEX\\x02\\u0577\\u0576\\x03\\x02\\x02\\x02\\u0577\\u0578\\x03\\x02\\x02\\x02' +\r\n    '\\u0578\\u057D\\x03\\x02\\x02\\x02\\u0579\\u057A\\x05\\xACW\\x02\\u057A\\u057B\\x05' +\r\n    '\\xAEX\\x02\\u057B\\u057D\\x03\\x02\\x02\\x02\\u057C\\u0575\\x03\\x02\\x02\\x02\\u057C' +\r\n    '\\u0579\\x03\\x02\\x02\\x02\\u057D\\xAB\\x03\\x02\\x02\\x02\\u057E\\u057F\\x07=\\x02' +\r\n    '\\x02\\u057F\\u0580\\x05\\u0166\\xB4\\x02\\u0580\\u0581\\x07T\\x02\\x02\\u0581\\u0582' +\r\n    '\\x05\\x98M\\x02\\u0582\\u0583\\x07U\\x02\\x02\\u0583\\xAD\\x03\\x02\\x02\\x02\\u0584' +\r\n    '\\u0589\\x05\\xB0Y\\x02\\u0585\\u0586\\x07u\\x02\\x02\\u0586\\u0588\\x05\\xB0Y\\x02' +\r\n    '\\u0587\\u0585\\x03\\x02\\x02\\x02\\u0588\\u058B\\x03\\x02\\x02\\x02\\u0589\\u0587\\x03' +\r\n    '\\x02\\x02\\x02\\u0589\\u058A\\x03\\x02\\x02\\x02\\u058A\\xAF\\x03\\x02\\x02\\x02\\u058B' +\r\n    '\\u0589\\x03\\x02\\x02\\x02\\u058C\\u058E\\x05\\u0130\\x99\\x02\\u058D\\u058C\\x03\\x02' +\r\n    '\\x02\\x02\\u058E\\u0591\\x03\\x02\\x02\\x02\\u058F\\u058D\\x03\\x02\\x02\\x02\\u058F' +\r\n    '\\u0590\\x03\\x02\\x02\\x02\\u0590\\u0592\\x03\\x02\\x02\\x02\\u0591\\u058F\\x03\\x02' +\r\n    '\\x02\\x02\\u0592\\u059A\\x05\\u0138\\x9D\\x02\\u0593\\u0595\\x07R\\x02\\x02\\u0594' +\r\n    '\\u0596\\x07\\x80\\x02\\x02\\u0595\\u0594\\x03\\x02\\x02\\x02\\u0595\\u0596\\x03\\x02' +\r\n    '\\x02\\x02\\u0596\\u0597\\x03\\x02\\x02\\x02\\u0597\\u0599\\x07S\\x02\\x02\\u0598\\u0593' +\r\n    '\\x03\\x02\\x02\\x02\\u0599\\u059C\\x03\\x02\\x02\\x02\\u059A\\u0598\\x03\\x02\\x02\\x02' +\r\n    '\\u059A\\u059B\\x03\\x02\\x02\\x02\\u059B\\u059F\\x03\\x02\\x02\\x02\\u059C\\u059A\\x03' +\r\n    '\\x02\\x02\\x02\\u059D\\u059E\\x07`\\x02\\x02\\u059E\\u05A0\\x05\\u0158\\xAD\\x02\\u059F' +\r\n    '\\u059D\\x03\\x02\\x02\\x02\\u059F\\u05A0\\x03\\x02\\x02\\x02\\u05A0\\xB1\\x03\\x02\\x02' +\r\n    '\\x02\\u05A1\\u05A2\\x07R\\x02\\x02\\u05A2\\u05A3\\x07S\\x02\\x02\\u05A3\\xB3\\x03\\x02' +\r\n    '\\x02\\x02\\u05A4\\u05A6\\x05\\u010C\\x87\\x02\\u05A5\\u05A4\\x03\\x02\\x02\\x02\\u05A5' +\r\n    '\\u05A6\\x03\\x02\\x02\\x02\\u05A6\\u05A8\\x03\\x02\\x02\\x02\\u05A7\\u05A9\\x05\\xC4' +\r\n    'c\\x02\\u05A8\\u05A7';\r\nCPP14Parser._serializedATNSegment3 = '\\x03\\x02\\x02\\x02\\u05A8\\u05A9\\x03\\x02\\x02\\x02\\u05A9\\u05AA\\x03\\x02\\x02\\x02' +\r\n    '\\u05AA\\u05AC\\x05\\u014E\\xA8\\x02\\u05AB\\u05AD\\x05\\u0178\\xBD\\x02\\u05AC\\u05AB' +\r\n    '\\x03\\x02\\x02\\x02\\u05AC\\u05AD\\x03\\x02\\x02\\x02\\u05AD\\u05AE\\x03\\x02\\x02\\x02' +\r\n    '\\u05AE\\u05AF\\x07{\\x02\\x02\\u05AF\\xB5\\x03\\x02\\x02\\x02\\u05B0\\u05B2\\x05\\xC0' +\r\n    'a\\x02\\u05B1\\u05B0\\x03\\x02\\x02\\x02\\u05B1\\u05B2\\x03\\x02\\x02\\x02\\u05B2\\u05B4' +\r\n    '\\x03\\x02\\x02\\x02\\u05B3\\u05B5\\x05\\u0122\\x92\\x02\\u05B4\\u05B3\\x03\\x02\\x02' +\r\n    '\\x02\\u05B4\\u05B5\\x03\\x02\\x02\\x02\\u05B5\\u05B6\\x03\\x02\\x02\\x02\\u05B6\\u05BF' +\r\n    '\\x07{\\x02\\x02\\u05B7\\u05B9\\x05\\u010C\\x87\\x02\\u05B8\\u05BA\\x05\\xC0a\\x02\\u05B9' +\r\n    '\\u05B8\\x03\\x02\\x02\\x02\\u05B9\\u05BA\\x03\\x02\\x02\\x02\\u05BA\\u05BB\\x03\\x02' +\r\n    '\\x02\\x02\\u05BB\\u05BC\\x05\\u0122\\x92\\x02\\u05BC\\u05BD\\x07{\\x02\\x02\\u05BD' +\r\n    '\\u05BF\\x03\\x02\\x02\\x02\\u05BE\\u05B1\\x03\\x02\\x02\\x02\\u05BE\\u05B7\\x03\\x02' +\r\n    '\\x02\\x02\\u05BF\\xB7\\x03\\x02\\x02\\x02\\u05C0\\u05C1\\x07;\\x02\\x02\\u05C1\\u05C2' +\r\n    '\\x07P\\x02\\x02\\u05C2\\u05C3\\x05d3\\x02\\u05C3\\u05C4\\x07u\\x02\\x02\\u05C4\\u05C5' +\r\n    '\\x07\\x88\\x02\\x02\\u05C5\\u05C6\\x07Q\\x02\\x02\\u05C6\\u05C7\\x07{\\x02\\x02\\u05C7' +\r\n    '\\xB9\\x03\\x02\\x02\\x02\\u05C8\\u05C9\\x07{\\x02\\x02\\u05C9\\xBB\\x03\\x02\\x02\\x02' +\r\n    '\\u05CA\\u05CB\\x05\\u010C\\x87\\x02\\u05CB\\u05CC\\x07{\\x02\\x02\\u05CC\\xBD\\x03' +\r\n    '\\x02\\x02\\x02\\u05CD\\u05D0\\x05\\xC2b\\x02\\u05CE\\u05D0\\x05\\xCCg\\x02\\u05CF\\u05CD' +\r\n    '\\x03\\x02\\x02\\x02\\u05CF\\u05CE\\x03\\x02\\x02\\x02\\u05D0\\xBF\\x03\\x02\\x02\\x02' +\r\n    '\\u05D1\\u05D3\\x05\\xBE`\\x02\\u05D2\\u05D4\\x05\\u010C\\x87\\x02\\u05D3\\u05D2\\x03' +\r\n    '\\x02\\x02\\x02\\u05D3\\u05D4\\x03\\x02\\x02\\x02\\u05D4\\u05D9\\x03\\x02\\x02\\x02\\u05D5' +\r\n    '\\u05D6\\x05\\xBE`\\x02\\u05D6\\u05D7\\x05\\xC0a\\x02\\u05D7\\u05D9\\x03\\x02\\x02\\x02' +\r\n    '\\u05D8\\u05D1\\x03\\x02\\x02\\x02\\u05D8\\u05D5\\x03\\x02\\x02\\x02\\u05D9\\xC1\\x03' +\r\n    '\\x02\\x02\\x02\\u05DA\\u05E0\\x05\\xC6d\\x02\\u05DB\\u05E0\\x05\\xC8e\\x02\\u05DC\\u05E0' +\r\n    '\\x07$\\x02\\x02\\u05DD\\u05E0\\x07E\\x02\\x02\\u05DE\\u05E0\\x07\\x11\\x02\\x02\\u05DF' +\r\n    '\\u05DA\\x03\\x02\\x02\\x02\\u05DF\\u05DB\\x03\\x02\\x02\\x02\\u05DF\\u05DC\\x03\\x02' +\r\n    '\\x02\\x02\\u05DF\\u05DD\\x03\\x02\\x02\\x02\\u05DF\\u05DE\\x03\\x02\\x02\\x02\\u05E0' +\r\n    '\\xC3\\x03\\x02\\x02\\x02\\u05E1\\u05E3\\x05\\xC2b\\x02\\u05E2\\u05E4\\x05\\u010C\\x87' +\r\n    '\\x02\\u05E3\\u05E2\\x03\\x02\\x02\\x02\\u05E3\\u05E4\\x03\\x02\\x02\\x02\\u05E4\\u05E9' +\r\n    '\\x03\\x02\\x02\\x02\\u05E5\\u05E6\\x05\\xC2b\\x02\\u05E6\\u05E7\\x05\\xC0a\\x02\\u05E7' +\r\n    '\\u05E9\\x03\\x02\\x02\\x02\\u05E8\\u05E1\\x03\\x02\\x02\\x02\\u05E8\\u05E5\\x03\\x02' +\r\n    '\\x02\\x02\\u05E9\\xC5\\x03\\x02\\x02\\x02\\u05EA\\u05EB\\t\\x04\\x02\\x02\\u05EB\\xC7' +\r\n    '\\x03\\x02\\x02\\x02\\u05EC\\u05ED\\t\\x05\\x02\\x02\\u05ED\\xC9\\x03\\x02\\x02\\x02\\u05EE' +\r\n    '\\u05EF\\x07\\x7F\\x02\\x02\\u05EF\\xCB\\x03\\x02\\x02\\x02\\u05F0\\u05F4\\x05\\xCEh' +\r\n    '\\x02\\u05F1\\u05F4\\x05\\x9AN\\x02\\u05F2\\u05F4\\x05\\xDEp\\x02\\u05F3\\u05F0\\x03' +\r\n    '\\x02\\x02\\x02\\u05F3\\u05F1\\x03\\x02\\x02\\x02\\u05F3\\u05F2\\x03\\x02\\x02\\x02\\u05F4' +\r\n    '\\xCD\\x03\\x02\\x02\\x02\\u05F5\\u05FA\\x05\\xD4k\\x02\\u05F6\\u05FA\\x05\\xDAn\\x02' +\r\n    '\\u05F7\\u05FA\\x05\\u01AE\\xD8\\x02\\u05F8\\u05FA\\x05\\u0134\\x9B\\x02\\u05F9\\u05F5' +\r\n    '\\x03\\x02\\x02\\x02\\u05F9\\u05F6\\x03\\x02\\x02\\x02\\u05F9\\u05F7\\x03\\x02\\x02\\x02' +\r\n    '\\u05F9\\u05F8\\x03\\x02\\x02\\x02\\u05FA\\xCF\\x03\\x02\\x02\\x02\\u05FB\\u05FD\\x05' +\r\n    '\\xCCg\\x02\\u05FC\\u05FE\\x05\\u010C\\x87\\x02\\u05FD\\u05FC\\x03\\x02\\x02\\x02\\u05FD' +\r\n    '\\u05FE\\x03\\x02\\x02\\x02\\u05FE\\u0603\\x03\\x02\\x02\\x02\\u05FF\\u0600\\x05\\xCC' +\r\n    'g\\x02\\u0600\\u0601\\x05\\xD0i\\x02\\u0601\\u0603\\x03\\x02\\x02\\x02\\u0602\\u05FB' +\r\n    '\\x03\\x02\\x02\\x02\\u0602\\u05FF\\x03\\x02\\x02\\x02\\u0603\\xD1\\x03\\x02\\x02\\x02' +\r\n    '\\u0604\\u0606\\x05\\xCEh\\x02\\u0605\\u0607\\x05\\u010C\\x87\\x02\\u0606\\u0605\\x03' +\r\n    '\\x02\\x02\\x02\\u0606\\u0607\\x03\\x02\\x02\\x02\\u0607\\u060C\\x03\\x02\\x02\\x02\\u0608' +\r\n    '\\u0609\\x05\\xCEh\\x02\\u0609\\u060A\\x05\\xD2j\\x02\\u060A\\u060C\\x03\\x02\\x02\\x02' +\r\n    '\\u060B\\u0604\\x03\\x02\\x02\\x02\\u060B\\u0608\\x03\\x02\\x02\\x02\\u060C\\xD3\\x03' +\r\n    '\\x02\\x02\\x02\\u060D\\u060F\\x05\\x0E\\b\\x02\\u060E\\u060D\\x03\\x02\\x02\\x02\\u060E' +\r\n    '\\u060F\\x03\\x02\\x02\\x02\\u060F\\u0610\\x03\\x02\\x02\\x02\\u0610\\u0629\\x05\\xD6' +\r\n    'l\\x02\\u0611\\u0612\\x05\\x0E\\b\\x02\\u0612\\u0613\\x07?\\x02\\x02\\u0613\\u0614\\x05' +\r\n    '\\u01A4\\xD3\\x02\\u0614\\u0629\\x03\\x02\\x02\\x02\\u0615\\u0629\\x07\\f\\x02\\x02\\u0616' +\r\n    '\\u0629\\x07\\r\\x02\\x02\\u0617\\u0629\\x07\\x0E\\x02\\x02\\u0618\\u0629\\x07N\\x02' +\r\n    '\\x02\\u0619\\u0629\\x07\\b\\x02\\x02\\u061A\\u0629\\x077\\x02\\x02\\u061B\\u0629\\x07' +\r\n    '(\\x02\\x02\\u061C\\u0629\\x07)\\x02\\x02\\u061D\\u0629\\x078\\x02\\x02\\u061E\\u0620' +\r\n    '\\x07I\\x02\\x02\\u061F\\u0621\\x05\\xD4k\\x02\\u0620\\u061F\\x03\\x02\\x02\\x02\\u0620' +\r\n    '\\u0621\\x03\\x02\\x02\\x02\\u0621\\u0629\\x03\\x02\\x02\\x02\\u0622\\u0629\\x07\"\\x02' +\r\n    '\\x02\\u0623\\u0629\\x07\\x18\\x02\\x02\\u0624\\u0629\\x07L\\x02\\x02\\u0625\\u0629' +\r\n    '\\x07\\x07\\x02\\x02\\u0626\\u0629\\x05\\xD8m\\x02\\u0627\\u0629\\x07\\x19\\x02\\x02' +\r\n    '\\u0628\\u060E\\x03\\x02\\x02\\x02\\u0628\\u0611\\x03\\x02\\x02\\x02\\u0628\\u0615\\x03' +\r\n    '\\x02\\x02\\x02\\u0628\\u0616\\x03\\x02\\x02\\x02\\u0628\\u0617\\x03\\x02\\x02\\x02\\u0628' +\r\n    '\\u0618\\x03\\x02\\x02\\x02\\u0628\\u0619\\x03\\x02\\x02\\x02\\u0628\\u061A\\x03\\x02' +\r\n    '\\x02\\x02\\u0628\\u061B\\x03\\x02\\x02\\x02\\u0628\\u061C\\x03\\x02\\x02\\x02\\u0628' +\r\n    '\\u061D\\x03\\x02\\x02\\x02\\u0628\\u061E\\x03\\x02\\x02\\x02\\u0628\\u0622\\x03\\x02' +\r\n    '\\x02\\x02\\u0628\\u0623\\x03\\x02\\x02\\x02\\u0628\\u0624\\x03\\x02\\x02\\x02\\u0628' +\r\n    '\\u0625\\x03\\x02\\x02\\x02\\u0628\\u0626\\x03\\x02\\x02\\x02\\u0628\\u0627\\x03\\x02' +\r\n    '\\x02\\x02\\u0629\\xD5\\x03\\x02\\x02\\x02\\u062A\\u062F\\x05\\u015E\\xB0\\x02\\u062B' +\r\n    '\\u062F\\x05\\xDCo\\x02\\u062C\\u062F\\x05\\xCAf\\x02\\u062D\\u062F\\x05\\u01A4\\xD3' +\r\n    '\\x02\\u062E\\u062A\\x03\\x02\\x02\\x02\\u062E\\u062B\\x03\\x02\\x02\\x02\\u062E\\u062C' +\r\n    '\\x03\\x02\\x02\\x02\\u062E\\u062D\\x03\\x02\\x02\\x02\\u062F\\xD7\\x03\\x02\\x02\\x02' +\r\n    '\\u0630\\u0631\\x07\\x14\\x02\\x02\\u0631\\u0632\\x07P\\x02\\x02\\u0632\\u0633\\x05' +\r\n    'b2\\x02\\u0633\\u0634\\x07Q\\x02\\x02\\u0634\\u063A\\x03\\x02\\x02\\x02\\u0635\\u0636' +\r\n    '\\x07\\x14\\x02\\x02\\u0636\\u0637\\x07P\\x02\\x02\\u0637\\u0638\\x07\\x07\\x02\\x02' +\r\n    '\\u0638\\u063A\\x07Q\\x02\\x02\\u0639\\u0630\\x03\\x02\\x02\\x02\\u0639\\u0635\\x03' +\r\n    '\\x02\\x02\\x02\\u063A\\xD9\\x03\\x02\\x02\\x02\\u063B\\u063D\\x05\\u016A\\xB6\\x02\\u063C' +\r\n    '\\u063E\\x05\\u010C\\x87\\x02\\u063D\\u063C\\x03\\x02\\x02\\x02\\u063D\\u063E\\x03\\x02' +\r\n    '\\x02\\x02\\u063E\\u0640\\x03\\x02\\x02\\x02\\u063F\\u0641\\x05\\x0E\\b\\x02\\u0640\\u063F' +\r\n    '\\x03\\x02\\x02\\x02\\u0640\\u0641\\x03\\x02\\x02\\x02\\u0641\\u0642\\x03\\x02\\x02\\x02' +\r\n    '\\u0642\\u0643\\x07\\x7F\\x02\\x02\\u0643\\u0654\\x03\\x02\\x02\\x02\\u0644\\u0645\\x05' +\r\n    '\\u016A\\xB6\\x02\\u0645\\u0646\\x05\\u01A4\\xD3\\x02\\u0646\\u0654\\x03\\x02\\x02\\x02' +\r\n    '\\u0647\\u0648\\x05\\u016A\\xB6\\x02\\u0648\\u064A\\x05\\x0E\\b\\x02\\u0649\\u064B\\x07' +\r\n    '?\\x02\\x02\\u064A\\u0649\\x03\\x02\\x02\\x02\\u064A\\u064B\\x03\\x02\\x02\\x02\\u064B' +\r\n    '\\u064C\\x03\\x02\\x02\\x02\\u064C\\u064D\\x05\\u01A4\\xD3\\x02\\u064D\\u0654\\x03\\x02' +\r\n    '\\x02\\x02\\u064E\\u0650\\x07\\x1C\\x02\\x02\\u064F\\u0651\\x05\\x0E\\b\\x02\\u0650\\u064F' +\r\n    '\\x03\\x02\\x02\\x02\\u0650\\u0651\\x03\\x02\\x02\\x02\\u0651\\u0652\\x03\\x02\\x02\\x02' +\r\n    '\\u0652\\u0654\\x07\\x7F\\x02\\x02\\u0653\\u063B\\x03\\x02\\x02\\x02\\u0653\\u0644\\x03' +\r\n    '\\x02\\x02\\x02\\u0653\\u0647\\x03\\x02\\x02\\x02\\u0653\\u064E\\x03\\x02\\x02\\x02\\u0654' +\r\n    '\\xDB\\x03\\x02\\x02\\x02\\u0655\\u0656\\x07\\x7F\\x02\\x02\\u0656\\xDD\\x03\\x02\\x02' +\r\n    '\\x02\\u0657\\u0658\\x05\\xE0q\\x02\\u0658\\u065A\\x07T\\x02\\x02\\u0659\\u065B\\x05' +\r\n    '\\xE8u\\x02\\u065A\\u0659\\x03\\x02\\x02\\x02\\u065A\\u065B\\x03\\x02\\x02\\x02\\u065B' +\r\n    '\\u065C\\x03\\x02\\x02\\x02\\u065C\\u065D\\x07U\\x02\\x02\\u065D\\u0665\\x03\\x02\\x02' +\r\n    '\\x02\\u065E\\u065F\\x05\\xE0q\\x02\\u065F\\u0660\\x07T\\x02\\x02\\u0660\\u0661\\x05' +\r\n    '\\xE8u\\x02\\u0661\\u0662\\x07u\\x02\\x02\\u0662\\u0663\\x07U\\x02\\x02\\u0663\\u0665' +\r\n    '\\x03\\x02\\x02\\x02\\u0664\\u0657\\x03\\x02\\x02\\x02\\u0664\\u065E\\x03\\x02\\x02\\x02' +\r\n    '\\u0665\\xDF\\x03\\x02\\x02\\x02\\u0666\\u0668\\x05\\xE4s\\x02\\u0667\\u0669\\x05\\u010C' +\r\n    '\\x87\\x02\\u0668\\u0667\\x03\\x02\\x02\\x02\\u0668\\u0669\\x03\\x02\\x02\\x02\\u0669' +\r\n    '\\u066B\\x03\\x02\\x02\\x02\\u066A\\u066C\\x07\\x7F\\x02\\x02\\u066B\\u066A\\x03\\x02' +\r\n    '\\x02\\x02\\u066B\\u066C\\x03\\x02\\x02\\x02\\u066C\\u066E\\x03\\x02\\x02\\x02\\u066D' +\r\n    '\\u066F\\x05\\xE6t\\x02\\u066E\\u066D\\x03\\x02\\x02\\x02\\u066E\\u066F\\x03\\x02\\x02' +\r\n    '\\x02\\u066F\\u067A\\x03\\x02\\x02\\x02\\u0670\\u0672\\x05\\xE4s\\x02\\u0671\\u0673' +\r\n    '\\x05\\u010C\\x87\\x02\\u0672\\u0671\\x03\\x02\\x02\\x02\\u0672\\u0673\\x03\\x02\\x02' +\r\n    '\\x02\\u0673\\u0674\\x03\\x02\\x02\\x02\\u0674\\u0675\\x05\\x0E\\b\\x02\\u0675\\u0677' +\r\n    '\\x07\\x7F\\x02\\x02\\u0676\\u0678\\x05\\xE6t\\x02\\u0677\\u0676\\x03\\x02\\x02\\x02' +\r\n    '\\u0677\\u0678\\x03\\x02\\x02\\x02\\u0678\\u067A\\x03\\x02\\x02\\x02\\u0679\\u0666\\x03' +\r\n    '\\x02\\x02\\x02\\u0679\\u0670\\x03\\x02\\x02\\x02\\u067A\\xE1\\x03\\x02\\x02\\x02\\u067B' +\r\n    '\\u067D\\x05\\xE4s\\x02\\u067C\\u067E\\x05\\u010C\\x87\\x02\\u067D\\u067C\\x03\\x02' +\r\n    '\\x02\\x02\\u067D\\u067E\\x03\\x02\\x02\\x02\\u067E\\u067F\\x03\\x02\\x02\\x02\\u067F' +\r\n    '\\u0681\\x07\\x7F\\x02\\x02\\u0680\\u0682\\x05\\xE6t\\x02\\u0681\\u0680\\x03\\x02\\x02' +\r\n    '\\x02\\u0681\\u0682\\x03\\x02\\x02\\x02\\u0682\\u0683\\x03\\x02\\x02\\x02\\u0683\\u0684' +\r\n    '\\x07{\\x02\\x02\\u0684\\xE3\\x03\\x02\\x02\\x02\\u0685\\u068B\\x07\\x1C\\x02\\x02\\u0686' +\r\n    '\\u0687\\x07\\x1C\\x02\\x02\\u0687\\u068B\\x07\\x0F\\x02\\x02\\u0688\\u0689\\x07\\x1C' +\r\n    '\\x02\\x02\\u0689\\u068B\\x07=\\x02\\x02\\u068A\\u0685\\x03\\x02\\x02\\x02\\u068A\\u0686' +\r\n    '\\x03\\x02\\x02\\x02\\u068A\\u0688\\x03\\x02\\x02\\x02\\u068B\\xE5\\x03\\x02\\x02\\x02' +\r\n    '\\u068C\\u068D\\x07y\\x02\\x02\\u068D\\u068E\\x05\\xD0i\\x02\\u068E\\xE7\\x03\\x02\\x02' +\r\n    '\\x02\\u068F\\u0690\\bu\\x01\\x02\\u0690\\u0691\\x05\\xEAv\\x02\\u0691\\u0697\\x03\\x02' +\r\n    '\\x02\\x02\\u0692\\u0693\\f\\x03\\x02\\x02\\u0693\\u0694\\x07u\\x02\\x02\\u0694\\u0696' +\r\n    '\\x05\\xEAv\\x02\\u0695\\u0692\\x03\\x02\\x02\\x02\\u0696\\u0699\\x03\\x02\\x02\\x02' +\r\n    '\\u0697\\u0695\\x03\\x02\\x02\\x02\\u0697\\u0698\\x03\\x02\\x02\\x02\\u0698\\xE9\\x03' +\r\n    '\\x02\\x02\\x02\\u0699\\u0697\\x03\\x02\\x02\\x02\\u069A\\u06A0\\x05\\xECw\\x02\\u069B' +\r\n    '\\u069C\\x05\\xECw\\x02\\u069C\\u069D\\x07`\\x02\\x02\\u069D\\u069E\\x05d3\\x02\\u069E' +\r\n    '\\u06A0\\x03\\x02\\x02\\x02\\u069F\\u069A\\x03\\x02\\x02\\x02\\u069F\\u069B\\x03\\x02' +\r\n    '\\x02\\x02\\u06A0\\xEB\\x03\\x02\\x02\\x02\\u06A1\\u06A2\\x07\\x7F\\x02\\x02\\u06A2\\xED' +\r\n    '\\x03\\x02\\x02\\x02\\u06A3\\u06A6\\x05\\xF0y\\x02\\u06A4\\u06A6\\x05\\xFE\\x80\\x02' +\r\n    '\\u06A5\\u06A3\\x03\\x02\\x02\\x02\\u06A5\\u06A4\\x03\\x02\\x02\\x02\\u06A6\\xEF\\x03' +\r\n    '\\x02\\x02\\x02\\u06A7\\u06A8\\x07\\x7F\\x02\\x02\\u06A8\\xF1\\x03\\x02\\x02\\x02\\u06A9' +\r\n    '\\u06AC\\x05\\xF4{\\x02\\u06AA\\u06AC\\x05\\xFA~\\x02\\u06AB\\u06A9\\x03\\x02\\x02\\x02' +\r\n    '\\u06AB\\u06AA\\x03\\x02\\x02\\x02\\u06AC\\xF3\\x03\\x02\\x02\\x02\\u06AD\\u06B0\\x05' +\r\n    '\\xF6|\\x02\\u06AE\\u06B0\\x05\\xF8}\\x02\\u06AF\\u06AD\\x03\\x02\\x02\\x02\\u06AF\\u06AE' +\r\n    \"\\x03\\x02\\x02\\x02\\u06B0\\xF5\\x03\\x02\\x02\\x02\\u06B1\\u06B3\\x07'\\x02\\x02\\u06B2\" +\r\n    '\\u06B1\\x03\\x02\\x02\\x02\\u06B2\\u06B3\\x03\\x02\\x02\\x02\\u06B3\\u06B4\\x03\\x02' +\r\n    '\\x02\\x02\\u06B4\\u06B5\\x07+\\x02\\x02\\u06B5\\u06B6\\x07\\x7F\\x02\\x02\\u06B6\\u06B7' +\r\n    '\\x07T\\x02\\x02\\u06B7\\u06B8\\x05\\xFC\\x7F\\x02\\u06B8\\u06B9\\x07U\\x02\\x02\\u06B9' +\r\n    \"\\xF7\\x03\\x02\\x02\\x02\\u06BA\\u06BC\\x07'\\x02\\x02\\u06BB\\u06BA\\x03\\x02\\x02\" +\r\n    '\\x02\\u06BB\\u06BC\\x03\\x02\\x02\\x02\\u06BC\\u06BD\\x03\\x02\\x02\\x02\\u06BD\\u06BE' +\r\n    '\\x07+\\x02\\x02\\u06BE\\u06BF\\x05\\xF0y\\x02\\u06BF\\u06C0\\x07T\\x02\\x02\\u06C0' +\r\n    '\\u06C1\\x05\\xFC\\x7F\\x02\\u06C1\\u06C2\\x07U\\x02\\x02\\u06C2\\xF9\\x03\\x02\\x02' +\r\n    \"\\x02\\u06C3\\u06C5\\x07'\\x02\\x02\\u06C4\\u06C3\\x03\\x02\\x02\\x02\\u06C4\\u06C5\" +\r\n    '\\x03\\x02\\x02\\x02\\u06C5\\u06C6\\x03\\x02\\x02\\x02\\u06C6\\u06C7\\x07+\\x02\\x02' +\r\n    '\\u06C7\\u06C8\\x07T\\x02\\x02\\u06C8\\u06C9\\x05\\xFC\\x7F\\x02\\u06C9\\u06CA\\x07' +\r\n    'U\\x02\\x02\\u06CA\\xFB\\x03\\x02\\x02\\x02\\u06CB\\u06CD\\x05\\x96L\\x02\\u06CC\\u06CB' +\r\n    '\\x03\\x02\\x02\\x02\\u06CC\\u06CD\\x03\\x02\\x02\\x02\\u06CD\\xFD\\x03\\x02\\x02\\x02' +\r\n    '\\u06CE\\u06CF\\x07\\x7F\\x02\\x02\\u06CF\\xFF\\x03\\x02\\x02\\x02\\u06D0\\u06D1\\x07' +\r\n    '+\\x02\\x02\\u06D1\\u06D2\\x07\\x7F\\x02\\x02\\u06D2\\u06D3\\x07`\\x02\\x02\\u06D3\\u06D4' +\r\n    '\\x05\\u0102\\x82\\x02\\u06D4\\u06D5\\x07{\\x02\\x02\\u06D5\\u0101\\x03\\x02\\x02\\x02' +\r\n    '\\u06D6\\u06D8\\x05\\x0E\\b\\x02\\u06D7\\u06D6\\x03\\x02\\x02\\x02\\u06D7\\u06D8\\x03' +\r\n    '\\x02\\x02\\x02\\u06D8\\u06D9\\x03\\x02\\x02\\x02\\u06D9\\u06DA\\x05\\xEEx\\x02\\u06DA' +\r\n    '\\u0103\\x03\\x02\\x02\\x02\\u06DB\\u06DD\\x07J\\x02\\x02\\u06DC\\u06DE\\x07G\\x02\\x02' +\r\n    '\\u06DD\\u06DC\\x03\\x02\\x02\\x02\\u06DD\\u06DE\\x03\\x02\\x02\\x02\\u06DE\\u06DF\\x03' +\r\n    '\\x02\\x02\\x02\\u06DF\\u06E0\\x05\\x0E\\b\\x02\\u06E0\\u06E1\\x05\\n\\x06\\x02\\u06E1' +\r\n    '\\u06E2\\x07{\\x02\\x02\\u06E2\\u06E9\\x03\\x02\\x02\\x02\\u06E3\\u06E4\\x07J\\x02\\x02' +\r\n    '\\u06E4\\u06E5\\x07z\\x02\\x02\\u06E5\\u06E6\\x05\\n\\x06\\x02\\u06E6\\u06E7\\x07{\\x02' +\r\n    '\\x02\\u06E7\\u06E9\\x03\\x02\\x02\\x02\\u06E8\\u06DB\\x03\\x02\\x02\\x02\\u06E8\\u06E3' +\r\n    '\\x03\\x02\\x02\\x02\\u06E9\\u0105\\x03\\x02\\x02\\x02\\u06EA\\u06EC\\x05\\u010C\\x87' +\r\n    '\\x02\\u06EB\\u06EA\\x03\\x02\\x02\\x02\\u06EB\\u06EC\\x03\\x02\\x02\\x02\\u06EC\\u06ED' +\r\n    '\\x03\\x02\\x02\\x02\\u06ED\\u06EE\\x07J\\x02\\x02\\u06EE\\u06F0\\x07+\\x02\\x02\\u06EF' +\r\n    '\\u06F1\\x05\\x0E\\b\\x02\\u06F0\\u06EF\\x03\\x02\\x02\\x02\\u06F0\\u06F1\\x03\\x02\\x02' +\r\n    '\\x02\\u06F1\\u06F2\\x03\\x02\\x02\\x02\\u06F2\\u06F3\\x05\\xEEx\\x02\\u06F3\\u06F4' +\r\n    '\\x07{\\x02\\x02\\u06F4\\u0107\\x03\\x02\\x02\\x02\\u06F5\\u06F6\\x07\\x06\\x02\\x02' +\r\n    '\\u06F6\\u06F7\\x07P\\x02\\x02\\u06F7\\u06F8\\x07\\x88\\x02\\x02\\u06F8\\u06F9\\x07' +\r\n    'Q\\x02\\x02\\u06F9\\u06FA\\x07{\\x02\\x02\\u06FA\\u0109\\x03\\x02\\x02\\x02\\u06FB\\u06FC' +\r\n    '\\x07\\x1F\\x02\\x02\\u06FC\\u06FD\\x07\\x88\\x02\\x02\\u06FD\\u06FF\\x07T\\x02\\x02' +\r\n    '\\u06FE\\u0700\\x05\\x96L\\x02\\u06FF\\u06FE\\x03\\x02\\x02\\x02\\u06FF\\u0700\\x03' +\r\n    '\\x02\\x02\\x02\\u0700\\u0701\\x03\\x02\\x02\\x02\\u0701\\u0706\\x07U\\x02\\x02\\u0702' +\r\n    '\\u0703\\x07\\x1F\\x02\\x02\\u0703\\u0704\\x07\\x88\\x02\\x02\\u0704\\u0706\\x05\\xA0' +\r\n    'Q\\x02\\u0705\\u06FB\\x03\\x02\\x02\\x02\\u0705\\u0702\\x03\\x02\\x02\\x02\\u0706\\u010B' +\r\n    '\\x03\\x02\\x02\\x02\\u0707\\u0708\\b\\x87\\x01\\x02\\u0708\\u0709\\x05\\u010E\\x88\\x02' +\r\n    '\\u0709\\u070E\\x03\\x02\\x02\\x02\\u070A\\u070B\\f\\x03\\x02\\x02\\u070B\\u070D\\x05' +\r\n    '\\u010E\\x88\\x02\\u070C\\u070A\\x03\\x02\\x02\\x02\\u070D\\u0710\\x03\\x02\\x02\\x02' +\r\n    '\\u070E\\u070C\\x03\\x02\\x02\\x02\\u070E\\u070F\\x03\\x02\\x02\\x02\\u070F\\u010D\\x03' +\r\n    '\\x02\\x02\\x02\\u0710\\u070E\\x03\\x02\\x02\\x02\\u0711\\u0712\\x07R\\x02\\x02\\u0712' +\r\n    '\\u0713\\x07R\\x02\\x02\\u0713\\u0714\\x05\\u0112\\x8A\\x02\\u0714\\u0715\\x07S\\x02' +\r\n    '\\x02\\u0715\\u0716\\x07S\\x02\\x02\\u0716\\u0719\\x03\\x02\\x02\\x02\\u0717\\u0719' +\r\n    '\\x05\\u0110\\x89\\x02\\u0718\\u0711\\x03\\x02\\x02\\x02\\u0718\\u0717\\x03\\x02\\x02' +\r\n    '\\x02\\u0719\\u010F\\x03\\x02\\x02\\x02\\u071A\\u071B\\x07\\x04\\x02\\x02\\u071B\\u071C' +\r\n    '\\x07P\\x02\\x02\\u071C\\u071E\\x05\\u013A\\x9E\\x02\\u071D\\u071F\\x07~\\x02\\x02\\u071E' +\r\n    '\\u071D\\x03\\x02\\x02\\x02\\u071E\\u071F\\x03\\x02\\x02\\x02\\u071F\\u0720\\x03\\x02' +\r\n    '\\x02\\x02\\u0720\\u0721\\x07Q\\x02\\x02\\u0721\\u072B\\x03\\x02\\x02\\x02\\u0722\\u0723' +\r\n    '\\x07\\x04\\x02\\x02\\u0723\\u0724\\x07P\\x02\\x02\\u0724\\u0726\\x05d3\\x02\\u0725' +\r\n    '\\u0727\\x07~\\x02\\x02\\u0726\\u0725\\x03\\x02\\x02\\x02\\u0726\\u0727\\x03\\x02\\x02' +\r\n    '\\x02\\u0727\\u0728\\x03\\x02\\x02\\x02\\u0728\\u0729\\x07Q\\x02\\x02\\u0729\\u072B' +\r\n    '\\x03\\x02\\x02\\x02\\u072A\\u071A\\x03\\x02\\x02\\x02\\u072A\\u0722\\x03\\x02\\x02\\x02' +\r\n    '\\u072B\\u0111\\x03\\x02\\x02\\x02\\u072C\\u072E\\b\\x8A\\x01\\x02\\u072D\\u072F\\x05' +\r\n    '\\u0114\\x8B\\x02\\u072E\\u072D\\x03\\x02\\x02\\x02\\u072E\\u072F\\x03\\x02\\x02\\x02' +\r\n    '\\u072F\\u0734\\x03\\x02\\x02\\x02\\u0730\\u0731\\x05\\u0114\\x8B\\x02\\u0731\\u0732' +\r\n    '\\x07~\\x02\\x02\\u0732\\u0734\\x03\\x02\\x02\\x02\\u0733\\u072C\\x03\\x02\\x02\\x02' +\r\n    '\\u0733\\u0730\\x03\\x02\\x02\\x02\\u0734\\u0741\\x03\\x02\\x02\\x02\\u0735\\u0736\\f' +\r\n    '\\x05\\x02\\x02\\u0736\\u0738\\x07u\\x02\\x02\\u0737\\u0739\\x05\\u0114\\x8B\\x02\\u0738' +\r\n    '\\u0737\\x03\\x02\\x02\\x02\\u0738\\u0739\\x03\\x02\\x02\\x02\\u0739\\u0740\\x03\\x02' +\r\n    '\\x02\\x02\\u073A\\u073B\\f\\x03\\x02\\x02\\u073B\\u073C\\x07u\\x02\\x02\\u073C\\u073D' +\r\n    '\\x05\\u0114\\x8B\\x02\\u073D\\u073E\\x07~\\x02\\x02\\u073E\\u0740\\x03\\x02\\x02\\x02' +\r\n    '\\u073F\\u0735\\x03\\x02\\x02\\x02\\u073F\\u073A\\x03\\x02\\x02\\x02\\u0740\\u0743\\x03' +\r\n    '\\x02\\x02\\x02\\u0741\\u073F\\x03\\x02\\x02\\x02\\u0741\\u0742\\x03\\x02\\x02\\x02\\u0742' +\r\n    '\\u0113\\x03\\x02\\x02\\x02\\u0743\\u0741\\x03\\x02\\x02\\x02\\u0744\\u0746\\x05\\u0116' +\r\n    '\\x8C\\x02\\u0745\\u0747\\x05\\u011C\\x8F\\x02\\u0746\\u0745\\x03\\x02\\x02\\x02\\u0746' +\r\n    '\\u0747\\x03\\x02\\x02\\x02\\u0747\\u0115\\x03\\x02\\x02\\x02\\u0748\\u074B\\x07\\x7F' +\r\n    '\\x02\\x02\\u0749\\u074B\\x05\\u0118\\x8D\\x02\\u074A\\u0748\\x03\\x02\\x02\\x02\\u074A' +\r\n    '\\u0749\\x03\\x02\\x02\\x02\\u074B\\u0117\\x03\\x02\\x02\\x02\\u074C\\u074D\\x05\\u011A' +\r\n    '\\x8E\\x02\\u074D\\u074E\\x07z\\x02\\x02\\u074E\\u074F\\x07\\x7F\\x02\\x02\\u074F\\u0119' +\r\n    '\\x03\\x02\\x02\\x02\\u0750\\u0751\\x07\\x7F\\x02\\x02\\u0751\\u011B\\x03\\x02\\x02\\x02' +\r\n    '\\u0752\\u0753\\x07P\\x02\\x02\\u0753\\u0754\\x05\\u011E\\x90\\x02\\u0754\\u0755\\x07' +\r\n    'Q\\x02\\x02\\u0755\\u011D\\x03\\x02\\x02\\x02\\u0756\\u0758\\b\\x90\\x01\\x02\\u0757' +\r\n    '\\u0759\\x05\\u0120\\x91\\x02\\u0758\\u0757\\x03\\x02\\x02\\x02\\u0758\\u0759\\x03\\x02' +\r\n    '\\x02\\x02\\u0759\\u075E\\x03\\x02\\x02\\x02\\u075A\\u075B\\f\\x03\\x02\\x02\\u075B\\u075D' +\r\n    '\\x05\\u0120\\x91\\x02\\u075C\\u075A\\x03\\x02\\x02\\x02\\u075D\\u0760\\x03\\x02\\x02' +\r\n    '\\x02\\u075E\\u075C\\x03\\x02\\x02\\x02\\u075E\\u075F\\x03\\x02\\x02\\x02\\u075F\\u011F' +\r\n    '\\x03\\x02\\x02\\x02\\u0760\\u075E\\x03\\x02\\x02\\x02\\u0761\\u0762\\x07P\\x02\\x02' +\r\n    '\\u0762\\u0763\\x05\\u011E\\x90\\x02\\u0763\\u0764\\x07Q\\x02\\x02\\u0764\\u076E\\x03' +\r\n    '\\x02\\x02\\x02\\u0765\\u0766\\x07R\\x02\\x02\\u0766\\u0767\\x05\\u011E\\x90\\x02\\u0767' +\r\n    '\\u0768\\x07S\\x02\\x02\\u0768\\u076E\\x03\\x02\\x02\\x02\\u0769\\u076A\\x07T\\x02\\x02' +\r\n    '\\u076A\\u076B\\x05\\u011E\\x90\\x02\\u076B\\u076C\\x07U\\x02\\x02\\u076C\\u076E\\x03' +\r\n    '\\x02\\x02\\x02\\u076D\\u0761\\x03\\x02\\x02\\x02\\u076D\\u0765\\x03\\x02\\x02\\x02\\u076D' +\r\n    '\\u0769\\x03\\x02\\x02\\x02\\u076E\\u0121\\x03\\x02\\x02\\x02\\u076F\\u0774\\x05\\u0124' +\r\n    '\\x93\\x02\\u0770\\u0771\\x07u\\x02\\x02\\u0771\\u0773\\x05\\u0124\\x93\\x02\\u0772' +\r\n    '\\u0770\\x03\\x02\\x02\\x02\\u0773\\u0776\\x03\\x02\\x02\\x02\\u0774\\u0772\\x03\\x02' +\r\n    '\\x02\\x02\\u0774\\u0775\\x03\\x02\\x02\\x02\\u0775\\u0123\\x03\\x02\\x02\\x02\\u0776' +\r\n    '\\u0774\\x03\\x02\\x02\\x02\\u0777\\u0779\\x05\\u0126\\x94\\x02\\u0778\\u077A\\x05\\u0154' +\r\n    '\\xAB\\x02\\u0779\\u0778\\x03\\x02\\x02\\x02\\u0779\\u077A\\x03\\x02\\x02\\x02\\u077A' +\r\n    '\\u0125\\x03\\x02\\x02\\x02\\u077B\\u0781\\x05\\u0128\\x95\\x02\\u077C\\u077D\\x05\\u012A' +\r\n    '\\x96\\x02\\u077D\\u077E\\x05\\u012C\\x97\\x02\\u077E\\u077F\\x05\\u012E\\x98\\x02\\u077F' +\r\n    '\\u0781\\x03\\x02\\x02\\x02\\u0780\\u077B\\x03\\x02\\x02\\x02\\u0780\\u077C\\x03\\x02' +\r\n    '\\x02\\x02\\u0781\\u0127\\x03\\x02\\x02\\x02\\u0782\\u0784\\x05\\u0130\\x99\\x02\\u0783' +\r\n    '\\u0782\\x03\\x02\\x02\\x02\\u0784\\u0787\\x03\\x02\\x02\\x02\\u0785\\u0783\\x03\\x02' +\r\n    '\\x02\\x02\\u0785\\u0786\\x03\\x02\\x02\\x02\\u0786\\u0788\\x03\\x02\\x02\\x02\\u0787' +\r\n    '\\u0785\\x03\\x02\\x02\\x02\\u0788\\u0789\\x05\\u012A\\x96\\x02\\u0789\\u0129\\x03\\x02' +\r\n    '\\x02\\x02\\u078A\\u078B\\b\\x96\\x01\\x02\\u078B\\u078D\\x05\\u0138\\x9D\\x02\\u078C' +\r\n    '\\u078E\\x05\\u010C\\x87\\x02\\u078D\\u078C\\x03\\x02\\x02\\x02\\u078D\\u078E\\x03\\x02' +\r\n    '\\x02\\x02\\u078E\\u0794\\x03\\x02\\x02\\x02\\u078F\\u0790\\x07P\\x02\\x02\\u0790\\u0791' +\r\n    '\\x05\\u0128\\x95\\x02\\u0791\\u0792\\x07Q\\x02\\x02\\u0792\\u0794\\x03\\x02\\x02\\x02' +\r\n    '\\u0793\\u078A\\x03\\x02\\x02\\x02\\u0793\\u078F\\x03\\x02\\x02\\x02\\u0794\\u07A2\\x03' +\r\n    '\\x02\\x02\\x02\\u0795\\u0796\\f\\x05\\x02\\x02\\u0796\\u07A1\\x05\\u012C\\x97\\x02\\u0797' +\r\n    '\\u0798\\f\\x04\\x02\\x02\\u0798\\u079A\\x07R\\x02\\x02\\u0799\\u079B\\x05d3\\x02\\u079A' +\r\n    '\\u0799\\x03\\x02\\x02\\x02\\u079A\\u079B\\x03\\x02\\x02\\x02\\u079B\\u079C\\x03\\x02' +\r\n    '\\x02\\x02\\u079C\\u079E\\x07S\\x02\\x02\\u079D\\u079F\\x05\\u010C\\x87\\x02\\u079E' +\r\n    '\\u079D\\x03\\x02\\x02\\x02\\u079E\\u079F\\x03\\x02\\x02\\x02\\u079F\\u07A1\\x03\\x02' +\r\n    '\\x02\\x02\\u07A0\\u0795\\x03\\x02\\x02\\x02\\u07A0\\u0797\\x03\\x02\\x02\\x02\\u07A1' +\r\n    '\\u07A4\\x03\\x02\\x02\\x02\\u07A2\\u07A0\\x03\\x02\\x02\\x02\\u07A2\\u07A3\\x03\\x02' +\r\n    '\\x02\\x02\\u07A3\\u012B\\x03\\x02\\x02\\x02\\u07A4\\u07A2\\x03\\x02\\x02\\x02\\u07A5' +\r\n    '\\u07A6\\x07P\\x02\\x02\\u07A6\\u07A7\\x05\\u0146\\xA4\\x02\\u07A7\\u07A9\\x07Q\\x02' +\r\n    '\\x02\\u07A8\\u07AA\\x05\\u0132\\x9A\\x02\\u07A9\\u07A8\\x03\\x02\\x02\\x02\\u07A9\\u07AA' +\r\n    '\\x03\\x02\\x02\\x02\\u07AA\\u07AC\\x03\\x02\\x02\\x02\\u07AB\\u07AD\\x05\\u0136\\x9C' +\r\n    '\\x02\\u07AC\\u07AB\\x03\\x02\\x02\\x02\\u07AC\\u07AD\\x03\\x02\\x02\\x02\\u07AD\\u07AF' +\r\n    '\\x03\\x02\\x02\\x02\\u07AE\\u07B0\\x05\\u01C0\\xE1\\x02\\u07AF\\u07AE\\x03\\x02\\x02' +\r\n    '\\x02\\u07AF\\u07B0\\x03\\x02\\x02\\x02\\u07B0\\u07B2\\x03\\x02\\x02\\x02\\u07B1\\u07B3' +\r\n    '\\x05\\u010C\\x87\\x02\\u07B2\\u07B1\\x03\\x02\\x02\\x02\\u07B2\\u07B3\\x03\\x02\\x02' +\r\n    '\\x02\\u07B3\\u012D\\x03\\x02\\x02\\x02\\u07B4\\u07B5\\x07w\\x02\\x02\\u07B5\\u07B7' +\r\n    '\\x05\\xD2j\\x02\\u07B6\\u07B8\\x05\\u013C\\x9F\\x02\\u07B7\\u07B6\\x03\\x02\\x02\\x02' +\r\n    '\\u07B7\\u07B8\\x03\\x02\\x02\\x02\\u07B8\\u012F\\x03\\x02\\x02\\x02\\u07B9\\u07BB\\x07' +\r\n    'X\\x02\\x02\\u07BA\\u07BC\\x05\\u010C\\x87\\x02\\u07BB\\u07BA\\x03\\x02\\x02\\x02\\u07BB' +\r\n    '\\u07BC\\x03\\x02\\x02\\x02\\u07BC\\u07BE\\x03\\x02\\x02\\x02\\u07BD\\u07BF\\x05\\u0132' +\r\n    '\\x9A\\x02\\u07BE\\u07BD\\x03\\x02\\x02\\x02\\u07BE\\u07BF\\x03\\x02\\x02\\x02\\u07BF' +\r\n    '\\u07D1\\x03\\x02\\x02\\x02\\u07C0\\u07C2\\x07\\\\\\x02\\x02\\u07C1\\u07C3\\x05\\u010C' +\r\n    '\\x87\\x02\\u07C2\\u07C1\\x03\\x02\\x02\\x02\\u07C2\\u07C3\\x03\\x02\\x02\\x02\\u07C3' +\r\n    '\\u07D1\\x03\\x02\\x02\\x02\\u07C4\\u07C6\\x07q\\x02\\x02\\u07C5\\u07C7\\x05\\u010C' +\r\n    '\\x87\\x02\\u07C6\\u07C5\\x03\\x02\\x02\\x02\\u07C6\\u07C7\\x03\\x02\\x02\\x02\\u07C7' +\r\n    '\\u07D1\\x03\\x02\\x02\\x02\\u07C8\\u07C9\\x05\\x0E\\b\\x02\\u07C9\\u07CB\\x07X\\x02' +\r\n    '\\x02\\u07CA\\u07CC\\x05\\u010C\\x87\\x02\\u07CB\\u07CA\\x03\\x02\\x02\\x02\\u07CB\\u07CC' +\r\n    '\\x03\\x02\\x02\\x02\\u07CC\\u07CE\\x03\\x02\\x02\\x02\\u07CD\\u07CF\\x05\\u0132\\x9A' +\r\n    '\\x02\\u07CE\\u07CD\\x03\\x02\\x02\\x02\\u07CE\\u07CF\\x03\\x02\\x02\\x02\\u07CF\\u07D1' +\r\n    '\\x03\\x02\\x02\\x02\\u07D0\\u07B9\\x03\\x02\\x02\\x02\\u07D0\\u07C0\\x03\\x02\\x02\\x02' +\r\n    '\\u07D0\\u07C4\\x03\\x02\\x02\\x02\\u07D0\\u07C8\\x03\\x02\\x02\\x02\\u07D1\\u0131\\x03' +\r\n    '\\x02\\x02\\x02\\u07D2\\u07D4\\x05\\u0134\\x9B\\x02\\u07D3\\u07D5\\x05\\u0132\\x9A\\x02' +\r\n    '\\u07D4\\u07D3\\x03\\x02\\x02\\x02\\u07D4\\u07D5\\x03\\x02\\x02\\x02\\u07D5\\u0133\\x03' +\r\n    '\\x02\\x02\\x02\\u07D6\\u07D7\\t\\x06\\x02\\x02\\u07D7\\u0135\\x03\\x02\\x02\\x02\\u07D8' +\r\n    '\\u07D9\\t\\x07\\x02\\x02\\u07D9\\u0137\\x03\\x02\\x02\\x02\\u07DA\\u07DC\\x07~\\x02' +\r\n    '\\x02\\u07DB\\u07DA\\x03\\x02\\x02\\x02\\u07DB\\u07DC\\x03\\x02\\x02\\x02\\u07DC\\u07DD' +\r\n    '\\x03\\x02\\x02\\x02\\u07DD\\u07DE\\x05\\x06\\x04\\x02\\u07DE\\u0139\\x03\\x02\\x02\\x02' +\r\n    '\\u07DF\\u07E1\\x05\\xD0i\\x02\\u07E0\\u07E2\\x05\\u013C\\x9F\\x02\\u07E1\\u07E0\\x03' +\r\n    '\\x02\\x02\\x02\\u07E1\\u07E2\\x03\\x02\\x02\\x02\\u07E2\\u013B\\x03\\x02\\x02\\x02\\u07E3' +\r\n    '\\u07EC\\x05\\u013E\\xA0\\x02\\u07E4\\u07E6\\x05\\u0140\\xA1\\x02\\u07E5\\u07E4\\x03' +\r\n    '\\x02\\x02\\x02\\u07E5\\u07E6\\x03\\x02\\x02\\x02\\u07E6\\u07E7\\x03\\x02\\x02\\x02\\u07E7' +\r\n    '\\u07E8\\x05\\u012C\\x97\\x02\\u07E8\\u07E9\\x05\\u012E\\x98\\x02\\u07E9\\u07EC\\x03' +\r\n    '\\x02\\x02\\x02\\u07EA\\u07EC\\x05\\u0142\\xA2\\x02\\u07EB\\u07E3\\x03\\x02\\x02\\x02' +\r\n    '\\u07EB\\u07E5\\x03\\x02\\x02\\x02\\u07EB\\u07EA\\x03\\x02\\x02\\x02\\u07EC\\u013D\\x03' +\r\n    '\\x02\\x02\\x02\\u07ED\\u07F3\\x05\\u0140\\xA1\\x02\\u07EE\\u07F0\\x05\\u0130\\x99\\x02' +\r\n    '\\u07EF\\u07F1\\x05\\u013E\\xA0\\x02\\u07F0\\u07EF\\x03\\x02\\x02\\x02\\u07F0\\u07F1' +\r\n    '\\x03\\x02\\x02\\x02\\u07F1\\u07F3\\x03\\x02\\x02\\x02\\u07F2\\u07ED\\x03\\x02\\x02\\x02' +\r\n    '\\u07F2\\u07EE\\x03\\x02\\x02\\x02\\u07F3\\u013F\\x03\\x02\\x02\\x02\\u07F4\\u07F5\\b' +\r\n    '\\xA1\\x01\\x02\\u07F5\\u0803\\x05\\u012C\\x97\\x02\\u07F6\\u07F8\\x07R\\x02\\x02\\u07F7' +\r\n    '\\u07F9\\x05d3\\x02\\u07F8\\u07F7\\x03\\x02\\x02\\x02\\u07F8\\u07F9\\x03\\x02\\x02\\x02' +\r\n    '\\u07F9\\u07FA\\x03\\x02\\x02\\x02\\u07FA\\u07FC\\x07S\\x02\\x02\\u07FB\\u07FD\\x05' +\r\n    '\\u010C\\x87\\x02\\u07FC\\u07FB\\x03\\x02\\x02\\x02\\u07FC\\u07FD\\x03\\x02\\x02\\x02' +\r\n    '\\u07FD\\u0803\\x03\\x02\\x02\\x02\\u07FE\\u07FF\\x07P\\x02\\x02\\u07FF\\u0800\\x05' +\r\n    '\\u013E\\xA0\\x02\\u0800\\u0801\\x07Q\\x02\\x02\\u0801\\u0803\\x03\\x02\\x02\\x02\\u0802' +\r\n    '\\u07F4\\x03\\x02\\x02\\x02\\u0802\\u07F6\\x03\\x02\\x02\\x02\\u0802\\u07FE\\x03\\x02' +\r\n    '\\x02\\x02\\u0803\\u0811\\x03\\x02\\x02\\x02\\u0804\\u0805\\f\\x07\\x02\\x02\\u0805\\u0810' +\r\n    '\\x05\\u012C\\x97\\x02\\u0806\\u0807\\f\\x05\\x02\\x02\\u0807\\u0809\\x07R\\x02\\x02' +\r\n    '\\u0808\\u080A\\x05d3\\x02\\u0809\\u0808\\x03\\x02\\x02\\x02\\u0809\\u080A\\x03\\x02' +\r\n    '\\x02\\x02\\u080A\\u080B\\x03\\x02\\x02\\x02\\u080B\\u080D\\x07S\\x02\\x02\\u080C\\u080E' +\r\n    '\\x05\\u010C\\x87\\x02\\u080D\\u080C\\x03\\x02\\x02\\x02\\u080D\\u080E\\x03\\x02\\x02' +\r\n    '\\x02\\u080E\\u0810\\x03\\x02\\x02\\x02\\u080F\\u0804\\x03\\x02\\x02\\x02\\u080F\\u0806' +\r\n    '\\x03\\x02\\x02\\x02\\u0810\\u0813\\x03\\x02\\x02\\x02\\u0811\\u080F\\x03\\x02\\x02\\x02' +\r\n    '\\u0811\\u0812\\x03\\x02\\x02\\x02\\u0812\\u0141\\x03\\x02\\x02\\x02\\u0813\\u0811\\x03' +\r\n    '\\x02\\x02\\x02\\u0814\\u0819\\x05\\u0144\\xA3\\x02\\u0815\\u0816\\x05\\u0130\\x99\\x02' +\r\n    '\\u0816\\u0817\\x05\\u0142\\xA2\\x02\\u0817\\u0819\\x03\\x02\\x02\\x02\\u0818\\u0814' +\r\n    '\\x03\\x02\\x02\\x02\\u0818\\u0815\\x03\\x02\\x02\\x02\\u0819\\u0143\\x03\\x02\\x02\\x02' +\r\n    '\\u081A\\u081B\\b\\xA3\\x01\\x02\\u081B\\u081C\\x07~\\x02\\x02\\u081C\\u082A\\x03\\x02' +\r\n    '\\x02\\x02\\u081D\\u081E\\f\\x05\\x02\\x02\\u081E\\u0829\\x05\\u012C\\x97\\x02\\u081F' +\r\n    '\\u0820\\f\\x04\\x02\\x02\\u0820\\u0822\\x07R\\x02\\x02\\u0821\\u0823\\x05d3\\x02\\u0822' +\r\n    '\\u0821\\x03\\x02\\x02\\x02\\u0822\\u0823\\x03\\x02\\x02\\x02\\u0823\\u0824\\x03\\x02' +\r\n    '\\x02\\x02\\u0824\\u0826\\x07S\\x02\\x02\\u0825\\u0827\\x05\\u010C\\x87\\x02\\u0826' +\r\n    '\\u0825\\x03\\x02\\x02\\x02\\u0826\\u0827\\x03\\x02\\x02\\x02\\u0827\\u0829\\x03\\x02' +\r\n    '\\x02\\x02\\u0828\\u081D\\x03\\x02\\x02\\x02\\u0828\\u081F\\x03\\x02\\x02\\x02\\u0829' +\r\n    '\\u082C\\x03\\x02\\x02\\x02\\u082A\\u0828\\x03\\x02\\x02\\x02\\u082A\\u082B\\x03\\x02' +\r\n    '\\x02\\x02\\u082B\\u0145\\x03\\x02\\x02\\x02\\u082C\\u082A\\x03\\x02\\x02\\x02\\u082D' +\r\n    '\\u082F\\x05\\u0148\\xA5\\x02\\u082E\\u082D\\x03\\x02\\x02\\x02\\u082E\\u082F\\x03\\x02' +\r\n    '\\x02\\x02\\u082F\\u0831\\x03\\x02\\x02\\x02\\u0830\\u0832\\x07~\\x02\\x02\\u0831\\u0830' +\r\n    '\\x03\\x02\\x02\\x02\\u0831\\u0832\\x03\\x02\\x02\\x02\\u0832\\u0838\\x03\\x02\\x02\\x02' +\r\n    '\\u0833\\u0834\\x05\\u0148\\xA5\\x02\\u0834\\u0835\\x07u\\x02\\x02\\u0835\\u0836\\x07' +\r\n    '~\\x02\\x02\\u0836\\u0838\\x03\\x02\\x02\\x02\\u0837\\u082E\\x03\\x02\\x02\\x02\\u0837' +\r\n    '\\u0833\\x03\\x02\\x02\\x02\\u0838\\u0147\\x03\\x02\\x02\\x02\\u0839\\u083A\\b\\xA5\\x01' +\r\n    '\\x02\\u083A\\u083B\\x05\\u014A\\xA6\\x02\\u083B\\u0841\\x03\\x02\\x02\\x02\\u083C\\u083D' +\r\n    '\\f\\x03\\x02\\x02\\u083D\\u083E\\x07u\\x02\\x02\\u083E\\u0840\\x05\\u014A\\xA6\\x02' +\r\n    '\\u083F\\u083C\\x03\\x02\\x02\\x02\\u0840\\u0843\\x03\\x02\\x02\\x02\\u0841\\u083F\\x03' +\r\n    '\\x02\\x02\\x02\\u0841\\u0842\\x03\\x02\\x02\\x02\\u0842\\u0149\\x03\\x02\\x02\\x02\\u0843' +\r\n    '\\u0841\\x03\\x02\\x02\\x02\\u0844\\u0846\\x05\\u010C\\x87\\x02\\u0845\\u0844\\x03\\x02' +\r\n    '\\x02\\x02\\u0845\\u0846\\x03\\x02\\x02\\x02\\u0846\\u0848\\x03\\x02\\x02\\x02\\u0847' +\r\n    '\\u0849\\x05\\xC4c\\x02\\u0848\\u0847\\x03\\x02\\x02\\x02\\u0848\\u0849\\x03\\x02\\x02' +\r\n    '\\x02\\u0849\\u084A\\x03\\x02\\x02\\x02\\u084A\\u084C\\x05\\xCCg\\x02\\u084B\\u084D' +\r\n    '\\x05\\xAEX\\x02\\u084C\\u084B\\x03\\x02\\x02\\x02\\u084C\\u084D\\x03\\x02\\x02\\x02' +\r\n    '\\u084D\\u014B\\x03\\x02\\x02\\x02\\u084E\\u0850\\x05\\u010C\\x87\\x02\\u084F\\u084E' +\r\n    '\\x03\\x02\\x02\\x02\\u084F\\u0850\\x03\\x02\\x02\\x02\\u0850\\u0852\\x03\\x02\\x02\\x02' +\r\n    '\\u0851\\u0853\\x05\\xC4c\\x02\\u0852\\u0851\\x03\\x02';\r\nCPP14Parser._serializedATNSegment4 = '\\x02\\x02\\u0852\\u0853\\x03\\x02\\x02\\x02\\u0853\\u0854\\x03\\x02\\x02\\x02\\u0854' +\r\n    '\\u0856\\x05\\u014E\\xA8\\x02\\u0855\\u0857\\x05\\u0178\\xBD\\x02\\u0856\\u0855\\x03' +\r\n    '\\x02\\x02\\x02\\u0856\\u0857\\x03\\x02\\x02\\x02\\u0857\\u0858\\x03\\x02\\x02\\x02\\u0858' +\r\n    '\\u0859\\x05\\u0152\\xAA\\x02\\u0859\\u014D\\x03\\x02\\x02\\x02\\u085A\\u085C\\x05\\xCC' +\r\n    'g\\x02\\u085B\\u085A\\x03\\x02\\x02\\x02\\u085B\\u085C\\x03\\x02\\x02\\x02\\u085C\\u0860' +\r\n    '\\x03\\x02\\x02\\x02\\u085D\\u085F\\x05\\u0130\\x99\\x02\\u085E\\u085D\\x03\\x02\\x02' +\r\n    '\\x02\\u085F\\u0862\\x03\\x02\\x02\\x02\\u0860\\u085E\\x03\\x02\\x02\\x02\\u0860\\u0861' +\r\n    '\\x03\\x02\\x02\\x02\\u0861\\u0863\\x03\\x02\\x02\\x02\\u0862\\u0860\\x03\\x02\\x02\\x02' +\r\n    '\\u0863\\u0864\\x05\\u0150\\xA9\\x02\\u0864\\u014F\\x03\\x02\\x02\\x02\\u0865\\u0866' +\r\n    '\\x05\\u0138\\x9D\\x02\\u0866\\u0867\\x07P\\x02\\x02\\u0867\\u0868\\x05\\u0146\\xA4' +\r\n    '\\x02\\u0868\\u0869\\x07Q\\x02\\x02\\u0869\\u0151\\x03\\x02\\x02\\x02\\u086A\\u086C' +\r\n    '\\x05\\u0190\\xC9\\x02\\u086B\\u086A\\x03\\x02\\x02\\x02\\u086B\\u086C\\x03\\x02\\x02' +\r\n    '\\x02\\u086C\\u086D\\x03\\x02\\x02\\x02\\u086D\\u0876\\x05r:\\x02\\u086E\\u0876\\x05' +\r\n    '\\u01B6\\xDC\\x02\\u086F\\u0870\\x07`\\x02\\x02\\u0870\\u0871\\x07\\x15\\x02\\x02\\u0871' +\r\n    '\\u0876\\x07{\\x02\\x02\\u0872\\u0873\\x07`\\x02\\x02\\u0873\\u0874\\x07\\x16\\x02\\x02' +\r\n    '\\u0874\\u0876\\x07{\\x02\\x02\\u0875\\u086B\\x03\\x02\\x02\\x02\\u0875\\u086E\\x03' +\r\n    '\\x02\\x02\\x02\\u0875\\u086F\\x03\\x02\\x02\\x02\\u0875\\u0872\\x03\\x02\\x02\\x02\\u0876' +\r\n    '\\u0153\\x03\\x02\\x02\\x02\\u0877\\u087D\\x05\\u0156\\xAC\\x02\\u0878\\u0879\\x07P' +\r\n    '\\x02\\x02\\u0879\\u087A\\x05(\\x15\\x02\\u087A\\u087B\\x07Q\\x02\\x02\\u087B\\u087D' +\r\n    '\\x03\\x02\\x02\\x02\\u087C\\u0877\\x03\\x02\\x02\\x02\\u087C\\u0878\\x03\\x02\\x02\\x02' +\r\n    '\\u087D\\u0155\\x03\\x02\\x02\\x02\\u087E\\u087F\\x07`\\x02\\x02\\u087F\\u0882\\x05' +\r\n    '\\u0158\\xAD\\x02\\u0880\\u0882\\x05\\u015C\\xAF\\x02\\u0881\\u087E\\x03\\x02\\x02\\x02' +\r\n    '\\u0881\\u0880\\x03\\x02\\x02\\x02\\u0882\\u0157\\x03\\x02\\x02\\x02\\u0883\\u0886\\x05' +\r\n    '^0\\x02\\u0884\\u0886\\x05\\u015C\\xAF\\x02\\u0885\\u0883\\x03\\x02\\x02\\x02\\u0885' +\r\n    '\\u0884\\x03\\x02\\x02\\x02\\u0886\\u0159\\x03\\x02\\x02\\x02\\u0887\\u088C\\x05\\u0158' +\r\n    '\\xAD\\x02\\u0888\\u0889\\x07u\\x02\\x02\\u0889\\u088B\\x05\\u0158\\xAD\\x02\\u088A' +\r\n    '\\u0888\\x03\\x02\\x02\\x02\\u088B\\u088E\\x03\\x02\\x02\\x02\\u088C\\u088A\\x03\\x02' +\r\n    '\\x02\\x02\\u088C\\u088D\\x03\\x02\\x02\\x02\\u088D\\u015B\\x03\\x02\\x02\\x02\\u088E' +\r\n    '\\u088C\\x03\\x02\\x02\\x02\\u088F\\u0890\\x07T\\x02\\x02\\u0890\\u0892\\x05\\u015A' +\r\n    '\\xAE\\x02\\u0891\\u0893\\x07u\\x02\\x02\\u0892\\u0891\\x03\\x02\\x02\\x02\\u0892\\u0893' +\r\n    '\\x03\\x02\\x02\\x02\\u0893\\u0894\\x03\\x02\\x02\\x02\\u0894\\u0895\\x07U\\x02\\x02' +\r\n    '\\u0895\\u0899\\x03\\x02\\x02\\x02\\u0896\\u0897\\x07T\\x02\\x02\\u0897\\u0899\\x07' +\r\n    'U\\x02\\x02\\u0898\\u088F\\x03\\x02\\x02\\x02\\u0898\\u0896\\x03\\x02\\x02\\x02\\u0899' +\r\n    '\\u015D\\x03\\x02\\x02\\x02\\u089A\\u089D\\x07\\x7F\\x02\\x02\\u089B\\u089D\\x05\\u01A4' +\r\n    '\\xD3\\x02\\u089C\\u089A\\x03\\x02\\x02\\x02\\u089C\\u089B\\x03\\x02\\x02\\x02\\u089D' +\r\n    '\\u015F\\x03\\x02\\x02\\x02\\u089E\\u089F\\x05\\u0164\\xB3\\x02\\u089F\\u08A0\\x05\\u0162' +\r\n    '\\xB2\\x02\\u08A0\\u0161\\x03\\x02\\x02\\x02\\u08A1\\u08A3\\x07T\\x02\\x02\\u08A2\\u08A4' +\r\n    '\\x05\\u016C\\xB7\\x02\\u08A3\\u08A2\\x03\\x02\\x02\\x02\\u08A3\\u08A4\\x03\\x02\\x02' +\r\n    '\\x02\\u08A4\\u08A5\\x03\\x02\\x02\\x02\\u08A5\\u08A6\\x07U\\x02\\x02\\u08A6\\u0163' +\r\n    '\\x03\\x02\\x02\\x02\\u08A7\\u08A9\\x05\\u016A\\xB6\\x02\\u08A8\\u08AA\\x05\\u010C\\x87' +\r\n    '\\x02\\u08A9\\u08A8\\x03\\x02\\x02\\x02\\u08A9\\u08AA\\x03\\x02\\x02\\x02\\u08AA\\u08AC' +\r\n    '\\x03\\x02\\x02\\x02\\u08AB\\u08AD\\x05\\x0E\\b\\x02\\u08AC\\u08AB\\x03\\x02\\x02\\x02' +\r\n    '\\u08AC\\u08AD\\x03\\x02\\x02\\x02\\u08AD\\u08AE\\x03\\x02\\x02\\x02\\u08AE\\u08B0\\x05' +\r\n    '\\u0166\\xB4\\x02\\u08AF\\u08B1\\x05\\u0168\\xB5\\x02\\u08B0\\u08AF\\x03\\x02\\x02\\x02' +\r\n    '\\u08B0\\u08B1\\x03\\x02\\x02\\x02\\u08B1\\u08B3\\x03\\x02\\x02\\x02\\u08B2\\u08B4\\x05' +\r\n    '\\u017E\\xC0\\x02\\u08B3\\u08B2\\x03\\x02\\x02\\x02\\u08B3\\u08B4\\x03\\x02\\x02\\x02' +\r\n    '\\u08B4\\u08BD\\x03\\x02\\x02\\x02\\u08B5\\u08B7\\x05\\u016A\\xB6\\x02\\u08B6\\u08B8' +\r\n    '\\x05\\u010C\\x87\\x02\\u08B7\\u08B6\\x03\\x02\\x02\\x02\\u08B7\\u08B8\\x03\\x02\\x02' +\r\n    '\\x02\\u08B8\\u08BA\\x03\\x02\\x02\\x02\\u08B9\\u08BB\\x05\\u017E\\xC0\\x02\\u08BA\\u08B9' +\r\n    '\\x03\\x02\\x02\\x02\\u08BA\\u08BB\\x03\\x02\\x02\\x02\\u08BB\\u08BD\\x03\\x02\\x02\\x02' +\r\n    '\\u08BC\\u08A7\\x03\\x02\\x02\\x02\\u08BC\\u08B5\\x03\\x02\\x02\\x02\\u08BD\\u0165\\x03' +\r\n    '\\x02\\x02\\x02\\u08BE\\u08C0\\x05\\x0E\\b\\x02\\u08BF\\u08BE\\x03\\x02\\x02\\x02\\u08BF' +\r\n    '\\u08C0\\x03\\x02\\x02\\x02\\u08C0\\u08C1\\x03\\x02\\x02\\x02\\u08C1\\u08C2\\x05\\u015E' +\r\n    '\\xB0\\x02\\u08C2\\u0167\\x03\\x02\\x02\\x02\\u08C3\\u08C4\\x07!\\x02\\x02\\u08C4\\u0169' +\r\n    '\\x03\\x02\\x02\\x02\\u08C5\\u08C6\\t\\b\\x02\\x02\\u08C6\\u016B\\x03\\x02\\x02\\x02\\u08C7' +\r\n    '\\u08C9\\x05\\u016E\\xB8\\x02\\u08C8\\u08CA\\x05\\u016C\\xB7\\x02\\u08C9\\u08C8\\x03' +\r\n    '\\x02\\x02\\x02\\u08C9\\u08CA\\x03\\x02\\x02\\x02\\u08CA\\u08D1\\x03\\x02\\x02\\x02\\u08CB' +\r\n    '\\u08CC\\x05\\u0188\\xC5\\x02\\u08CC\\u08CE\\x07y\\x02\\x02\\u08CD\\u08CF\\x05\\u016C' +\r\n    '\\xB7\\x02\\u08CE\\u08CD\\x03\\x02\\x02\\x02\\u08CE\\u08CF\\x03\\x02\\x02\\x02\\u08CF' +\r\n    '\\u08D1\\x03\\x02\\x02\\x02\\u08D0\\u08C7\\x03\\x02\\x02\\x02\\u08D0\\u08CB\\x03\\x02' +\r\n    '\\x02\\x02\\u08D1\\u016D\\x03\\x02\\x02\\x02\\u08D2\\u08DA\\x05\\u0170\\xB9\\x02\\u08D3' +\r\n    '\\u08DA\\x05\\u014C\\xA7\\x02\\u08D4\\u08DA\\x05\\u0104\\x83\\x02\\u08D5\\u08DA\\x05' +\r\n    '\\xB8]\\x02\\u08D6\\u08DA\\x05\\u019C\\xCF\\x02\\u08D7\\u08DA\\x05\\xA6T\\x02\\u08D8' +\r\n    '\\u08DA\\x05\\xBA^\\x02\\u08D9\\u08D2\\x03\\x02\\x02\\x02\\u08D9\\u08D3\\x03\\x02\\x02' +\r\n    '\\x02\\u08D9\\u08D4\\x03\\x02\\x02\\x02\\u08D9\\u08D5\\x03\\x02\\x02\\x02\\u08D9\\u08D6' +\r\n    '\\x03\\x02\\x02\\x02\\u08D9\\u08D7\\x03\\x02\\x02\\x02\\u08D9\\u08D8\\x03\\x02\\x02\\x02' +\r\n    '\\u08DA\\u016F\\x03\\x02\\x02\\x02\\u08DB\\u08DC\\x05\\u0172\\xBA\\x02\\u08DC\\u08DD' +\r\n    '\\x07{\\x02\\x02\\u08DD\\u0171\\x03\\x02\\x02\\x02\\u08DE\\u08E0\\x05\\u010C\\x87\\x02' +\r\n    '\\u08DF\\u08DE\\x03\\x02\\x02\\x02\\u08DF\\u08E0\\x03\\x02\\x02\\x02\\u08E0\\u08E2\\x03' +\r\n    '\\x02\\x02\\x02\\u08E1\\u08E3\\x05\\xC4c\\x02\\u08E2\\u08E1\\x03\\x02\\x02\\x02\\u08E2' +\r\n    '\\u08E3\\x03\\x02\\x02\\x02\\u08E3\\u08E4\\x03\\x02\\x02\\x02\\u08E4\\u08E8\\x05\\xCC' +\r\n    'g\\x02\\u08E5\\u08E7\\x05\\u0130\\x99\\x02\\u08E6\\u08E5\\x03\\x02\\x02\\x02\\u08E7' +\r\n    '\\u08EA\\x03\\x02\\x02\\x02\\u08E8\\u08E6\\x03\\x02\\x02\\x02\\u08E8\\u08E9\\x03\\x02' +\r\n    '\\x02\\x02\\u08E9\\u08EC\\x03\\x02\\x02\\x02\\u08EA\\u08E8\\x03\\x02\\x02\\x02\\u08EB' +\r\n    '\\u08ED\\x05\\u0174\\xBB\\x02\\u08EC\\u08EB\\x03\\x02\\x02\\x02\\u08EC\\u08ED\\x03\\x02' +\r\n    '\\x02\\x02\\u08ED\\u0173\\x03\\x02\\x02\\x02\\u08EE\\u08EF\\b\\xBB\\x01\\x02\\u08EF\\u08F0' +\r\n    '\\x05\\u0176\\xBC\\x02\\u08F0\\u08F6\\x03\\x02\\x02\\x02\\u08F1\\u08F2\\f\\x03\\x02\\x02' +\r\n    '\\u08F2\\u08F3\\x07u\\x02\\x02\\u08F3\\u08F5\\x05\\u0176\\xBC\\x02\\u08F4\\u08F1\\x03' +\r\n    '\\x02\\x02\\x02\\u08F5\\u08F8\\x03\\x02\\x02\\x02\\u08F6\\u08F4\\x03\\x02\\x02\\x02\\u08F6' +\r\n    '\\u08F7\\x03\\x02\\x02\\x02\\u08F7\\u0175\\x03\\x02\\x02\\x02\\u08F8\\u08F6\\x03\\x02' +\r\n    '\\x02\\x02\\u08F9\\u08FB\\x05\\u0138\\x9D\\x02\\u08FA\\u08FC\\x05\\u0178\\xBD\\x02\\u08FB' +\r\n    '\\u08FA\\x03\\x02\\x02\\x02\\u08FB\\u08FC\\x03\\x02\\x02\\x02\\u08FC\\u08FE\\x03\\x02' +\r\n    '\\x02\\x02\\u08FD\\u08FF\\x05\\u017C\\xBF\\x02\\u08FE\\u08FD\\x03\\x02\\x02\\x02\\u08FE' +\r\n    '\\u08FF\\x03\\x02\\x02\\x02\\u08FF\\u0912\\x03\\x02\\x02\\x02\\u0900\\u0903\\x05\\u0138' +\r\n    '\\x9D\\x02\\u0901\\u0902\\x07`\\x02\\x02\\u0902\\u0904\\x05\\u0158\\xAD\\x02\\u0903' +\r\n    '\\u0901\\x03\\x02\\x02\\x02\\u0903\\u0904\\x03\\x02\\x02\\x02\\u0904\\u0912\\x03\\x02' +\r\n    '\\x02\\x02\\u0905\\u0907\\x05\\u0138\\x9D\\x02\\u0906\\u0908\\x05\\u015C\\xAF\\x02\\u0907' +\r\n    '\\u0906\\x03\\x02\\x02\\x02\\u0907\\u0908\\x03\\x02\\x02\\x02\\u0908\\u0912\\x03\\x02' +\r\n    '\\x02\\x02\\u0909\\u090B\\x07\\x7F\\x02\\x02\\u090A\\u0909\\x03\\x02\\x02\\x02\\u090A' +\r\n    '\\u090B\\x03\\x02\\x02\\x02\\u090B\\u090D\\x03\\x02\\x02\\x02\\u090C\\u090E\\x05\\u010C' +\r\n    '\\x87\\x02\\u090D\\u090C\\x03\\x02\\x02\\x02\\u090D\\u090E\\x03\\x02\\x02\\x02\\u090E' +\r\n    '\\u090F\\x03\\x02\\x02\\x02\\u090F\\u0910\\x07y\\x02\\x02\\u0910\\u0912\\x05d3\\x02' +\r\n    '\\u0911\\u08F9\\x03\\x02\\x02\\x02\\u0911\\u0900\\x03\\x02\\x02\\x02\\u0911\\u0905\\x03' +\r\n    '\\x02\\x02\\x02\\u0911\\u090A\\x03\\x02\\x02\\x02\\u0912\\u0177\\x03\\x02\\x02\\x02\\u0913' +\r\n    '\\u0914\\b\\xBD\\x01\\x02\\u0914\\u0915\\x05\\u017A\\xBE\\x02\\u0915\\u091A\\x03\\x02' +\r\n    '\\x02\\x02\\u0916\\u0917\\f\\x03\\x02\\x02\\u0917\\u0919\\x05\\u017A\\xBE\\x02\\u0918' +\r\n    '\\u0916\\x03\\x02\\x02\\x02\\u0919\\u091C\\x03\\x02\\x02\\x02\\u091A\\u0918\\x03\\x02' +\r\n    '\\x02\\x02\\u091A\\u091B\\x03\\x02\\x02\\x02\\u091B\\u0179\\x03\\x02\\x02\\x02\\u091C' +\r\n    '\\u091A\\x03\\x02\\x02\\x02\\u091D\\u091E\\t\\t\\x02\\x02\\u091E\\u017B\\x03\\x02\\x02' +\r\n    '\\x02\\u091F\\u0920\\x07`\\x02\\x02\\u0920\\u0921\\x07\\x82\\x02\\x02\\u0921\\u017D' +\r\n    '\\x03\\x02\\x02\\x02\\u0922\\u0923\\x07y\\x02\\x02\\u0923\\u0924\\x05\\u0180\\xC1\\x02' +\r\n    '\\u0924\\u017F\\x03\\x02\\x02\\x02\\u0925\\u0926\\b\\xC1\\x01\\x02\\u0926\\u0928\\x05' +\r\n    '\\u0182\\xC2\\x02\\u0927\\u0929\\x07~\\x02\\x02\\u0928\\u0927\\x03\\x02\\x02\\x02\\u0928' +\r\n    '\\u0929\\x03\\x02\\x02\\x02\\u0929\\u0932\\x03\\x02\\x02\\x02\\u092A\\u092B\\f\\x03\\x02' +\r\n    '\\x02\\u092B\\u092C\\x07u\\x02\\x02\\u092C\\u092E\\x05\\u0182\\xC2\\x02\\u092D\\u092F' +\r\n    '\\x07~\\x02\\x02\\u092E\\u092D\\x03\\x02\\x02\\x02\\u092E\\u092F\\x03\\x02\\x02\\x02' +\r\n    '\\u092F\\u0931\\x03\\x02\\x02\\x02\\u0930\\u092A\\x03\\x02\\x02\\x02\\u0931\\u0934\\x03' +\r\n    '\\x02\\x02\\x02\\u0932\\u0930\\x03\\x02\\x02\\x02\\u0932\\u0933\\x03\\x02\\x02\\x02\\u0933' +\r\n    '\\u0181\\x03\\x02\\x02\\x02\\u0934\\u0932\\x03\\x02\\x02\\x02\\u0935\\u0937\\x05\\u010C' +\r\n    '\\x87\\x02\\u0936\\u0935\\x03\\x02\\x02\\x02\\u0936\\u0937\\x03\\x02\\x02\\x02\\u0937' +\r\n    '\\u0938\\x03\\x02\\x02\\x02\\u0938\\u094B\\x05\\u0186\\xC4\\x02\\u0939\\u093B\\x05\\u010C' +\r\n    '\\x87\\x02\\u093A\\u0939\\x03\\x02\\x02\\x02\\u093A\\u093B\\x03\\x02\\x02\\x02\\u093B' +\r\n    '\\u093C\\x03\\x02\\x02\\x02\\u093C\\u093E\\x07K\\x02\\x02\\u093D\\u093F\\x05\\u0188' +\r\n    '\\xC5\\x02\\u093E\\u093D\\x03\\x02\\x02\\x02\\u093E\\u093F\\x03\\x02\\x02\\x02\\u093F' +\r\n    '\\u0940\\x03\\x02\\x02\\x02\\u0940\\u094B\\x05\\u0186\\xC4\\x02\\u0941\\u0943\\x05\\u010C' +\r\n    '\\x87\\x02\\u0942\\u0941\\x03\\x02\\x02\\x02\\u0942\\u0943\\x03\\x02\\x02\\x02\\u0943' +\r\n    '\\u0944\\x03\\x02\\x02\\x02\\u0944\\u0946\\x05\\u0188\\xC5\\x02\\u0945\\u0947\\x07K' +\r\n    '\\x02\\x02\\u0946\\u0945\\x03\\x02\\x02\\x02\\u0946\\u0947\\x03\\x02\\x02\\x02\\u0947' +\r\n    '\\u0948\\x03\\x02\\x02\\x02\\u0948\\u0949\\x05\\u0186\\xC4\\x02\\u0949\\u094B\\x03\\x02' +\r\n    '\\x02\\x02\\u094A\\u0936\\x03\\x02\\x02\\x02\\u094A\\u093A\\x03\\x02\\x02\\x02\\u094A' +\r\n    '\\u0942\\x03\\x02\\x02\\x02\\u094B\\u0183\\x03\\x02\\x02\\x02\\u094C\\u094E\\x05\\x0E' +\r\n    '\\b\\x02\\u094D\\u094C\\x03\\x02\\x02\\x02\\u094D\\u094E\\x03\\x02\\x02\\x02\\u094E\\u094F' +\r\n    '\\x03\\x02\\x02\\x02\\u094F\\u0952\\x05\\u015E\\xB0\\x02\\u0950\\u0952\\x05\\xD8m\\x02' +\r\n    '\\u0951\\u094D\\x03\\x02\\x02\\x02\\u0951\\u0950\\x03\\x02\\x02\\x02\\u0952\\u0185\\x03' +\r\n    '\\x02\\x02\\x02\\u0953\\u0954\\x05\\u0184\\xC3\\x02\\u0954\\u0187\\x03\\x02\\x02\\x02' +\r\n    '\\u0955\\u0956\\t\\n\\x02\\x02\\u0956\\u0189\\x03\\x02\\x02\\x02\\u0957\\u0958\\x07/' +\r\n    '\\x02\\x02\\u0958\\u0959\\x05\\u018C\\xC7\\x02\\u0959\\u018B\\x03\\x02\\x02\\x02\\u095A' +\r\n    '\\u095C\\x05\\xD0i\\x02\\u095B\\u095D\\x05\\u018E\\xC8\\x02\\u095C\\u095B\\x03\\x02' +\r\n    '\\x02\\x02\\u095C\\u095D\\x03\\x02\\x02\\x02\\u095D\\u018D\\x03\\x02\\x02\\x02\\u095E' +\r\n    '\\u0960\\x05\\u0130\\x99\\x02\\u095F\\u0961\\x05\\u018E\\xC8\\x02\\u0960\\u095F\\x03' +\r\n    '\\x02\\x02\\x02\\u0960\\u0961\\x03\\x02\\x02\\x02\\u0961\\u018F\\x03\\x02\\x02\\x02\\u0962' +\r\n    '\\u0963\\x07y\\x02\\x02\\u0963\\u0964\\x05\\u0192\\xCA\\x02\\u0964\\u0191\\x03\\x02' +\r\n    '\\x02\\x02\\u0965\\u0967\\x05\\u0194\\xCB\\x02\\u0966\\u0968\\x07~\\x02\\x02\\u0967' +\r\n    '\\u0966\\x03\\x02\\x02\\x02\\u0967\\u0968\\x03\\x02\\x02\\x02\\u0968\\u0971\\x03\\x02' +\r\n    '\\x02\\x02\\u0969\\u096B\\x05\\u0194\\xCB\\x02\\u096A\\u096C\\x07~\\x02\\x02\\u096B' +\r\n    '\\u096A\\x03\\x02\\x02\\x02\\u096B\\u096C\\x03\\x02\\x02\\x02\\u096C\\u096D\\x03\\x02' +\r\n    '\\x02\\x02\\u096D\\u096E\\x07u\\x02\\x02\\u096E\\u096F\\x05\\u0192\\xCA\\x02\\u096F' +\r\n    '\\u0971\\x03\\x02\\x02\\x02\\u0970\\u0965\\x03\\x02\\x02\\x02\\u0970\\u0969\\x03\\x02' +\r\n    '\\x02\\x02\\u0971\\u0193\\x03\\x02\\x02\\x02\\u0972\\u0973\\x05\\u0196\\xCC\\x02\\u0973' +\r\n    '\\u0975\\x07P\\x02\\x02\\u0974\\u0976\\x05(\\x15\\x02\\u0975\\u0974\\x03\\x02\\x02\\x02' +\r\n    '\\u0975\\u0976\\x03\\x02\\x02\\x02\\u0976\\u0977\\x03\\x02\\x02\\x02\\u0977\\u0978\\x07' +\r\n    'Q\\x02\\x02\\u0978\\u097D\\x03\\x02\\x02\\x02\\u0979\\u097A\\x05\\u0196\\xCC\\x02\\u097A' +\r\n    '\\u097B\\x05\\u015C\\xAF\\x02\\u097B\\u097D\\x03\\x02\\x02\\x02\\u097C\\u0972\\x03\\x02' +\r\n    '\\x02\\x02\\u097C\\u0979\\x03\\x02\\x02\\x02\\u097D\\u0195\\x03\\x02\\x02\\x02\\u097E' +\r\n    '\\u0981\\x05\\u0184\\xC3\\x02\\u097F\\u0981\\x07\\x7F\\x02\\x02\\u0980\\u097E\\x03\\x02' +\r\n    '\\x02\\x02\\u0980\\u097F\\x03\\x02\\x02\\x02\\u0981\\u0197\\x03\\x02\\x02\\x02\\u0982' +\r\n    '\\u0983\\x07/\\x02\\x02\\u0983\\u0984\\x05\\u01CC\\xE7\\x02\\u0984\\u0199\\x03\\x02' +\r\n    '\\x02\\x02\\u0985\\u0986\\x07/\\x02\\x02\\u0986\\u0987\\x07\\x88\\x02\\x02\\u0987\\u098B' +\r\n    '\\x07\\x7F\\x02\\x02\\u0988\\u0989\\x07/\\x02\\x02\\u0989\\u098B\\x07\\x8C\\x02\\x02' +\r\n    '\\u098A\\u0985\\x03\\x02\\x02\\x02\\u098A\\u0988\\x03\\x02\\x02\\x02\\u098B\\u019B\\x03' +\r\n    '\\x02\\x02\\x02\\u098C\\u098D\\x07?\\x02\\x02\\u098D\\u098E\\x07a\\x02\\x02\\u098E\\u098F' +\r\n    '\\x05\\u019E\\xD0\\x02\\u098F\\u0990\\x07b\\x02\\x02\\u0990\\u0991\\x05\\xA0Q\\x02\\u0991' +\r\n    '\\u019D\\x03\\x02\\x02\\x02\\u0992\\u0993\\b\\xD0\\x01\\x02\\u0993\\u0994\\x05\\u01A0' +\r\n    '\\xD1\\x02\\u0994\\u099A\\x03\\x02\\x02\\x02\\u0995\\u0996\\f\\x03\\x02\\x02\\u0996\\u0997' +\r\n    '\\x07u\\x02\\x02\\u0997\\u0999\\x05\\u01A0\\xD1\\x02\\u0998\\u0995\\x03\\x02\\x02\\x02' +\r\n    '\\u0999\\u099C\\x03\\x02\\x02\\x02\\u099A\\u0998\\x03\\x02\\x02\\x02\\u099A\\u099B\\x03' +\r\n    '\\x02\\x02\\x02\\u099B\\u019F\\x03\\x02\\x02\\x02\\u099C\\u099A\\x03\\x02\\x02\\x02\\u099D' +\r\n    '\\u09A0\\x05\\u01A2\\xD2\\x02\\u099E\\u09A0\\x05\\u014A\\xA6\\x02\\u099F\\u099D\\x03' +\r\n    '\\x02\\x02\\x02\\u099F\\u099E\\x03\\x02\\x02\\x02\\u09A0\\u01A1\\x03\\x02\\x02\\x02\\u09A1' +\r\n    '\\u09A3\\x07\\x0F\\x02\\x02\\u09A2\\u09A4\\x07~\\x02\\x02\\u09A3\\u09A2\\x03\\x02\\x02' +\r\n    '\\x02\\u09A3\\u09A4\\x03\\x02\\x02\\x02\\u09A4\\u09A6\\x03\\x02\\x02\\x02\\u09A5\\u09A7' +\r\n    '\\x07\\x7F\\x02\\x02\\u09A6\\u09A5\\x03\\x02\\x02\\x02\\u09A6\\u09A7\\x03\\x02\\x02\\x02' +\r\n    '\\u09A7\\u09D2\\x03\\x02\\x02\\x02\\u09A8\\u09AA\\x07\\x0F\\x02\\x02\\u09A9\\u09AB\\x07' +\r\n    '\\x7F\\x02\\x02\\u09AA\\u09A9\\x03\\x02\\x02\\x02\\u09AA\\u09AB\\x03\\x02\\x02\\x02\\u09AB' +\r\n    '\\u09AC\\x03\\x02\\x02\\x02\\u09AC\\u09AD\\x07`\\x02\\x02\\u09AD\\u09D2\\x05\\u013A' +\r\n    '\\x9E\\x02\\u09AE\\u09B0\\x07G\\x02\\x02\\u09AF\\u09B1\\x07~\\x02\\x02\\u09B0\\u09AF' +\r\n    '\\x03\\x02\\x02\\x02\\u09B0\\u09B1\\x03\\x02\\x02\\x02\\u09B1\\u09B3\\x03\\x02\\x02\\x02' +\r\n    '\\u09B2\\u09B4\\x07\\x7F\\x02\\x02\\u09B3\\u09B2\\x03\\x02\\x02\\x02\\u09B3\\u09B4\\x03' +\r\n    '\\x02\\x02\\x02\\u09B4\\u09D2\\x03\\x02\\x02\\x02\\u09B5\\u09B7\\x07G\\x02\\x02\\u09B6' +\r\n    '\\u09B8\\x07\\x7F\\x02\\x02\\u09B7\\u09B6\\x03\\x02\\x02\\x02\\u09B7\\u09B8\\x03\\x02' +\r\n    '\\x02\\x02\\u09B8\\u09B9\\x03\\x02\\x02\\x02\\u09B9\\u09BA\\x07`\\x02\\x02\\u09BA\\u09D2' +\r\n    '\\x05\\u013A\\x9E\\x02\\u09BB\\u09BC\\x07?\\x02\\x02\\u09BC\\u09BD\\x07a\\x02\\x02\\u09BD' +\r\n    '\\u09BE\\x05\\u019E\\xD0\\x02\\u09BE\\u09BF\\x07b\\x02\\x02\\u09BF\\u09C1\\x07\\x0F' +\r\n    '\\x02\\x02\\u09C0\\u09C2\\x07~\\x02\\x02\\u09C1\\u09C0\\x03\\x02\\x02\\x02\\u09C1\\u09C2' +\r\n    '\\x03\\x02\\x02\\x02\\u09C2\\u09C4\\x03\\x02\\x02\\x02\\u09C3\\u09C5\\x07\\x7F\\x02\\x02' +\r\n    '\\u09C4\\u09C3\\x03\\x02\\x02\\x02\\u09C4\\u09C5\\x03\\x02\\x02\\x02\\u09C5\\u09D2\\x03' +\r\n    '\\x02\\x02\\x02\\u09C6\\u09C7\\x07?\\x02\\x02\\u09C7\\u09C8\\x07a\\x02\\x02\\u09C8\\u09C9' +\r\n    '\\x05\\u019E\\xD0\\x02\\u09C9\\u09CA\\x07b\\x02\\x02\\u09CA\\u09CC\\x07\\x0F\\x02\\x02' +\r\n    '\\u09CB\\u09CD\\x07\\x7F\\x02\\x02\\u09CC\\u09CB\\x03\\x02\\x02\\x02\\u09CC\\u09CD\\x03' +\r\n    '\\x02\\x02\\x02\\u09CD\\u09CE\\x03\\x02\\x02\\x02\\u09CE\\u09CF\\x07`\\x02\\x02\\u09CF' +\r\n    '\\u09D0\\x05\\x06\\x04\\x02\\u09D0\\u09D2\\x03\\x02\\x02\\x02\\u09D1\\u09A1\\x03\\x02' +\r\n    '\\x02\\x02\\u09D1\\u09A8\\x03\\x02\\x02\\x02\\u09D1\\u09AE\\x03\\x02\\x02\\x02\\u09D1' +\r\n    '\\u09B5\\x03\\x02\\x02\\x02\\u09D1\\u09BB\\x03\\x02\\x02\\x02\\u09D1\\u09C6\\x03\\x02' +\r\n    '\\x02\\x02\\u09D2\\u01A3\\x03\\x02\\x02\\x02\\u09D3\\u09D4\\x05\\u01A8\\xD5\\x02\\u09D4' +\r\n    '\\u09D6\\x07a\\x02\\x02\\u09D5\\u09D7\\x05\\u01AA\\xD6\\x02\\u09D6\\u09D5\\x03\\x02' +\r\n    '\\x02\\x02\\u09D6\\u09D7\\x03\\x02\\x02\\x02\\u09D7\\u09D8\\x03\\x02\\x02\\x02\\u09D8' +\r\n    '\\u09D9\\x07b\\x02\\x02\\u09D9\\u01A5\\x03\\x02\\x02\\x02\\u09DA\\u09EA\\x05\\u01A4' +\r\n    '\\xD3\\x02\\u09DB\\u09DC\\x05\\u0198\\xCD\\x02\\u09DC\\u09DE\\x07a\\x02\\x02\\u09DD' +\r\n    '\\u09DF\\x05\\u01AA\\xD6\\x02\\u09DE\\u09DD\\x03\\x02\\x02\\x02\\u09DE\\u09DF\\x03\\x02' +\r\n    '\\x02\\x02\\u09DF\\u09E0\\x03\\x02\\x02\\x02\\u09E0\\u09E1\\x07b\\x02\\x02\\u09E1\\u09EA' +\r\n    '\\x03\\x02\\x02\\x02\\u09E2\\u09E3\\x05\\u019A\\xCE\\x02\\u09E3\\u09E5\\x07a\\x02\\x02' +\r\n    '\\u09E4\\u09E6\\x05\\u01AA\\xD6\\x02\\u09E5\\u09E4\\x03\\x02\\x02\\x02\\u09E5\\u09E6' +\r\n    '\\x03\\x02\\x02\\x02\\u09E6\\u09E7\\x03\\x02\\x02\\x02\\u09E7\\u09E8\\x07b\\x02\\x02' +\r\n    '\\u09E8\\u09EA\\x03\\x02\\x02\\x02\\u09E9\\u09DA\\x03\\x02\\x02\\x02\\u09E9\\u09DB\\x03' +\r\n    '\\x02\\x02\\x02\\u09E9\\u09E2\\x03\\x02\\x02\\x02\\u09EA\\u01A7\\x03\\x02\\x02\\x02\\u09EB' +\r\n    '\\u09EC\\x07\\x7F\\x02\\x02\\u09EC\\u01A9\\x03\\x02\\x02\\x02\\u09ED\\u09EE\\b\\xD6\\x01' +\r\n    '\\x02\\u09EE\\u09F0\\x05\\u01AC\\xD7\\x02\\u09EF\\u09F1\\x07~\\x02\\x02\\u09F0\\u09EF' +\r\n    '\\x03\\x02\\x02\\x02\\u09F0\\u09F1\\x03\\x02\\x02\\x02\\u09F1\\u09FA\\x03\\x02\\x02\\x02' +\r\n    '\\u09F2\\u09F3\\f\\x03\\x02\\x02\\u09F3\\u09F4\\x07u\\x02\\x02\\u09F4\\u09F6\\x05\\u01AC' +\r\n    '\\xD7\\x02\\u09F5\\u09F7\\x07~\\x02\\x02\\u09F6\\u09F5\\x03\\x02\\x02\\x02\\u09F6\\u09F7' +\r\n    '\\x03\\x02\\x02\\x02\\u09F7\\u09F9\\x03\\x02\\x02\\x02\\u09F8\\u09F2\\x03\\x02\\x02\\x02' +\r\n    '\\u09F9\\u09FC\\x03\\x02\\x02\\x02\\u09FA\\u09F8\\x03\\x02\\x02\\x02\\u09FA\\u09FB\\x03' +\r\n    '\\x02\\x02\\x02\\u09FB\\u01AB\\x03\\x02\\x02\\x02\\u09FC\\u09FA\\x03\\x02\\x02\\x02\\u09FD' +\r\n    '\\u0A01\\x05d3\\x02\\u09FE\\u0A01\\x05\\u013A\\x9E\\x02\\u09FF\\u0A01\\x05\\x06\\x04' +\r\n    '\\x02\\u0A00\\u09FD\\x03\\x02\\x02\\x02\\u0A00\\u09FE\\x03\\x02\\x02\\x02\\u0A00\\u09FF' +\r\n    '\\x03\\x02\\x02\\x02\\u0A01\\u01AD\\x03\\x02\\x02\\x02\\u0A02\\u0A03\\x07G\\x02\\x02' +\r\n    '\\u0A03\\u0A04\\x05\\x0E\\b\\x02\\u0A04\\u0A05\\x07\\x7F\\x02\\x02\\u0A05\\u0A0E\\x03' +\r\n    '\\x02\\x02\\x02\\u0A06\\u0A07\\x07G\\x02\\x02\\u0A07\\u0A09\\x05\\x0E\\b\\x02\\u0A08' +\r\n    '\\u0A0A\\x07?\\x02\\x02\\u0A09\\u0A08\\x03\\x02\\x02\\x02\\u0A09\\u0A0A\\x03\\x02\\x02' +\r\n    '\\x02\\u0A0A\\u0A0B\\x03\\x02\\x02\\x02\\u0A0B\\u0A0C\\x05\\u01A4\\xD3\\x02\\u0A0C\\u0A0E' +\r\n    '\\x03\\x02\\x02\\x02\\u0A0D\\u0A02\\x03\\x02\\x02\\x02\\u0A0D\\u0A06\\x03\\x02\\x02\\x02' +\r\n    '\\u0A0E\\u01AF\\x03\\x02\\x02\\x02\\u0A0F\\u0A11\\x07\\x1F\\x02\\x02\\u0A10\\u0A0F\\x03' +\r\n    '\\x02\\x02\\x02\\u0A10\\u0A11\\x03\\x02\\x02\\x02\\u0A11\\u0A12\\x03\\x02\\x02\\x02\\u0A12' +\r\n    '\\u0A13\\x07?\\x02\\x02\\u0A13\\u0A14\\x05\\xA0Q\\x02\\u0A14\\u01B1\\x03\\x02\\x02\\x02' +\r\n    '\\u0A15\\u0A16\\x07?\\x02\\x02\\u0A16\\u0A17\\x07a\\x02\\x02\\u0A17\\u0A18\\x07b\\x02' +\r\n    '\\x02\\u0A18\\u0A19\\x05\\xA0Q\\x02\\u0A19\\u01B3\\x03\\x02\\x02\\x02\\u0A1A\\u0A1B' +\r\n    '\\x07D\\x02\\x02\\u0A1B\\u0A1C\\x05r:\\x02\\u0A1C\\u0A1D\\x05\\u01B8\\xDD\\x02\\u0A1D' +\r\n    '\\u01B5\\x03\\x02\\x02\\x02\\u0A1E\\u0A20\\x07D\\x02\\x02\\u0A1F\\u0A21\\x05\\u0190' +\r\n    '\\xC9\\x02\\u0A20\\u0A1F\\x03\\x02\\x02\\x02\\u0A20\\u0A21\\x03\\x02\\x02\\x02\\u0A21' +\r\n    '\\u0A22\\x03\\x02\\x02\\x02\\u0A22\\u0A23\\x05r:\\x02\\u0A23\\u0A24\\x05\\u01B8\\xDD' +\r\n    '\\x02\\u0A24\\u01B7\\x03\\x02\\x02\\x02\\u0A25\\u0A27\\x05\\u01BA\\xDE\\x02\\u0A26\\u0A28' +\r\n    '\\x05\\u01B8\\xDD\\x02\\u0A27\\u0A26\\x03\\x02\\x02\\x02\\u0A27\\u0A28\\x03\\x02\\x02' +\r\n    '\\x02\\u0A28\\u01B9\\x03\\x02\\x02\\x02\\u0A29\\u0A2A\\x07\\v\\x02\\x02\\u0A2A\\u0A2B' +\r\n    '\\x07P\\x02\\x02\\u0A2B\\u0A2C\\x05\\u01BC\\xDF\\x02\\u0A2C\\u0A2D\\x07Q\\x02\\x02\\u0A2D' +\r\n    '\\u0A2E\\x05r:\\x02\\u0A2E\\u01BB\\x03\\x02\\x02\\x02\\u0A2F\\u0A31\\x05\\u010C\\x87' +\r\n    '\\x02\\u0A30\\u0A2F\\x03\\x02\\x02\\x02\\u0A30\\u0A31\\x03\\x02\\x02\\x02\\u0A31\\u0A32' +\r\n    '\\x03\\x02\\x02\\x02\\u0A32\\u0A33\\x05\\xD0i\\x02\\u0A33\\u0A34\\x05\\u0126\\x94\\x02' +\r\n    '\\u0A34\\u0A3E\\x03\\x02\\x02\\x02\\u0A35\\u0A37\\x05\\u010C\\x87\\x02\\u0A36\\u0A35' +\r\n    '\\x03\\x02\\x02\\x02\\u0A36\\u0A37\\x03\\x02\\x02\\x02\\u0A37\\u0A38\\x03\\x02\\x02\\x02' +\r\n    '\\u0A38\\u0A3A\\x05\\xD0i\\x02\\u0A39\\u0A3B\\x05\\u013C\\x9F\\x02\\u0A3A\\u0A39\\x03' +\r\n    '\\x02\\x02\\x02\\u0A3A\\u0A3B\\x03\\x02\\x02\\x02\\u0A3B\\u0A3E\\x03\\x02\\x02\\x02\\u0A3C' +\r\n    '\\u0A3E\\x07~\\x02\\x02\\u0A3D\\u0A30\\x03\\x02\\x02\\x02\\u0A3D\\u0A36\\x03\\x02\\x02' +\r\n    '\\x02\\u0A3D\\u0A3C\\x03\\x02\\x02\\x02\\u0A3E\\u01BD\\x03\\x02\\x02\\x02\\u0A3F\\u0A41' +\r\n    '\\x07B\\x02\\x02\\u0A40\\u0A42\\x05^0\\x02\\u0A41\\u0A40\\x03\\x02\\x02\\x02\\u0A41' +\r\n    '\\u0A42\\x03\\x02\\x02\\x02\\u0A42\\u01BF\\x03\\x02\\x02\\x02\\u0A43\\u0A46\\x05\\u01C2' +\r\n    '\\xE2\\x02\\u0A44\\u0A46\\x05\\u01C6\\xE4\\x02\\u0A45\\u0A43\\x03\\x02\\x02\\x02\\u0A45' +\r\n    '\\u0A44\\x03\\x02\\x02\\x02\\u0A46\\u01C1\\x03\\x02\\x02\\x02\\u0A47\\u0A48\\x07B\\x02' +\r\n    '\\x02\\u0A48\\u0A4A\\x07P\\x02\\x02\\u0A49\\u0A4B\\x05\\u01C4\\xE3\\x02\\u0A4A\\u0A49' +\r\n    '\\x03\\x02\\x02\\x02\\u0A4A\\u0A4B\\x03\\x02\\x02\\x02\\u0A4B\\u0A4C\\x03\\x02\\x02\\x02' +\r\n    '\\u0A4C\\u0A4D\\x07Q\\x02\\x02\\u0A4D\\u01C3\\x03\\x02\\x02\\x02\\u0A4E\\u0A4F\\b\\xE3' +\r\n    '\\x01\\x02\\u0A4F\\u0A51\\x05\\u013A\\x9E\\x02\\u0A50\\u0A52\\x07~\\x02\\x02\\u0A51' +\r\n    '\\u0A50\\x03\\x02\\x02\\x02\\u0A51\\u0A52\\x03\\x02\\x02\\x02\\u0A52\\u0A5B\\x03\\x02' +\r\n    '\\x02\\x02\\u0A53\\u0A54\\f\\x03\\x02\\x02\\u0A54\\u0A55\\x07u\\x02\\x02\\u0A55\\u0A57' +\r\n    '\\x05\\u013A\\x9E\\x02\\u0A56\\u0A58\\x07~\\x02\\x02\\u0A57\\u0A56\\x03\\x02\\x02\\x02' +\r\n    '\\u0A57\\u0A58\\x03\\x02\\x02\\x02\\u0A58\\u0A5A\\x03\\x02\\x02\\x02\\u0A59\\u0A53\\x03' +\r\n    '\\x02\\x02\\x02\\u0A5A\\u0A5D\\x03\\x02\\x02\\x02\\u0A5B\\u0A59\\x03\\x02\\x02\\x02\\u0A5B' +\r\n    '\\u0A5C\\x03\\x02\\x02\\x02\\u0A5C\\u01C5\\x03\\x02\\x02\\x02\\u0A5D\\u0A5B\\x03\\x02' +\r\n    '\\x02\\x02\\u0A5E\\u0A5F\\x07-\\x02\\x02\\u0A5F\\u0A60\\x07P\\x02\\x02\\u0A60\\u0A61' +\r\n    '\\x05d3\\x02\\u0A61\\u0A62\\x07Q\\x02\\x02\\u0A62\\u0A65\\x03\\x02\\x02\\x02\\u0A63' +\r\n    '\\u0A65\\x07-\\x02\\x02\\u0A64\\u0A5E\\x03\\x02\\x02\\x02\\u0A64\\u0A63\\x03\\x02\\x02' +\r\n    '\\x02\\u0A65\\u01C7\\x03\\x02\\x02\\x02\\u0A66\\u0A67\\x07b\\x02\\x02\\u0A67\\u0A68' +\r\n    '\\x07b\\x02\\x02\\u0A68\\u01C9\\x03\\x02\\x02\\x02\\u0A69\\u0A6A\\x07b\\x02\\x02\\u0A6A' +\r\n    '\\u0A6B\\x07b\\x02\\x02\\u0A6B\\u0A6C\\x07`\\x02\\x02\\u0A6C\\u01CB\\x03\\x02\\x02\\x02' +\r\n    '\\u0A6D\\u0A9E\\x07,\\x02\\x02\\u0A6E\\u0A9E\\x07\\x16\\x02\\x02\\u0A6F\\u0A70\\x07' +\r\n    ',\\x02\\x02\\u0A70\\u0A71\\x07R\\x02\\x02\\u0A71\\u0A9E\\x07S\\x02\\x02\\u0A72\\u0A73' +\r\n    '\\x07\\x16\\x02\\x02\\u0A73\\u0A74\\x07R\\x02\\x02\\u0A74\\u0A9E\\x07S\\x02\\x02\\u0A75' +\r\n    '\\u0A9E\\x07V\\x02\\x02\\u0A76\\u0A9E\\x07W\\x02\\x02\\u0A77\\u0A9E\\x07X\\x02\\x02' +\r\n    '\\u0A78\\u0A9E\\x07Y\\x02\\x02\\u0A79\\u0A9E\\x07Z\\x02\\x02\\u0A7A\\u0A9E\\x07[\\x02' +\r\n    '\\x02\\u0A7B\\u0A9E\\x07\\\\\\x02\\x02\\u0A7C\\u0A9E\\x07]\\x02\\x02\\u0A7D\\u0A9E\\x07' +\r\n    '^\\x02\\x02\\u0A7E\\u0A9E\\x07_\\x02\\x02\\u0A7F\\u0A9E\\x07`\\x02\\x02\\u0A80\\u0A9E' +\r\n    '\\x07a\\x02\\x02\\u0A81\\u0A9E\\x07b\\x02\\x02\\u0A82\\u0A9E\\x07c\\x02\\x02\\u0A83' +\r\n    '\\u0A9E\\x07d\\x02\\x02\\u0A84\\u0A9E\\x07e\\x02\\x02\\u0A85\\u0A9E\\x07f\\x02\\x02' +\r\n    '\\u0A86\\u0A9E\\x07g\\x02\\x02\\u0A87\\u0A9E\\x07h\\x02\\x02\\u0A88\\u0A9E\\x07i\\x02' +\r\n    '\\x02\\u0A89\\u0A9E\\x07j\\x02\\x02\\u0A8A\\u0A9E\\x07k\\x02\\x02\\u0A8B\\u0A9E\\x05' +\r\n    '\\u01C8\\xE5\\x02\\u0A8C\\u0A9E\\x05\\u01CA\\xE6\\x02\\u0A8D\\u0A9E\\x07l\\x02\\x02' +\r\n    '\\u0A8E\\u0A9E\\x07m\\x02\\x02\\u0A8F\\u0A9E\\x07n\\x02\\x02\\u0A90\\u0A9E\\x07o\\x02' +\r\n    '\\x02\\u0A91\\u0A9E\\x07p\\x02\\x02\\u0A92\\u0A9E\\x07q\\x02\\x02\\u0A93\\u0A9E\\x07' +\r\n    'r\\x02\\x02\\u0A94\\u0A9E\\x07s\\x02\\x02\\u0A95\\u0A9E\\x07t\\x02\\x02\\u0A96\\u0A9E' +\r\n    '\\x07u\\x02\\x02\\u0A97\\u0A9E\\x07v\\x02\\x02\\u0A98\\u0A9E\\x07w\\x02\\x02\\u0A99' +\r\n    '\\u0A9A\\x07P\\x02\\x02\\u0A9A\\u0A9E\\x07Q\\x02\\x02\\u0A9B\\u0A9C\\x07R\\x02\\x02' +\r\n    '\\u0A9C\\u0A9E\\x07S\\x02\\x02\\u0A9D\\u0A6D\\x03\\x02\\x02\\x02\\u0A9D\\u0A6E\\x03' +\r\n    '\\x02\\x02\\x02\\u0A9D\\u0A6F\\x03\\x02\\x02\\x02\\u0A9D\\u0A72\\x03\\x02\\x02\\x02\\u0A9D' +\r\n    '\\u0A75\\x03\\x02\\x02\\x02\\u0A9D\\u0A76\\x03\\x02\\x02\\x02\\u0A9D\\u0A77\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9D\\u0A78\\x03\\x02\\x02\\x02\\u0A9D\\u0A79\\x03\\x02\\x02\\x02\\u0A9D' +\r\n    '\\u0A7A\\x03\\x02\\x02\\x02\\u0A9D\\u0A7B\\x03\\x02\\x02\\x02\\u0A9D\\u0A7C\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9D\\u0A7D\\x03\\x02\\x02\\x02\\u0A9D\\u0A7E\\x03\\x02\\x02\\x02\\u0A9D' +\r\n    '\\u0A7F\\x03\\x02\\x02\\x02\\u0A9D\\u0A80\\x03\\x02\\x02\\x02\\u0A9D\\u0A81\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9D\\u0A82\\x03\\x02\\x02\\x02\\u0A9D\\u0A83\\x03\\x02\\x02\\x02\\u0A9D' +\r\n    '\\u0A84\\x03\\x02\\x02\\x02\\u0A9D\\u0A85\\x03\\x02\\x02\\x02\\u0A9D\\u0A86\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9D\\u0A87\\x03\\x02\\x02\\x02\\u0A9D\\u0A88\\x03\\x02\\x02\\x02\\u0A9D' +\r\n    '\\u0A89\\x03\\x02\\x02\\x02\\u0A9D\\u0A8A\\x03\\x02\\x02\\x02\\u0A9D\\u0A8B\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9D\\u0A8C\\x03\\x02\\x02\\x02\\u0A9D\\u0A8D\\x03\\x02\\x02\\x02\\u0A9D' +\r\n    '\\u0A8E\\x03\\x02\\x02\\x02\\u0A9D\\u0A8F\\x03\\x02\\x02\\x02\\u0A9D\\u0A90\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9D\\u0A91\\x03\\x02\\x02\\x02\\u0A9D\\u0A92\\x03\\x02\\x02\\x02\\u0A9D' +\r\n    '\\u0A93\\x03\\x02\\x02\\x02\\u0A9D\\u0A94\\x03\\x02\\x02\\x02\\u0A9D\\u0A95\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9D\\u0A96\\x03\\x02\\x02\\x02\\u0A9D\\u0A97\\x03\\x02\\x02\\x02\\u0A9D' +\r\n    '\\u0A98\\x03\\x02\\x02\\x02\\u0A9D\\u0A99\\x03\\x02\\x02\\x02\\u0A9D\\u0A9B\\x03\\x02' +\r\n    '\\x02\\x02\\u0A9E\\u01CD\\x03\\x02\\x02\\x02\\u0A9F\\u0AA7\\x05\\u01D0\\xE9\\x02\\u0AA0' +\r\n    '\\u0AA7\\x05\\u01D2\\xEA\\x02\\u0AA1\\u0AA7\\x05\\u01D4\\xEB\\x02\\u0AA2\\u0AA7\\x05' +\r\n    '\\u01D6\\xEC\\x02\\u0AA3\\u0AA7\\x05\\u01D8\\xED\\x02\\u0AA4\\u0AA7\\x05\\u01DA\\xEE' +\r\n    '\\x02\\u0AA5\\u0AA7\\x05\\u01DC\\xEF\\x02\\u0AA6\\u0A9F\\x03\\x02\\x02\\x02\\u0AA6\\u0AA0' +\r\n    '\\x03\\x02\\x02\\x02\\u0AA6\\u0AA1\\x03\\x02\\x02\\x02\\u0AA6\\u0AA2\\x03\\x02\\x02\\x02' +\r\n    '\\u0AA6\\u0AA3\\x03\\x02\\x02\\x02\\u0AA6\\u0AA4\\x03\\x02\\x02\\x02\\u0AA6\\u0AA5\\x03' +\r\n    '\\x02\\x02\\x02\\u0AA7\\u01CF\\x03\\x02\\x02\\x02\\u0AA8\\u0AA9\\x07\\x80\\x02\\x02\\u0AA9' +\r\n    '\\u01D1\\x03\\x02\\x02\\x02\\u0AAA\\u0AAB\\x07\\x86\\x02\\x02\\u0AAB\\u01D3\\x03\\x02' +\r\n    '\\x02\\x02\\u0AAC\\u0AAD\\x07\\x87\\x02\\x02\\u0AAD\\u01D5\\x03\\x02\\x02\\x02\\u0AAE' +\r\n    '\\u0AAF\\x07\\x88\\x02\\x02\\u0AAF\\u01D7\\x03\\x02\\x02\\x02\\u0AB0\\u0AB1\\x07\\x89' +\r\n    '\\x02\\x02\\u0AB1\\u01D9\\x03\\x02\\x02\\x02\\u0AB2\\u0AB3\\x07.\\x02\\x02\\u0AB3\\u01DB' +\r\n    '\\x03\\x02\\x02\\x02\\u0AB4\\u0AB5\\t\\v\\x02\\x02\\u0AB5\\u01DD\\x03\\x02\\x02\\x02\\u0160' +\r\n    '\\u01DF\\u01E9\\u01ED\\u01F1\\u01FC\\u0200\\u020F\\u0216\\u021B\\u021D\\u0222\\u0228' +\r\n    '\\u0232\\u0239\\u023F\\u0243\\u0248\\u024E\\u0255\\u025B\\u025E\\u0261\\u0264\\u026B' +\r\n    '\\u0275\\u027C\\u02B0\\u02BF\\u02C5\\u02D2\\u02D4\\u02DA\\u02E9\\u02EF\\u02F5\\u0315' +\r\n    '\\u031C\\u0320\\u0324\\u0327\\u032B\\u0331\\u0333\\u033B\\u033F\\u0342\\u0349\\u0350' +\r\n    '\\u0354\\u0359\\u035D\\u0360\\u0365\\u036B\\u0378\\u0383\\u0385\\u0394\\u0396\\u03A2' +\r\n    '\\u03A4\\u03B1\\u03B3\\u03C5\\u03C7\\u03D3\\u03D5\\u03E0\\u03EB\\u03F6\\u0401\\u040C' +\r\n    '\\u0416\\u041E\\u042B\\u0435\\u043C\\u0440\\u0444\\u0448\\u044C\\u0450\\u0454\\u0458' +\r\n    '\\u045C\\u0460\\u0464\\u0468\\u046E\\u0471\\u0474\\u047A\\u047D\\u0482\\u048B\\u048F' +\r\n    '\\u0495\\u049D\\u04AE\\u04BC\\u04C1\\u04C9\\u04CF\\u04E3\\u04E7\\u04F7\\u04FA\\u0501' +\r\n    '\\u050F\\u0516\\u051A\\u0523\\u0527\\u0533\\u0536\\u053A\\u053D\\u0541\\u0544\\u0546' +\r\n    '\\u0554\\u055D\\u0561\\u0566\\u0570\\u0573\\u0577\\u057C\\u0589\\u058F\\u0595\\u059A' +\r\n    '\\u059F\\u05A5\\u05A8\\u05AC\\u05B1\\u05B4\\u05B9\\u05BE\\u05CF\\u05D3\\u05D8\\u05DF' +\r\n    '\\u05E3\\u05E8\\u05F3\\u05F9\\u05FD\\u0602\\u0606\\u060B\\u060E\\u0620\\u0628\\u062E' +\r\n    '\\u0639\\u063D\\u0640\\u064A\\u0650\\u0653\\u065A\\u0664\\u0668\\u066B\\u066E\\u0672' +\r\n    '\\u0677\\u0679\\u067D\\u0681\\u068A\\u0697\\u069F\\u06A5\\u06AB\\u06AF\\u06B2\\u06BB' +\r\n    '\\u06C4\\u06CC\\u06D7\\u06DD\\u06E8\\u06EB\\u06F0\\u06FF\\u0705\\u070E\\u0718\\u071E' +\r\n    '\\u0726\\u072A\\u072E\\u0733\\u0738\\u073F\\u0741\\u0746\\u074A\\u0758\\u075E\\u076D' +\r\n    '\\u0774\\u0779\\u0780\\u0785\\u078D\\u0793\\u079A\\u079E\\u07A0\\u07A2\\u07A9\\u07AC' +\r\n    '\\u07AF\\u07B2\\u07B7\\u07BB\\u07BE\\u07C2\\u07C6\\u07CB\\u07CE\\u07D0\\u07D4\\u07DB' +\r\n    '\\u07E1\\u07E5\\u07EB\\u07F0\\u07F2\\u07F8\\u07FC\\u0802\\u0809\\u080D\\u080F\\u0811' +\r\n    '\\u0818\\u0822\\u0826\\u0828\\u082A\\u082E\\u0831\\u0837\\u0841\\u0845\\u0848\\u084C' +\r\n    '\\u084F\\u0852\\u0856\\u085B\\u0860\\u086B\\u0875\\u087C\\u0881\\u0885\\u088C\\u0892' +\r\n    '\\u0898\\u089C\\u08A3\\u08A9\\u08AC\\u08B0\\u08B3\\u08B7\\u08BA\\u08BC\\u08BF\\u08C9' +\r\n    '\\u08CE\\u08D0\\u08D9\\u08DF\\u08E2\\u08E8\\u08EC\\u08F6\\u08FB\\u08FE\\u0903\\u0907' +\r\n    '\\u090A\\u090D\\u0911\\u091A\\u0928\\u092E\\u0932\\u0936\\u093A\\u093E\\u0942\\u0946' +\r\n    '\\u094A\\u094D\\u0951\\u095C\\u0960\\u0967\\u096B\\u0970\\u0975\\u097C\\u0980\\u098A' +\r\n    '\\u099A\\u099F\\u09A3\\u09A6\\u09AA\\u09B0\\u09B3\\u09B7\\u09C1\\u09C4\\u09CC\\u09D1' +\r\n    '\\u09D6\\u09DE\\u09E5\\u09E9\\u09F0\\u09F6\\u09FA\\u0A00\\u0A09\\u0A0D\\u0A10\\u0A20' +\r\n    '\\u0A27\\u0A30\\u0A36\\u0A3A\\u0A3D\\u0A41\\u0A45\\u0A4A\\u0A51\\u0A57\\u0A5B\\u0A64' +\r\n    '\\u0A9D\\u0AA6';\r\nCPP14Parser._serializedATN = Utils.join([\r\n    CPP14Parser._serializedATNSegment0,\r\n    CPP14Parser._serializedATNSegment1,\r\n    CPP14Parser._serializedATNSegment2,\r\n    CPP14Parser._serializedATNSegment3,\r\n    CPP14Parser._serializedATNSegment4,\r\n], '');\r\nclass TranslationunitContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declarationseq() {\r\n        return this.tryGetRuleContext(0, DeclarationseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_translationunit;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTranslationunit) {\r\n            return visitor.visitTranslationunit(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TranslationunitContext = TranslationunitContext;\r\nclass PrimaryexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    literal() {\r\n        return this.tryGetRuleContext(0, LiteralContext);\r\n    }\r\n    This() {\r\n        return this.tryGetToken(CPP14Parser.This, 0);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    identexpression() {\r\n        return this.tryGetRuleContext(0, IdentexpressionContext);\r\n    }\r\n    lambdaexpression() {\r\n        return this.tryGetRuleContext(0, LambdaexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_primaryexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPrimaryexpression) {\r\n            return visitor.visitPrimaryexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PrimaryexpressionContext = PrimaryexpressionContext;\r\nclass IdexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unqualifiedid() {\r\n        return this.tryGetRuleContext(0, UnqualifiedidContext);\r\n    }\r\n    qualifiedid() {\r\n        return this.tryGetRuleContext(0, QualifiedidContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_idexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIdexpression) {\r\n            return visitor.visitIdexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IdexpressionContext = IdexpressionContext;\r\nclass IdentexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    unqualifiedid() {\r\n        return this.tryGetRuleContext(0, UnqualifiedidContext);\r\n    }\r\n    qualifiedid() {\r\n        return this.tryGetRuleContext(0, QualifiedidContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_identexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIdentexpression) {\r\n            return visitor.visitIdentexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IdentexpressionContext = IdentexpressionContext;\r\nclass UnqualifiedidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    operatorfunctionid() {\r\n        return this.tryGetRuleContext(0, OperatorfunctionidContext);\r\n    }\r\n    conversionfunctionid() {\r\n        return this.tryGetRuleContext(0, ConversionfunctionidContext);\r\n    }\r\n    literaloperatorid() {\r\n        return this.tryGetRuleContext(0, LiteraloperatoridContext);\r\n    }\r\n    myclassname() {\r\n        return this.tryGetRuleContext(0, MyclassnameContext);\r\n    }\r\n    decltypespecifier() {\r\n        return this.tryGetRuleContext(0, DecltypespecifierContext);\r\n    }\r\n    templateid() {\r\n        return this.tryGetRuleContext(0, TemplateidContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_unqualifiedid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnqualifiedid) {\r\n            return visitor.visitUnqualifiedid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnqualifiedidContext = UnqualifiedidContext;\r\nclass QualifiedidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    nestednamespecifier() {\r\n        return this.getRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    unqualifiedid() {\r\n        return this.getRuleContext(0, UnqualifiedidContext);\r\n    }\r\n    Template() {\r\n        return this.tryGetToken(CPP14Parser.Template, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_qualifiedid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitQualifiedid) {\r\n            return visitor.visitQualifiedid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.QualifiedidContext = QualifiedidContext;\r\nclass NestednamespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typename() {\r\n        return this.tryGetRuleContext(0, TypenameContext);\r\n    }\r\n    namespacename() {\r\n        return this.tryGetRuleContext(0, NamespacenameContext);\r\n    }\r\n    decltypespecifier() {\r\n        return this.tryGetRuleContext(0, DecltypespecifierContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    simpletemplateid() {\r\n        return this.tryGetRuleContext(0, SimpletemplateidContext);\r\n    }\r\n    Template() {\r\n        return this.tryGetToken(CPP14Parser.Template, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_nestednamespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNestednamespecifier) {\r\n            return visitor.visitNestednamespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NestednamespecifierContext = NestednamespecifierContext;\r\nclass LambdaexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    lambdaintroducer() {\r\n        return this.getRuleContext(0, LambdaintroducerContext);\r\n    }\r\n    compoundstatement() {\r\n        return this.getRuleContext(0, CompoundstatementContext);\r\n    }\r\n    lambdadeclarator() {\r\n        return this.tryGetRuleContext(0, LambdadeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_lambdaexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLambdaexpression) {\r\n            return visitor.visitLambdaexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LambdaexpressionContext = LambdaexpressionContext;\r\nclass LambdaintroducerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    lambdacapture() {\r\n        return this.tryGetRuleContext(0, LambdacaptureContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_lambdaintroducer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLambdaintroducer) {\r\n            return visitor.visitLambdaintroducer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LambdaintroducerContext = LambdaintroducerContext;\r\nclass LambdacaptureContext extends ParserRuleContext_1.ParserRuleContext {\r\n    capturedefault() {\r\n        return this.tryGetRuleContext(0, CapturedefaultContext);\r\n    }\r\n    capturelist() {\r\n        return this.tryGetRuleContext(0, CapturelistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_lambdacapture;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLambdacapture) {\r\n            return visitor.visitLambdacapture(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LambdacaptureContext = LambdacaptureContext;\r\nclass CapturedefaultContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_capturedefault;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCapturedefault) {\r\n            return visitor.visitCapturedefault(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CapturedefaultContext = CapturedefaultContext;\r\nclass CapturelistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    capture() {\r\n        return this.getRuleContext(0, CaptureContext);\r\n    }\r\n    capturelist() {\r\n        return this.tryGetRuleContext(0, CapturelistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_capturelist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCapturelist) {\r\n            return visitor.visitCapturelist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CapturelistContext = CapturelistContext;\r\nclass CaptureContext extends ParserRuleContext_1.ParserRuleContext {\r\n    simplecapture() {\r\n        return this.tryGetRuleContext(0, SimplecaptureContext);\r\n    }\r\n    initcapture() {\r\n        return this.tryGetRuleContext(0, InitcaptureContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_capture;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCapture) {\r\n            return visitor.visitCapture(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CaptureContext = CaptureContext;\r\nclass SimplecaptureContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    This() {\r\n        return this.tryGetToken(CPP14Parser.This, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_simplecapture;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSimplecapture) {\r\n            return visitor.visitSimplecapture(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SimplecaptureContext = SimplecaptureContext;\r\nclass InitcaptureContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    initializer() {\r\n        return this.getRuleContext(0, InitializerContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_initcapture;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInitcapture) {\r\n            return visitor.visitInitcapture(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InitcaptureContext = InitcaptureContext;\r\nclass LambdadeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    parameterdeclarationclause() {\r\n        return this.getRuleContext(0, ParameterdeclarationclauseContext);\r\n    }\r\n    Mutable() {\r\n        return this.tryGetToken(CPP14Parser.Mutable, 0);\r\n    }\r\n    exceptionspecification() {\r\n        return this.tryGetRuleContext(0, ExceptionspecificationContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    trailingreturntype() {\r\n        return this.tryGetRuleContext(0, TrailingreturntypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_lambdadeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLambdadeclarator) {\r\n            return visitor.visitLambdadeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LambdadeclaratorContext = LambdadeclaratorContext;\r\nclass IdexpressionlapperContext extends ParserRuleContext_1.ParserRuleContext {\r\n    idexpression() {\r\n        return this.getRuleContext(0, IdexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_idexpressionlapper;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIdexpressionlapper) {\r\n            return visitor.visitIdexpressionlapper(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IdexpressionlapperContext = IdexpressionlapperContext;\r\nclass FunctioncallexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primaryexpression() {\r\n        return this.getRuleContext(0, PrimaryexpressionContext);\r\n    }\r\n    LeftParen() {\r\n        return this.getToken(CPP14Parser.LeftParen, 0);\r\n    }\r\n    RightParen() {\r\n        return this.getToken(CPP14Parser.RightParen, 0);\r\n    }\r\n    initializerlist() {\r\n        return this.tryGetRuleContext(0, InitializerlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_functioncallexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFunctioncallexpression) {\r\n            return visitor.visitFunctioncallexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FunctioncallexpressionContext = FunctioncallexpressionContext;\r\nclass PostfixexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    primaryexpression() {\r\n        return this.tryGetRuleContext(0, PrimaryexpressionContext);\r\n    }\r\n    functioncallexpression() {\r\n        return this.tryGetRuleContext(0, FunctioncallexpressionContext);\r\n    }\r\n    postfixexpression() {\r\n        return this.tryGetRuleContext(0, PostfixexpressionContext);\r\n    }\r\n    LeftBracket() {\r\n        return this.tryGetToken(CPP14Parser.LeftBracket, 0);\r\n    }\r\n    assignmentexpression() {\r\n        return this.tryGetRuleContext(0, AssignmentexpressionContext);\r\n    }\r\n    RightBracket() {\r\n        return this.tryGetToken(CPP14Parser.RightBracket, 0);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    simpletypespecifier() {\r\n        return this.tryGetRuleContext(0, SimpletypespecifierContext);\r\n    }\r\n    expressionlist() {\r\n        return this.tryGetRuleContext(0, ExpressionlistContext);\r\n    }\r\n    typenamespecifier() {\r\n        return this.tryGetRuleContext(0, TypenamespecifierContext);\r\n    }\r\n    Dot() {\r\n        return this.tryGetToken(CPP14Parser.Dot, 0);\r\n    }\r\n    idexpressionlapper() {\r\n        return this.tryGetRuleContext(0, IdexpressionlapperContext);\r\n    }\r\n    Template() {\r\n        return this.tryGetToken(CPP14Parser.Template, 0);\r\n    }\r\n    Arrow() {\r\n        return this.tryGetToken(CPP14Parser.Arrow, 0);\r\n    }\r\n    pseudodestructorname() {\r\n        return this.tryGetRuleContext(0, PseudodestructornameContext);\r\n    }\r\n    PlusPlus() {\r\n        return this.tryGetToken(CPP14Parser.PlusPlus, 0);\r\n    }\r\n    MinusMinus() {\r\n        return this.tryGetToken(CPP14Parser.MinusMinus, 0);\r\n    }\r\n    Dynamic_cast() {\r\n        return this.tryGetToken(CPP14Parser.Dynamic_cast, 0);\r\n    }\r\n    typeid() {\r\n        return this.tryGetRuleContext(0, TypeidContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    Static_cast() {\r\n        return this.tryGetToken(CPP14Parser.Static_cast, 0);\r\n    }\r\n    Reinterpret_cast() {\r\n        return this.tryGetToken(CPP14Parser.Reinterpret_cast, 0);\r\n    }\r\n    Const_cast() {\r\n        return this.tryGetToken(CPP14Parser.Const_cast, 0);\r\n    }\r\n    Typeid() {\r\n        return this.tryGetToken(CPP14Parser.Typeid, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_postfixexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPostfixexpression) {\r\n            return visitor.visitPostfixexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PostfixexpressionContext = PostfixexpressionContext;\r\nclass ExpressionlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    initializerlist() {\r\n        return this.getRuleContext(0, InitializerlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_expressionlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExpressionlist) {\r\n            return visitor.visitExpressionlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExpressionlistContext = ExpressionlistContext;\r\nclass PseudodestructornameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typename(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(TypenameContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, TypenameContext);\r\n        }\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    Template() {\r\n        return this.tryGetToken(CPP14Parser.Template, 0);\r\n    }\r\n    simpletemplateid() {\r\n        return this.tryGetRuleContext(0, SimpletemplateidContext);\r\n    }\r\n    decltypespecifier() {\r\n        return this.tryGetRuleContext(0, DecltypespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_pseudodestructorname;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPseudodestructorname) {\r\n            return visitor.visitPseudodestructorname(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PseudodestructornameContext = PseudodestructornameContext;\r\nclass BinaryexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    postfixexpression() {\r\n        return this.tryGetRuleContext(0, PostfixexpressionContext);\r\n    }\r\n    unaryexpression() {\r\n        return this.tryGetRuleContext(0, UnaryexpressionContext);\r\n    }\r\n    newexpression() {\r\n        return this.tryGetRuleContext(0, NewexpressionContext);\r\n    }\r\n    deleteexpression() {\r\n        return this.tryGetRuleContext(0, DeleteexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_binaryexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBinaryexpression) {\r\n            return visitor.visitBinaryexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BinaryexpressionContext = BinaryexpressionContext;\r\nclass UnaryexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    PlusPlus() {\r\n        return this.tryGetToken(CPP14Parser.PlusPlus, 0);\r\n    }\r\n    castexpression() {\r\n        return this.tryGetRuleContext(0, CastexpressionContext);\r\n    }\r\n    MinusMinus() {\r\n        return this.tryGetToken(CPP14Parser.MinusMinus, 0);\r\n    }\r\n    unaryoperator() {\r\n        return this.tryGetRuleContext(0, UnaryoperatorContext);\r\n    }\r\n    Sizeof() {\r\n        return this.tryGetToken(CPP14Parser.Sizeof, 0);\r\n    }\r\n    binaryexpression() {\r\n        return this.tryGetRuleContext(0, BinaryexpressionContext);\r\n    }\r\n    typeidlapper() {\r\n        return this.tryGetRuleContext(0, TypeidlapperContext);\r\n    }\r\n    typeid() {\r\n        return this.tryGetRuleContext(0, TypeidContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    Alignof() {\r\n        return this.tryGetToken(CPP14Parser.Alignof, 0);\r\n    }\r\n    noexceptexpression() {\r\n        return this.tryGetRuleContext(0, NoexceptexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_unaryexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnaryexpression) {\r\n            return visitor.visitUnaryexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnaryexpressionContext = UnaryexpressionContext;\r\nclass TypeidlapperContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeid() {\r\n        return this.getRuleContext(0, TypeidContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typeidlapper;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeidlapper) {\r\n            return visitor.visitTypeidlapper(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeidlapperContext = TypeidlapperContext;\r\nclass UnaryoperatorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_unaryoperator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnaryoperator) {\r\n            return visitor.visitUnaryoperator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnaryoperatorContext = UnaryoperatorContext;\r\nclass NewexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    New() {\r\n        return this.getToken(CPP14Parser.New, 0);\r\n    }\r\n    newtypeid() {\r\n        return this.tryGetRuleContext(0, NewtypeidContext);\r\n    }\r\n    newplacement() {\r\n        return this.tryGetRuleContext(0, NewplacementContext);\r\n    }\r\n    newinitializer() {\r\n        return this.tryGetRuleContext(0, NewinitializerContext);\r\n    }\r\n    typeid() {\r\n        return this.tryGetRuleContext(0, TypeidContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_newexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNewexpression) {\r\n            return visitor.visitNewexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NewexpressionContext = NewexpressionContext;\r\nclass NewplacementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expressionlist() {\r\n        return this.getRuleContext(0, ExpressionlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_newplacement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNewplacement) {\r\n            return visitor.visitNewplacement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NewplacementContext = NewplacementContext;\r\nclass NewtypeidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifierseq() {\r\n        return this.getRuleContext(0, TypespecifierseqContext);\r\n    }\r\n    newdeclarator() {\r\n        return this.tryGetRuleContext(0, NewdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_newtypeid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNewtypeid) {\r\n            return visitor.visitNewtypeid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NewtypeidContext = NewtypeidContext;\r\nclass NewdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    ptroperator() {\r\n        return this.tryGetRuleContext(0, PtroperatorContext);\r\n    }\r\n    newdeclarator() {\r\n        return this.tryGetRuleContext(0, NewdeclaratorContext);\r\n    }\r\n    noptrnewdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrnewdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_newdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNewdeclarator) {\r\n            return visitor.visitNewdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NewdeclaratorContext = NewdeclaratorContext;\r\nclass NoptrnewdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    noptrnewdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrnewdeclaratorContext);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_noptrnewdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNoptrnewdeclarator) {\r\n            return visitor.visitNoptrnewdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NoptrnewdeclaratorContext = NoptrnewdeclaratorContext;\r\nclass NewinitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expressionlist() {\r\n        return this.tryGetRuleContext(0, ExpressionlistContext);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_newinitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNewinitializer) {\r\n            return visitor.visitNewinitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NewinitializerContext = NewinitializerContext;\r\nclass DeleteexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Delete() {\r\n        return this.getToken(CPP14Parser.Delete, 0);\r\n    }\r\n    castexpression() {\r\n        return this.getRuleContext(0, CastexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_deleteexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeleteexpression) {\r\n            return visitor.visitDeleteexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeleteexpressionContext = DeleteexpressionContext;\r\nclass NoexceptexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Noexcept() {\r\n        return this.getToken(CPP14Parser.Noexcept, 0);\r\n    }\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_noexceptexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNoexceptexpression) {\r\n            return visitor.visitNoexceptexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NoexceptexpressionContext = NoexceptexpressionContext;\r\nclass CastexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    binaryexpression() {\r\n        return this.tryGetRuleContext(0, BinaryexpressionContext);\r\n    }\r\n    LeftParen() {\r\n        return this.tryGetToken(CPP14Parser.LeftParen, 0);\r\n    }\r\n    typeid() {\r\n        return this.tryGetRuleContext(0, TypeidContext);\r\n    }\r\n    RightParen() {\r\n        return this.tryGetToken(CPP14Parser.RightParen, 0);\r\n    }\r\n    castexpression() {\r\n        return this.tryGetRuleContext(0, CastexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_castexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCastexpression) {\r\n            return visitor.visitCastexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CastexpressionContext = CastexpressionContext;\r\nclass PmexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    castexpression() {\r\n        return this.getRuleContext(0, CastexpressionContext);\r\n    }\r\n    pmexpression() {\r\n        return this.tryGetRuleContext(0, PmexpressionContext);\r\n    }\r\n    DotStar() {\r\n        return this.tryGetToken(CPP14Parser.DotStar, 0);\r\n    }\r\n    ArrowStar() {\r\n        return this.tryGetToken(CPP14Parser.ArrowStar, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_pmexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPmexpression) {\r\n            return visitor.visitPmexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PmexpressionContext = PmexpressionContext;\r\nclass MultiplicativeexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    pmexpression() {\r\n        return this.getRuleContext(0, PmexpressionContext);\r\n    }\r\n    multiplicativeexpression() {\r\n        return this.tryGetRuleContext(0, MultiplicativeexpressionContext);\r\n    }\r\n    Star() {\r\n        return this.tryGetToken(CPP14Parser.Star, 0);\r\n    }\r\n    Div() {\r\n        return this.tryGetToken(CPP14Parser.Div, 0);\r\n    }\r\n    Mod() {\r\n        return this.tryGetToken(CPP14Parser.Mod, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_multiplicativeexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMultiplicativeexpression) {\r\n            return visitor.visitMultiplicativeexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MultiplicativeexpressionContext = MultiplicativeexpressionContext;\r\nclass AdditiveexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    multiplicativeexpression() {\r\n        return this.getRuleContext(0, MultiplicativeexpressionContext);\r\n    }\r\n    additiveexpression() {\r\n        return this.tryGetRuleContext(0, AdditiveexpressionContext);\r\n    }\r\n    Plus() {\r\n        return this.tryGetToken(CPP14Parser.Plus, 0);\r\n    }\r\n    Minus() {\r\n        return this.tryGetToken(CPP14Parser.Minus, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_additiveexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAdditiveexpression) {\r\n            return visitor.visitAdditiveexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AdditiveexpressionContext = AdditiveexpressionContext;\r\nclass ShiftexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    additiveexpression() {\r\n        return this.getRuleContext(0, AdditiveexpressionContext);\r\n    }\r\n    shiftexpression() {\r\n        return this.tryGetRuleContext(0, ShiftexpressionContext);\r\n    }\r\n    LeftShift() {\r\n        return this.tryGetToken(CPP14Parser.LeftShift, 0);\r\n    }\r\n    rightShift() {\r\n        return this.tryGetRuleContext(0, RightShiftContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_shiftexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitShiftexpression) {\r\n            return visitor.visitShiftexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ShiftexpressionContext = ShiftexpressionContext;\r\nclass RelationalexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    shiftexpression() {\r\n        return this.getRuleContext(0, ShiftexpressionContext);\r\n    }\r\n    relationalexpression() {\r\n        return this.tryGetRuleContext(0, RelationalexpressionContext);\r\n    }\r\n    Less() {\r\n        return this.tryGetToken(CPP14Parser.Less, 0);\r\n    }\r\n    Greater() {\r\n        return this.tryGetToken(CPP14Parser.Greater, 0);\r\n    }\r\n    LessEqual() {\r\n        return this.tryGetToken(CPP14Parser.LessEqual, 0);\r\n    }\r\n    GreaterEqual() {\r\n        return this.tryGetToken(CPP14Parser.GreaterEqual, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_relationalexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitRelationalexpression) {\r\n            return visitor.visitRelationalexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.RelationalexpressionContext = RelationalexpressionContext;\r\nclass EqualityexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    relationalexpression() {\r\n        return this.getRuleContext(0, RelationalexpressionContext);\r\n    }\r\n    equalityexpression() {\r\n        return this.tryGetRuleContext(0, EqualityexpressionContext);\r\n    }\r\n    Equal() {\r\n        return this.tryGetToken(CPP14Parser.Equal, 0);\r\n    }\r\n    NotEqual() {\r\n        return this.tryGetToken(CPP14Parser.NotEqual, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_equalityexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEqualityexpression) {\r\n            return visitor.visitEqualityexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EqualityexpressionContext = EqualityexpressionContext;\r\nclass AndexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    equalityexpression() {\r\n        return this.getRuleContext(0, EqualityexpressionContext);\r\n    }\r\n    andexpression() {\r\n        return this.tryGetRuleContext(0, AndexpressionContext);\r\n    }\r\n    And() {\r\n        return this.tryGetToken(CPP14Parser.And, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_andexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAndexpression) {\r\n            return visitor.visitAndexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AndexpressionContext = AndexpressionContext;\r\nclass ExclusiveorexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    andexpression() {\r\n        return this.getRuleContext(0, AndexpressionContext);\r\n    }\r\n    exclusiveorexpression() {\r\n        return this.tryGetRuleContext(0, ExclusiveorexpressionContext);\r\n    }\r\n    Caret() {\r\n        return this.tryGetToken(CPP14Parser.Caret, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_exclusiveorexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExclusiveorexpression) {\r\n            return visitor.visitExclusiveorexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExclusiveorexpressionContext = ExclusiveorexpressionContext;\r\nclass InclusiveorexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    exclusiveorexpression() {\r\n        return this.getRuleContext(0, ExclusiveorexpressionContext);\r\n    }\r\n    inclusiveorexpression() {\r\n        return this.tryGetRuleContext(0, InclusiveorexpressionContext);\r\n    }\r\n    Or() {\r\n        return this.tryGetToken(CPP14Parser.Or, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_inclusiveorexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInclusiveorexpression) {\r\n            return visitor.visitInclusiveorexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InclusiveorexpressionContext = InclusiveorexpressionContext;\r\nclass LogicalandexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    inclusiveorexpression() {\r\n        return this.getRuleContext(0, InclusiveorexpressionContext);\r\n    }\r\n    logicalandexpression() {\r\n        return this.tryGetRuleContext(0, LogicalandexpressionContext);\r\n    }\r\n    AndAnd() {\r\n        return this.tryGetToken(CPP14Parser.AndAnd, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_logicalandexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLogicalandexpression) {\r\n            return visitor.visitLogicalandexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LogicalandexpressionContext = LogicalandexpressionContext;\r\nclass LogicalorexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    logicalandexpression() {\r\n        return this.getRuleContext(0, LogicalandexpressionContext);\r\n    }\r\n    logicalorexpression() {\r\n        return this.tryGetRuleContext(0, LogicalorexpressionContext);\r\n    }\r\n    OrOr() {\r\n        return this.tryGetToken(CPP14Parser.OrOr, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_logicalorexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLogicalorexpression) {\r\n            return visitor.visitLogicalorexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LogicalorexpressionContext = LogicalorexpressionContext;\r\nclass ConditionalexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    logicalorexpression() {\r\n        return this.getRuleContext(0, LogicalorexpressionContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    assignmentexpression() {\r\n        return this.tryGetRuleContext(0, AssignmentexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_conditionalexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConditionalexpression) {\r\n            return visitor.visitConditionalexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConditionalexpressionContext = ConditionalexpressionContext;\r\nclass AssignmentexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    conditionalexpression() {\r\n        return this.tryGetRuleContext(0, ConditionalexpressionContext);\r\n    }\r\n    logicalorexpression() {\r\n        return this.tryGetRuleContext(0, LogicalorexpressionContext);\r\n    }\r\n    assignmentoperator() {\r\n        return this.tryGetRuleContext(0, AssignmentoperatorContext);\r\n    }\r\n    initializerclause() {\r\n        return this.tryGetRuleContext(0, InitializerclauseContext);\r\n    }\r\n    throwexpression() {\r\n        return this.tryGetRuleContext(0, ThrowexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_assignmentexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAssignmentexpression) {\r\n            return visitor.visitAssignmentexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AssignmentexpressionContext = AssignmentexpressionContext;\r\nclass AssignmentoperatorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    rightShiftAssign() {\r\n        return this.tryGetRuleContext(0, RightShiftAssignContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_assignmentoperator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAssignmentoperator) {\r\n            return visitor.visitAssignmentoperator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AssignmentoperatorContext = AssignmentoperatorContext;\r\nclass ExpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    assignmentexpression() {\r\n        return this.getRuleContext(0, AssignmentexpressionContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    Comma() {\r\n        return this.tryGetToken(CPP14Parser.Comma, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_expression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExpression) {\r\n            return visitor.visitExpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExpressionContext = ExpressionContext;\r\nclass ConstantexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    conditionalexpression() {\r\n        return this.getRuleContext(0, ConditionalexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_constantexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConstantexpression) {\r\n            return visitor.visitConstantexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConstantexpressionContext = ConstantexpressionContext;\r\nclass StatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    labeledstatement() {\r\n        return this.tryGetRuleContext(0, LabeledstatementContext);\r\n    }\r\n    statementWithoutLabeldstatement() {\r\n        return this.tryGetRuleContext(0, StatementWithoutLabeldstatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_statement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatement) {\r\n            return visitor.visitStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementContext = StatementContext;\r\nclass StatementWithoutLabeldstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    emptydeclaration() {\r\n        return this.tryGetRuleContext(0, EmptydeclarationContext);\r\n    }\r\n    expressionstatement() {\r\n        return this.tryGetRuleContext(0, ExpressionstatementContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    compoundstatement() {\r\n        return this.tryGetRuleContext(0, CompoundstatementContext);\r\n    }\r\n    selectionstatement() {\r\n        return this.tryGetRuleContext(0, SelectionstatementContext);\r\n    }\r\n    switchstatement() {\r\n        return this.tryGetRuleContext(0, SwitchstatementContext);\r\n    }\r\n    iterationstatement() {\r\n        return this.tryGetRuleContext(0, IterationstatementContext);\r\n    }\r\n    whilestatement() {\r\n        return this.tryGetRuleContext(0, WhilestatementContext);\r\n    }\r\n    dowhilestatement() {\r\n        return this.tryGetRuleContext(0, DowhilestatementContext);\r\n    }\r\n    jumpstatement() {\r\n        return this.tryGetRuleContext(0, JumpstatementContext);\r\n    }\r\n    breakStatement() {\r\n        return this.tryGetRuleContext(0, BreakStatementContext);\r\n    }\r\n    continueStatement() {\r\n        return this.tryGetRuleContext(0, ContinueStatementContext);\r\n    }\r\n    returnStatement() {\r\n        return this.tryGetRuleContext(0, ReturnStatementContext);\r\n    }\r\n    variabledeclarationstatement() {\r\n        return this.tryGetRuleContext(0, VariabledeclarationstatementContext);\r\n    }\r\n    declarationstatement() {\r\n        return this.tryGetRuleContext(0, DeclarationstatementContext);\r\n    }\r\n    tryblock() {\r\n        return this.tryGetRuleContext(0, TryblockContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_statementWithoutLabeldstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatementWithoutLabeldstatement) {\r\n            return visitor.visitStatementWithoutLabeldstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementWithoutLabeldstatementContext = StatementWithoutLabeldstatementContext;\r\nclass LabeledstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    statement() {\r\n        return this.tryGetRuleContext(0, StatementContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    switchunitstatement() {\r\n        return this.tryGetRuleContext(0, SwitchunitstatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_labeledstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLabeledstatement) {\r\n            return visitor.visitLabeledstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LabeledstatementContext = LabeledstatementContext;\r\nclass SwitchunitstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementWithoutLabeldstatementseq() {\r\n        return this.getRuleContext(0, StatementWithoutLabeldstatementseqContext);\r\n    }\r\n    Case() {\r\n        return this.tryGetToken(CPP14Parser.Case, 0);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    Default() {\r\n        return this.tryGetToken(CPP14Parser.Default, 0);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_switchunitstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSwitchunitstatement) {\r\n            return visitor.visitSwitchunitstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SwitchunitstatementContext = SwitchunitstatementContext;\r\nclass StatementWithoutLabeldstatementseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementWithoutLabeldstatement(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(StatementWithoutLabeldstatementContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, StatementWithoutLabeldstatementContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_statementWithoutLabeldstatementseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatementWithoutLabeldstatementseq) {\r\n            return visitor.visitStatementWithoutLabeldstatementseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementWithoutLabeldstatementseqContext = StatementWithoutLabeldstatementseqContext;\r\nclass ExpressionstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Semi() {\r\n        return this.getToken(CPP14Parser.Semi, 0);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_expressionstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExpressionstatement) {\r\n            return visitor.visitExpressionstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExpressionstatementContext = ExpressionstatementContext;\r\nclass CompoundstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statementseq() {\r\n        return this.tryGetRuleContext(0, StatementseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_compoundstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCompoundstatement) {\r\n            return visitor.visitCompoundstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CompoundstatementContext = CompoundstatementContext;\r\nclass StatementseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    statement(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(StatementContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, StatementContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_statementseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatementseq) {\r\n            return visitor.visitStatementseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StatementseqContext = StatementseqContext;\r\nclass SelectionstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    If() {\r\n        return this.getToken(CPP14Parser.If, 0);\r\n    }\r\n    condition() {\r\n        return this.getRuleContext(0, ConditionContext);\r\n    }\r\n    statement(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(StatementContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, StatementContext);\r\n        }\r\n    }\r\n    Else() {\r\n        return this.tryGetToken(CPP14Parser.Else, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_selectionstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSelectionstatement) {\r\n            return visitor.visitSelectionstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SelectionstatementContext = SelectionstatementContext;\r\nclass SwitchstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Switch() {\r\n        return this.getToken(CPP14Parser.Switch, 0);\r\n    }\r\n    condition() {\r\n        return this.getRuleContext(0, ConditionContext);\r\n    }\r\n    switchunitseq() {\r\n        return this.tryGetRuleContext(0, SwitchunitseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_switchstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSwitchstatement) {\r\n            return visitor.visitSwitchstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SwitchstatementContext = SwitchstatementContext;\r\nclass SwitchunitseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    switchunitstatement(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(SwitchunitstatementContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, SwitchunitstatementContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_switchunitseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSwitchunitseq) {\r\n            return visitor.visitSwitchunitseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SwitchunitseqContext = SwitchunitseqContext;\r\nclass ConditionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    declspecifierseq() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqContext);\r\n    }\r\n    declarator() {\r\n        return this.tryGetRuleContext(0, DeclaratorContext);\r\n    }\r\n    initializerclause() {\r\n        return this.tryGetRuleContext(0, InitializerclauseContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_condition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCondition) {\r\n            return visitor.visitCondition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConditionContext = ConditionContext;\r\nclass WhilestatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    While() {\r\n        return this.getToken(CPP14Parser.While, 0);\r\n    }\r\n    condition() {\r\n        return this.getRuleContext(0, ConditionContext);\r\n    }\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_whilestatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitWhilestatement) {\r\n            return visitor.visitWhilestatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.WhilestatementContext = WhilestatementContext;\r\nclass DowhilestatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Do() {\r\n        return this.getToken(CPP14Parser.Do, 0);\r\n    }\r\n    compoundstatement() {\r\n        return this.getRuleContext(0, CompoundstatementContext);\r\n    }\r\n    While() {\r\n        return this.getToken(CPP14Parser.While, 0);\r\n    }\r\n    expression() {\r\n        return this.getRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_dowhilestatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDowhilestatement) {\r\n            return visitor.visitDowhilestatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DowhilestatementContext = DowhilestatementContext;\r\nclass IterationstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    For() {\r\n        return this.getToken(CPP14Parser.For, 0);\r\n    }\r\n    forinitstatement() {\r\n        return this.getRuleContext(0, ForinitstatementContext);\r\n    }\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    condition() {\r\n        return this.tryGetRuleContext(0, ConditionContext);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_iterationstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIterationstatement) {\r\n            return visitor.visitIterationstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IterationstatementContext = IterationstatementContext;\r\nclass EnhancedForStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    For() {\r\n        return this.getToken(CPP14Parser.For, 0);\r\n    }\r\n    forrangedeclaration() {\r\n        return this.getRuleContext(0, ForrangedeclarationContext);\r\n    }\r\n    forrangeinitializer() {\r\n        return this.getRuleContext(0, ForrangeinitializerContext);\r\n    }\r\n    statement() {\r\n        return this.getRuleContext(0, StatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enhancedForStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnhancedForStatement) {\r\n            return visitor.visitEnhancedForStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnhancedForStatementContext = EnhancedForStatementContext;\r\nclass ForinitstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expressionstatement() {\r\n        return this.tryGetRuleContext(0, ExpressionstatementContext);\r\n    }\r\n    variabledeclarationstatement() {\r\n        return this.tryGetRuleContext(0, VariabledeclarationstatementContext);\r\n    }\r\n    simpledeclaration() {\r\n        return this.tryGetRuleContext(0, SimpledeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_forinitstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitForinitstatement) {\r\n            return visitor.visitForinitstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ForinitstatementContext = ForinitstatementContext;\r\nclass ForrangedeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declspecifierseq() {\r\n        return this.getRuleContext(0, DeclspecifierseqContext);\r\n    }\r\n    declarator() {\r\n        return this.getRuleContext(0, DeclaratorContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_forrangedeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitForrangedeclaration) {\r\n            return visitor.visitForrangedeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ForrangedeclarationContext = ForrangedeclarationContext;\r\nclass ForrangeinitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_forrangeinitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitForrangeinitializer) {\r\n            return visitor.visitForrangeinitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ForrangeinitializerContext = ForrangeinitializerContext;\r\nclass JumpstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Goto() {\r\n        return this.getToken(CPP14Parser.Goto, 0);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_jumpstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitJumpstatement) {\r\n            return visitor.visitJumpstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.JumpstatementContext = JumpstatementContext;\r\nclass BreakStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Break() {\r\n        return this.getToken(CPP14Parser.Break, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_breakStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBreakStatement) {\r\n            return visitor.visitBreakStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BreakStatementContext = BreakStatementContext;\r\nclass ContinueStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Continue() {\r\n        return this.getToken(CPP14Parser.Continue, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_continueStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitContinueStatement) {\r\n            return visitor.visitContinueStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ContinueStatementContext = ContinueStatementContext;\r\nclass ReturnStatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Return() {\r\n        return this.getToken(CPP14Parser.Return, 0);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_returnStatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitReturnStatement) {\r\n            return visitor.visitReturnStatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ReturnStatementContext = ReturnStatementContext;\r\nclass DeclarationstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    simpledeclaration() {\r\n        return this.tryGetRuleContext(0, SimpledeclarationContext);\r\n    }\r\n    blockdeclarationwithoutsimpledeclaration() {\r\n        return this.tryGetRuleContext(0, BlockdeclarationwithoutsimpledeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declarationstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclarationstatement) {\r\n            return visitor.visitDeclarationstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclarationstatementContext = DeclarationstatementContext;\r\nclass DeclarationseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declaration() {\r\n        return this.getRuleContext(0, DeclarationContext);\r\n    }\r\n    declarationseq() {\r\n        return this.tryGetRuleContext(0, DeclarationseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declarationseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclarationseq) {\r\n            return visitor.visitDeclarationseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclarationseqContext = DeclarationseqContext;\r\nclass MyclassbodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    memberspecification() {\r\n        return this.tryGetRuleContext(0, MemberspecificationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_myclassbody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMyclassbody) {\r\n            return visitor.visitMyclassbody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MyclassbodyContext = MyclassbodyContext;\r\nclass MyclassspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    myclasshead() {\r\n        return this.getRuleContext(0, MyclassheadContext);\r\n    }\r\n    myclassbody() {\r\n        return this.getRuleContext(0, MyclassbodyContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_myclassspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMyclassspecifier) {\r\n            return visitor.visitMyclassspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MyclassspecifierContext = MyclassspecifierContext;\r\nclass MyclassspecifierstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    myclassspecifier() {\r\n        return this.getRuleContext(0, MyclassspecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_myclassspecifierstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMyclassspecifierstatement) {\r\n            return visitor.visitMyclassspecifierstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MyclassspecifierstatementContext = MyclassspecifierstatementContext;\r\nclass MyclassheadContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classkey() {\r\n        return this.getRuleContext(0, ClasskeyContext);\r\n    }\r\n    classheadname() {\r\n        return this.tryGetRuleContext(0, ClassheadnameContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    classvirtspecifier() {\r\n        return this.tryGetRuleContext(0, ClassvirtspecifierContext);\r\n    }\r\n    baseclause() {\r\n        return this.tryGetRuleContext(0, BaseclauseContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_myclasshead;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMyclasshead) {\r\n            return visitor.visitMyclasshead(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MyclassheadContext = MyclassheadContext;\r\nclass DeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    variabledeclarationstatement() {\r\n        return this.tryGetRuleContext(0, VariabledeclarationstatementContext);\r\n    }\r\n    functiondeclarationstatement() {\r\n        return this.tryGetRuleContext(0, FunctiondeclarationstatementContext);\r\n    }\r\n    blockdeclaration() {\r\n        return this.tryGetRuleContext(0, BlockdeclarationContext);\r\n    }\r\n    myclassspecifierstatement() {\r\n        return this.tryGetRuleContext(0, MyclassspecifierstatementContext);\r\n    }\r\n    functiondefinition() {\r\n        return this.tryGetRuleContext(0, FunctiondefinitionContext);\r\n    }\r\n    templatedeclaration() {\r\n        return this.tryGetRuleContext(0, TemplatedeclarationContext);\r\n    }\r\n    explicitinstantiation() {\r\n        return this.tryGetRuleContext(0, ExplicitinstantiationContext);\r\n    }\r\n    explicitspecialization() {\r\n        return this.tryGetRuleContext(0, ExplicitspecializationContext);\r\n    }\r\n    linkagespecification() {\r\n        return this.tryGetRuleContext(0, LinkagespecificationContext);\r\n    }\r\n    namespacedefinition() {\r\n        return this.tryGetRuleContext(0, NamespacedefinitionContext);\r\n    }\r\n    emptydeclaration() {\r\n        return this.tryGetRuleContext(0, EmptydeclarationContext);\r\n    }\r\n    attributedeclaration() {\r\n        return this.tryGetRuleContext(0, AttributedeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclaration) {\r\n            return visitor.visitDeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclarationContext = DeclarationContext;\r\nclass BlockdeclarationwithoutsimpledeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    asmdefinition() {\r\n        return this.tryGetRuleContext(0, AsmdefinitionContext);\r\n    }\r\n    namespacealiasdefinition() {\r\n        return this.tryGetRuleContext(0, NamespacealiasdefinitionContext);\r\n    }\r\n    usingdeclaration() {\r\n        return this.tryGetRuleContext(0, UsingdeclarationContext);\r\n    }\r\n    usingdirective() {\r\n        return this.tryGetRuleContext(0, UsingdirectiveContext);\r\n    }\r\n    static_assertdeclaration() {\r\n        return this.tryGetRuleContext(0, Static_assertdeclarationContext);\r\n    }\r\n    aliasdeclaration() {\r\n        return this.tryGetRuleContext(0, AliasdeclarationContext);\r\n    }\r\n    opaqueenumdeclaration() {\r\n        return this.tryGetRuleContext(0, OpaqueenumdeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_blockdeclarationwithoutsimpledeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBlockdeclarationwithoutsimpledeclaration) {\r\n            return visitor.visitBlockdeclarationwithoutsimpledeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BlockdeclarationwithoutsimpledeclarationContext = BlockdeclarationwithoutsimpledeclarationContext;\r\nclass BlockdeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    simpledeclaration() {\r\n        return this.tryGetRuleContext(0, SimpledeclarationContext);\r\n    }\r\n    blockdeclarationwithoutsimpledeclaration() {\r\n        return this.tryGetRuleContext(0, BlockdeclarationwithoutsimpledeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_blockdeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBlockdeclaration) {\r\n            return visitor.visitBlockdeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BlockdeclarationContext = BlockdeclarationContext;\r\nclass AliasdeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Using() {\r\n        return this.getToken(CPP14Parser.Using, 0);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    typeid() {\r\n        return this.getRuleContext(0, TypeidContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_aliasdeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAliasdeclaration) {\r\n            return visitor.visitAliasdeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AliasdeclarationContext = AliasdeclarationContext;\r\nclass VariabledeclarationstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    variabledeclaration() {\r\n        return this.getRuleContext(0, VariabledeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_variabledeclarationstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariabledeclarationstatement) {\r\n            return visitor.visitVariabledeclarationstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariabledeclarationstatementContext = VariabledeclarationstatementContext;\r\nclass VariabledeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifier() {\r\n        return this.tryGetRuleContext(0, TypespecifierContext);\r\n    }\r\n    structspecifier() {\r\n        return this.tryGetRuleContext(0, StructspecifierContext);\r\n    }\r\n    variableDeclaratorList() {\r\n        return this.tryGetRuleContext(0, VariableDeclaratorListContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    declspecifierseqwithouttype() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqwithouttypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_variabledeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariabledeclaration) {\r\n            return visitor.visitVariabledeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariabledeclarationContext = VariabledeclarationContext;\r\nclass StructspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Struct() {\r\n        return this.getToken(CPP14Parser.Struct, 0);\r\n    }\r\n    classheadname() {\r\n        return this.getRuleContext(0, ClassheadnameContext);\r\n    }\r\n    myclassbody() {\r\n        return this.getRuleContext(0, MyclassbodyContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_structspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStructspecifier) {\r\n            return visitor.visitStructspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StructspecifierContext = StructspecifierContext;\r\nclass VariableDeclaratorListContext extends ParserRuleContext_1.ParserRuleContext {\r\n    variableDeclarator(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(VariableDeclaratorContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, VariableDeclaratorContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_variableDeclaratorList;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariableDeclaratorList) {\r\n            return visitor.visitVariableDeclaratorList(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariableDeclaratorListContext = VariableDeclaratorListContext;\r\nclass VariableDeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declaratorid() {\r\n        return this.getRuleContext(0, DeclaratoridContext);\r\n    }\r\n    ptroperator(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PtroperatorContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PtroperatorContext);\r\n        }\r\n    }\r\n    LeftBracket(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(CPP14Parser.LeftBracket);\r\n        }\r\n        else {\r\n            return this.getToken(CPP14Parser.LeftBracket, i);\r\n        }\r\n    }\r\n    RightBracket(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(CPP14Parser.RightBracket);\r\n        }\r\n        else {\r\n            return this.getToken(CPP14Parser.RightBracket, i);\r\n        }\r\n    }\r\n    initializerclause() {\r\n        return this.tryGetRuleContext(0, InitializerclauseContext);\r\n    }\r\n    Integerliteral(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(CPP14Parser.Integerliteral);\r\n        }\r\n        else {\r\n            return this.getToken(CPP14Parser.Integerliteral, i);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_variableDeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVariableDeclarator) {\r\n            return visitor.visitVariableDeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VariableDeclaratorContext = VariableDeclaratorContext;\r\nclass DimsContext extends ParserRuleContext_1.ParserRuleContext {\r\n    LeftBracket() {\r\n        return this.getToken(CPP14Parser.LeftBracket, 0);\r\n    }\r\n    RightBracket() {\r\n        return this.getToken(CPP14Parser.RightBracket, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_dims;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDims) {\r\n            return visitor.visitDims(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DimsContext = DimsContext;\r\nclass FunctiondeclarationstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    functionheader() {\r\n        return this.getRuleContext(0, FunctionheaderContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    declspecifierseqwithouttype() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqwithouttypeContext);\r\n    }\r\n    virtspecifierseq() {\r\n        return this.tryGetRuleContext(0, VirtspecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_functiondeclarationstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFunctiondeclarationstatement) {\r\n            return visitor.visitFunctiondeclarationstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FunctiondeclarationstatementContext = FunctiondeclarationstatementContext;\r\nclass SimpledeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declspecifierseq() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqContext);\r\n    }\r\n    initdeclaratorlist() {\r\n        return this.tryGetRuleContext(0, InitdeclaratorlistContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_simpledeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSimpledeclaration) {\r\n            return visitor.visitSimpledeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SimpledeclarationContext = SimpledeclarationContext;\r\nclass Static_assertdeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Static_assert() {\r\n        return this.getToken(CPP14Parser.Static_assert, 0);\r\n    }\r\n    constantexpression() {\r\n        return this.getRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    Stringliteral() {\r\n        return this.getToken(CPP14Parser.Stringliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_static_assertdeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStatic_assertdeclaration) {\r\n            return visitor.visitStatic_assertdeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.Static_assertdeclarationContext = Static_assertdeclarationContext;\r\nclass EmptydeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Semi() {\r\n        return this.getToken(CPP14Parser.Semi, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_emptydeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEmptydeclaration) {\r\n            return visitor.visitEmptydeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EmptydeclarationContext = EmptydeclarationContext;\r\nclass AttributedeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    attributespecifierseq() {\r\n        return this.getRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attributedeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttributedeclaration) {\r\n            return visitor.visitAttributedeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributedeclarationContext = AttributedeclarationContext;\r\nclass DeclspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declspecifierwithouttype() {\r\n        return this.tryGetRuleContext(0, DeclspecifierwithouttypeContext);\r\n    }\r\n    typespecifier() {\r\n        return this.tryGetRuleContext(0, TypespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclspecifier) {\r\n            return visitor.visitDeclspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclspecifierContext = DeclspecifierContext;\r\nclass DeclspecifierseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declspecifier() {\r\n        return this.getRuleContext(0, DeclspecifierContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    declspecifierseq() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declspecifierseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclspecifierseq) {\r\n            return visitor.visitDeclspecifierseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclspecifierseqContext = DeclspecifierseqContext;\r\nclass DeclspecifierwithouttypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    storageclassspecifier() {\r\n        return this.tryGetRuleContext(0, StorageclassspecifierContext);\r\n    }\r\n    functionspecifier() {\r\n        return this.tryGetRuleContext(0, FunctionspecifierContext);\r\n    }\r\n    Friend() {\r\n        return this.tryGetToken(CPP14Parser.Friend, 0);\r\n    }\r\n    Typedef() {\r\n        return this.tryGetToken(CPP14Parser.Typedef, 0);\r\n    }\r\n    Constexpr() {\r\n        return this.tryGetToken(CPP14Parser.Constexpr, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declspecifierwithouttype;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclspecifierwithouttype) {\r\n            return visitor.visitDeclspecifierwithouttype(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclspecifierwithouttypeContext = DeclspecifierwithouttypeContext;\r\nclass DeclspecifierseqwithouttypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declspecifierwithouttype() {\r\n        return this.getRuleContext(0, DeclspecifierwithouttypeContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    declspecifierseq() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declspecifierseqwithouttype;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclspecifierseqwithouttype) {\r\n            return visitor.visitDeclspecifierseqwithouttype(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclspecifierseqwithouttypeContext = DeclspecifierseqwithouttypeContext;\r\nclass StorageclassspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Register() {\r\n        return this.tryGetToken(CPP14Parser.Register, 0);\r\n    }\r\n    Static() {\r\n        return this.tryGetToken(CPP14Parser.Static, 0);\r\n    }\r\n    Thread_local() {\r\n        return this.tryGetToken(CPP14Parser.Thread_local, 0);\r\n    }\r\n    Extern() {\r\n        return this.tryGetToken(CPP14Parser.Extern, 0);\r\n    }\r\n    Mutable() {\r\n        return this.tryGetToken(CPP14Parser.Mutable, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_storageclassspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStorageclassspecifier) {\r\n            return visitor.visitStorageclassspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StorageclassspecifierContext = StorageclassspecifierContext;\r\nclass FunctionspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Inline() {\r\n        return this.tryGetToken(CPP14Parser.Inline, 0);\r\n    }\r\n    Virtual() {\r\n        return this.tryGetToken(CPP14Parser.Virtual, 0);\r\n    }\r\n    Explicit() {\r\n        return this.tryGetToken(CPP14Parser.Explicit, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_functionspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFunctionspecifier) {\r\n            return visitor.visitFunctionspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FunctionspecifierContext = FunctionspecifierContext;\r\nclass TypedefnameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typedefname;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypedefname) {\r\n            return visitor.visitTypedefname(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypedefnameContext = TypedefnameContext;\r\nclass TypespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    trailingtypespecifier() {\r\n        return this.tryGetRuleContext(0, TrailingtypespecifierContext);\r\n    }\r\n    myclassspecifier() {\r\n        return this.tryGetRuleContext(0, MyclassspecifierContext);\r\n    }\r\n    enumspecifier() {\r\n        return this.tryGetRuleContext(0, EnumspecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypespecifier) {\r\n            return visitor.visitTypespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypespecifierContext = TypespecifierContext;\r\nclass TrailingtypespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    simpletypespecifier() {\r\n        return this.tryGetRuleContext(0, SimpletypespecifierContext);\r\n    }\r\n    elaboratedtypespecifier() {\r\n        return this.tryGetRuleContext(0, ElaboratedtypespecifierContext);\r\n    }\r\n    typenamespecifier() {\r\n        return this.tryGetRuleContext(0, TypenamespecifierContext);\r\n    }\r\n    cvqualifier() {\r\n        return this.tryGetRuleContext(0, CvqualifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_trailingtypespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTrailingtypespecifier) {\r\n            return visitor.visitTrailingtypespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TrailingtypespecifierContext = TrailingtypespecifierContext;\r\nclass TypespecifierseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifier() {\r\n        return this.getRuleContext(0, TypespecifierContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    typespecifierseq() {\r\n        return this.tryGetRuleContext(0, TypespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typespecifierseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypespecifierseq) {\r\n            return visitor.visitTypespecifierseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypespecifierseqContext = TypespecifierseqContext;\r\nclass TrailingtypespecifierseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    trailingtypespecifier() {\r\n        return this.getRuleContext(0, TrailingtypespecifierContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    trailingtypespecifierseq() {\r\n        return this.tryGetRuleContext(0, TrailingtypespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_trailingtypespecifierseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTrailingtypespecifierseq) {\r\n            return visitor.visitTrailingtypespecifierseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TrailingtypespecifierseqContext = TrailingtypespecifierseqContext;\r\nclass SimpletypespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typename() {\r\n        return this.tryGetRuleContext(0, TypenameContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    Template() {\r\n        return this.tryGetToken(CPP14Parser.Template, 0);\r\n    }\r\n    simpletemplateid() {\r\n        return this.tryGetRuleContext(0, SimpletemplateidContext);\r\n    }\r\n    Char() {\r\n        return this.tryGetToken(CPP14Parser.Char, 0);\r\n    }\r\n    Char16() {\r\n        return this.tryGetToken(CPP14Parser.Char16, 0);\r\n    }\r\n    Char32() {\r\n        return this.tryGetToken(CPP14Parser.Char32, 0);\r\n    }\r\n    Wchar() {\r\n        return this.tryGetToken(CPP14Parser.Wchar, 0);\r\n    }\r\n    Bool() {\r\n        return this.tryGetToken(CPP14Parser.Bool, 0);\r\n    }\r\n    Short() {\r\n        return this.tryGetToken(CPP14Parser.Short, 0);\r\n    }\r\n    Int() {\r\n        return this.tryGetToken(CPP14Parser.Int, 0);\r\n    }\r\n    Long() {\r\n        return this.tryGetToken(CPP14Parser.Long, 0);\r\n    }\r\n    Signed() {\r\n        return this.tryGetToken(CPP14Parser.Signed, 0);\r\n    }\r\n    Unsigned() {\r\n        return this.tryGetToken(CPP14Parser.Unsigned, 0);\r\n    }\r\n    simpletypespecifier() {\r\n        return this.tryGetRuleContext(0, SimpletypespecifierContext);\r\n    }\r\n    Float() {\r\n        return this.tryGetToken(CPP14Parser.Float, 0);\r\n    }\r\n    Double() {\r\n        return this.tryGetToken(CPP14Parser.Double, 0);\r\n    }\r\n    Void() {\r\n        return this.tryGetToken(CPP14Parser.Void, 0);\r\n    }\r\n    Auto() {\r\n        return this.tryGetToken(CPP14Parser.Auto, 0);\r\n    }\r\n    decltypespecifier() {\r\n        return this.tryGetRuleContext(0, DecltypespecifierContext);\r\n    }\r\n    File() {\r\n        return this.tryGetToken(CPP14Parser.File, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_simpletypespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSimpletypespecifier) {\r\n            return visitor.visitSimpletypespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SimpletypespecifierContext = SimpletypespecifierContext;\r\nclass TypenameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    myclassname() {\r\n        return this.tryGetRuleContext(0, MyclassnameContext);\r\n    }\r\n    enumname() {\r\n        return this.tryGetRuleContext(0, EnumnameContext);\r\n    }\r\n    typedefname() {\r\n        return this.tryGetRuleContext(0, TypedefnameContext);\r\n    }\r\n    simpletemplateid() {\r\n        return this.tryGetRuleContext(0, SimpletemplateidContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typename;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypename) {\r\n            return visitor.visitTypename(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypenameContext = TypenameContext;\r\nclass DecltypespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Decltype() {\r\n        return this.getToken(CPP14Parser.Decltype, 0);\r\n    }\r\n    expression() {\r\n        return this.tryGetRuleContext(0, ExpressionContext);\r\n    }\r\n    Auto() {\r\n        return this.tryGetToken(CPP14Parser.Auto, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_decltypespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDecltypespecifier) {\r\n            return visitor.visitDecltypespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DecltypespecifierContext = DecltypespecifierContext;\r\nclass ElaboratedtypespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classkey() {\r\n        return this.tryGetRuleContext(0, ClasskeyContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    simpletemplateid() {\r\n        return this.tryGetRuleContext(0, SimpletemplateidContext);\r\n    }\r\n    Template() {\r\n        return this.tryGetToken(CPP14Parser.Template, 0);\r\n    }\r\n    Enum() {\r\n        return this.tryGetToken(CPP14Parser.Enum, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_elaboratedtypespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitElaboratedtypespecifier) {\r\n            return visitor.visitElaboratedtypespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ElaboratedtypespecifierContext = ElaboratedtypespecifierContext;\r\nclass EnumnameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enumname;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumname) {\r\n            return visitor.visitEnumname(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumnameContext = EnumnameContext;\r\nclass EnumspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    enumhead() {\r\n        return this.getRuleContext(0, EnumheadContext);\r\n    }\r\n    enumeratorlist() {\r\n        return this.tryGetRuleContext(0, EnumeratorlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enumspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumspecifier) {\r\n            return visitor.visitEnumspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumspecifierContext = EnumspecifierContext;\r\nclass EnumheadContext extends ParserRuleContext_1.ParserRuleContext {\r\n    enumkey() {\r\n        return this.getRuleContext(0, EnumkeyContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    enumbase() {\r\n        return this.tryGetRuleContext(0, EnumbaseContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enumhead;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumhead) {\r\n            return visitor.visitEnumhead(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumheadContext = EnumheadContext;\r\nclass OpaqueenumdeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    enumkey() {\r\n        return this.getRuleContext(0, EnumkeyContext);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    enumbase() {\r\n        return this.tryGetRuleContext(0, EnumbaseContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_opaqueenumdeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitOpaqueenumdeclaration) {\r\n            return visitor.visitOpaqueenumdeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.OpaqueenumdeclarationContext = OpaqueenumdeclarationContext;\r\nclass EnumkeyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Enum() {\r\n        return this.getToken(CPP14Parser.Enum, 0);\r\n    }\r\n    Class() {\r\n        return this.tryGetToken(CPP14Parser.Class, 0);\r\n    }\r\n    Struct() {\r\n        return this.tryGetToken(CPP14Parser.Struct, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enumkey;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumkey) {\r\n            return visitor.visitEnumkey(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumkeyContext = EnumkeyContext;\r\nclass EnumbaseContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifierseq() {\r\n        return this.getRuleContext(0, TypespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enumbase;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumbase) {\r\n            return visitor.visitEnumbase(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumbaseContext = EnumbaseContext;\r\nclass EnumeratorlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    enumeratordefinition() {\r\n        return this.getRuleContext(0, EnumeratordefinitionContext);\r\n    }\r\n    enumeratorlist() {\r\n        return this.tryGetRuleContext(0, EnumeratorlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enumeratorlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumeratorlist) {\r\n            return visitor.visitEnumeratorlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumeratorlistContext = EnumeratorlistContext;\r\nclass EnumeratordefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    enumerator() {\r\n        return this.getRuleContext(0, EnumeratorContext);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enumeratordefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumeratordefinition) {\r\n            return visitor.visitEnumeratordefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumeratordefinitionContext = EnumeratordefinitionContext;\r\nclass EnumeratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_enumerator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitEnumerator) {\r\n            return visitor.visitEnumerator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.EnumeratorContext = EnumeratorContext;\r\nclass NamespacenameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    originalnamespacename() {\r\n        return this.tryGetRuleContext(0, OriginalnamespacenameContext);\r\n    }\r\n    namespacealias() {\r\n        return this.tryGetRuleContext(0, NamespacealiasContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_namespacename;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNamespacename) {\r\n            return visitor.visitNamespacename(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NamespacenameContext = NamespacenameContext;\r\nclass OriginalnamespacenameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_originalnamespacename;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitOriginalnamespacename) {\r\n            return visitor.visitOriginalnamespacename(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.OriginalnamespacenameContext = OriginalnamespacenameContext;\r\nclass NamespacedefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    namednamespacedefinition() {\r\n        return this.tryGetRuleContext(0, NamednamespacedefinitionContext);\r\n    }\r\n    unnamednamespacedefinition() {\r\n        return this.tryGetRuleContext(0, UnnamednamespacedefinitionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_namespacedefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNamespacedefinition) {\r\n            return visitor.visitNamespacedefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NamespacedefinitionContext = NamespacedefinitionContext;\r\nclass NamednamespacedefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    originalnamespacedefinition() {\r\n        return this.tryGetRuleContext(0, OriginalnamespacedefinitionContext);\r\n    }\r\n    extensionnamespacedefinition() {\r\n        return this.tryGetRuleContext(0, ExtensionnamespacedefinitionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_namednamespacedefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNamednamespacedefinition) {\r\n            return visitor.visitNamednamespacedefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NamednamespacedefinitionContext = NamednamespacedefinitionContext;\r\nclass OriginalnamespacedefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Namespace() {\r\n        return this.getToken(CPP14Parser.Namespace, 0);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    namespacebody() {\r\n        return this.getRuleContext(0, NamespacebodyContext);\r\n    }\r\n    Inline() {\r\n        return this.tryGetToken(CPP14Parser.Inline, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_originalnamespacedefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitOriginalnamespacedefinition) {\r\n            return visitor.visitOriginalnamespacedefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.OriginalnamespacedefinitionContext = OriginalnamespacedefinitionContext;\r\nclass ExtensionnamespacedefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Namespace() {\r\n        return this.getToken(CPP14Parser.Namespace, 0);\r\n    }\r\n    originalnamespacename() {\r\n        return this.getRuleContext(0, OriginalnamespacenameContext);\r\n    }\r\n    namespacebody() {\r\n        return this.getRuleContext(0, NamespacebodyContext);\r\n    }\r\n    Inline() {\r\n        return this.tryGetToken(CPP14Parser.Inline, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_extensionnamespacedefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExtensionnamespacedefinition) {\r\n            return visitor.visitExtensionnamespacedefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExtensionnamespacedefinitionContext = ExtensionnamespacedefinitionContext;\r\nclass UnnamednamespacedefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Namespace() {\r\n        return this.getToken(CPP14Parser.Namespace, 0);\r\n    }\r\n    namespacebody() {\r\n        return this.getRuleContext(0, NamespacebodyContext);\r\n    }\r\n    Inline() {\r\n        return this.tryGetToken(CPP14Parser.Inline, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_unnamednamespacedefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUnnamednamespacedefinition) {\r\n            return visitor.visitUnnamednamespacedefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UnnamednamespacedefinitionContext = UnnamednamespacedefinitionContext;\r\nclass NamespacebodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declarationseq() {\r\n        return this.tryGetRuleContext(0, DeclarationseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_namespacebody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNamespacebody) {\r\n            return visitor.visitNamespacebody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NamespacebodyContext = NamespacebodyContext;\r\nclass NamespacealiasContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_namespacealias;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNamespacealias) {\r\n            return visitor.visitNamespacealias(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NamespacealiasContext = NamespacealiasContext;\r\nclass NamespacealiasdefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Namespace() {\r\n        return this.getToken(CPP14Parser.Namespace, 0);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    qualifiednamespacespecifier() {\r\n        return this.getRuleContext(0, QualifiednamespacespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_namespacealiasdefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNamespacealiasdefinition) {\r\n            return visitor.visitNamespacealiasdefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NamespacealiasdefinitionContext = NamespacealiasdefinitionContext;\r\nclass QualifiednamespacespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    namespacename() {\r\n        return this.getRuleContext(0, NamespacenameContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_qualifiednamespacespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitQualifiednamespacespecifier) {\r\n            return visitor.visitQualifiednamespacespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.QualifiednamespacespecifierContext = QualifiednamespacespecifierContext;\r\nclass UsingdeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Using() {\r\n        return this.getToken(CPP14Parser.Using, 0);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    unqualifiedid() {\r\n        return this.getRuleContext(0, UnqualifiedidContext);\r\n    }\r\n    Typename() {\r\n        return this.tryGetToken(CPP14Parser.Typename, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_usingdeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUsingdeclaration) {\r\n            return visitor.visitUsingdeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UsingdeclarationContext = UsingdeclarationContext;\r\nclass UsingdirectiveContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Using() {\r\n        return this.getToken(CPP14Parser.Using, 0);\r\n    }\r\n    Namespace() {\r\n        return this.getToken(CPP14Parser.Namespace, 0);\r\n    }\r\n    namespacename() {\r\n        return this.getRuleContext(0, NamespacenameContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_usingdirective;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUsingdirective) {\r\n            return visitor.visitUsingdirective(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UsingdirectiveContext = UsingdirectiveContext;\r\nclass AsmdefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Asm() {\r\n        return this.getToken(CPP14Parser.Asm, 0);\r\n    }\r\n    Stringliteral() {\r\n        return this.getToken(CPP14Parser.Stringliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_asmdefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAsmdefinition) {\r\n            return visitor.visitAsmdefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AsmdefinitionContext = AsmdefinitionContext;\r\nclass LinkagespecificationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Extern() {\r\n        return this.getToken(CPP14Parser.Extern, 0);\r\n    }\r\n    Stringliteral() {\r\n        return this.getToken(CPP14Parser.Stringliteral, 0);\r\n    }\r\n    declarationseq() {\r\n        return this.tryGetRuleContext(0, DeclarationseqContext);\r\n    }\r\n    declaration() {\r\n        return this.tryGetRuleContext(0, DeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_linkagespecification;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLinkagespecification) {\r\n            return visitor.visitLinkagespecification(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LinkagespecificationContext = LinkagespecificationContext;\r\nclass AttributespecifierseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    attributespecifier() {\r\n        return this.getRuleContext(0, AttributespecifierContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attributespecifierseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttributespecifierseq) {\r\n            return visitor.visitAttributespecifierseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributespecifierseqContext = AttributespecifierseqContext;\r\nclass AttributespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    attributelist() {\r\n        return this.tryGetRuleContext(0, AttributelistContext);\r\n    }\r\n    alignmentspecifier() {\r\n        return this.tryGetRuleContext(0, AlignmentspecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attributespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttributespecifier) {\r\n            return visitor.visitAttributespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributespecifierContext = AttributespecifierContext;\r\nclass AlignmentspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Alignas() {\r\n        return this.getToken(CPP14Parser.Alignas, 0);\r\n    }\r\n    typeid() {\r\n        return this.tryGetRuleContext(0, TypeidContext);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_alignmentspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAlignmentspecifier) {\r\n            return visitor.visitAlignmentspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AlignmentspecifierContext = AlignmentspecifierContext;\r\nclass AttributelistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    attribute() {\r\n        return this.tryGetRuleContext(0, AttributeContext);\r\n    }\r\n    attributelist() {\r\n        return this.tryGetRuleContext(0, AttributelistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attributelist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttributelist) {\r\n            return visitor.visitAttributelist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributelistContext = AttributelistContext;\r\nclass AttributeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    attributetoken() {\r\n        return this.getRuleContext(0, AttributetokenContext);\r\n    }\r\n    attributeargumentclause() {\r\n        return this.tryGetRuleContext(0, AttributeargumentclauseContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attribute;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttribute) {\r\n            return visitor.visitAttribute(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributeContext = AttributeContext;\r\nclass AttributetokenContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    attributescopedtoken() {\r\n        return this.tryGetRuleContext(0, AttributescopedtokenContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attributetoken;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttributetoken) {\r\n            return visitor.visitAttributetoken(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributetokenContext = AttributetokenContext;\r\nclass AttributescopedtokenContext extends ParserRuleContext_1.ParserRuleContext {\r\n    attributenamespace() {\r\n        return this.getRuleContext(0, AttributenamespaceContext);\r\n    }\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attributescopedtoken;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttributescopedtoken) {\r\n            return visitor.visitAttributescopedtoken(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributescopedtokenContext = AttributescopedtokenContext;\r\nclass AttributenamespaceContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attributenamespace;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttributenamespace) {\r\n            return visitor.visitAttributenamespace(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributenamespaceContext = AttributenamespaceContext;\r\nclass AttributeargumentclauseContext extends ParserRuleContext_1.ParserRuleContext {\r\n    balancedtokenseq() {\r\n        return this.getRuleContext(0, BalancedtokenseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_attributeargumentclause;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAttributeargumentclause) {\r\n            return visitor.visitAttributeargumentclause(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AttributeargumentclauseContext = AttributeargumentclauseContext;\r\nclass BalancedtokenseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    balancedtoken() {\r\n        return this.tryGetRuleContext(0, BalancedtokenContext);\r\n    }\r\n    balancedtokenseq() {\r\n        return this.tryGetRuleContext(0, BalancedtokenseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_balancedtokenseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBalancedtokenseq) {\r\n            return visitor.visitBalancedtokenseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BalancedtokenseqContext = BalancedtokenseqContext;\r\nclass BalancedtokenContext extends ParserRuleContext_1.ParserRuleContext {\r\n    balancedtokenseq() {\r\n        return this.getRuleContext(0, BalancedtokenseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_balancedtoken;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBalancedtoken) {\r\n            return visitor.visitBalancedtoken(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BalancedtokenContext = BalancedtokenContext;\r\nclass InitdeclaratorlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    initdeclarator(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(InitdeclaratorContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, InitdeclaratorContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_initdeclaratorlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInitdeclaratorlist) {\r\n            return visitor.visitInitdeclaratorlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InitdeclaratorlistContext = InitdeclaratorlistContext;\r\nclass InitdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declarator() {\r\n        return this.getRuleContext(0, DeclaratorContext);\r\n    }\r\n    initializer() {\r\n        return this.tryGetRuleContext(0, InitializerContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_initdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInitdeclarator) {\r\n            return visitor.visitInitdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InitdeclaratorContext = InitdeclaratorContext;\r\nclass DeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    ptrdeclarator() {\r\n        return this.tryGetRuleContext(0, PtrdeclaratorContext);\r\n    }\r\n    noptrdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrdeclaratorContext);\r\n    }\r\n    parametersandqualifiers() {\r\n        return this.tryGetRuleContext(0, ParametersandqualifiersContext);\r\n    }\r\n    trailingreturntype() {\r\n        return this.tryGetRuleContext(0, TrailingreturntypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclarator) {\r\n            return visitor.visitDeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclaratorContext = DeclaratorContext;\r\nclass PtrdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    noptrdeclarator() {\r\n        return this.getRuleContext(0, NoptrdeclaratorContext);\r\n    }\r\n    ptroperator(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PtroperatorContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PtroperatorContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_ptrdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPtrdeclarator) {\r\n            return visitor.visitPtrdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PtrdeclaratorContext = PtrdeclaratorContext;\r\nclass NoptrdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declaratorid() {\r\n        return this.tryGetRuleContext(0, DeclaratoridContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    noptrdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrdeclaratorContext);\r\n    }\r\n    parametersandqualifiers() {\r\n        return this.tryGetRuleContext(0, ParametersandqualifiersContext);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    ptrdeclarator() {\r\n        return this.tryGetRuleContext(0, PtrdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_noptrdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNoptrdeclarator) {\r\n            return visitor.visitNoptrdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NoptrdeclaratorContext = NoptrdeclaratorContext;\r\nclass ParametersandqualifiersContext extends ParserRuleContext_1.ParserRuleContext {\r\n    parameterdeclarationclause() {\r\n        return this.getRuleContext(0, ParameterdeclarationclauseContext);\r\n    }\r\n    cvqualifierseq() {\r\n        return this.tryGetRuleContext(0, CvqualifierseqContext);\r\n    }\r\n    refqualifier() {\r\n        return this.tryGetRuleContext(0, RefqualifierContext);\r\n    }\r\n    exceptionspecification() {\r\n        return this.tryGetRuleContext(0, ExceptionspecificationContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_parametersandqualifiers;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitParametersandqualifiers) {\r\n            return visitor.visitParametersandqualifiers(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ParametersandqualifiersContext = ParametersandqualifiersContext;\r\nclass TrailingreturntypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    trailingtypespecifierseq() {\r\n        return this.getRuleContext(0, TrailingtypespecifierseqContext);\r\n    }\r\n    abstractdeclarator() {\r\n        return this.tryGetRuleContext(0, AbstractdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_trailingreturntype;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTrailingreturntype) {\r\n            return visitor.visitTrailingreturntype(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TrailingreturntypeContext = TrailingreturntypeContext;\r\nclass PtroperatorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    cvqualifierseq() {\r\n        return this.tryGetRuleContext(0, CvqualifierseqContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_ptroperator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPtroperator) {\r\n            return visitor.visitPtroperator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PtroperatorContext = PtroperatorContext;\r\nclass CvqualifierseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    cvqualifier() {\r\n        return this.getRuleContext(0, CvqualifierContext);\r\n    }\r\n    cvqualifierseq() {\r\n        return this.tryGetRuleContext(0, CvqualifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_cvqualifierseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCvqualifierseq) {\r\n            return visitor.visitCvqualifierseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CvqualifierseqContext = CvqualifierseqContext;\r\nclass CvqualifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Const() {\r\n        return this.tryGetToken(CPP14Parser.Const, 0);\r\n    }\r\n    Volatile() {\r\n        return this.tryGetToken(CPP14Parser.Volatile, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_cvqualifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCvqualifier) {\r\n            return visitor.visitCvqualifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CvqualifierContext = CvqualifierContext;\r\nclass RefqualifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_refqualifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitRefqualifier) {\r\n            return visitor.visitRefqualifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.RefqualifierContext = RefqualifierContext;\r\nclass DeclaratoridContext extends ParserRuleContext_1.ParserRuleContext {\r\n    idexpression() {\r\n        return this.getRuleContext(0, IdexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_declaratorid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDeclaratorid) {\r\n            return visitor.visitDeclaratorid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DeclaratoridContext = DeclaratoridContext;\r\nclass TypeidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifierseq() {\r\n        return this.getRuleContext(0, TypespecifierseqContext);\r\n    }\r\n    abstractdeclarator() {\r\n        return this.tryGetRuleContext(0, AbstractdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typeid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeid) {\r\n            return visitor.visitTypeid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeidContext = TypeidContext;\r\nclass AbstractdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    ptrabstractdeclarator() {\r\n        return this.tryGetRuleContext(0, PtrabstractdeclaratorContext);\r\n    }\r\n    parametersandqualifiers() {\r\n        return this.tryGetRuleContext(0, ParametersandqualifiersContext);\r\n    }\r\n    trailingreturntype() {\r\n        return this.tryGetRuleContext(0, TrailingreturntypeContext);\r\n    }\r\n    noptrabstractdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrabstractdeclaratorContext);\r\n    }\r\n    abstractpackdeclarator() {\r\n        return this.tryGetRuleContext(0, AbstractpackdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_abstractdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAbstractdeclarator) {\r\n            return visitor.visitAbstractdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AbstractdeclaratorContext = AbstractdeclaratorContext;\r\nclass PtrabstractdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    noptrabstractdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrabstractdeclaratorContext);\r\n    }\r\n    ptroperator() {\r\n        return this.tryGetRuleContext(0, PtroperatorContext);\r\n    }\r\n    ptrabstractdeclarator() {\r\n        return this.tryGetRuleContext(0, PtrabstractdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_ptrabstractdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPtrabstractdeclarator) {\r\n            return visitor.visitPtrabstractdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PtrabstractdeclaratorContext = PtrabstractdeclaratorContext;\r\nclass NoptrabstractdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    noptrabstractdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrabstractdeclaratorContext);\r\n    }\r\n    parametersandqualifiers() {\r\n        return this.tryGetRuleContext(0, ParametersandqualifiersContext);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    ptrabstractdeclarator() {\r\n        return this.tryGetRuleContext(0, PtrabstractdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_noptrabstractdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNoptrabstractdeclarator) {\r\n            return visitor.visitNoptrabstractdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NoptrabstractdeclaratorContext = NoptrabstractdeclaratorContext;\r\nclass AbstractpackdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    noptrabstractpackdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrabstractpackdeclaratorContext);\r\n    }\r\n    ptroperator() {\r\n        return this.tryGetRuleContext(0, PtroperatorContext);\r\n    }\r\n    abstractpackdeclarator() {\r\n        return this.tryGetRuleContext(0, AbstractpackdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_abstractpackdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAbstractpackdeclarator) {\r\n            return visitor.visitAbstractpackdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AbstractpackdeclaratorContext = AbstractpackdeclaratorContext;\r\nclass NoptrabstractpackdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    noptrabstractpackdeclarator() {\r\n        return this.tryGetRuleContext(0, NoptrabstractpackdeclaratorContext);\r\n    }\r\n    parametersandqualifiers() {\r\n        return this.tryGetRuleContext(0, ParametersandqualifiersContext);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_noptrabstractpackdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNoptrabstractpackdeclarator) {\r\n            return visitor.visitNoptrabstractpackdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NoptrabstractpackdeclaratorContext = NoptrabstractpackdeclaratorContext;\r\nclass ParameterdeclarationclauseContext extends ParserRuleContext_1.ParserRuleContext {\r\n    parameterdeclarationlist() {\r\n        return this.tryGetRuleContext(0, ParameterdeclarationlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_parameterdeclarationclause;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitParameterdeclarationclause) {\r\n            return visitor.visitParameterdeclarationclause(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ParameterdeclarationclauseContext = ParameterdeclarationclauseContext;\r\nclass ParameterdeclarationlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    parameterdeclaration() {\r\n        return this.getRuleContext(0, ParameterdeclarationContext);\r\n    }\r\n    parameterdeclarationlist() {\r\n        return this.tryGetRuleContext(0, ParameterdeclarationlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_parameterdeclarationlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitParameterdeclarationlist) {\r\n            return visitor.visitParameterdeclarationlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ParameterdeclarationlistContext = ParameterdeclarationlistContext;\r\nclass ParameterdeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifier() {\r\n        return this.getRuleContext(0, TypespecifierContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    declspecifierseqwithouttype() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqwithouttypeContext);\r\n    }\r\n    variableDeclaratorList() {\r\n        return this.tryGetRuleContext(0, VariableDeclaratorListContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_parameterdeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitParameterdeclaration) {\r\n            return visitor.visitParameterdeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ParameterdeclarationContext = ParameterdeclarationContext;\r\nclass FunctiondefinitionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    functionheader() {\r\n        return this.getRuleContext(0, FunctionheaderContext);\r\n    }\r\n    functionbody() {\r\n        return this.getRuleContext(0, FunctionbodyContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    declspecifierseqwithouttype() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqwithouttypeContext);\r\n    }\r\n    virtspecifierseq() {\r\n        return this.tryGetRuleContext(0, VirtspecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_functiondefinition;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFunctiondefinition) {\r\n            return visitor.visitFunctiondefinition(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FunctiondefinitionContext = FunctiondefinitionContext;\r\nclass FunctionheaderContext extends ParserRuleContext_1.ParserRuleContext {\r\n    functiondeclarator() {\r\n        return this.getRuleContext(0, FunctiondeclaratorContext);\r\n    }\r\n    typespecifier() {\r\n        return this.tryGetRuleContext(0, TypespecifierContext);\r\n    }\r\n    ptroperator(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PtroperatorContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PtroperatorContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_functionheader;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFunctionheader) {\r\n            return visitor.visitFunctionheader(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FunctionheaderContext = FunctionheaderContext;\r\nclass FunctiondeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declaratorid() {\r\n        return this.getRuleContext(0, DeclaratoridContext);\r\n    }\r\n    parameterdeclarationclause() {\r\n        return this.getRuleContext(0, ParameterdeclarationclauseContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_functiondeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFunctiondeclarator) {\r\n            return visitor.visitFunctiondeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FunctiondeclaratorContext = FunctiondeclaratorContext;\r\nclass FunctionbodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    compoundstatement() {\r\n        return this.tryGetRuleContext(0, CompoundstatementContext);\r\n    }\r\n    ctorinitializer() {\r\n        return this.tryGetRuleContext(0, CtorinitializerContext);\r\n    }\r\n    functiontryblock() {\r\n        return this.tryGetRuleContext(0, FunctiontryblockContext);\r\n    }\r\n    Default() {\r\n        return this.tryGetToken(CPP14Parser.Default, 0);\r\n    }\r\n    Delete() {\r\n        return this.tryGetToken(CPP14Parser.Delete, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_functionbody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFunctionbody) {\r\n            return visitor.visitFunctionbody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FunctionbodyContext = FunctionbodyContext;\r\nclass InitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    braceorequalinitializer() {\r\n        return this.tryGetRuleContext(0, BraceorequalinitializerContext);\r\n    }\r\n    expressionlist() {\r\n        return this.tryGetRuleContext(0, ExpressionlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_initializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInitializer) {\r\n            return visitor.visitInitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InitializerContext = InitializerContext;\r\nclass BraceorequalinitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    initializerclause() {\r\n        return this.tryGetRuleContext(0, InitializerclauseContext);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_braceorequalinitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBraceorequalinitializer) {\r\n            return visitor.visitBraceorequalinitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BraceorequalinitializerContext = BraceorequalinitializerContext;\r\nclass InitializerclauseContext extends ParserRuleContext_1.ParserRuleContext {\r\n    assignmentexpression() {\r\n        return this.tryGetRuleContext(0, AssignmentexpressionContext);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_initializerclause;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInitializerclause) {\r\n            return visitor.visitInitializerclause(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InitializerclauseContext = InitializerclauseContext;\r\nclass InitializerlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    initializerclause(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(InitializerclauseContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, InitializerclauseContext);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_initializerlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitInitializerlist) {\r\n            return visitor.visitInitializerlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.InitializerlistContext = InitializerlistContext;\r\nclass BracedinitlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    initializerlist() {\r\n        return this.tryGetRuleContext(0, InitializerlistContext);\r\n    }\r\n    Comma() {\r\n        return this.tryGetToken(CPP14Parser.Comma, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_bracedinitlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBracedinitlist) {\r\n            return visitor.visitBracedinitlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BracedinitlistContext = BracedinitlistContext;\r\nclass MyclassnameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    simpletemplateid() {\r\n        return this.tryGetRuleContext(0, SimpletemplateidContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_myclassname;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMyclassname) {\r\n            return visitor.visitMyclassname(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MyclassnameContext = MyclassnameContext;\r\nclass ClassspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classhead() {\r\n        return this.getRuleContext(0, ClassheadContext);\r\n    }\r\n    classbody() {\r\n        return this.getRuleContext(0, ClassbodyContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_classspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassspecifier) {\r\n            return visitor.visitClassspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassspecifierContext = ClassspecifierContext;\r\nclass ClassbodyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    memberspecification() {\r\n        return this.tryGetRuleContext(0, MemberspecificationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_classbody;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassbody) {\r\n            return visitor.visitClassbody(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassbodyContext = ClassbodyContext;\r\nclass ClassheadContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classkey() {\r\n        return this.getRuleContext(0, ClasskeyContext);\r\n    }\r\n    classheadname() {\r\n        return this.tryGetRuleContext(0, ClassheadnameContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    classvirtspecifier() {\r\n        return this.tryGetRuleContext(0, ClassvirtspecifierContext);\r\n    }\r\n    baseclause() {\r\n        return this.tryGetRuleContext(0, BaseclauseContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_classhead;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClasshead) {\r\n            return visitor.visitClasshead(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassheadContext = ClassheadContext;\r\nclass ClassheadnameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    myclassname() {\r\n        return this.getRuleContext(0, MyclassnameContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_classheadname;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassheadname) {\r\n            return visitor.visitClassheadname(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassheadnameContext = ClassheadnameContext;\r\nclass ClassvirtspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Final() {\r\n        return this.getToken(CPP14Parser.Final, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_classvirtspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassvirtspecifier) {\r\n            return visitor.visitClassvirtspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassvirtspecifierContext = ClassvirtspecifierContext;\r\nclass ClasskeyContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Class() {\r\n        return this.tryGetToken(CPP14Parser.Class, 0);\r\n    }\r\n    Struct() {\r\n        return this.tryGetToken(CPP14Parser.Struct, 0);\r\n    }\r\n    Union() {\r\n        return this.tryGetToken(CPP14Parser.Union, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_classkey;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClasskey) {\r\n            return visitor.visitClasskey(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClasskeyContext = ClasskeyContext;\r\nclass MemberspecificationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    memberdeclaration() {\r\n        return this.tryGetRuleContext(0, MemberdeclarationContext);\r\n    }\r\n    memberspecification() {\r\n        return this.tryGetRuleContext(0, MemberspecificationContext);\r\n    }\r\n    accessspecifier() {\r\n        return this.tryGetRuleContext(0, AccessspecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_memberspecification;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMemberspecification) {\r\n            return visitor.visitMemberspecification(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MemberspecificationContext = MemberspecificationContext;\r\nclass MemberdeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    membervariabledeclarationstatement() {\r\n        return this.tryGetRuleContext(0, MembervariabledeclarationstatementContext);\r\n    }\r\n    functiondefinition() {\r\n        return this.tryGetRuleContext(0, FunctiondefinitionContext);\r\n    }\r\n    usingdeclaration() {\r\n        return this.tryGetRuleContext(0, UsingdeclarationContext);\r\n    }\r\n    static_assertdeclaration() {\r\n        return this.tryGetRuleContext(0, Static_assertdeclarationContext);\r\n    }\r\n    templatedeclaration() {\r\n        return this.tryGetRuleContext(0, TemplatedeclarationContext);\r\n    }\r\n    aliasdeclaration() {\r\n        return this.tryGetRuleContext(0, AliasdeclarationContext);\r\n    }\r\n    emptydeclaration() {\r\n        return this.tryGetRuleContext(0, EmptydeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_memberdeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMemberdeclaration) {\r\n            return visitor.visitMemberdeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MemberdeclarationContext = MemberdeclarationContext;\r\nclass MembervariabledeclarationstatementContext extends ParserRuleContext_1.ParserRuleContext {\r\n    membervariabledeclaration() {\r\n        return this.getRuleContext(0, MembervariabledeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_membervariabledeclarationstatement;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMembervariabledeclarationstatement) {\r\n            return visitor.visitMembervariabledeclarationstatement(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MembervariabledeclarationstatementContext = MembervariabledeclarationstatementContext;\r\nclass MembervariabledeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifier() {\r\n        return this.getRuleContext(0, TypespecifierContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    declspecifierseqwithouttype() {\r\n        return this.tryGetRuleContext(0, DeclspecifierseqwithouttypeContext);\r\n    }\r\n    ptroperator(i) {\r\n        if (i === undefined) {\r\n            return this.getRuleContexts(PtroperatorContext);\r\n        }\r\n        else {\r\n            return this.getRuleContext(i, PtroperatorContext);\r\n        }\r\n    }\r\n    memberdeclaratorlist() {\r\n        return this.tryGetRuleContext(0, MemberdeclaratorlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_membervariabledeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMembervariabledeclaration) {\r\n            return visitor.visitMembervariabledeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MembervariabledeclarationContext = MembervariabledeclarationContext;\r\nclass MemberdeclaratorlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    memberdeclarator() {\r\n        return this.getRuleContext(0, MemberdeclaratorContext);\r\n    }\r\n    memberdeclaratorlist() {\r\n        return this.tryGetRuleContext(0, MemberdeclaratorlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_memberdeclaratorlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMemberdeclaratorlist) {\r\n            return visitor.visitMemberdeclaratorlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MemberdeclaratorlistContext = MemberdeclaratorlistContext;\r\nclass MemberdeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    declaratorid() {\r\n        return this.tryGetRuleContext(0, DeclaratoridContext);\r\n    }\r\n    virtspecifierseq() {\r\n        return this.tryGetRuleContext(0, VirtspecifierseqContext);\r\n    }\r\n    purespecifier() {\r\n        return this.tryGetRuleContext(0, PurespecifierContext);\r\n    }\r\n    initializerclause() {\r\n        return this.tryGetRuleContext(0, InitializerclauseContext);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_memberdeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMemberdeclarator) {\r\n            return visitor.visitMemberdeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MemberdeclaratorContext = MemberdeclaratorContext;\r\nclass VirtspecifierseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    virtspecifier() {\r\n        return this.getRuleContext(0, VirtspecifierContext);\r\n    }\r\n    virtspecifierseq() {\r\n        return this.tryGetRuleContext(0, VirtspecifierseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_virtspecifierseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVirtspecifierseq) {\r\n            return visitor.visitVirtspecifierseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VirtspecifierseqContext = VirtspecifierseqContext;\r\nclass VirtspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Override() {\r\n        return this.tryGetToken(CPP14Parser.Override, 0);\r\n    }\r\n    Final() {\r\n        return this.tryGetToken(CPP14Parser.Final, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_virtspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitVirtspecifier) {\r\n            return visitor.visitVirtspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.VirtspecifierContext = VirtspecifierContext;\r\nclass PurespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    Assign() {\r\n        return this.getToken(CPP14Parser.Assign, 0);\r\n    }\r\n    Octalliteral() {\r\n        return this.getToken(CPP14Parser.Octalliteral, 0);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_purespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPurespecifier) {\r\n            return visitor.visitPurespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PurespecifierContext = PurespecifierContext;\r\nclass BaseclauseContext extends ParserRuleContext_1.ParserRuleContext {\r\n    basespecifierlist() {\r\n        return this.getRuleContext(0, BasespecifierlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_baseclause;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBaseclause) {\r\n            return visitor.visitBaseclause(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BaseclauseContext = BaseclauseContext;\r\nclass BasespecifierlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    basespecifier() {\r\n        return this.getRuleContext(0, BasespecifierContext);\r\n    }\r\n    basespecifierlist() {\r\n        return this.tryGetRuleContext(0, BasespecifierlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_basespecifierlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBasespecifierlist) {\r\n            return visitor.visitBasespecifierlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BasespecifierlistContext = BasespecifierlistContext;\r\nclass BasespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    basetypespecifier() {\r\n        return this.getRuleContext(0, BasetypespecifierContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    Virtual() {\r\n        return this.tryGetToken(CPP14Parser.Virtual, 0);\r\n    }\r\n    accessspecifier() {\r\n        return this.tryGetRuleContext(0, AccessspecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_basespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBasespecifier) {\r\n            return visitor.visitBasespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BasespecifierContext = BasespecifierContext;\r\nclass ClassordecltypeContext extends ParserRuleContext_1.ParserRuleContext {\r\n    myclassname() {\r\n        return this.tryGetRuleContext(0, MyclassnameContext);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.tryGetRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    decltypespecifier() {\r\n        return this.tryGetRuleContext(0, DecltypespecifierContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_classordecltype;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitClassordecltype) {\r\n            return visitor.visitClassordecltype(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ClassordecltypeContext = ClassordecltypeContext;\r\nclass BasetypespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classordecltype() {\r\n        return this.getRuleContext(0, ClassordecltypeContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_basetypespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBasetypespecifier) {\r\n            return visitor.visitBasetypespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BasetypespecifierContext = BasetypespecifierContext;\r\nclass AccessspecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Private() {\r\n        return this.tryGetToken(CPP14Parser.Private, 0);\r\n    }\r\n    Protected() {\r\n        return this.tryGetToken(CPP14Parser.Protected, 0);\r\n    }\r\n    Public() {\r\n        return this.tryGetToken(CPP14Parser.Public, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_accessspecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitAccessspecifier) {\r\n            return visitor.visitAccessspecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.AccessspecifierContext = AccessspecifierContext;\r\nclass ConversionfunctionidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Operator() {\r\n        return this.getToken(CPP14Parser.Operator, 0);\r\n    }\r\n    conversiontypeid() {\r\n        return this.getRuleContext(0, ConversiontypeidContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_conversionfunctionid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConversionfunctionid) {\r\n            return visitor.visitConversionfunctionid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConversionfunctionidContext = ConversionfunctionidContext;\r\nclass ConversiontypeidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifierseq() {\r\n        return this.getRuleContext(0, TypespecifierseqContext);\r\n    }\r\n    conversiondeclarator() {\r\n        return this.tryGetRuleContext(0, ConversiondeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_conversiontypeid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConversiontypeid) {\r\n            return visitor.visitConversiontypeid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConversiontypeidContext = ConversiontypeidContext;\r\nclass ConversiondeclaratorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    ptroperator() {\r\n        return this.getRuleContext(0, PtroperatorContext);\r\n    }\r\n    conversiondeclarator() {\r\n        return this.tryGetRuleContext(0, ConversiondeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_conversiondeclarator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitConversiondeclarator) {\r\n            return visitor.visitConversiondeclarator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ConversiondeclaratorContext = ConversiondeclaratorContext;\r\nclass CtorinitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    meminitializerlist() {\r\n        return this.getRuleContext(0, MeminitializerlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_ctorinitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCtorinitializer) {\r\n            return visitor.visitCtorinitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CtorinitializerContext = CtorinitializerContext;\r\nclass MeminitializerlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    meminitializer() {\r\n        return this.getRuleContext(0, MeminitializerContext);\r\n    }\r\n    meminitializerlist() {\r\n        return this.tryGetRuleContext(0, MeminitializerlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_meminitializerlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMeminitializerlist) {\r\n            return visitor.visitMeminitializerlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MeminitializerlistContext = MeminitializerlistContext;\r\nclass MeminitializerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    meminitializerid() {\r\n        return this.getRuleContext(0, MeminitializeridContext);\r\n    }\r\n    expressionlist() {\r\n        return this.tryGetRuleContext(0, ExpressionlistContext);\r\n    }\r\n    bracedinitlist() {\r\n        return this.tryGetRuleContext(0, BracedinitlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_meminitializer;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMeminitializer) {\r\n            return visitor.visitMeminitializer(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MeminitializerContext = MeminitializerContext;\r\nclass MeminitializeridContext extends ParserRuleContext_1.ParserRuleContext {\r\n    classordecltype() {\r\n        return this.tryGetRuleContext(0, ClassordecltypeContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_meminitializerid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitMeminitializerid) {\r\n            return visitor.visitMeminitializerid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.MeminitializeridContext = MeminitializeridContext;\r\nclass OperatorfunctionidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Operator() {\r\n        return this.getToken(CPP14Parser.Operator, 0);\r\n    }\r\n    operator() {\r\n        return this.getRuleContext(0, OperatorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_operatorfunctionid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitOperatorfunctionid) {\r\n            return visitor.visitOperatorfunctionid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.OperatorfunctionidContext = OperatorfunctionidContext;\r\nclass LiteraloperatoridContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Operator() {\r\n        return this.getToken(CPP14Parser.Operator, 0);\r\n    }\r\n    Stringliteral() {\r\n        return this.tryGetToken(CPP14Parser.Stringliteral, 0);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    Userdefinedstringliteral() {\r\n        return this.tryGetToken(CPP14Parser.Userdefinedstringliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_literaloperatorid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLiteraloperatorid) {\r\n            return visitor.visitLiteraloperatorid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LiteraloperatoridContext = LiteraloperatoridContext;\r\nclass TemplatedeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Template() {\r\n        return this.getToken(CPP14Parser.Template, 0);\r\n    }\r\n    templateparameterlist() {\r\n        return this.getRuleContext(0, TemplateparameterlistContext);\r\n    }\r\n    declaration() {\r\n        return this.getRuleContext(0, DeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_templatedeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTemplatedeclaration) {\r\n            return visitor.visitTemplatedeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TemplatedeclarationContext = TemplatedeclarationContext;\r\nclass TemplateparameterlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    templateparameter() {\r\n        return this.getRuleContext(0, TemplateparameterContext);\r\n    }\r\n    templateparameterlist() {\r\n        return this.tryGetRuleContext(0, TemplateparameterlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_templateparameterlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTemplateparameterlist) {\r\n            return visitor.visitTemplateparameterlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TemplateparameterlistContext = TemplateparameterlistContext;\r\nclass TemplateparameterContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeparameter() {\r\n        return this.tryGetRuleContext(0, TypeparameterContext);\r\n    }\r\n    parameterdeclaration() {\r\n        return this.tryGetRuleContext(0, ParameterdeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_templateparameter;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTemplateparameter) {\r\n            return visitor.visitTemplateparameter(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TemplateparameterContext = TemplateparameterContext;\r\nclass TypeparameterContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Class() {\r\n        return this.tryGetToken(CPP14Parser.Class, 0);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    typeid() {\r\n        return this.tryGetRuleContext(0, TypeidContext);\r\n    }\r\n    Typename() {\r\n        return this.tryGetToken(CPP14Parser.Typename, 0);\r\n    }\r\n    Template() {\r\n        return this.tryGetToken(CPP14Parser.Template, 0);\r\n    }\r\n    templateparameterlist() {\r\n        return this.tryGetRuleContext(0, TemplateparameterlistContext);\r\n    }\r\n    idexpression() {\r\n        return this.tryGetRuleContext(0, IdexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typeparameter;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeparameter) {\r\n            return visitor.visitTypeparameter(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeparameterContext = TypeparameterContext;\r\nclass SimpletemplateidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    templatename() {\r\n        return this.getRuleContext(0, TemplatenameContext);\r\n    }\r\n    templateargumentlist() {\r\n        return this.tryGetRuleContext(0, TemplateargumentlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_simpletemplateid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitSimpletemplateid) {\r\n            return visitor.visitSimpletemplateid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.SimpletemplateidContext = SimpletemplateidContext;\r\nclass TemplateidContext extends ParserRuleContext_1.ParserRuleContext {\r\n    simpletemplateid() {\r\n        return this.tryGetRuleContext(0, SimpletemplateidContext);\r\n    }\r\n    operatorfunctionid() {\r\n        return this.tryGetRuleContext(0, OperatorfunctionidContext);\r\n    }\r\n    templateargumentlist() {\r\n        return this.tryGetRuleContext(0, TemplateargumentlistContext);\r\n    }\r\n    literaloperatorid() {\r\n        return this.tryGetRuleContext(0, LiteraloperatoridContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_templateid;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTemplateid) {\r\n            return visitor.visitTemplateid(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TemplateidContext = TemplateidContext;\r\nclass TemplatenameContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Identifier() {\r\n        return this.getToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_templatename;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTemplatename) {\r\n            return visitor.visitTemplatename(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TemplatenameContext = TemplatenameContext;\r\nclass TemplateargumentlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    templateargument() {\r\n        return this.getRuleContext(0, TemplateargumentContext);\r\n    }\r\n    templateargumentlist() {\r\n        return this.tryGetRuleContext(0, TemplateargumentlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_templateargumentlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTemplateargumentlist) {\r\n            return visitor.visitTemplateargumentlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TemplateargumentlistContext = TemplateargumentlistContext;\r\nclass TemplateargumentContext extends ParserRuleContext_1.ParserRuleContext {\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    typeid() {\r\n        return this.tryGetRuleContext(0, TypeidContext);\r\n    }\r\n    idexpression() {\r\n        return this.tryGetRuleContext(0, IdexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_templateargument;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTemplateargument) {\r\n            return visitor.visitTemplateargument(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TemplateargumentContext = TemplateargumentContext;\r\nclass TypenamespecifierContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Typename() {\r\n        return this.getToken(CPP14Parser.Typename, 0);\r\n    }\r\n    nestednamespecifier() {\r\n        return this.getRuleContext(0, NestednamespecifierContext);\r\n    }\r\n    Identifier() {\r\n        return this.tryGetToken(CPP14Parser.Identifier, 0);\r\n    }\r\n    simpletemplateid() {\r\n        return this.tryGetRuleContext(0, SimpletemplateidContext);\r\n    }\r\n    Template() {\r\n        return this.tryGetToken(CPP14Parser.Template, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typenamespecifier;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypenamespecifier) {\r\n            return visitor.visitTypenamespecifier(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypenamespecifierContext = TypenamespecifierContext;\r\nclass ExplicitinstantiationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Template() {\r\n        return this.getToken(CPP14Parser.Template, 0);\r\n    }\r\n    declaration() {\r\n        return this.getRuleContext(0, DeclarationContext);\r\n    }\r\n    Extern() {\r\n        return this.tryGetToken(CPP14Parser.Extern, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_explicitinstantiation;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExplicitinstantiation) {\r\n            return visitor.visitExplicitinstantiation(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExplicitinstantiationContext = ExplicitinstantiationContext;\r\nclass ExplicitspecializationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Template() {\r\n        return this.getToken(CPP14Parser.Template, 0);\r\n    }\r\n    declaration() {\r\n        return this.getRuleContext(0, DeclarationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_explicitspecialization;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExplicitspecialization) {\r\n            return visitor.visitExplicitspecialization(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExplicitspecializationContext = ExplicitspecializationContext;\r\nclass TryblockContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Try() {\r\n        return this.getToken(CPP14Parser.Try, 0);\r\n    }\r\n    compoundstatement() {\r\n        return this.getRuleContext(0, CompoundstatementContext);\r\n    }\r\n    handlerseq() {\r\n        return this.getRuleContext(0, HandlerseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_tryblock;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTryblock) {\r\n            return visitor.visitTryblock(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TryblockContext = TryblockContext;\r\nclass FunctiontryblockContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Try() {\r\n        return this.getToken(CPP14Parser.Try, 0);\r\n    }\r\n    compoundstatement() {\r\n        return this.getRuleContext(0, CompoundstatementContext);\r\n    }\r\n    handlerseq() {\r\n        return this.getRuleContext(0, HandlerseqContext);\r\n    }\r\n    ctorinitializer() {\r\n        return this.tryGetRuleContext(0, CtorinitializerContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_functiontryblock;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFunctiontryblock) {\r\n            return visitor.visitFunctiontryblock(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FunctiontryblockContext = FunctiontryblockContext;\r\nclass HandlerseqContext extends ParserRuleContext_1.ParserRuleContext {\r\n    handler() {\r\n        return this.getRuleContext(0, HandlerContext);\r\n    }\r\n    handlerseq() {\r\n        return this.tryGetRuleContext(0, HandlerseqContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_handlerseq;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitHandlerseq) {\r\n            return visitor.visitHandlerseq(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.HandlerseqContext = HandlerseqContext;\r\nclass HandlerContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Catch() {\r\n        return this.getToken(CPP14Parser.Catch, 0);\r\n    }\r\n    exceptiondeclaration() {\r\n        return this.getRuleContext(0, ExceptiondeclarationContext);\r\n    }\r\n    compoundstatement() {\r\n        return this.getRuleContext(0, CompoundstatementContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_handler;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitHandler) {\r\n            return visitor.visitHandler(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.HandlerContext = HandlerContext;\r\nclass ExceptiondeclarationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typespecifierseq() {\r\n        return this.tryGetRuleContext(0, TypespecifierseqContext);\r\n    }\r\n    declarator() {\r\n        return this.tryGetRuleContext(0, DeclaratorContext);\r\n    }\r\n    attributespecifierseq() {\r\n        return this.tryGetRuleContext(0, AttributespecifierseqContext);\r\n    }\r\n    abstractdeclarator() {\r\n        return this.tryGetRuleContext(0, AbstractdeclaratorContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_exceptiondeclaration;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExceptiondeclaration) {\r\n            return visitor.visitExceptiondeclaration(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExceptiondeclarationContext = ExceptiondeclarationContext;\r\nclass ThrowexpressionContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Throw() {\r\n        return this.getToken(CPP14Parser.Throw, 0);\r\n    }\r\n    assignmentexpression() {\r\n        return this.tryGetRuleContext(0, AssignmentexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_throwexpression;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitThrowexpression) {\r\n            return visitor.visitThrowexpression(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ThrowexpressionContext = ThrowexpressionContext;\r\nclass ExceptionspecificationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    dynamicexceptionspecification() {\r\n        return this.tryGetRuleContext(0, DynamicexceptionspecificationContext);\r\n    }\r\n    noexceptspecification() {\r\n        return this.tryGetRuleContext(0, NoexceptspecificationContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_exceptionspecification;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitExceptionspecification) {\r\n            return visitor.visitExceptionspecification(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.ExceptionspecificationContext = ExceptionspecificationContext;\r\nclass DynamicexceptionspecificationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Throw() {\r\n        return this.getToken(CPP14Parser.Throw, 0);\r\n    }\r\n    typeidlist() {\r\n        return this.tryGetRuleContext(0, TypeidlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_dynamicexceptionspecification;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitDynamicexceptionspecification) {\r\n            return visitor.visitDynamicexceptionspecification(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.DynamicexceptionspecificationContext = DynamicexceptionspecificationContext;\r\nclass TypeidlistContext extends ParserRuleContext_1.ParserRuleContext {\r\n    typeid() {\r\n        return this.getRuleContext(0, TypeidContext);\r\n    }\r\n    typeidlist() {\r\n        return this.tryGetRuleContext(0, TypeidlistContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_typeidlist;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitTypeidlist) {\r\n            return visitor.visitTypeidlist(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.TypeidlistContext = TypeidlistContext;\r\nclass NoexceptspecificationContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Noexcept() {\r\n        return this.getToken(CPP14Parser.Noexcept, 0);\r\n    }\r\n    constantexpression() {\r\n        return this.tryGetRuleContext(0, ConstantexpressionContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_noexceptspecification;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitNoexceptspecification) {\r\n            return visitor.visitNoexceptspecification(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.NoexceptspecificationContext = NoexceptspecificationContext;\r\nclass RightShiftContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Greater(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(CPP14Parser.Greater);\r\n        }\r\n        else {\r\n            return this.getToken(CPP14Parser.Greater, i);\r\n        }\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_rightShift;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitRightShift) {\r\n            return visitor.visitRightShift(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.RightShiftContext = RightShiftContext;\r\nclass RightShiftAssignContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Greater(i) {\r\n        if (i === undefined) {\r\n            return this.getTokens(CPP14Parser.Greater);\r\n        }\r\n        else {\r\n            return this.getToken(CPP14Parser.Greater, i);\r\n        }\r\n    }\r\n    Assign() {\r\n        return this.getToken(CPP14Parser.Assign, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_rightShiftAssign;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitRightShiftAssign) {\r\n            return visitor.visitRightShiftAssign(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.RightShiftAssignContext = RightShiftAssignContext;\r\nclass OperatorContext extends ParserRuleContext_1.ParserRuleContext {\r\n    New() {\r\n        return this.tryGetToken(CPP14Parser.New, 0);\r\n    }\r\n    Delete() {\r\n        return this.tryGetToken(CPP14Parser.Delete, 0);\r\n    }\r\n    rightShift() {\r\n        return this.tryGetRuleContext(0, RightShiftContext);\r\n    }\r\n    rightShiftAssign() {\r\n        return this.tryGetRuleContext(0, RightShiftAssignContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_operator;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitOperator) {\r\n            return visitor.visitOperator(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.OperatorContext = OperatorContext;\r\nclass LiteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    integerliteral() {\r\n        return this.tryGetRuleContext(0, IntegerliteralContext);\r\n    }\r\n    characterliteral() {\r\n        return this.tryGetRuleContext(0, CharacterliteralContext);\r\n    }\r\n    floatingliteral() {\r\n        return this.tryGetRuleContext(0, FloatingliteralContext);\r\n    }\r\n    stringliteral() {\r\n        return this.tryGetRuleContext(0, StringliteralContext);\r\n    }\r\n    booleanliteral() {\r\n        return this.tryGetRuleContext(0, BooleanliteralContext);\r\n    }\r\n    pointerliteral() {\r\n        return this.tryGetRuleContext(0, PointerliteralContext);\r\n    }\r\n    userdefinedliteral() {\r\n        return this.tryGetRuleContext(0, UserdefinedliteralContext);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_literal;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitLiteral) {\r\n            return visitor.visitLiteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.LiteralContext = LiteralContext;\r\nclass IntegerliteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Integerliteral() {\r\n        return this.getToken(CPP14Parser.Integerliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_integerliteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitIntegerliteral) {\r\n            return visitor.visitIntegerliteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.IntegerliteralContext = IntegerliteralContext;\r\nclass CharacterliteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Characterliteral() {\r\n        return this.getToken(CPP14Parser.Characterliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_characterliteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitCharacterliteral) {\r\n            return visitor.visitCharacterliteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.CharacterliteralContext = CharacterliteralContext;\r\nclass FloatingliteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Floatingliteral() {\r\n        return this.getToken(CPP14Parser.Floatingliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_floatingliteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitFloatingliteral) {\r\n            return visitor.visitFloatingliteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.FloatingliteralContext = FloatingliteralContext;\r\nclass StringliteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Stringliteral() {\r\n        return this.getToken(CPP14Parser.Stringliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_stringliteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitStringliteral) {\r\n            return visitor.visitStringliteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.StringliteralContext = StringliteralContext;\r\nclass BooleanliteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Booleanliteral() {\r\n        return this.getToken(CPP14Parser.Booleanliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_booleanliteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitBooleanliteral) {\r\n            return visitor.visitBooleanliteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.BooleanliteralContext = BooleanliteralContext;\r\nclass PointerliteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Nullptr() {\r\n        return this.getToken(CPP14Parser.Nullptr, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_pointerliteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitPointerliteral) {\r\n            return visitor.visitPointerliteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.PointerliteralContext = PointerliteralContext;\r\nclass UserdefinedliteralContext extends ParserRuleContext_1.ParserRuleContext {\r\n    Userdefinedintegerliteral() {\r\n        return this.tryGetToken(CPP14Parser.Userdefinedintegerliteral, 0);\r\n    }\r\n    Userdefinedfloatingliteral() {\r\n        return this.tryGetToken(CPP14Parser.Userdefinedfloatingliteral, 0);\r\n    }\r\n    Userdefinedstringliteral() {\r\n        return this.tryGetToken(CPP14Parser.Userdefinedstringliteral, 0);\r\n    }\r\n    Userdefinedcharacterliteral() {\r\n        return this.tryGetToken(CPP14Parser.Userdefinedcharacterliteral, 0);\r\n    }\r\n    constructor(parent, invokingState) {\r\n        super(parent, invokingState);\r\n    }\r\n    // @Override\r\n    get ruleIndex() {\r\n        return CPP14Parser.RULE_userdefinedliteral;\r\n    }\r\n    // @Override\r\n    accept(visitor) {\r\n        if (visitor.visitUserdefinedliteral) {\r\n            return visitor.visitUserdefinedliteral(this);\r\n        }\r\n        else {\r\n            return visitor.visitChildren(this);\r\n        }\r\n    }\r\n}\r\nexports.UserdefinedliteralContext = UserdefinedliteralContext;\r\n//# sourceMappingURL=CPP14Parser.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/CPP14/CPP14Parser.js?");

/***/ }),

/***/ "./node_modules/unicoen.ts/dist/interpreter/CPP14/Int.js":
/*!***************************************************************!*\
  !*** ./node_modules/unicoen.ts/dist/interpreter/CPP14/Int.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Int = void 0;\r\nclass Int extends Number {\r\n    constructor(v) {\r\n        // tslint:disable-next-line:no-bitwise\r\n        super(v | 0);\r\n    }\r\n    valueOf() {\r\n        return super.valueOf();\r\n    }\r\n}\r\nexports.Int = Int;\r\n//# sourceMappingURL=Int.js.map\n\n//# sourceURL=webpack:///./node_modules/unicoen.ts/dist/interpreter/CPP14/Int.js?");

/***/ })

}]);